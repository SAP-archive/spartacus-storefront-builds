{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consents-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/form/anonymous-consent-form.component.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-root/asm-root.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/assisted-service.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentsDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","anonymousConsentsFeature","ANONYMOUS_CONSENTS_FEATURE","templatesUpdated$","getTemplatesUpdated","updated","toggleAnonymousConsentsBannerVisibility","bannerVisible$","isAnonymousConsentsBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","entryComponents","CurrentProductService","routingService","productService","getProduct","getRouterState","map","state","params","filter","switchMap","productCode","get","RoutingService","ProductService","AddedToCartDialogComponent","cartService","fb","quantity","form","group","entry$","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","item","updateEntry","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","static","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","increment","cartEntry$","getEntry","subscription","setStockInfo","markForCheck","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","getActive","loaded$","getLoaded","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","decorators","Optional","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","preventDefault","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","OnlyNumberDirective","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","BehaviorSubject","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","load","qsi","isDataLoaded","dataLoaded","API","unload","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","e_2","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","go","cxRoute","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","slots","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","checkout","steps","name","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","sort","isExpressCheckout","isGuestCheckout","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authService","authRedirectService","checkoutConfigService","getUserToken","getAssignedUser","token","user","access_token","isGuestCart","forced","reportAuthGuard","AuthService","AuthRedirectService","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","uid","OCC_USER_ID_ANONYMOUS","guid","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","success","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","warn","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","valid","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","paymentMethodSelected","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","layoutModules","LayoutModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","CxApiService","auth","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","userAddress","userConsent","userOrder","userPayment","ngZone","CartDataService","CmsService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserConsentService","UserOrderService","NgZone","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","element","parentElement","P","reject","fulfilled","rejected","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","JSON","stringify","scriptElement","getElementById","createRenderer","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","sanitizer","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","DomSanitizer","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","AnonymousConsentFormComponent","consentGiven$","accordionExpanded","accordionHeight","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentGivenTranslation$","toggleAccordion","keyEvent","expand","accordionContent","clientHeight","isRequired","templateId","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","AsmMainUiComponent","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","searchResultsLoading$","getCustomerSearchResultsLoading","customer$","handleCustomerSessionStartRedirection","isCustomerEmulationToken","loginCustomerSupportAgent","userId","password","authorizeCustomerSupporAgent","logoutCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","updateAsmUiState","visible","AsmService","AsmRootComponent","asmUi$","getAsmUiState","queryParamMap","queryParams","showUi","CSAgentLoginFormComponent","submitClicked","csAgentTokenLoading","submitEvent","onSubmit","isNotValid","CustomerSelectionComponent","searchTerm","customerSearchReset","getCustomerSearchResults","handleSearchResults","customerHit","toLowerCase","customerSearch","query","AssistedServiceModule","AsmComponent","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","trim","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","isLevel","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","AuthGuard","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","onSuccess","getRemoveUserResultError","onError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","isLevel13","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","isFeatureLevel","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentStatus","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","moduleComponents","ɵ1","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","reset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","logout","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","transform","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","iif","footerLink","openDialog","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","Pipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","submit","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","newMode","ViewModes","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","infiniteScroll","active","setViewMode","ViewConfig","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ViewConfigModule","forRoot","ngModule","provideConfig","defaultScrollConfig","productLimit","showMoreButton","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","isActive","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ScheduleComponent","storeDataService","displayDays","changes","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","totalResults","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","store","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","formBuilder","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","history","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","hasPage","ɵ0$2","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","isEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","AsmModule","StateModule","AuthModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consents-dialog',\n  templateUrl: './anonymous-consents-dialog.component.html',\n})\nexport class AnonymousConsentsDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                consent.consentState == null ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentsDialogComponent } from '../../shared/components/anonymous-consents/dialog/anonymous-consents-dialog.component';\nimport { ModalService } from '../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent\n  implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  anonymousConsentsFeature = ANONYMOUS_CONSENTS_FEATURE;\n  bannerVisible$: Observable<boolean>;\n  templatesUpdated$: Observable<boolean>;\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  ngOnInit(): void {\n    this.templatesUpdated$ = this.anonymousConsentsService\n      .getTemplatesUpdated()\n      .pipe(\n        tap(updated => {\n          if (updated) {\n            this.anonymousConsentsService.toggleAnonymousConsentsBannerVisibility(\n              true\n            );\n          }\n        })\n      );\n    this.bannerVisible$ = this.anonymousConsentsService.isAnonymousConsentsBannerVisible();\n  }\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentsDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleAnonymousConsentsBannerVisibility(\n      false\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './anonymous-consent-management-banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AnonymousConsentManagementBannerComponent],\n  exports: [AnonymousConsentManagementBannerComponent],\n  entryComponents: [AnonymousConsentManagementBannerComponent],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {\n  CartService,\n  OrderEntry,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef,\n    // tslint:disable-next-line: unified-signatures\n    productService: ProductService\n  );\n  /**\n   * @deprecated since version 1.4\n   *  Use constructor(store: Store<StateWithUser | StateWithProcess<void>>,\n   *  authService: AuthService) instead\n   */\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    @Optional() private productService?: ProductService\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.subscription = this.productService\n        .get(this.productCode)\n        .pipe(filter(p => !!p))\n        .subscribe((product: Product) => {\n          this.setStockInfo(product);\n          this.cd.markForCheck();\n        });\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock &&\n      product.stock.stockLevelStatus !== 'outOfStock' &&\n      product.stock.stockLevel > 0;\n    if (this.hasStock) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the itesm can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","export enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getActive().pipe(\n      map(cart => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable()\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useClass: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n  CartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/index';\nimport { CheckoutStepType } from '../../model/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...sortedTitles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = JSON.stringify(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const html = `<script type=\"application/ld+json\">${JSON.stringify(\n        schema\n      )}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-anonymous-consent-form',\n  templateUrl: './anonymous-consent-form.component.html',\n})\nexport class AnonymousConsentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  consentGiven$ = new BehaviorSubject<boolean>(false);\n  consentGivenTranslation$: Observable<string>;\n  accordionExpanded = false;\n  accordionHeight = '0px';\n\n  @ViewChild('accordionContent', { static: false })\n  accordionContent: ElementRef<HTMLDivElement>;\n\n  @Input()\n  template: ConsentTemplate;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven$.next(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    }\n    this.consentGivenTranslation$ = this.consentGiven$.pipe(\n      map(given =>\n        given ? 'anonymousConsents.dialog.on' : 'anonymousConsents.dialog.off'\n      )\n    );\n  }\n\n  onConsentChange(): void {\n    this.consentGiven$.next(!this.consentGiven$.value);\n\n    this.consentChanged.emit({\n      given: this.consentGiven$.value,\n      template: this.template,\n    });\n  }\n\n  toggleAccordion(keyEvent?: KeyboardEvent): void {\n    let expand = true;\n    if (keyEvent && keyEvent.key !== ' ' && keyEvent.key !== 'Enter') {\n      expand = false;\n    }\n\n    if (expand) {\n      this.accordionExpanded = !this.accordionExpanded;\n      this.accordionHeight = this.accordionExpanded\n        ? `${this.accordionContent.nativeElement.clientHeight}px`\n        : '0px';\n    }\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n\n  ngOnDestroy(): void {\n    this.consentGiven$.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AnonymousConsentsDialogComponent } from './dialog/anonymous-consents-dialog.component';\nimport { AnonymousConsentFormComponent } from './dialog/form/anonymous-consent-form.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [\n    AnonymousConsentsDialogComponent,\n    AnonymousConsentFormComponent,\n  ],\n  entryComponents: [AnonymousConsentsDialogComponent],\n  exports: [AnonymousConsentsDialogComponent, AnonymousConsentFormComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  searchResultsLoading$: Observable<boolean>;\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected userService: UserService,\n    protected asmService: AsmService,\n    protected globalMessageService: GlobalMessageService,\n    protected routing: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.authService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.authService.getCustomerSupportAgentTokenLoading();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.authService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routing.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.authService.authorizeCustomerSupporAgent(userId, password);\n  }\n\n  logoutCustomerSupportAgent(): void {\n    this.authService.logoutCustomerSupportAgent();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.authService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.authService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.asmService.updateAsmUiState({ visible: false });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AsmService, AsmUi } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm',\n  templateUrl: './asm-root.component.html',\n})\nexport class AsmRootComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  asmUi$: Observable<AsmUi>;\n\n  constructor(\n    protected asmService: AsmService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.asmUi$ = this.asmService.getAsmUiState();\n\n    this.subscription.add(\n      this.activatedRoute.queryParamMap.subscribe(queryParams => {\n        if (queryParams.get('asm') === 'true') {\n          this.showUi();\n        }\n      })\n    );\n  }\n\n  private showUi(): void {\n    this.asmService.updateAsmUiState({ visible: true });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, OnInit, Output, Input } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmService,\n  CustomerSearchPage,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private submitClicked = false;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: ['', [Validators.required]],\n    });\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.asmService.customerSearchReset();\n    this.subscription.add(\n      this.asmService.getCustomerSearchResults().subscribe(results => {\n        this.handleSearchResults(results);\n      })\n    );\n  }\n\n  private handleSearchResults(results: CustomerSearchPage): void {\n    if (!!results && results.entries) {\n      const customerHit = results.entries.find(\n        element =>\n          element.uid.toLowerCase() ===\n          this.form.controls.searchTerm.value.toLowerCase()\n      );\n      if (customerHit) {\n        this.submitEvent.emit({ customerId: customerHit.customerId });\n      } else {\n        this.globalMessageService.add(\n          {\n            key: 'asm.customerSearch.noMatch',\n            params: { uid: this.form.controls.searchTerm.value },\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      }\n    }\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n    this.asmService.customerSearch({\n      query: this.form.controls.searchTerm.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmRootComponent } from './asm-root/asm-root.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AsmComponent: {\n          component: AsmRootComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmRootComponent,\n  ],\n  exports: [AsmRootComponent],\n  entryComponents: [AsmRootComponent],\n})\nexport class AssistedServiceModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n  consentGivenTranslation$ = new BehaviorSubject<string>(\n    'consentManagementForm.off'\n  );\n  accordionExpanded = false;\n  accordionHeight = '0px';\n  consentGiven = false;\n\n  @ViewChild('accordionContent', { static: false })\n  accordionContent: ElementRef<HTMLDivElement>;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n        this.consentGivenTranslation$.next('consentManagementForm.off');\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n        this.consentGivenTranslation$.next('consentManagementForm.on');\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n    if (this.consentGiven) {\n      this.consentGivenTranslation$.next('consentManagementForm.on');\n    } else {\n      this.consentGivenTranslation$.next('consentManagementForm.off');\n    }\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  toggleAccordion(keyEvent?: KeyboardEvent): void {\n    let expand = true;\n    if (keyEvent && keyEvent.key !== ' ' && keyEvent.key !== 'Enter') {\n      expand = false;\n    }\n\n    if (expand) {\n      this.accordionExpanded = !this.accordionExpanded;\n      this.accordionHeight = this.accordionExpanded\n        ? `${this.accordionContent.nativeElement.clientHeight}px`\n        : '0px';\n    }\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentGiven(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentGiven(consentTemplate: ConsentTemplate): boolean {\n    return (\n      Boolean(consentTemplate.currentConsent) &&\n      Boolean(consentTemplate.currentConsent.consentGivenDate) &&\n      !Boolean(consentTemplate.currentConsent.consentWithdrawnDate)\n    );\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.isConsentWithdrawn(template)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isConsentWithdrawn(consentTemplate: ConsentTemplate): boolean {\n    if (Boolean(consentTemplate.currentConsent)) {\n      return Boolean(consentTemplate.currentConsent.consentWithdrawnDate);\n    }\n    return true;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    RouterModule.forChild([\n      {\n        path: 'guest/order/:orderCode',\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { iif, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { AnonymousConsentsDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consents-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  data$ = this.componentData.data$;\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    authService: AuthService,\n    modalService: ModalService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig,\n      authService: AuthService,\n      modalService: ModalService\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig,\n    protected authService?: AuthService,\n    protected modalService?: ModalService\n  ) {}\n\n  get showConsentPreferences(): Observable<boolean> {\n    return iif(\n      () =>\n        Boolean(this.anonymousConsentsConfig) &&\n        isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        ),\n      this.authService\n        .isUserLoggedIn()\n        .pipe(\n          map(\n            isUserLoggedIn =>\n              !isUserLoggedIn &&\n              Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n              this.anonymousConsentsConfig.anonymousConsents.footerLink\n          )\n        ),\n      of(false)\n    );\n  }\n\n  openDialog(): void {\n    if (\n      Boolean(this.anonymousConsentsConfig) &&\n      isFeatureEnabled(this.anonymousConsentsConfig, ANONYMOUS_CONSENTS_FEATURE)\n    ) {\n      this.modalService.open(AnonymousConsentsDialogComponent, {\n        centered: true,\n        size: 'lg',\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AnonymousConsentsConfig,\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: AnonymousConsentsConfig, useExisting: Config }],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes => codes.map(code => this.productService.get(code)))\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const sortedTitles = titles.sort(sortTitles);\n        return sortedTitles;\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template.description,\n          };\n        })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      if (\n        this.isAnonymousConsentEnabled &&\n        Boolean(this.userRegistrationForm.get('newsletter').value)\n      ) {\n        this.anonymousConsentsService.giveConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        );\n      }\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AssistedServiceModule } from './asm/assisted-service.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AssistedServiceModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AsmModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    AsmModule.forRoot(),\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}