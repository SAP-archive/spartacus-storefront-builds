{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/recipes/config/optional-layouts/plp-accessibility-layout-config.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","ar","error","__spread","concat","IconResourceType","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","IconConfig","DomSanitizer","Injectable","providedIn","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","console","warn","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","args","DOCUMENT","PLATFORM_ID","CxApiService","auth","cart","cartData","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","Optional","CartService","CartDataService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","CmsService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","ComponentWrapperDirective","vcr","componentMapper","injector","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","undefined","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","get","CmsComponentData","element","parentElement","P","reject","fulfilled","rejected","result","then","uid","data$","getComponentData","configProviders","Injector","useValue","parent","addDynamicAttributes","properties","destroy","remove","ViewContainerRef","DynamicAttributeService","Directive","PageComponentModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","state","canActivateObservables","map","guardClass","canActivate","isCanActivate","isObservable","obj","of","wrapIntoObservable","first","Error","skipWhile","endWith","BREAKPOINT","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","OutletPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","event","getBreakpoint","innerWidth","xl","windowWidth","getClosest","reverse","br","nativeWindow","PAGE_LAYOUT_HANDLER","InjectionToken","PageLayoutService","breakpointService","handlers","warnLogMessages","logSlots","getSlots","section","page$","breakpoint$","page","pageTemplate","slots","resolveSlots","switchMap","_c","_d","handle","a","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","keys","filter","slot","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","isDevMode","info","join","cacheKey","PageLayoutComponent","el","pageLayoutService","section$","BehaviorSubject","templateName$","layoutName$","name","styleClass","slots$","pageFoldSlot$","templateName","currentClass","changeDetection","ChangeDetectionStrategy","OnPush","CmsRoutesService","router","cmsRouteExist","isCmsDrivenRoute","startsWith","routePath","substr","data","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","Router","CmsPageGuard","routingService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","withLatestFrom","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","index","guardName","SemanticPathService","ProtectedRoutesGuard","SkipLinkScrollPosition","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","REPLACE","BEFORE","store","AFTER","stacked","templateRef","newValue","set","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","load","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletDirective","deferLoaderService","loaded","EventEmitter","subscription","initializeOutlet","clear","cxOutletDefer","render","ngOnChanges","changes","cxOutlet","emit","hostElement","getHostElement","renderOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","Output","OutletModule","PageSlotComponent","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","HostBinding","SkipLinkService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","existing","getSkipLinkIndexInArray","i18nKey","scrollToTarget","parentNode","blur","inline","scrollIntoView","findIndex","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","observeOn","asyncScheduler","tabNext","isElement","nextSibling","focus","tabPrev","previousSibling","defaultSkipLinkConfig","SkipLinkDirective","elRef","cxSkipLink","SkipLinkModule","APP_INITIALIZER","useFactory","skipLinkFactory","deps","multi","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","globalMessageService","canPrompt","canPrompt$","asObservable","init","addEventListener","preventDefault","deferredEvent","enableAddToHomeScreen","GlobalMessageType","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","paths","notFound","login","protected","forgotPassword","resetPassword","logout","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","productCode","termsAndConditions","orders","orderDetails","orderCode","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","coupons","couponClaim","couponCode","defaultRoutingConfig","RoutingModule","forRoot","ngModule","RoutingModule_1","provideConfig","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","slice","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","title","description","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","getActive","lang","documentElement","JsonLdScriptFactory","rendererFactory","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","item","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","code","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","stock","stockLevelStatus","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","rev","rating","reviewCount","comment","reviewSchema","principal","author","date","Date","datePublished","getFullYear","getMonth","getDate","headline","reviewRating","toString","CurrentProductService","productService","features","DEFAULT_PRODUCT_SCOPE","isLevel","ProductScope","DETAILS","getProduct","scopes","getRouterState","params","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","AsmComponentService","authService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","encapsulation","ViewEncapsulation","None","AsmEnablerService","isUiAdded","isEnabled","addUi","isLaunched","isUsedBefore","setItem","getItem","Location","AsmLoaderModule","asmFactory","asmEnablerService","PaginationItemType","PaginationNavigationPosition","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","Math","floor","seconds","Pipe","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CSAgentLoginFormComponent","fb","submitClicked","csAgentTokenLoading","submitEvent","group","Validators","required","onSubmit","controls","isNotValid","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","valueChanges","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","AsmModule","ReactiveFormsModule","AsmCoreModule","OrderDetailsService","userOrderService","orderCode$","routingData","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","consumedEntries","e_2","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","ActiveCartService","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","increment","addToCartForm","cartEntry$","getEntry","setStockInfo","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","AutoFocusDirective","ngAfterViewInit","AutoFocusDirectiveModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","delete","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","MediaService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","isInitialized","isLoading","isMissing","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","allowZero","readonly","handleClick","input","markAsDirty","decrement","getControl","_control$","getValidCount","emitEvent","max","HostListener","ItemCounterModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","round","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","getInjectedService","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","SiteContextModule","StarRatingComponent","change","initialRate","setRate","force","style","setProperty","saveRate","setRateOnEvent","StarRatingModule","ViewConfigModule","ViewConfigModule_1","view","ViewConfig","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","sortTitles","title1","title2","DeliveryModePreferences","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","sort","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","cartIsLoading$","resetAddVoucherProcessingState","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","valid","addVoucher","markAsTouched","applyCustomerCoupon","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","potentialProductPromotions","resolveItems","createForm","disable","enable","isSaveForLaterEnabled","every","consignmentEntry","orderEntry","updateable","removeEntry","getPotentialProductPromotionsForItem","_e","_f","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","isUserLoggedIn","cartLoaded","sflLoaded","getAllPromotionsForCart","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","isEmpty","totalItems","CartPageLayoutHandler","getCart","selectiveCart","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","CheckoutStepType","CheckoutConfig","AmendOrderType","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isActive","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","year","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","img","actions","header","goNext","goPrevious","paymentMethodSelected","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","tab","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","getConsignmentProducts","products","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","paymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","isPasswordReset","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","child","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","stopPropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","childNodes","tagName","isTabbable","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","setTimeout","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","querySelectorAll","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","replace","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","active","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","thumbnail","zoom","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductDetailOutlets","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","topValueCount","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","markFormAsTouched","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","viewStore","prepareRouteUrl","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefillForm","submitLogin","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","withConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        res =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach(cls =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach(cls => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n  UserNotificationPreferenceService,\n  UserInterestsService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map(breakpoint => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap(templateName =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService\n          .getPage(pageContext, true)\n          .pipe(first(), withLatestFrom(of(pageContext)))\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned obervable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first(v => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable(observer => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver(entries => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options?: IntersectionOptions) {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evalutes whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>,\n    // tslint:disable-next-line: unified-signatures\n    intersectionService: DeferLoaderService\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, intersectionService?: IntersectionService) instead\n   */\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>\n  );\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService?: DeferLoaderService\n  ) {}\n\n  private initializeOutlet(): void {\n    this.vcr.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.render();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.initializeOutlet();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.render();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private render() {\n    this.renderOutlet(OutletPosition.BEFORE);\n    this.renderOutlet(OutletPosition.REPLACE);\n    this.renderOutlet(OutletPosition.AFTER);\n  }\n\n  private renderOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach(obj => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe(components => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n  SkipLink,\n  SkipLinkConfig,\n  SkipLinkScrollPosition,\n} from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(protected config: SkipLinkConfig) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target: target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key: key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter(skipLink => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(\n    target: HTMLElement,\n    position: SkipLinkScrollPosition,\n    event: MouseEvent\n  ): void {\n    target = <HTMLElement>target.parentNode;\n    (<HTMLElement>event.target).blur();\n    const options: ScrollIntoViewOptions =\n      position === SkipLinkScrollPosition.AFTER ? { inline: 'end' } : {};\n\n    target.scrollIntoView(options);\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      skipLink => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          skipLink => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable, asyncScheduler } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\nimport { observeOn } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService\n    .getSkipLinks()\n    .pipe(observeOn(asyncScheduler)); // delay view's update to avoid ExpressionChangedAfterItHasBeenCheckedError\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink, event: MouseEvent): void {\n    this.skipLinkService.scrollToTarget(\n      skipLink.target,\n      skipLink.position,\n      event\n    );\n  }\n\n  /**\n   * Hides the skip link by removing the focus.\n   */\n  blur(event: MouseEvent): void {\n    (<HTMLElement>event.target).blur();\n  }\n\n  tabNext(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).nextSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).nextSibling).focus();\n    }\n  }\n  tabPrev(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).previousSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).previousSibling).focus();\n    }\n  }\n\n  private isElement(element: Node): boolean {\n    return !!element && element instanceof HTMLElement;\n  }\n}\n","import { SkipLinkConfig, SkipLinkScrollPosition } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'SiteContext',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'BottomHeaderSlot',\n      position: SkipLinkScrollPosition.AFTER,\n      i18nKey: 'skipLink.labels.main',\n    },\n    {\n      key: 'ProductLeftRefinements',\n      i18nKey: 'skipLink.labels.productFacets',\n    },\n    { key: 'ProductListSlot', i18nKey: 'skipLink.labels.productList' },\n    { key: 'Footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, Input, OnDestroy, OnInit, ElementRef } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input()\n  cxSkipLink: string;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n    private skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\nimport { SkipLinkModule } from '../../../layout/a11y/skip-link/skip-link.module';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule, SkipLinkModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    routingService: RoutingService,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(routingService: RoutingService, productService: ProductService);\n\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.DETAILS : '';\n\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) =>\n        this.productService.get(\n          productCode,\n          // TODO deprecated since 1.4 - should be replaced with 'scopes || this.DEFAULT_PRODUCT_SCOPE'\n          this.features && this.features.isLevel('1.4')\n            ? scopes || this.DEFAULT_PRODUCT_SCOPE\n            : undefined\n          // deprecated END\n        )\n      )\n    );\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Location } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { OutletPosition, OutletService } from '../../../cms-structure/index';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\nimport { AsmMainUiComponent } from '../asm-main-ui/asm-main-ui.component';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  /** indicates whether the ASM UI has been added already */\n  private isUiAdded = false;\n\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletService: OutletService<ComponentFactory<any>>\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  private isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  private isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  private addUi(): void {\n    if (this.isUiAdded) {\n      return;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      AsmMainUiComponent\n    );\n    this.outletService.add('cx-storefront', factory, OutletPosition.BEFORE);\n    this.isUiAdded = true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map(cart => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map(cart =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    modalService: ModalService,\n    cartService: CartService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(modalService: ModalService, cartService: CartService);\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected promotionService?: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter(e => !!e),\n        map(entry => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap(valueChange => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AutoFocusDirectiveModule } from '../../directives/auto-focus/auto-focus.directive.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, AutoFocusDirectiveModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media && media[this.getHighestAvailableFormat(media)]) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach(format => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap(value =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthService,\n  Cart,\n  CartService,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  FeatureConfigService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    cartService: CartService,\n    authService: AuthService,\n    cartVoucherService: CartVoucherService,\n    formBuilder: FormBuilder,\n    customerCouponService: CustomerCouponService,\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add customerCouponService,featureConfig for customer coupon feature.\n   * Remove issue: #5971\n   */\n  constructor(\n    cartService: CartService,\n    authService: AuthService,\n    cartVoucherService: CartVoucherService,\n    formBuilder: FormBuilder\n  );\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder,\n    protected customerCouponService?: CustomerCouponService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.cartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.cartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe(error => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach(appliedVoucher => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          coupon => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (!this.form.valid) {\n      this.form.markAsTouched();\n      return;\n    }\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  CartService,\n  ConsignmentEntry,\n  FeatureConfigService,\n  PromotionLocation,\n  PromotionResult,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() potentialProductPromotions: PromotionResult[] = [];\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    cartService: CartService,\n    selectiveCartService: SelectiveCartService,\n    featureConfig: FeatureConfigService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Add selectiveCartService authService routingService and featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    protected cartService: CartService,\n    protected selectiveCartService?: SelectiveCartService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every(item => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map(consignmentEntry => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach(item => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.cartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map(value => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.cartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    //don't show promotions in saveforlater\n    if (this.options.isSaveForLater) {\n      return entryPromotions;\n    }\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport {\n  FeatureConfigService,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() potentialProductPromotions: any[];\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    promotionService: PromotionService,\n    // tslint:disable-next-line:unified-signatures\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(promotionService: PromotionService);\n\n  constructor(\n    protected promotionService: PromotionService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  Cart,\n  CartService,\n  FeatureConfigService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    cartService: CartService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService,\n    selectiveCartService: SelectiveCartService,\n    authService: AuthService,\n    routingService: RoutingService,\n    featureConfig: FeatureConfigService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    protected cartService: CartService,\n    protected promotionService?: PromotionService,\n    protected selectiveCartService?: SelectiveCartService,\n    private authService?: AuthService,\n    private routingService?: RoutingService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n\n    /**\n     * TODO Remove the check for promotion service\n     * Issue: GH-5670\n     */\n    if (this.promotionService) {\n      this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n    }\n\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n\n    if (this.isSaveForLaterEnabled()) {\n      this.cartLoaded$ = combineLatest([\n        this.cartService.getLoaded(),\n        this.selectiveCartService.getLoaded(),\n        this.authService.isUserLoggedIn(),\n      ]).pipe(\n        tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n        map(([cartLoaded, sflLoaded, loggedIn]) =>\n          loggedIn ? cartLoaded && sflLoaded : cartLoaded\n        )\n      );\n    }\n    //TODO remove for #5958\n    else {\n      this.cartLoaded$ = this.cartService.getLoaded();\n    }\n    //TODO  remove for #5958 end\n    if (this.promotionService) {\n      this.orderPromotions$ = this.promotionService.getOrderPromotions(\n        this.promotionLocation\n      );\n    }\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958 end\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.cartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getLoaded(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else if (selectiveCart.totalItems) {\n            return slots.filter(\n              slot =>\n                slot !== 'EmptyCartMiddleContent' &&\n                slot !== 'CenterRightContentSlot'\n            );\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter(product => Boolean(product)),\n    tap(product => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter(wishlist => Boolean(wishlist)),\n    map(wishList => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find(entry => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n    I18nModule,\n    IconModule,\n    RouterModule,\n    UrlModule,\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  SelectiveCartService,\n  Cart,\n  OrderEntry,\n  ActiveCartService,\n  CmsParagraphComponent,\n  CmsService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map(cart => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.getLoaded(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  FeaturesConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n    I18nModule,\n    CartSharedModule,\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoaderState,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<LoaderState<void>>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService, // tslint:disable-line\n    promotionService: PromotionService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { CheckoutStepType } from '../..';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\n@NgModule({\n  imports: [OutletRefModule],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach(comp => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach(key => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap(form => {\n        return this.getEntries().pipe(\n          map(entries =>\n            entries.filter(entry => this.getFormControl(form, entry).value > 0)\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap(order => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach(entry => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach(entry =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => Boolean(order)),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => !!order.entries),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first(r => !!r))\n      .subscribe(returnRequest => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    orderDetailsService: OrderDetailsService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(orderDetailsService: OrderDetailsService);\n\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(consignment =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            consignment => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  /**\n   * @deprecated\n   * NOTE: This function will be removed in version 2.0\n   */\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map(order => order.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap(returnRequest => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      success => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map(returnRequests => returnRequests.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Observable, combineLatest, Subscription } from 'rxjs';\nimport {\n  CustomerCouponService,\n  CustomerCouponSearchResult,\n  PaginationModel,\n} from '@spartacus/core';\nimport { tap, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          coupons =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe(k => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe(success => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  I18nModule,\n  ConfigModule,\n  CmsConfig,\n  AuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap(preferences => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach(p => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [\n    CommonModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          interests =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map(interest => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map(result => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n  AuthGuard,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                key => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                it => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map(items => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach(child =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map(child => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    event.preventDefault();\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter(n => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n\n  isTabbable(node: any) {\n    return this.flyout && node.children && node.children.length;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    checkoutService: CheckoutService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(checkoutService: CheckoutService);\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.LIST : '';\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes =>\n      codes.map(code => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  /**\n   * @deprecated since version 1.5\n   * This variable will no longer be in use. Use thumbs$ observable instead.\n   * TODO(issue:#6166).\n   */\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    // TODO: deprecated, remove the below tap (issue:#6166)\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet: Facet): Facet[] {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : facet.topValueCount\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter(product => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap(product => {\n        product.baseOptions.forEach(option => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find(item => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach(variant => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          item => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter(variant => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  UrlModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  // TODO deprecated since 1.4, remove\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    map(p => p.code),\n    distinctUntilChanged(),\n    switchMap(productCode => this.reviewService.getByProductCode(productCode)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  private markFormAsTouched(): void {\n    Object.keys(this.reviewForm.controls).forEach(key => {\n      this.reviewForm.controls[key].markAsTouched();\n    });\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.markFormAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/components/star-rating/star-rating.module';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe(success => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(interests => !!interests.results && interests.results.length === 1)\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap(prefs => (this.enabledPrefs = prefs)),\n        map(prefs => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe(error => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe(success => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe(text =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    I18nModule,\n    SpinnerModule,\n    UrlModule,\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService, RoutingService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(\n    protected storeDataService: StoreDataService,\n    protected route: ActivatedRoute,\n    protected routingService: RoutingService\n  ) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.activeCartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.activeCartService.getAssignedUser().subscribe(_ => {\n        if (this.activeCartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef: WindowRef,\n    private activatedRoute: ActivatedRoute,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    if (this.form.valid) {\n      this.submitLogin();\n    } else {\n      this.markFormAsTouched();\n    }\n  }\n\n  private submitLogin(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  private markFormAsTouched(): void {\n    Object.keys(this.form.controls).forEach(key => {\n      this.form.controls[key].markAsTouched();\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template ? template.description : '',\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n    ConfigModule.withConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n    ConfigModule.withConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      md: {\n        pageFold: 'UpSelling',\n      },\n      xs: {\n        pageFold: 'Summary',\n      },\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","/**\n * @deprecated since 2.0.0\n * NOTE: delete this file altogether, move below slots to the main default layout config\n */\n\nimport { LayoutConfig } from '../../../layout/config/layout-config';\n\nexport const PLPAccessibilityLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n  },\n};\n"]}