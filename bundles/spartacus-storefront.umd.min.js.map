{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/web-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/launch-dialog/config/default-launch-config.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render-strategy.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render-strategy.service.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render-strategy.service.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","IconResourceType","SkipLinkScrollPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","IconConfig","DomSanitizer","Injectable","providedIn","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","provide","useExisting","Config","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","pop","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","CmsMappingService","platformId","missingComponents","getComponentMapping","componentType","componentConfig","console","warn","isComponentEnabled","isPlatformServer","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","childRoutes","CmsConfig","Inject","args","PLATFORM_ID","ComponentHandler","ComponentHandlerService","handlers","invalidMappings","resolve","componentMapping","matchedHandlers","filter","handler","hasMatch","sort","a","getPriority","isDevMode","has","getLauncher","viewContainerRef","elementInjector","launcher","Optional","CmsInjectorService","cmsMapping","injector","getCmsData","uid","parentInjector","data$","get","CmsService","getComponentData","getInjector","configProviders","Injector","CmsComponentData","useValue","parent","ComponentWrapperDirective","vcr","cmsMappingService","dynamicAttributeService","componentHandler","cmsInjector","cmsService","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","isLaunchInSmartEdit","addDynamicAttributes","properties","ViewContainerRef","DynamicAttributeService","Directive","DefaultComponentHandler","Observable","subscriber","factory","getComponentFactory","createComponent","undefined","location","destroy","ComponentFactoryResolver","resolveComponentFactory","CxApiService","auth","cart","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","ActiveCartService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","WebComponentHandler","platform","loadedWebComponents","webElement","active","disposeFunc","remove","initWebComponent","then","elementName","cmsComponentData","cxApi","element","parentElement","Promise","path","script","setAttribute","body","isPlatformBrowser","onload","chainedOnload_1","DOCUMENT","PageComponentModule","multi","AsmComponentService","authService","asmAuthService","routingService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","of","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","globalMessageService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","switchMap","access_token","handleCustomerSessionStartRedirection","GlobalMessageType","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","HostBinding","encapsulation","ViewEncapsulation","None","BaseFocusService","PersistFocusService","focus","Map","group","set","clear","delete","getPersistenceGroup","getAttribute","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","querySelectorAll","findFirstFocusable","autofocus","el","isHidden","findFocusable","locked","invisible","suffix","map","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","event","preventScroll","preventDefault","stopPropagation","focusOnDoubleEscape","AutoFocusService","hasPersistedFocus","getPersisted","focussed","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","tagName","TrapFocusService","hasFocusableChildren","moveFocus","focusable","v","getTrapStart","trap","getTrapEnd","LockFocusService","KeyboardFocusService","DIALOG_TYPE","LAUNCH_CALLER","SkipLinkService","keyboardFocusService","skipLinks$","BehaviorSubject","getSkipLinks","found","skipLinks","skipLink","existing","splice","getSkipLinkIndexInArray","i18nKey","position","scrollToTarget","HTMLElement","firstFocusable","hasTabindex","hasAttribute","removeAttribute","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_LAUNCH_CONFIG","launch","ASM","outlet","SKIP_LINKS","LaunchRenderStrategy","renderedCallers","shouldRender","caller","some","_config","LaunchDialogService","renderStrategies","launchConfig","findConfiguration","getStrategy","render","strategy","match","LaunchConfig","AsmEnablerService","launchDialogService","load","isEnabled","addUi","isLaunched","isUsedBefore","setItem","params","getItem","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","deps","asmEnablerService","BREAKPOINT","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","markForCheck","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","floor","seconds","slice","Pipe","name","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","EventEmitter","csAgentLoginForm","Validators","required","onSubmit","valid","emit","markAllAsTouched","FormBuilder","Output","CustomerEmulationComponent","subscription","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","controls","valueChanges","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","PaginationItemType","PaginationNavigationPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","indexOf","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","code","width","_reversedFormats","sortedFormats","reverse","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","container","handleMissing","loadHandler","errorHandler","MediaConfig","MediaModule","forRoot","ngModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","step","allowZero","readonly","handleClick","input","control","markAsDirty","decrement","getControl","_control$","startWith","getValidCount","emitEvent","max","HostListener","ItemCounterModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","_","number","label","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","BEFORE","AFTER","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","fromEvent","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","FormErrorsComponent","_control","errors$","statusChanges","errors","entries","invalid","dirty","touched","FormErrorsModule","ViewConfigModule","ViewConfigModule_1","view","ViewConfig","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entryNumber","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","DeliveryModePreferences","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","isStable","BaseFocusDirective","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","toLowerCase","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","BlockFocusDirective","block","PersistFocusDirective","handleFocus","attr","ngAfterViewInit","isPersisted","EscapeFocusDirective","esc","AutoFocusDirective","shouldAutofocus","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","isLocked","lockFocus","addTabindexToChildren","shouldUnlockAfterAutofocus","setTimeout","toString","FocusDirective","directives","KeyboardFocusModule","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","isLevel","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","getLoaded","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","slots","selectiveCart","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","features","CartComponentModule","CartModule","CheckoutStepType","CheckoutConfig","OutletPosition","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","catch","verifyAddress","countrySelected","regionSelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","payment","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","templateOrFactory","REPLACE","store","stacked","templateRef","removeValueOrAll","newValue","val","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","componentFactoryResolver","outletService","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","InlineRenderStrategy","inline","OutletRefDirective","tpl","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","first","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletRendererService","outletRefs","register","cxOutlet","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","cxOutletDefer","build","changes","hostElement","getHostElement","buildOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","OutletModule","OutletRenderStrategy","RoutingRenderStrategy","_caller","LaunchDialogModule","LaunchDialogModule_1","provideConfig","LayoutModule","PageSlotComponent","cdRef","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","addSmartEditContract","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","replace","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","getNextPageContext","shouldReloadCmsData","isFeatureEnabled","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","typeCode","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","paymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","observeOn","asyncScheduler","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","querySelector","navBar","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","y","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","updateState","increaseVisibleValues","values","decreaseVisibleValues","topValueCount","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","expandFacetGroup","isCollapsed","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","viewStore","prepareRouteUrl","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","sub","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n}\n\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(fontawesomeIconConfig),\n    { provide: IconConfig, useExisting: Config },\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsComponentMapping, CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  private missingComponents: string[] = [];\n\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  public getComponentMapping(componentType: string): CmsComponentMapping {\n    const componentConfig = this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  isComponentEnabled(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getComponentMapping(componentType)?.disableSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    return this.getComponentMapping(componentType)?.childRoutes ?? [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    return this.getComponentMapping(componentType)?.guards ?? [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    return this.getComponentMapping(componentType)?.i18nKeys ?? [];\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Handler, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Handler {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const matchedHandlers = (this.handlers ?? []).filter((handler) =>\n      handler.hasMatch(componentMapping)\n    );\n    if (matchedHandlers.length > 1) {\n      matchedHandlers.sort(\n        (a, b) =>\n          (a.getPriority ? a.getPriority() : 0) -\n          (b.getPriority ? b.getPriority() : 0)\n      );\n    }\n    if (isDevMode() && matchedHandlers.length === 0) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n    return matchedHandlers[matchedHandlers.length - 1];\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsMappingService } from '../../../services/cms-mapping.service';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsMapping: CmsMappingService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsMapping.getComponentMapping(type)?.providers ?? [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsMappingService } from '../../services/cms-mapping.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsMappingService: CmsMappingService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService,\n    protected cmsService: CmsService // TODO: remove, move smartedit detection responsibility to different layer/service\n  ) {}\n\n  ngOnInit() {\n    if (\n      this.cmsMappingService.isComponentEnabled(\n        this.cxComponentWrapper.flexType\n      )\n    ) {\n      this.launchComponent();\n    }\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsMappingService.getComponentMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n      });\n  }\n\n  private decorate(elementRef: ElementRef) {\n    if (this.cmsService.isLaunchInSmartEdit()) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.cxComponentWrapper.properties,\n        elementRef.nativeElement,\n        this.renderer\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      componentMapping.component.prototype\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import {\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ComponentHandler } from './component-handler';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CxApiService } from '../services/cx-api.service';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n/**\n * Component handler responsible for launching cms web components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebComponentHandler implements ComponentHandler {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'string' &&\n      componentMapping.component.includes('#')\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef }> {\n    return new Observable<{ elementRef: ElementRef }>((subscriber) => {\n      let webElement;\n      let active = true;\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const renderer = injector.get(Renderer2);\n\n      const disposeFunc = () => {\n        active = false;\n        if (webElement) {\n          webElement.remove();\n        }\n      };\n\n      this.initWebComponent(componentMapping.component, renderer).then(\n        (elementName) => {\n          if (elementName) {\n            webElement = renderer.createElement(elementName);\n\n            const cmsComponentData = injector.get(CmsComponentData, null);\n\n            webElement.cxApi = {\n              ...injector.get(CxApiService),\n              cmsComponentData,\n            };\n\n            renderer.appendChild(\n              viewContainerRef.element.nativeElement.parentElement,\n              webElement\n            );\n\n            subscriber.next({ elementRef: new ElementRef(webElement) });\n\n            if (!active) {\n              disposeFunc();\n            }\n          }\n        }\n      );\n\n      return disposeFunc;\n    });\n  }\n\n  private initWebComponent(\n    component: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const [path, selector] = component.split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { WebComponentHandler } from './handlers/web-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: WebComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistance\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport abstract class LaunchConfig {\n  launch?: {\n    [key: string]: LaunchOptions;\n  };\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Optional elements for other configurations\n   */\n  options?: {\n    /**\n     * Dialog type is used to apply CSS classes\n     */\n    dialogType?: DIALOG_TYPE;\n  };\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { AsmMainUiComponent } from '../../../cms-components/asm/asm-main-ui/asm-main-ui.component';\nimport { SkipLinkComponent } from '../../a11y/skip-link/component/skip-link.component';\nimport { LaunchConfig } from './launch-config';\n\nexport const DEFAULT_LAUNCH_CONFIG: LaunchConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n    SKIP_LINKS: {\n      outlet: 'cx-storefront',\n      component: SkipLinkComponent,\n    },\n  },\n};\n","import { ViewContainerRef } from '@angular/core';\nimport { LaunchDialog, LaunchOptions, LAUNCH_CALLER } from '../config';\n\nexport abstract class LaunchRenderStrategy {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER;\n    element?: any;\n  }> = [];\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ): void;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract match(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(caller: LAUNCH_CALLER, config: LaunchDialog): boolean {\n    return this.renderedCallers.some((el) => el.caller === caller)\n      ? !!config.multi\n      : true;\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER, _config?: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n  }\n}\n","import { Inject, Injectable, ViewContainerRef } from '@angular/core';\nimport {\n  LaunchConfig,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  // Keep a list of rendered elements\n  protected renderedCallers: LAUNCH_CALLER[] = [];\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected launchConfig: LaunchConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(caller: LAUNCH_CALLER, vcr?: ViewContainerRef): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.render(config, caller, vcr);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER): LaunchOptions {\n    return this.launchConfig?.launch[caller];\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return this.renderStrategies.find((strategy) => strategy.match(config));\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { MediaFormatSize } from './media.model';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { MediaComponent } from './media.component';\nimport { MediaConfig } from './media.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n      providers: [\n        {\n          provide: MediaConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap((value) =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(() =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter((loaded) => loaded),\n      switchMap(() => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap((dataLoaded) => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: ` <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container> `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { FormErrorsModule } from '../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistance key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      super.handleFocus(event as KeyboardEvent);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elmenents,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  FeatureConfigService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected featureConfig: FeatureConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    private authService: AuthService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn ? cartLoaded && sflLoaded : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart]) => {\n          if (cart.totalItems) {\n            return slots.filter((slot) => slot !== 'EmptyCartMiddleContent');\n          } else if (selectiveCart.totalItems) {\n            return slots.filter(\n              (slot) =>\n                slot !== 'EmptyCartMiddleContent' &&\n                slot !== 'CenterRightContentSlot'\n            );\n          } else {\n            return slots.filter(\n              (slot) =>\n                slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n  Region,\n  UserAddressService,\n  StateUtils,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.paymentForm.get('cardType.code').setValue(card.code);\n  }\n\n  monthSelected(month: string): void {\n    this.paymentForm.get('expiryMonth').setValue(month);\n  }\n\n  yearSelected(year: number): void {\n    this.paymentForm.get('expiryYear').setValue(year);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddressForm\n      .get('region.isocodeShort')\n      .setValue(region.isocodeShort);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          (paymentInfo) => paymentInfo && !!Object.keys(paymentInfo).length\n        )\n      )\n      .subscribe((paymentInfo) => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach((key) => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some((error) => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.addressForm['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    const selectedSub = this.selectedAddress$.subscribe((selected) => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  Config,\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected componentFactoryResolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER,\n    vcr: ViewContainerRef\n  ) {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      vcr.createComponent(template);\n      this.renderedCallers.push({ caller, element: vcr.element });\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  match(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new Map<string, OutletDirective>();\n\n  render(outlet: string): void {\n    if (this.outletRefs.size !== 0) {\n      this.outletRefs.get(outlet).render();\n    }\n  }\n\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.set(cxOutlet, context);\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService?: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n    this.outletRendererService.register(this.cxOutlet, this);\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach((obj) => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n    this.renderedTemplate.push(tmplOrFactory);\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super();\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ) {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n\n      const element = vcr?.element;\n      this.renderedCallers.push({ caller, element });\n    }\n  }\n\n  match(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected routingService: RoutingService) {\n    super();\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER) {\n    this.routingService.go(config);\n  }\n\n  match(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideConfig } from '@spartacus/core';\nimport { DEFAULT_LAUNCH_CONFIG } from './config/default-launch-config';\nimport { LaunchConfig } from './config/launch-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [\n        provideConfig(DEFAULT_LAUNCH_CONFIG),\n        { provide: LaunchConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    tap((slot) => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map((slot) => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig,\n    protected cdRef?: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe((components) => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n    this.cdRef?.markForCheck();\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Config,\n  isFeatureEnabled,\n  ProtectedRoutesGuard,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    @Inject(Config) protected config: any\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService\n                  .getPage(pageContext, this.shouldReloadCmsData())\n                  .pipe(\n                    first(),\n                    switchMap((pageData) =>\n                      pageData\n                        ? this.service.canActivatePage(\n                            pageContext,\n                            pageData,\n                            route,\n                            state\n                          )\n                        : this.service.canActivateNotFoundPage(\n                            pageContext,\n                            route,\n                            state\n                          )\n                    )\n                  )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReloadCmsData(): boolean {\n    return !isFeatureEnabled(this.config, 'cmsPageLoadOnce');\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap((data) =>\n      combineLatest(\n        data.components.split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach((key) => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => Boolean(order)),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      breadcrumb.facetValueCode === params.categoryCode\n    );\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: facet.topValueCount || 0,\n          maxVisible: facet.topValueCount || 0,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string) {\n    return { query: new HttpUrlEncodingCodec().decodeValue(query) };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given facet when there are no\n   * facets available. This is a great experience for the keyboard user, who keep the\n   * focus on the activated facet all the time.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return !facetList.facets?.length ? facet.facetValueName : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input() isDialog: boolean;\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.closeList.emit(event);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService, RoutingService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(\n    protected storeDataService: StoreDataService,\n    protected route: ActivatedRoute,\n    protected routingService: RoutingService\n  ) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}