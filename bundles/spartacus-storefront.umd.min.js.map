{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-launch-dialog.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/default-anonymous-consent-layout.config.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/table/config/table.config.ts","ng://@spartacus/storefront/shared/components/table/table.component.ts","ng://@spartacus/storefront/shared/components/table/table.module.ts","ng://@spartacus/storefront/shared/components/table/table.service.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-structure/services/cms-components.service.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/lazy-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/asm-toggle-ui/asm-toggle-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/default-asm-layout.config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","DIALOG_TYPE","LAUNCH_CALLER","BREAKPOINT","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","OutletPosition","LayoutConfig","Injectable","providedIn","useExisting","Config","LaunchRenderStrategy","document","rendererFactory","renderedCallers","dialogClasses","popoverClasses","sidebarEndClasses","sidebarStartClasses","renderer","createRenderer","shouldRender","caller","config","Boolean","component","some","el","multi","applyClasses","dialogType","classes","DIALOG","addClass","body","POPOVER","SIDEBAR_END","SIDEBAR_START","classes_1","classes_1_1","newClass","location","nativeElement","remove","filter","_a","removeClass","getPriority","Inject","DOCUMENT","InlineRenderStrategy","componentFactoryResolver","_this","_super","render","vcr","template","resolveComponentFactory","createComponent","element","of","isDevMode","console","warn","hasMatch","inline","args","RendererFactory2","ComponentFactoryResolver","LaunchDialogService","renderStrategies","layoutConfig","_dialogClose","BehaviorSubject","undefined","launch","findConfiguration","getStrategy","clear","asObservable","closeDialog","reason","resolveApplicable","ICON_TYPE","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","add","outlet","templateOrFactory","position","REPLACE","BEFORE","store","AFTER","get","stacked","templateRef","removeValueOrAll","newValue","set","has","delete","existing","val","OutletRefDirective","tpl","outletService","ngOnInit","cxOutletRef","cxOutletPos","TemplateRef","Input","Directive","selector","OutletRefModule","NgModule","imports","CommonModule","declarations","exports","OutletRendererService","outletRefs","size","register","cxOutlet","context","getOutletRef","pipe","map","IntersectionService","isIntersected","options","intersects","first","v","Observable","observer","intersectOptions","rootMargin","getRootMargin","threshold","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","distinctUntilChanged","deferredLoading","intersectionMargin","DeferLoaderService","platformId","intersectionService","globalLoadStrategy","strategy","DeferLoadingStrategy","INSTANT","load","shouldLoadInstantly","deferLoading","elementLoadingStrategy","isPlatformServer","DEFER","type","PLATFORM_ID","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","renderedComponents","loaded","EventEmitter","subscription","Subscription","unsubscribe","cxOutletDefer","build","ngOnChanges","changes","emit","hostElement","getHostElement","subscribe","buildOutlet","templates","includes","isArray","components","forEach","obj","tmplOrFactory","ComponentFactory","view","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","parentNode","ngOnDestroy","ViewContainerRef","Output","OutletModule","providers","OutletRenderStrategy","template_1","outletDirective","reverse","find","componentType","tap","RoutingRenderStrategy","routingService","_caller","go","cxRoute","RoutingService","LaunchDialogModule","forRoot","ngModule","LaunchDialogModule_1","provide","AnonymousConsentLaunchDialogService","launchDialogService","openDialog","openElement","ANONYMOUS_CONSENT","combineLatest","dialogClose","close","comp","focus","destroy","BaseFocusService","BaseFocusDirective","elementRef","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","host","tagName","toLowerCase","hasAttribute","ElementRef","HostBinding","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","HostListener","BlockFocusDirective","block","PersistFocusService","group","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","event","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","isHidden","findFocusable","locked","invisible","suffix","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","setTimeout","_b","setAttribute","shouldUnlockAfterAutofocus","toString","Renderer2","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","AnonymousConsentManagementBannerComponent","anonymousConsentsService","anonymousConsentLaunchDialogService","subscriptions","bannerVisible$","isBannerVisible","viewDetails","hideBanner","dialog","allowAll","giveAllConsents","toggleBannerDismissed","AnonymousConsentsService","Component","IconResourceType","IconConfig","PaginationItemType","PaginationNavigationPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","res","types","svgResource","addLinkResource","resource","findResource","head","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","DomSanitizer","IconComponent","iconLoader","setIcon","addStyleClasses","styleClasses","cls","split","IconModule","provideDefaultConfig","AnonymousConsentDialogComponent","role","modal","showLegalDescription","iconTypes","requiredConsents","focusConfig","anonymousConsents","showLegalDescriptionInDialog","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","rejectAll","take","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","AnonymousConsentsConfig","defaultAnonymousConsentLayoutConfig","AnonymousConsentOpenDialogComponent","ViewChild","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","provideConfig","cmsComponents","entryComponents","SpinnerComponent","SpinnerModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","globalMessageService","anonymousConsentsConfig","authService","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","withLatestFrom","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","success","onConsentGivenSuccess","resetWithdrawConsentProcessState","skipWhile","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","code","GlobalMessageType","MSG_TYPE_CONFIRMATION","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","loading","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","UserConsentService","GlobalMessageService","AuthService","ConsentManagementModule","FormsModule","ReactiveFormsModule","guards","AuthGuard","AnonymousConsentsDialogModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","floor","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","slice","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","sort","a","width","_reversedFormats","sortedFormats","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","isInitialized","isLoading","isMissing","container","handleMissing","loadHandler","errorHandler","MediaModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","FormErrorsComponent","_control","control","errors$","statusChanges","startWith","errors","invalid","dirty","touched","FormErrorsModule","GenericLinkComponent","router","PROTOCOL_REGEX","URL_SPLIT","routeParts","isExternalUrl","test","setUrlParts","currentValue","path","queryParams","fragment","getAbsoluteUrl","splitUrl","parseUrl","match","Router","GenericLinkModule","ItemCounterComponent","min","step","allowZero","readonly","input","sub","valueChanges","setValue","getValidCount","emitEvent","markAsDirty","decrement","max","ItemCounterModule","defaultPaginationConfig","pagination","addStart","addEnd","PaginationConfig","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","_","number","label","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","MediaConfig","ModalRef","NgbModalRef","ModalService","ngbModalService","modals","open","content","activeModal","getActiveModal","dismissActiveModal","dismiss","pop","closeActiveModal","NgbModal","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsConfig","QualtricsLoaderService","qsiLoaded$","fromEvent","qsi$","switchMap","isDataLoaded","api","qsi","qsiApi","initialize","run","reload","API","unload","log","addScript","scriptSource","hasScript","script","defer","source","querySelector","QualtricsComponent","qualtricsLoader","qualtrics","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","deps","StarRatingComponent","disabled","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","TableConfig","TableComponent","paginateEvent","_dataset","dataset","addTableDebugInfo","getDataValue","dataRow","headerKey","values","header","tableType","structure","TableModule","TableService","buildStructure","hasTableConfig","buildStructureFromConfig","buildStructureFromData","buildRandomStructure","getTableConfig","headers","hideHeader","tableConfig","table","bestMatch","message","ViewConfig","ViewConfigModule","ViewConfigModule_1","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","params","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","CheckoutService","ActiveCartService","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","password","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","controls","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","CmsComponentsService","missingComponents","determineMappings","componentTypes","getMapping","componentConfig","disableSSR","getDeferLoadingStrategy","getChildRoutes","routes","componentTypes_1","componentTypes_1_1","childRoutes","getGuards","Set","componentTypes_2","componentTypes_2_1","guard","getI18nKeys","i18nKeys","componentTypes_3","componentTypes_3_1","CmsConfig","CmsInjectorService","cmsComponentsService","getCmsData","uid","parentInjector","CmsService","getComponentData","getInjector","configProviders","useValue","parent","ComponentHandlerService","handlers","invalidMappings","resolve","componentMapping","handler","getLauncher","viewContainerRef","elementInjector","launcher","ComponentHandler","ComponentWrapperDirective","dynamicAttributeService","componentHandler","cmsInjector","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","ChangeDetectorRef","addDynamicAttributes","DynamicAttributeService","DefaultComponentHandler","subscriber","factory","getComponentFactory","LazyComponentHandler","defaultHandler","isNotClass","signature","substr","replace","PageComponentModule","AsmEnablerService","isEnabled","addUi","isLaunched","isUsedBefore","localStorage","setItem","getItem","ASM","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","asmEnablerService","CheckoutStepType","DeliveryModePreferences","AsmComponentService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","isCustomerEmulationSessionInProgress","mergeMap","userToken","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","isCollapsed$","getAsmUiState","uiState","collapsed","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","UserService","AsmService","encapsulation","ViewEncapsulation","None","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","FormatTimerPipe","transform","totalSeconds","minutes","seconds","Pipe","name","AsmToggleUiComponent","isCollapsed","toggleUi","updateAsmUiState","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","user","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","onDocumentClick","resultList","contains","closeResults","(document:click)","defaultAsmLayoutConfig","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","ProductService","AddedToCartDialogComponent","modalService","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","product","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","selectiveCartService","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","getControl","SelectiveCartService","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","selectiveCartEnabled","cartLoaded$","getLoaded","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","getLoading","slots","selectiveCart","loadingCart","exclude","arr","arg","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","cmsService","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","SkipLinkScrollPosition","CheckoutConfig","defaultCheckoutConfig","checkout","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","expressCheckoutService","firstStep$","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","countrySelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","translate","month","payment","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","textExpires","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","field","cardLabels","selected","title","img","actions","goNext","goPrevious","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","setAsDefaultField","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","regionSelected","addresses$","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","card","getCardContent","addAddress","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","SkipLinkConfig","SkipLinkService","keyboardFocusService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","splice","getSkipLinkIndexInArray","i18nKey","scrollToTarget","parentElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkComponent","skipLinkService","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","slot","pendingComponentCount","class","lastPosition","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","slotData","PageSlotModule","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","LanguageService","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","JsonLdScriptFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","isPlatformBrowser","scriptElement","getElementById","JSON","stringify","_key","SecurityContext","HTML","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","Promise","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","routing","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","pageMeta","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductReviewService","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","y","typeCode","select","tabNum","history","activeTab","getTitleParams","tabComps","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","continue","amendOrderForm","forwardRoute","AmendOrderActionsModule","ValidateQuantityToCancel","cxNoSelectedItemToCancel","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","UserNotificationPreferenceService","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","UserInterestsService","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","closest","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","ProductReferenceService","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","siteContext","routerState","criteria","getCriteriaFromRoute","model$","pluck","routeParams","getQueryFromRouteParams","brandCode","getPageItems","pageNumber","routeCriteria","navigate","queryParamsHandling","relativeTo","setQuery","viewPage","ProductSearchService","CurrencyService","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","updateState","increaseVisibleValues","decreaseVisibleValues","topValueCount","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","f","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","_isDialog","expandFacetGroup","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","observeOn","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","q","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchConfig","searchQuery","queryText","geolocation","useMyLocation","radius","parseParameters","googleMaps","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderConfig","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","auth","loginAsGuest","routeState","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","titleSelected","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","AnonymousConsentsModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport interface LaunchConfig {\n  [key: string]: LaunchOptions;\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Dialog type is used to apply CSS classes\n   */\n  dialogType?: DIALOG_TYPE;\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n  ANONYMOUS_CONSENT = 'ANONYMOUS_CONSENT',\n}\n","import { Injectable } from '@angular/core';\nimport { Config, DeferLoadingStrategy } from '@spartacus/core';\nimport { LaunchConfig } from '../launch-dialog/index';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n\n  launch?: LaunchConfig;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Renderer2,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Applicable, Priority } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  DIALOG_TYPE,\n  LaunchDialog,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config';\n\nexport abstract class LaunchRenderStrategy implements Applicable {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER | string;\n    element?: any;\n    component?: ComponentRef<any>;\n  }> = [];\n\n  /**\n   * Classes to apply to the component when the dialog is a DIALOG\n   */\n  protected dialogClasses = ['d-block', 'fade', 'modal', 'show'];\n  /**\n   * Classes to apply to the component when the dialog is a POPOVER\n   */\n  protected popoverClasses = ['cx-dialog-popover'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_END\n   */\n  protected sidebarEndClasses = ['cx-sidebar-end'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_START\n   */\n  protected sidebarStartClasses = ['cx-sidebar-start'];\n\n  protected renderer: Renderer2;\n\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>>;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(\n    caller: LAUNCH_CALLER | string,\n    config: LaunchDialog\n  ): boolean {\n    return (\n      Boolean(config.component) &&\n      (this.renderedCallers.some((el) => el.caller === caller)\n        ? !!config.multi\n        : true)\n    );\n  }\n\n  protected applyClasses(\n    component: ComponentRef<any>,\n    dialogType: DIALOG_TYPE\n  ): void {\n    let classes = [];\n\n    // TODO: make classes configurable\n    switch (dialogType) {\n      case DIALOG_TYPE.DIALOG:\n        classes = this.dialogClasses;\n        this.renderer.addClass(this.document.body, 'modal-open');\n        break;\n      case DIALOG_TYPE.POPOVER:\n        classes = this.popoverClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_END:\n        classes = this.sidebarEndClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_START:\n        classes = this.sidebarStartClasses;\n        break;\n    }\n\n    for (const newClass of classes) {\n      this.renderer.addClass(component.location.nativeElement, newClass);\n    }\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER | string, config: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller !== caller\n    );\n\n    if ((config as LaunchDialog)?.dialogType === DIALOG_TYPE.DIALOG) {\n      this.renderer.removeClass(this.document.body, 'modal-open');\n    }\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER | string,\n    vcr: ViewContainerRef\n  ): Observable<ComponentRef<any>> {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n\n      const component = vcr.createComponent(template);\n\n      if (config?.dialogType) {\n        this.applyClasses(component, config?.dialogType);\n      }\n\n      this.renderedCallers.push({ caller, element: vcr.element, component });\n\n      return of(component);\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { resolveApplicable } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { LayoutConfig } from '../../config/layout-config';\nimport { LaunchOptions, LAUNCH_CALLER } from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  private _dialogClose = new BehaviorSubject<string>(undefined);\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected layoutConfig: LayoutConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>> {\n    const config = this.findConfiguration(caller);\n    if (config) {\n      const renderer = this.getStrategy(config);\n\n      // Render if the strategy exists\n      if (renderer) {\n        this._dialogClose.next(undefined);\n        return renderer.render(config, caller, vcr);\n      }\n    } else if (isDevMode()) {\n      console.warn('No configuration provided for caller ' + caller);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER | string): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  get dialogClose(): Observable<string> {\n    return this._dialogClose.asObservable();\n  }\n\n  closeDialog(reason: string) {\n    this._dialogClose.next(reason);\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER | string): LaunchOptions {\n    if (this.layoutConfig?.launch) {\n      return this.layoutConfig.launch[caller];\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveApplicable(this.renderStrategies, [config]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new BehaviorSubject(new Map<string, OutletDirective>());\n\n  /**\n   * Dynamically render the templates in the specified array\n   *\n   * @param outlet\n   */\n  render(outlet: string): void {\n    if (this.outletRefs.value.size !== 0) {\n      this.outletRefs.value.get(outlet).render();\n    }\n  }\n\n  /**\n   * Register outlet to be available to render dynamically\n   *\n   * @param cxOutlet\n   * @param context\n   */\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.next(this.outletRefs.value.set(cxOutlet, context));\n  }\n  /**\n   * Returns map of outlets\n   *\n   */\n  getOutletRef(outlet: string): Observable<OutletDirective> {\n    return this.outletRefs.asObservable().pipe(\n      map((val) => val.get(outlet)),\n      filter((val) => Boolean(val))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, threshold: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n  public renderedComponents = new Map<\n    OutletPosition,\n    Array<ComponentRef<any> | EmbeddedViewRef<any>>\n  >();\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.renderedComponents.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n      this.outletRendererService.register(this.cxOutlet, this);\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    const components = [];\n    templates.forEach((obj) => {\n      const component = this.create(obj);\n      components.push(component);\n    });\n\n    this.renderedComponents.set(position, components);\n  }\n\n  private create(tmplOrFactory: any): ComponentRef<any> | EmbeddedViewRef<any> {\n    this.renderedTemplate.push(tmplOrFactory);\n\n    if (tmplOrFactory instanceof ComponentFactory) {\n      const component = this.vcr.createComponent(tmplOrFactory);\n      return component;\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n      return view;\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent nodes of the given element.\n   *\n   * We avoid traversing the parent _elements_, as this is blocking\n   * ie11 implementations. One of the spare exclusions we make to not\n   * supporting ie11.\n   *\n   * @param element\n   */\n  private getHostElement(element: Node): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentNode);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  RendererFactory2,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER | string\n  ): Observable<ComponentRef<any>> {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n      this.renderedCallers.push({ caller });\n\n      return this.outletRendererService.getOutletRef(config.outlet).pipe(\n        map((outletDirective) => {\n          const components = outletDirective.renderedComponents.get(\n            config.position ? config.position : OutletPosition.BEFORE\n          ) as ComponentRef<any>[];\n\n          return components\n            .reverse()\n            .find(\n              (component) => component.componentType === template.componentType\n            );\n        }),\n        tap((component) => {\n          if (config?.dialogType) {\n            this.applyClasses(component, config?.dialogType);\n          }\n        })\n      );\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER | string, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n\n    super.remove(caller, config);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, RendererFactory2 } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected routingService: RoutingService\n  ) {\n    super(document, rendererFactory);\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER | string) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { LayoutConfig } from '../config/layout-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [{ provide: LayoutConfig, useExisting: Config }],\n    };\n  }\n}\n","import { ElementRef, Injectable, ViewContainerRef } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport {\n  LaunchDialogService,\n  LAUNCH_CALLER,\n} from '../../layout/launch-dialog/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentLaunchDialogService {\n  constructor(protected launchDialogService: LaunchDialogService) {}\n\n  openDialog(\n    openElement?: ElementRef,\n    vcr?: ViewContainerRef\n  ): Observable<any> | undefined {\n    const component = this.launchDialogService.launch(\n      LAUNCH_CALLER.ANONYMOUS_CONSENT,\n      vcr\n    );\n\n    if (component) {\n      return combineLatest([\n        component,\n        this.launchDialogService.dialogClose,\n      ]).pipe(\n        filter(([, close]) => close && close !== undefined),\n        tap(([comp]) => {\n          openElement?.nativeElement.focus();\n          this.launchDialogService.clear(LAUNCH_CALLER.ANONYMOUS_CONSENT);\n          comp.destroy();\n        }),\n        map(([comp]) => comp)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singleton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistence key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistence\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      // we wait a few milliseconds, mainly because firefox will otherwise apply\n      // the mouse event on the new focused child element\n      setTimeout(() => {\n        super.handleFocus(event as KeyboardEvent);\n      }, 100);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elements,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { Component, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      null,\n      this.vcr\n    );\n    if (dialog) {\n      this.subscriptions.add(dialog.subscribe());\n    }\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [provideDefaultConfig(fontawesomeIconConfig)],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { FocusConfig } from '../../../layout/a11y/keyboard-focus/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  @HostBinding('attr.role') role = 'dialog';\n  @HostBinding('attr.aria-modal') modal = true;\n\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: 'input[type=\"checkbox\"]',\n    focusOnEscape: true,\n  };\n\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    // Close on click outside the dialog window\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\n      this.close('Cross click');\n    }\n  }\n\n  constructor(\n    protected config: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected el: ElementRef,\n    protected launchDialogService: LaunchDialogService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  close(reason?: any): void {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { DIALOG_TYPE } from '../../layout/launch-dialog/index';\nimport { AnonymousConsentDialogComponent } from '../../shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component';\n\nexport const defaultAnonymousConsentLayoutConfig: LayoutConfig = {\n  launch: {\n    ANONYMOUS_CONSENT: {\n      inline: true,\n      component: AnonymousConsentDialogComponent,\n      dialogType: DIALOG_TYPE.DIALOG,\n    },\n  },\n};\n","import {\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  @ViewChild('open') openElement: ElementRef;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService\n  ) {}\n\n  openDialog(): void {\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      this.openElement,\n      this.vcr\n    );\n    if (dialog) {\n      dialog.pipe(take(1)).subscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../layout/a11y/keyboard-focus/index';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { defaultAnonymousConsentLayoutConfig } from './default-anonymous-consent-layout.config';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideConfig(defaultAnonymousConsentLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/index';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsDialogModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media?.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Params, Router } from '@angular/router';\n\n// private\ninterface RouteParts {\n  /** Path in the Angular-like array format */\n  path?: string[];\n\n  /** Query params */\n  queryParams?: Params;\n\n  /** Hash fragment */\n  fragment?: string;\n}\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent implements OnChanges {\n  constructor(protected router: Router) {}\n\n  /**\n   * Pattern matching string starting with `http://` or `https://`.\n   */\n  private readonly PROTOCOL_REGEX: RegExp = /^https?:\\/\\//i;\n\n  /**\n   * Used to split url into 2 parts:\n   * 1. the path\n   * 2. query params + hash fragment\n   */\n  private readonly URL_SPLIT = /(^[^#?]*)(.*)/;\n\n  /**\n   * Parsed parts of the @Input `url`, when it's a local URL.\n   * It should not be used when the `url` is external.\n   * @see `url`\n   */\n  private routeParts: RouteParts = {};\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  /**\n   * Returns true when the @Input `url` is a string starting with `http://` or `https://`.\n   */\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.PROTOCOL_REGEX.test(this.url);\n  }\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['url']) {\n      this.setUrlParts(changes['url'].currentValue);\n    }\n  }\n\n  /**\n   * The part with the path of the local url.\n   */\n  get routerUrl(): any[] {\n    return this.routeParts.path;\n  }\n\n  /**\n   * The part with the query params of the local url.\n   */\n  get queryParams(): Params {\n    return this.routeParts.queryParams;\n  }\n\n  /**\n   * The part with the hash fragment of the local url.\n   */\n  get fragment(): string {\n    return this.routeParts.fragment;\n  }\n\n  /**\n   * Parses the given url and sets the property `urlParts` accordingly.\n   */\n  private setUrlParts(url: string | any[]) {\n    if (typeof url === 'string') {\n      url = this.getAbsoluteUrl(url); // string links in CMS sometimes don't have the leading slash, so fix it here\n      this.routeParts = this.splitUrl(url as string);\n    } else {\n      this.routeParts = { path: url };\n    }\n  }\n\n  /**\n   * Parses the given string into 3 parts:\n   * - string path (wrapped in an array to be compatible with Angular syntax for the `routerLink`)\n   * - query params (as an object)\n   * - hash fragment (string)\n   */\n  private splitUrl(url: string = ''): RouteParts {\n    const { queryParams, fragment } = this.router.parseUrl(url);\n    const [, path] = url.match(this.URL_SPLIT);\n\n    // wrap path in an array, to have the Angular-like path format\n    return { path: [path], queryParams, fragment };\n  }\n\n  /**\n   * Prepends a leading slash to the given URL string, in case it doesn't have it.\n   */\n  private getAbsoluteUrl(url: string): string {\n    return url.startsWith('/') ? url : '/' + url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functionality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent implements OnInit, OnDestroy {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive integer or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Indicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  /**\n   * Subscription responsible for auto-correcting control's value when it's invalid.\n   */\n  private sub: Subscription;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  ngOnInit() {\n    this.sub = this.control.valueChanges\n      .pipe(startWith(this.control.value))\n      .subscribe((value) =>\n        this.control.setValue(this.getValidCount(value), { emitEvent: false })\n      );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { MediaFormatSize } from './media.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Configuration options for the Qualtrics integration, which allows you to\n * specify the qualtrics project and deployment script.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QualtricsConfig {\n  /**\n   * Holds the qualtrics integration options.\n   */\n  qualtrics?: {\n    /**\n     * Deployment script, loaded from a resource, to integrate the deployment of the qualtrics project.\n     * You would typically store the file in the local assets folder.\n     *\n     * Defaults to `assets/qualtricsIntegration.js`\n     */\n    scriptSource?: string;\n  };\n}\n","import {\n  Injectable,\n  isDevMode,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\n\nexport const QUALTRICS_EVENT_NAME = 'qsi_js_loaded';\n\n/**\n * Service to integration Qualtrics.\n *\n * The integration observes the Qualtrics API, and when available, it runs the QSI API\n * to let Qualtrics evaluate the application.\n *\n * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application\n * data before pulling the QSI API. This is beneficial in a single page application when additional\n * data is required before the Qualtrics _creatives_ run.\n *\n * This service also supports the creation of the Qualtrics deployment script. This is optional, as\n * the script can be added in alternatives ways.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  /**\n   * Reference to the QSI API.\n   */\n  protected qsiApi: any;\n\n  /**\n   * QSI load event that happens when the QSI JS file is loaded.\n   */\n  private qsiLoaded$: Observable<any> = this.winRef?.nativeWindow\n    ? fromEvent(this.winRef.nativeWindow, QUALTRICS_EVENT_NAME)\n    : of();\n\n  /**\n   * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.\n   *\n   * The API is emitted when the JavaScript resource holding this API is fully loaded.\n   * The API is also stored locally in the service, in case it's required later on.\n   */\n  protected qsi$: Observable<any> = this.qsiLoaded$.pipe(\n    switchMap(() => this.isDataLoaded()),\n    map(() => this.winRef?.nativeWindow['QSI']),\n    filter((api) => Boolean(api)),\n    tap((qsi) => (this.qsiApi = qsi))\n  );\n\n  constructor(\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.initialize();\n  }\n\n  /**\n   * Starts observing the Qualtrics integration. The integration is based on a\n   * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,\n   * we run the API.\n   */\n  protected initialize() {\n    this.qsi$.subscribe(() => this.run());\n  }\n\n  /**\n   * Evaluates the Qualtrics project code for the application.\n   *\n   * In order to reload the evaluation in Qualtrics, the API requires to unload the API before\n   * running it again. We don't do this by default, but offer a flag to conditionally unload the API.\n   */\n  protected run(reload = false): void {\n    if (!this.qsiApi?.API) {\n      if (isDevMode()) {\n        console.log('The QSI api is not available');\n      }\n      return;\n    }\n\n    if (reload) {\n      // Removes any currently displaying creatives\n      this.qsiApi.API.unload();\n    }\n\n    // Starts the intercept code evaluation right after loading the Site Intercept\n    // code for any defined intercepts or creatives\n    this.qsiApi.API.load().done(this.qsiApi.API.run());\n  }\n\n  /**\n   * Adds the deployment script to the DOM.\n   *\n   * The script will not be added twice if it was loaded before. In that case, we use\n   * the Qualtrics API directly to _unload_ and _run_ the project.\n   */\n  addScript(scriptSource: string): void {\n    if (this.hasScript(scriptSource)) {\n      this.run(true);\n    } else {\n      const script: HTMLScriptElement = this.renderer.createElement('script');\n      script.type = 'text/javascript';\n      script.defer = true;\n      script.src = scriptSource;\n      this.renderer.appendChild(this.winRef.document.body, script);\n    }\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.\n   * You can observe any data in this method.\n   *\n   * Defaults to true.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n\n  /**\n   * Indicates if the script is already added to the DOM.\n   */\n  protected hasScript(source?: string): boolean {\n    return !!this.winRef.document.querySelector(`script[src=\"${source}\"]`);\n  }\n\n  protected get renderer(): Renderer2 {\n    return this.rendererFactory.createRenderer(null, null);\n  }\n}\n","import { Component, isDevMode } from '@angular/core';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n/**\n * Adds the Qualtrics deployment script whenever the component is loaded. The\n * deployment script is loaded from the global configuration (`qualtrics.scriptSource`).\n */\n@Component({\n  selector: 'cx-qualtrics',\n  template: ``,\n})\nexport class QualtricsComponent {\n  constructor(\n    protected qualtricsLoader: QualtricsLoaderService,\n    protected config: QualtricsConfig\n  ) {\n    if (this.config.qualtrics?.scriptSource) {\n      this.qualtricsLoader.addScript(this.config.qualtrics.scriptSource);\n    } else if (isDevMode()) {\n      console.warn(\n        `We're unable to add the Qualtrics deployment code as there is no script source defined in config.qualtrics.scriptSource.`\n      );\n    }\n  }\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => (ctx ? this.getInjectedService(ctx) : undefined)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data?.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { BREAKPOINT } from '../../../../layout/config/layout-config';\nimport { TableStructureConfiguration } from '../table.model';\n\n/**\n * Helper configuration to introduce a breakpoint specific table configuration.\n */\nexport interface TableConfiguration extends TableStructureConfiguration {\n  breakpoint?: BREAKPOINT;\n}\n\n/**\n * The `TableConfig` provides table configurations. The configuration allows for a\n * an optional breakpoint specific structure, so a dedicated table structure per\n * screen size can be generated (see `TableService`).\n *\n * The string based key is used to define a configuration for a specific type. The type\n * binds to a specific component, such as the cost-center table. The various table types\n * should be exposed by feature modules, to ease the configuration.\n *\n * The `TableConfiguration` is added in an array, so that any opinionated default configurations\n * can be replaced by customer configurations.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class TableConfig {\n  table: {\n    [key: string]: TableConfiguration[];\n  };\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  isDevMode,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\nimport { Table, TableHeader } from './table.model';\n\n/**\n * The table component provides a generic DOM structure based on the `dataset` input.\n * The `Table` dataset contains both a type, table structure, table data and controls\n * for pagination and sorting.\n *\n * The table component only supports horizontal table structure.\n *\n * The implementation is fairly \"dumb\" and only provides the following features:\n * - Use outlet for table headers (`<th>`) and cells (`<td>`).\n * - Localizing table headers, using the `I18nModule`.\n * - Sorting table columns.\n * - Add CSS classes on each cell to\n *\n * Al features are optional.\n *\n * By default, the headers and columns are rendered with an outlet template. The template\n * reference is generated by concatenating the table _type_ and table _label key_.\n * The following snippet shows an outlet generated for the table type \"cost-center\" with\n * a label \"name\":\n *\n * ```\n * <th>\n *   <template cxOutlet=\"tbl.cost-center.header.name\">\n *     [localized label is generated here]\n *   </template>\n * </th>\n * ```\n *\n * Similarly, the `<td>` is generated with the outlet template reference `tbl.cost-center.data.name`.\n *\n * This allows container components (and customers) to further customize the table rendering.\n *\n *\n */\n@Component({\n  selector: 'cx-table',\n  templateUrl: './table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableComponent {\n  @HostBinding('attr.cx-table-type') tableType: string;\n\n  protected _dataset: Table;\n  @Input()\n  set dataset(dataset: Table) {\n    this._dataset = dataset;\n    this.addTableDebugInfo();\n  }\n  get dataset(): Table {\n    return this._dataset;\n  }\n\n  /**\n   * The paginateEvent is triggered when a new page is required. This includes sorting.\n   */\n  @Output() paginateEvent: EventEmitter<PaginationModel> = new EventEmitter();\n\n  /**\n   * Returns the configured data value by the label key.\n   * If there's no headerKey available, or no corresponding value, the\n   * first value in the data row is returned.\n   */\n  getDataValue(dataRow: any, headerKey: string, index: number): string {\n    return dataRow[headerKey] || Object.values(dataRow)[index];\n  }\n\n  /**\n   * Sorts the table by emitting the pagination to the container/host component.\n   */\n  sort(header: TableHeader) {\n    if (header.sortCode) {\n      this.paginateEvent.emit({\n        ...this.dataset.pagination,\n        sort: header.sortCode,\n      });\n    }\n  }\n\n  /**\n   * Generates the table type into the UI in devMode, so that developers\n   * can easily get the notion of the table type.\n   */\n  protected addTableDebugInfo() {\n    if (isDevMode) {\n      this.tableType = this.dataset?.structure?.type;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { TableComponent } from './table.component';\n\n/**\n * The TableModule provides a table component that is driven by (responsible) configuration.\n */\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  declarations: [TableComponent],\n  exports: [TableComponent],\n})\nexport class TableModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { TableConfig } from './config/table.config';\nimport { TableStructure, TableStructureConfiguration } from './table.model';\n\n/**\n * Responsive table service.\n *\n * The `TableService` is used to generate a `TableStructure` based on configuration. The table\n * structure configuration allows for breakpoint specific configuration, so that the table\n * experience can be differentiated various screen sizes.\n *\n * The table structure configuration is driven by a table type. The various supported\n * table types are exposed in feature libraries.\n *\n * If there is no table configuration for the given type found, a table header structure\n * is generated based on the actual data or randomly (in case no data is passed in) by\n * generating 5 headers. In case of a generated header, we warn the developer in devMode that\n * there is no configuration available.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TableService {\n  constructor(\n    protected breakpointService: BreakpointService,\n    protected config: TableConfig\n  ) {}\n\n  /**\n   * Builds the table structure. The table structure can be created by the help of\n   * the `tableType`. The `tableType` can be used in the configuration `TableConfig`,\n   * so that the table headers can be defined.\n   */\n  buildStructure(\n    tableType: string,\n    data$?: Observable<any>\n  ): Observable<TableStructure> {\n    if (this.hasTableConfig(tableType)) {\n      return this.buildStructureFromConfig(tableType);\n    } else {\n      if (data$) {\n        return this.buildStructureFromData(tableType, data$);\n      } else {\n        return this.buildRandomStructure(tableType);\n      }\n    }\n  }\n\n  /**\n   * Returns the table structure by configuration. The configuration can be\n   * breakpoint-driven, which means that an alternative header structure can\n   * be created per screen size.\n   *\n   * The breakpoint is resolved by teh `BreakpointService`.\n   */\n  protected buildStructureFromConfig(type: string): Observable<TableStructure> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => ({ ...this.getTableConfig(type, breakpoint), type }))\n    );\n  }\n\n  /**\n   * This method generates a table structure by the help of the first data row.\n   */\n  protected buildStructureFromData(\n    type: string,\n    data$: Observable<any>\n  ): Observable<TableStructure> {\n    this.warn(\n      `No table configuration found to render table with type \"${type}\". The table header for \"${type}\" is generated by the help of the first data item`\n    );\n    return data$.pipe(\n      map((data: any[]) => {\n        const headers = Object.keys(data?.[0]).map((key) => ({\n          key,\n          label: key,\n        }));\n        return {\n          type: type,\n          headers,\n        } as TableStructure;\n      })\n    );\n  }\n\n  /**\n   * As a last resort, the table structure is randomly created. We add 5 unknown headers\n   * and use the `hideHeader` to avoid the unknown headers to be rendered.\n   */\n  protected buildRandomStructure(type: string): Observable<TableStructure> {\n    this.warn(\n      `No data available for \"${type}\", a random structure is generated (with hidden table headers).`\n    );\n\n    return of({\n      type,\n      headers: [\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n      ],\n      hideHeader: true,\n    });\n  }\n\n  /**\n   * Finds the best applicable table configuration for the given type\n   * and breakpoint. If there is no configuration available for the breakpoint,\n   * the best match will be returned, using mobile first approach.\n   *\n   * If there is no match for any breakpoint, the fallback is a configuration\n   * without the notion of a breakpoint. Otherwise we fallback to the first\n   * available config.\n   */\n  protected getTableConfig(\n    type: string,\n    breakpoint: BREAKPOINT\n  ): TableStructureConfiguration {\n    const tableConfig = this.config.table[type];\n\n    // find all relevant breakpoints\n    const current = this.breakpointService.breakpoints.indexOf(breakpoint);\n    const relevant = this.breakpointService.breakpoints\n      .slice(0, current + 1)\n      .reverse();\n\n    const bestMatch: BREAKPOINT = relevant.find(\n      (br) => !!tableConfig.find((structure) => structure.breakpoint === br)\n    );\n\n    return bestMatch\n      ? tableConfig.find((config) => config.breakpoint === bestMatch)\n      : tableConfig.find((structure) => !structure.breakpoint) ||\n          tableConfig[0];\n  }\n\n  protected hasTableConfig(tableType: string): boolean {\n    return !!this.config.table?.[tableType];\n  }\n\n  /**\n   * Prints a convenient message in the console to increase developer experience.\n   */\n  private warn(message) {\n    if (isDevMode) {\n      console.warn(message);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  CmsComponentMapping,\n  CmsConfig,\n  DeferLoadingStrategy,\n} from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentsService {\n  private missingComponents: string[] = [];\n\n  constructor(\n    protected config: CmsConfig,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Should be called to make sure all component mappings are determined,\n   * especially lazy loaded ones.\n   *\n   * It's recommended way to make sure all other methods of CmsComponentService\n   * will be able to work synchronously for asked component types and avoid risk\n   * of potential errors that could be thrown otherwise.\n   */\n  determineMappings(componentTypes: string[]): Observable<string[]> {\n    return of(componentTypes);\n  }\n\n  /**\n   * Return collection of component mapping configuration for specified list of\n   * component types.\n   *\n   * If component mapping can't be determined synchronously, for example, lazy\n   * loaded one, it will throw an error.\n   *\n   * To make sure component mapping is available, determineMappings()\n   * should be called and completed first.\n   */\n  getMapping(componentType: string): CmsComponentMapping {\n    const componentConfig = this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  /**\n   * Checks, if component should be rendered as some components\n   * could be disabled for server side renderings\n   */\n  shouldRender(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getMapping(componentType)?.disableSSR);\n  }\n\n  /**\n   * Return DeferLoadingStrategy for component type.\n   */\n  getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    return this.config.cmsComponents?.[componentType]?.deferLoading;\n  }\n\n  /**\n   * Get cms driven child routes for components\n   */\n  getChildRoutes(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        routes.push(...(this.getMapping(componentType)?.childRoutes ?? []));\n      }\n    }\n    return routes;\n  }\n\n  /**\n   * Get cms driven guards for components\n   */\n  getGuards(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getMapping(componentType)?.guards?.forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  /**\n   * Get i18n keys associated with components\n   */\n  getI18nKeys(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        this.getMapping(componentType)?.i18nKeys?.forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsComponentsService } from '../../../services/cms-components.service';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsComponentsService.getMapping(type)?.providers ?? [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Applicable {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsComponentsService } from '../../services/cms-components.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService\n  ) {}\n\n  ngOnInit() {\n    this.cmsComponentsService\n      .determineMappings([this.cxComponentWrapper.flexType])\n      .subscribe(() => {\n        if (\n          this.cmsComponentsService.shouldRender(\n            this.cxComponentWrapper.flexType\n          )\n        ) {\n          this.launchComponent();\n        }\n      });\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsComponentsService.getMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n        this.injector.get(ChangeDetectorRef).markForCheck();\n      });\n  }\n\n  private decorate(elementRef: ElementRef): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      elementRef.nativeElement,\n      this.renderer,\n      { componentData: this.cxComponentWrapper }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return typeof componentMapping.component === 'function';\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { DefaultComponentHandler } from './default-component.handler';\nimport { switchMap } from 'rxjs/operators';\nimport { ComponentHandler } from './component-handler';\n\n/**\n * Lazy component handler used for launching lazy loaded cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LazyComponentHandler implements ComponentHandler {\n  constructor(protected defaultHandler: DefaultComponentHandler) {}\n\n  /**\n   * We want to mach dynamic import signature () => import('')\n   */\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      this.isNotClass(componentMapping.component)\n    );\n  }\n\n  private isNotClass(symbol: any): boolean {\n    const signature = symbol.toString().substr(0, 20).replace(' ', '');\n    return signature.startsWith('function()') || signature.startsWith('()=>');\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return from(componentMapping.component()).pipe(\n      switchMap((component) =>\n        this.defaultHandler.launcher(\n          { ...componentMapping, component },\n          viewContainerRef,\n          elementInjector\n        )\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { LazyComponentHandler } from './handlers/lazy-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: LazyComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  isCollapsed$: Observable<boolean>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected asmService: AsmService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n    this.isCollapsed$ = this.asmService\n      .getAsmUiState()\n      .pipe(map((uiState) => uiState.collapsed));\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AsmService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm-toggle-ui',\n  templateUrl: './asm-toggle-ui.component.html',\n  styleUrls: ['./asm-toggle-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmToggleUiComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  isCollapsed: boolean;\n\n  constructor(protected asmService: AsmService) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      this.asmService.getAsmUiState().subscribe((uiState) => {\n        this.isCollapsed = uiState.collapsed;\n      })\n    );\n  }\n\n  toggleUi(): void {\n    this.asmService.updateAsmUiState({ collapsed: !this.isCollapsed });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\n\nexport const defaultAsmLayoutConfig: LayoutConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AsmModule as AsmCoreModule,\n  I18nModule,\n  provideConfig,\n} from '@spartacus/core';\nimport { FormErrorsModule } from '../../shared/index';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { AsmToggleUiComponent } from './asm-toggle-ui/asm-toggle-ui.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { defaultAsmLayoutConfig } from './default-asm-layout.config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n    AsmToggleUiComponent,\n  ],\n  providers: [provideConfig(defaultAsmLayoutConfig)],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n\n    this.cart$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getActiveCartId(),\n      this.customerCouponService.getCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      ),\n    ]).pipe(\n      tap(\n        ([cart, activeCardId, customerCoupons]: [\n          Cart,\n          string,\n          CustomerCouponSearchResult\n        ]) => {\n          this.cartId = activeCardId;\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n        }\n      ),\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n    );\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n  selectiveCartEnabled: boolean;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.selectiveCartEnabled = this.selectiveCartService.isEnabled();\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartEnabled\n        ? this.selectiveCartService.getLoaded()\n        : of(false),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn && this.selectiveCartEnabled\n          ? cartLoaded && sflLoaded\n          : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, Cart, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.isEnabled()\n          ? this.selectiveCartService.getCart()\n          : of({} as Cart),\n        this.activeCartService.getLoading(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart, loadingCart]) => {\n          const exclude = (arr, args) =>\n            arr.filter((item) => args.every((arg) => arg !== item));\n          return Object.keys(cart).length === 0 && loadingCart\n            ? exclude(slots, [\n                'TopContent',\n                'CenterRightContentSlot',\n                'EmptyCartMiddleContent',\n              ])\n            : cart.totalItems\n            ? exclude(slots, ['EmptyCartMiddleContent'])\n            : selectiveCart.totalItems\n            ? exclude(slots, [\n                'EmptyCartMiddleContent',\n                'CenterRightContentSlot',\n              ])\n            : exclude(slots, ['TopContent', 'CenterRightContentSlot']);\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { SaveForLaterComponent } from './save-for-later.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          if (code !== this.currentDeliveryModeId) {\n            this.checkoutDeliveryService.setDeliveryMode(code);\n          }\n        }\n        this.currentDeliveryModeId = code;\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.checkoutDeliveryService.setDeliveryMode(code);\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n  protected checkoutStepUrlNext: string;\n  protected checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.routingService.go(this.checkoutStepUrlNext);\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CheckoutService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm: FormGroup = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  ErrorModel,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  addresses$: Observable<Address[]>;\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField = true;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries: Country[]) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles: Title[]) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions: Region[]) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(\n              (error: ErrorModel) => error.subject === 'titleCode'\n            )\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n\n    this.addresses$ = this.userAddressService.getAddresses();\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take, filter } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    this.selectedAddress$\n      .pipe(\n        filter((selected) => !!selected?.shippingAddress),\n        take(1)\n      )\n      .subscribe(() => this.goNext());\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nimport { CmsComponentsService } from '../../services/cms-components.service';\n\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position represents the unique key for a page slot on a single page, but can\n   * be reused cross pages.\n   *\n   * The position is used to find the CMS components for the page slot. It is also\n   * added as an additional CSS class so that layoutt can be applied.\n   */\n  @Input() set position(value: string) {\n    this.position$.next(value);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  /**\n   * Maintains css classes introduced by the host and adds additional classes.\n   */\n  @Input() @HostBinding() class: string;\n\n  /**\n   * Indicates that the page slot is the last page slot above the fold.\n   */\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  /**\n   * Indicates that the components of the page slot haven't been loaded as long\n   * as the isPending state is true.\n   */\n  @HostBinding('class.cx-pending') isPending = true;\n\n  /**\n   * Indicates that the page slot doesn't contain any components. This is no\n   * longer used in spartacus, but kept for backwards compatibility.\n   */\n  @HostBinding('class.has-components') @Input() hasComponents = false;\n\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  components: ContentSlotComponentData[];\n\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    distinctUntilChanged(this.isDistinct)\n  );\n\n  /** Observes the components for the given page slot. */\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\n    map((slot) => slot?.components ?? [])\n  );\n\n  protected subscription: Subscription = new Subscription();\n\n  /** Keeps track of the pending components that must be loaded for the page slot */\n  private pendingComponentCount = 0;\n\n  /** Tracks the last used position, in case the page slot is used dynamically */\n  private lastPosition: string;\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\n        this.components = value?.components || [];\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  protected decorate(slot: ContentSlotData): void {\n    let cls = this.class || '';\n\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\n      cls = cls.replace(this.lastPosition, '');\n    }\n    if (this.position$.value) {\n      cls += ` ${this.position$.value}`;\n      this.lastPosition = this.position$.value;\n    }\n\n    // host bindings\n    this.pending = slot?.components?.length || 0;\n    this.hasComponents = slot?.components?.length > 0;\n    if (cls && cls !== this.class) {\n      this.class = cls;\n    }\n\n    this.addSmartEditSlotClass(slot);\n  }\n\n  /**\n   * Sets the pending count for the page slot components. Once all pending components are\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\n   */\n  protected set pending(count: number) {\n    this.pendingComponentCount = count;\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  protected get pending(): number {\n    return this.pendingComponentCount;\n  }\n\n  /*\n   * Is triggered when a component is added to the view. This is used to\n   * update the pending count\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pending--;\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether the component should be\n   * rendered instantly or whether it should be deferred.\n   */\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(\n      componentType\n    );\n    return { deferLoading };\n  }\n\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\n    return (\n      current.components &&\n      old.components?.length === current.components.length &&\n      !old.components.find(\n        (el, index) => el.uid !== current.components[index].uid\n      )\n    );\n  }\n\n  private addSmartEditSlotClass(slot: ContentSlotData): void {\n    if (slot) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.elementRef.nativeElement,\n        this.renderer,\n        { slotData: slot }\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService implements OnDestroy {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  private subscription: Subscription;\n\n  init() {\n    this.subscription = this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory implements OnDestroy {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  private subscription: Subscription;\n\n  build() {\n    this.subscription = this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsDialogModule } from '../../shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsDialogModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsComponentsService.getGuards(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected translation: TranslationService,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsComponentsService.getI18nKeys(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsComponentsService } from './cms-components.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(\n    private router: Router,\n    private cmsComponentsService: CmsComponentsService\n  ) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsComponentsService.getChildRoutes(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\nimport { CmsComponentsService } from '../services';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    protected cmsService: CmsService,\n    protected cmsRoutes: CmsRoutesService,\n    protected cmsI18n: CmsI18nService,\n    protected cmsGuards: CmsGuardsService,\n    protected cmsComponentsService: CmsComponentsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsComponentsService.determineMappings(componentTypes)\n      ),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    protected cmsService: CmsService,\n    protected winRef: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilChanged((x, y) => x?.components === y?.components),\n    switchMap((data) =>\n      combineLatest(\n        (data?.components ?? '').split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab) {\n                return undefined;\n              }\n\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    this.activeTabNum =\n      this.winRef.nativeWindow?.history?.state?.activeTab ?? this.activeTabNum;\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() amendOrderForm: FormGroup;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n\n  constructor(protected routingService: RoutingService) {}\n\n  continue(event: Event): void {\n    if (this.amendOrderForm.valid) {\n      this.routingService.go({\n        cxRoute: this.forwardRoute,\n        params: { code: this.orderCode },\n      });\n    } else {\n      this.amendOrderForm.markAllAsTouched();\n      event.stopPropagation();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantityToCancel(control: FormControl) {\n  if (!control.value) {\n    return null;\n  }\n  const quantity = Object.values(control.value).reduce(\n    (acc: number, val: number) => acc + val,\n    0\n  );\n  return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup(\n      {},\n      { validators: [ValidateQuantityToCancel] }\n    );\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  ItemCounterModule,\n  MediaModule,\n} from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup) {\n    if (form.valid) {\n      this.orderAmendService.save();\n    } else {\n      form.markAllAsTouched();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order?.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\nimport { FormErrorsModule } from '../../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm: FormGroup = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return data\n          ? {\n              title: data.name,\n              children: [nav],\n            }\n          : undefined;\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    const wrapper = <HTMLElement>node.querySelector('.wrapper');\n    const body = <HTMLElement>node.closest('body');\n    if (wrapper) {\n      this.renderer.removeStyle(wrapper, 'margin-left');\n      if (\n        wrapper.offsetLeft + wrapper.offsetWidth >\n        body.offsetLeft + body.offsetWidth\n      ) {\n        this.renderer.setStyle(\n          wrapper,\n          'margin-left',\n          `${node.offsetWidth - wrapper.offsetWidth}px`\n        );\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c?.displayProducts === 'true' || c?.displayProducts === true,\n            displayProductImages:\n              <any>c?.displayProductImages === 'true' ||\n              c?.displayProductImages === true,\n            displaySuggestions:\n              <any>c?.displaySuggestions === 'true' ||\n              c?.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d?.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data?.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) => {\n      this.mainMediaContainer.next(p.images?.PRIMARY ? p.images.PRIMARY : {});\n    })\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RouterState,\n  RoutingService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\nimport { ProductListRouteParams, SearchCriteria } from './product-list.model';\n\n/**\n * The `ProductListComponentService` is used to search products. The service is used\n * on the Product Listing Page, for listing products and the facet navigation.\n *\n * The service exposes the product search results based on the category and search\n * route parameters. The route parameters are used to query products by the help of\n * the `ProductSearchService`.\n */\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  /**\n   * @deprecated will be removed in version 3.0 as this is the\n   *   subscription is longer used\n   */\n  protected sub: Subscription;\n\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  /**\n   * Emits the search results for the current search query.\n   *\n   * The `searchResults$` is _not_ concerned with querying, it only observes the\n   * `productSearchService.getResults()`\n   */\n  protected searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  /**\n   * Observes the route and performs a search on each route change.\n   *\n   * Context changes, such as language and currencies are also taken\n   * into account, so that the search is performed again.\n   */\n  protected searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    ...this.siteContext,\n  ]).pipe(\n    map(([routerState, ..._context]) => (routerState as RouterState).state),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream is used for the Product Listing and Product Facets.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  /**\n   * Expose the `SearchCriteria`. The search criteria are driven by the route parameters.\n   *\n   * This search route configuration is not yet configurable\n   * (see https://github.com/SAP/spartacus/issues/7191).\n   */\n  protected getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  /**\n   * Resolves the search query from the given `ProductListRouteParams`.\n   */\n  protected getQueryFromRouteParams({\n    query,\n    categoryCode,\n    brandCode,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n\n    // TODO: drop support for brands as they should be treated\n    // similarly as any category.\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  /**\n   * Performs a search based on the given search criteria.\n   *\n   * The search is delegated to the `ProductSearchService`.\n   */\n  protected search(criteria: SearchCriteria): void {\n    const currentPage = criteria.currentPage;\n    const pageSize = criteria.pageSize;\n    const sortCode = criteria.sortCode;\n\n    this.productSearchService.search(\n      criteria.query,\n      // TODO: consider dropping this complex passing of cleaned object\n      Object.assign(\n        {},\n        currentPage && { currentPage },\n        pageSize && { pageSize },\n        sortCode && { sortCode }\n      )\n    );\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  /**\n   * Sort the search results by the given sort code.\n   */\n  sort(sortCode: string): void {\n    this.route({ sortCode });\n  }\n\n  /**\n   * Routes to the next product listing page, using the given `queryParams`. The\n   * `queryParams` support sorting, pagination and querying.\n   *\n   * The `queryParams` are delegated to the Angular router `NavigationExtras`.\n   */\n  protected route(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n\n  /**\n   * The site context is used to update the search query in case of a\n   * changing context. The context will typically influence the search data.\n   *\n   * We keep this private for now, as we're likely refactoring this in the next\n   * major version.\n   */\n  private get siteContext(): Observable<string>[] {\n    // TODO: we should refactor this so that custom context will be taken\n    // into account automatically. Ideally, we drop the specific context\n    // from the constructor, and query a ContextService for all contexts.\n\n    return [this.languageService.getActive(), this.currencyService.getActive()];\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  setQuery(query: string): void {\n    this.route({ query, currentPage: undefined });\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  viewPage(pageNumber: number): void {\n    this.route({ currentPage: pageNumber });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      breadcrumb.facetValueCode === params.categoryCode\n    );\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: facet.topValueCount || 0,\n          maxVisible: facet.topValueCount || 0,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string): { [key: string]: string } {\n    return {\n      // to avoid encoding issues with facets that have space (' ') in their name,\n      // we replace the decoded '+' back to empty space ' '.\n      // For more, see https://github.com/SAP/spartacus/issues/7348\n      query: new HttpUrlEncodingCodec().decodeValue(query).replace(/\\+/g, ' '),\n    };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given _active_ facet when there\n   * the original facets is not available. This happens for non multi-valued facets.\n   *\n   * With this approach, the we keep the focus, either at the facet list or on the\n   * active facets.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return facetList.facets?.find((f) =>\n      f.values?.find((val) => val.name === facet.facetValueName)\n    )\n      ? ''\n      : facet.facetValueName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  private _isDialog: boolean;\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input()\n  set isDialog(value: boolean) {\n    this._isDialog = value;\n    if (value) {\n      this.renderer.addClass(document.body, 'modal-open');\n    }\n  }\n\n  get isDialog(): boolean {\n    return this._isDialog;\n  }\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  @HostListener('click') handleClick() {\n    this.close();\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef,\n    protected renderer: Renderer2\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.renderer.removeClass(document.body, 'modal-open');\n    this.closeList.emit(event);\n  }\n\n  block(event?: MouseEvent) {\n    event.stopPropagation();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n  StoreFinderConfig,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n  radius: number;\n  searchQuery: StoreFinderSearchQuery;\n  geolocation: GeoPoint;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    protected config: StoreFinderConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.radius = this.config.googleMaps.radius;\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}