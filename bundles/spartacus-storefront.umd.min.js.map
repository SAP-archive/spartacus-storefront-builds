{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/web-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/launch-dialog/config/default-launch-config.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render-strategy.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render-strategy.service.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render-strategy.service.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","IconResourceType","SkipLinkScrollPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","IconConfig","DomSanitizer","Injectable","providedIn","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","provide","useExisting","Config","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","pop","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","CmsMappingService","platformId","missingComponents","getComponentMapping","componentType","componentConfig","console","warn","isComponentEnabled","isPlatformServer","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","childRoutes","CmsConfig","Inject","args","PLATFORM_ID","ComponentHandler","ComponentHandlerService","handlers","invalidMappings","resolve","componentMapping","matchedHandlers","filter","handler","hasMatch","sort","a","getPriority","isDevMode","has","getLauncher","viewContainerRef","elementInjector","launcher","Optional","CmsInjectorService","cmsMapping","injector","getCmsData","uid","parentInjector","data$","get","CmsService","getComponentData","getInjector","configProviders","Injector","CmsComponentData","useValue","parent","ComponentWrapperDirective","vcr","cmsMappingService","dynamicAttributeService","componentHandler","cmsInjector","cmsService","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","isLaunchInSmartEdit","addDynamicAttributes","properties","ViewContainerRef","DynamicAttributeService","Directive","DefaultComponentHandler","Observable","subscriber","factory","getComponentFactory","createComponent","undefined","location","destroy","ComponentFactoryResolver","resolveComponentFactory","CxApiService","auth","cart","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","ActiveCartService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","WebComponentHandler","platform","loadedWebComponents","webElement","active","disposeFunc","remove","initWebComponent","then","elementName","cmsComponentData","cxApi","element","parentElement","Promise","path","script","setAttribute","body","isPlatformBrowser","onload","chainedOnload_1","DOCUMENT","PageComponentModule","multi","AsmComponentService","authService","asmAuthService","routingService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","of","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","globalMessageService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","switchMap","access_token","handleCustomerSessionStartRedirection","GlobalMessageType","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","HostBinding","encapsulation","ViewEncapsulation","None","BaseFocusService","BaseFocusDirective","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","tagName","toLowerCase","hasAttribute","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","HostListener","BlockFocusDirective","block","PersistFocusService","focus","Map","group","set","clear","delete","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","event","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","querySelectorAll","findFirstFocusable","autofocus","el","isHidden","findFocusable","locked","invisible","suffix","map","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","EventEmitter","emit","Output","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","v","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","shouldUnlockAfterAutofocus","setTimeout","toString","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","DIALOG_TYPE","LAUNCH_CALLER","SkipLinkService","keyboardFocusService","skipLinks$","BehaviorSubject","getSkipLinks","found","skipLinks","skipLink","existing","splice","getSkipLinkIndexInArray","i18nKey","position","scrollToTarget","HTMLElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_LAUNCH_CONFIG","launch","ASM","outlet","SKIP_LINKS","LaunchRenderStrategy","renderedCallers","shouldRender","caller","some","_config","LaunchDialogService","renderStrategies","launchConfig","findConfiguration","getStrategy","render","strategy","match","LaunchConfig","AsmEnablerService","launchDialogService","load","isEnabled","addUi","isLaunched","isUsedBefore","setItem","params","getItem","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","deps","asmEnablerService","BREAKPOINT","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","markForCheck","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","floor","seconds","slice","Pipe","name","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","subscription","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","controls","valueChanges","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","PaginationItemType","PaginationNavigationPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","step","allowZero","readonly","input","control","markAsDirty","decrement","getControl","_control$","startWith","getValidCount","emitEvent","max","ItemCounterModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","_","number","label","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","BEFORE","AFTER","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","fromEvent","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","FormErrorsComponent","_control","errors$","statusChanges","errors","entries","invalid","dirty","touched","FormErrorsModule","ViewConfigModule","forRoot","ngModule","ViewConfigModule_1","view","ViewConfig","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entryNumber","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","DeliveryModePreferences","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","isLevel","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","getLoaded","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","slots","selectiveCart","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","features","CartComponentModule","CartModule","CheckoutStepType","CheckoutConfig","OutletPosition","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","keys","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","catch","verifyAddress","countrySelected","regionSelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","payment","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","templateOrFactory","REPLACE","store","stacked","templateRef","removeValueOrAll","newValue","val","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","componentFactoryResolver","outletService","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","InlineRenderStrategy","inline","OutletRefDirective","tpl","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","first","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletRendererService","outletRefs","register","cxOutlet","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","cxOutletDefer","build","changes","hostElement","getHostElement","buildOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","OutletModule","OutletRenderStrategy","RoutingRenderStrategy","_caller","LaunchDialogModule","LaunchDialogModule_1","provideConfig","LayoutModule","PageSlotComponent","cdRef","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","addSmartEditContract","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","replace","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","getNextPageContext","shouldReloadCmsData","isFeatureEnabled","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","typeCode","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","paymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","observeOn","asyncScheduler","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","querySelector","navBar","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","y","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","ProductDetailOutlets","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductFacetNavigationComponent","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","toggleFacet","getVisibleFacetValues","values","topValueCount","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","viewStore","prepareRouteUrl","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":";;;;;;;;;;;;;;oFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IC7BKK,ED6BDC,EAAW,WAQlB,OAPAA,EAAWb,OAAOc,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIb,KADTY,EAAIG,UAAUF,GACOjB,OAAOU,UAAUL,eAAegB,KAAKL,EAAGZ,KAAIW,EAAEX,GAAKY,EAAEZ,IAE9E,OAAOW,IAEKO,MAAMd,KAAMW,YAezB,SAASI,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2H7B,EAAvH8B,EAAIT,UAAUC,OAAQS,EAAID,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAO3B,OAAO8B,yBAAyBL,EAAQC,GAAOC,EACrH,GAAuB,iBAAZI,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASR,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIV,EAAIO,EAAWJ,OAAS,EAAGH,GAAK,EAAGA,KAASnB,EAAI0B,EAAWP,MAAIY,GAAKD,EAAI,EAAI9B,EAAE+B,GAAKD,EAAI,EAAI9B,EAAE2B,EAAQC,EAAKG,GAAK/B,EAAE2B,EAAQC,KAASG,GAChJ,OAAOD,EAAI,GAAKC,GAAK7B,OAAOiC,eAAeR,EAAQC,EAAKG,GAAIA,EAGzD,SAASK,EAAQC,EAAYC,GAChC,OAAO,SAAUX,EAAQC,GAAOU,EAAUX,EAAQC,EAAKS,IAgDpD,SAASE,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWxB,EAAI,EAChE,OAAIsB,EAAUA,EAAElB,KAAKiB,GACd,CACHI,KAAM,WAEF,OADIJ,GAAKrB,GAAKqB,EAAElB,SAAQkB,OAAI,GACrB,CAAEK,MAAOL,GAAKA,EAAErB,KAAM2B,MAAON,KAKzC,SAASO,EAAOP,EAAGpB,GACtB,IAAIqB,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBT,EAAYiB,EAA3B7B,EAAIsB,EAAElB,KAAKiB,GAAOS,EAAK,GAC3B,IACI,WAAc,IAAN7B,GAAgBA,KAAM,MAAQW,EAAIZ,EAAEyB,QAAQE,MAAMG,EAAGC,KAAKnB,EAAEc,OAExE,MAAOM,GAASH,EAAI,CAAEG,MAAOA,GACjC,QACQ,IACQpB,IAAMA,EAAEe,OAASL,EAAItB,EAAU,SAAIsB,EAAElB,KAAKJ,GAE1D,QAAkB,GAAI6B,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGJ,SAASG,IACZ,IAAK,IAAIH,EAAK,GAAI9B,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3C8B,EAAKA,EAAGI,OAAON,EAAO1B,UAAUF,KACpC,OAAO8B,GC3ICnC,EAAAA,EAAAA,YAAAA,EAAAA,UAAS,KACnB,KAAA,OACAA,EAAA,OAAA,SACAA,EAAA,KAAA,OACAA,EAAA,KAAA,OACAA,EAAA,KAAA,OACAA,EAAA,KAAA,OACAA,EAAA,WAAA,aACAA,EAAA,WAAA,aACAA,EAAA,YAAA,cACAA,EAAA,MAAA,QACAA,EAAA,MAAA,QACAA,EAAA,QAAA,UACAA,EAAA,QAAA,UACAA,EAAA,KAAA,OACAA,EAAA,YAAA,cACAA,EAAA,KAAA,OACAA,EAAA,YAAA,cACAA,EAAA,YAAA,cACAA,EAAA,OAAA,SACAA,EAAA,SAAA,WACAA,EAAA,MAAA,QACAA,EAAA,OAAA,SACAA,EAAA,MAAA,QACAA,EAAA,YAAA,kBA0CUwC,IAvCZ,cAuCYA,EAAAA,EAAAA,mBAAAA,EAAAA,iBAAgB,KAK1B,IAAA,MAKAA,EAAA,KAAA,OAKAA,EAAA,KAAA,WCtEUC,ECTCC,EAAoC,CAC/CC,KAAM,CACJC,QAAS,CACPC,OAAQ,gBACRC,KAAM,uBACNC,KAAM,qBACNC,KAAM,cACNC,KAAM,kBACNC,KAAM,cACNC,WAAY,oBACZC,YAAa,qBACbC,WAAY,oBACZC,MAAO,4BACPC,QAAS,8BACTC,QAAS,sBACTC,MAAO,eACPC,KAAM,iBACNC,YAAa,uBACbC,KAAM,iBACNC,YAAa,wBACbC,YAAa,qBACbC,SAAU,eACVC,OAAQ,cACRC,MAAO,sBACPC,OAAQ,gBACRC,MAAO,eACPC,YAAa,gBAEfC,UAAW,CACT,CACEC,KAAM9B,EAAAA,iBAAiB+B,KACvBC,IAAK,2ECjBX,SAAAC,EACYC,EACAC,EACAC,GAFAhF,KAAA8E,OAAAA,EACA9E,KAAA+E,WAAAA,EACA/E,KAAAgF,UAAAA,EAJJhF,KAAAiF,gBAAkB,UAU1BJ,EAAA3E,UAAAgF,QAAA,SAAQR,GACN,OAAI1E,KAAKmF,eAAeT,EAAM9B,EAAAA,iBAAiBwC,KACtCpF,KAAKgF,UAAUK,wBACpB,yBAAyBrF,KAAKsF,WAAWZ,GAAK,kBAG9C1E,KAAKmF,eAAeT,EAAM9B,EAAAA,iBAAiB2C,MACtCvF,KAAKgF,UAAUK,wBAAwBrF,KAAKwF,UAAUd,SAD/D,GASFG,EAAA3E,UAAAuF,gBAAA,SAAgBC,GACd,OAAO1F,KAAKwF,UAAUE,IAAa,IAO7Bb,EAAA3E,UAAAiF,eAAR,SACEO,EACAC,GAEA,OACE3F,KAAK4F,OAAOnB,aACVzE,KAAK4F,OAAOnB,UAAUoB,MACtB,SAACC,GACC,OAAAA,EAAIC,OAASD,EAAIpB,OAASiB,GAAgBG,EAAIC,MAAMC,SAASN,OAW7Db,EAAA3E,UAAAoF,WAAR,SAAmBI,GACjB,IAAMO,EAAcjG,KAAK4F,OAAOnB,UAAUoB,MACxC,SAACC,GACC,OAAAA,EAAIpB,OAAS9B,EAAAA,iBAAiBwC,KAC9BU,EAAIC,OACJD,EAAIC,MAAMC,SAASN,MAEvB,GAAIO,EACF,OAAOA,EAAYrB,IACZqB,EAAYrB,IAAG,IAAI5E,KAAKwF,UAAUE,GACrC,IAAI1F,KAAKwF,UAAUE,IAY3Bb,EAAA3E,UAAAgG,gBAAA,SAAgBR,GACd,IAAMS,EAA+BnG,KAAKoG,aACxCV,EACA9C,EAAAA,iBAAiB+B,MAEnB,GACEwB,GACAA,EAASvB,MACR5E,KAAKiF,gBAAgBe,SAASG,EAASvB,KACxC,CACA5E,KAAKiF,gBAAgBzC,KAAK2D,EAASvB,KACnC,IAAMyB,EAAOrG,KAAK8E,OAAOwB,SAASC,qBAAqB,QAAQ,GACzDC,EAAOxG,KAAK8E,OAAOwB,SAASG,cAAc,QAChDD,EAAKE,IAAM,aACXF,EAAK9B,KAAO,WACZ8B,EAAKG,KAAOR,EAASvB,IACrByB,EAAKO,YAAYJ,KAIb3B,EAAA3E,UAAAkG,aAAR,SACEV,EACAC,GAEA,GAAK3F,KAAK4F,OAAOnB,UAAjB,CAIA,IAAI0B,EAAWnG,KAAK4F,OAAOnB,UAAUoB,MACnC,SAACC,GACC,OAAAA,EAAIpB,OAASiB,GAAgBG,EAAIC,OAASD,EAAIC,MAAMC,SAASN,MAQjE,OALKS,IACHA,EAAWnG,KAAK4F,OAAOnB,UAAUoB,MAC/B,SAACC,GAAQ,OAACA,EAAIpB,OAASiB,IAAiBG,EAAIC,OAAUD,EAAIC,QAAU,OAGjEI,IAGTtB,EAAA3E,UAAAsF,UAAA,SAAUE,GACR,GAAI1F,KAAK4F,QAAU5F,KAAK4F,OAAO5C,SAAWhD,KAAK4F,OAAO5C,QAAQ0C,GAC5D,OAAO1F,KAAK4F,OAAO5C,QAAQ0C,IAI/BlG,OAAAiC,eAAYoD,EAAA3E,UAAA,SAAM,KAAlB,WACE,OAAOF,KAAK+E,WAAWhC,+EAxHL8D,EAAAA,iBACIC,SACDC,EAAAA,yLALZlC,EAAiB9D,EAAA,CAH7BiG,EAAAA,WAAW,CACVC,WAAY,UAEDpC,MCebqC,EAAA,WA4BE,SAAAA,EACYC,EACAC,EACAC,GAFArH,KAAAmH,WAAAA,EACAnH,KAAAoH,WAAAA,EACApH,KAAAqH,SAAAA,EAoCd,OA9DW7H,OAAAiC,eAAIyF,EAAAhH,UAAA,SAAM,KAAV,SAAWwE,GAClB1E,KAAKsH,QAAQ5C,oCAONlF,OAAAiC,eAAIyF,EAAAhH,UAAA,OAAI,KAAR,SAASwE,GAChB1E,KAAKsH,QAAQ5C,oCAoBLwC,EAAAhH,UAAAoH,QAAV,SAAkB5C,GACXA,GAAyB,KAATA,IAGrB1E,KAAK+C,KAAO/C,KAAKmH,WAAWjC,QAAQR,GACpC1E,KAAKuH,gBAAgB7C,GACrB1E,KAAKmH,WAAWjB,gBAAgBxB,KAMxBwC,EAAAhH,UAAAqH,gBAAV,SAA0B7C,GAA1B,IAAA8C,EAAAxH,KACEA,KAAKqH,SAASI,SAASzH,KAAK0H,KAAM,WAE9B1H,KAAK2H,cACP3H,KAAK2H,aAAaC,SAAQ,SAACC,GACzB,OAAAL,EAAKH,SAASS,YAAYN,EAAKE,KAAMG,MAIzC7H,KAAK2H,aAAe3H,KAAKmH,WAAW1B,gBAAgBf,GAAMqD,MAAM,KAEhE/H,KAAK2H,aAAaC,SAAQ,SAACC,GACb,KAARA,GACFL,EAAKH,SAASI,SAASD,EAAKE,KAAMG,OAKxCrI,OAAAiC,eAAcyF,EAAAhH,UAAA,OAAI,KAAlB,WACE,OAAOF,KAAKoH,WAAWY,wFApCDnD,SACAoD,EAAAA,kBACFC,EAAAA,aA1BbnH,EAAA,CAARoH,EAAAA,oCAQQpH,EAAA,CAARoH,EAAAA,kCAbUjB,EAAanG,EAAA,CAJzBqH,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,2DAEWpB,GAAb,gBCbA,SAAAqB,KAAyB,OAAZA,EAAUxH,EAAA,CATtByH,EAAAA,SAAS,CACRC,aAAc,CAACvB,GACfwB,QAAS,CAACC,EAAAA,cACVC,UAAW,CACTC,EAAAA,qBAAqB/F,GACrB,CAAEgG,QAAShC,EAAYiC,YAAaC,EAAAA,SAEtCC,QAAS,CAAC/B,MAECqB,MCTbW,EAAA,SAAAC,GAAA,SAAAD,mDAA2C,OAAbpJ,EAAAoJ,EAAAC,GAAaD,EAA3C,CAA8BE,EAAAA,aCI9BC,EAAA,WAEE,SAAAA,EAAoBC,GAAAtJ,KAAAsJ,gBAAAA,EADZtJ,KAAAuJ,OAAqB,UAG7BF,EAAAnJ,UAAAsJ,KAAA,SAAKC,EAAcC,GACjB,IAAIC,EAKJ,OAHAA,EAAc3J,KAAKsJ,gBAAgBE,KAAKC,EAASC,GACjD1J,KAAKuJ,OAAO/G,KAAKmH,GAEVA,GAGTN,EAAAnJ,UAAA0J,eAAA,WACE,IAAMC,EAAQ7J,KAAKuJ,OAAOvJ,KAAKuJ,OAAO3I,OAAS,GAC/C,OAAOiJ,GAAgB,MAGzBR,EAAAnJ,UAAA4J,mBAAA,SAAmBC,GACjB,IAAMF,EAAkB7J,KAAK4J,iBAEzBC,IACFA,EAAMG,QAAQD,GACd/J,KAAKuJ,OAAOU,QAIhBZ,EAAAnJ,UAAAgK,iBAAA,SAAiBH,GACf,IAAMF,EAAkB7J,KAAK4J,iBAEzBC,IACFA,EAAMM,MAAMJ,GACZ/J,KAAKuJ,OAAOU,iDA9BqBG,EAAAA,qIAF1Bf,EAAYtI,EAAA,CAHxBiG,EAAAA,WAAW,CACVC,WAAY,UAEDoC,GAAb,gBCgBE,SAAAgB,EACUzE,EACA0E,EACAC,GAFAvK,KAAA4F,OAAAA,EACA5F,KAAAsK,aAAAA,EACAtK,KAAAuK,yBAAAA,EAbFvK,KAAAwK,cAAgB,IAAIC,EAAAA,aAE5BzK,KAAA0K,sBAAuB,EACvB1K,KAAA2K,UAAYvK,EAAAA,UACZJ,KAAA4K,iBAA6B,GAWvBC,QAAQ7K,KAAK4F,OAAOkF,qBACtB9K,KAAK0K,qBAAuB1K,KAAK4F,OAAOkF,kBAAkBC,6BACtDF,QAAQ7K,KAAK4F,OAAOkF,kBAAkBF,oBACxC5K,KAAK4K,iBAAmB5K,KAAK4F,OAAOkF,kBAAkBF,mBAuG9D,OAlGEP,EAAAnK,UAAA8K,SAAA,WACEhL,KAAKiL,WAAajL,KAAKuK,yBAAyBW,eAChDlL,KAAKmL,UAAYnL,KAAKuK,yBAAyBa,cAC/CpL,KAAKqL,SAAWrL,KAAKuK,yBAAyBe,2BAGhDjB,EAAAnK,UAAAqL,WAAA,SAAWxB,GACT/J,KAAKsK,aAAaJ,iBAAiBH,IAGrCM,EAAAnK,UAAAsL,UAAA,WAAA,IAAAhE,EAAAxH,KACEA,KAAKwK,cAAciB,IACjBC,EAAAA,cAAc,CAAC1L,KAAKiL,WAAYjL,KAAKmL,YAClCQ,KACCC,EAAAA,KAAK,GACLC,EAAAA,uBACAC,EAAAA,KAAI,SAACC,OAAAC,EAAA3J,EAAA0J,EAAA,GAACE,EAAAD,EAAA,GAAWE,EAAAF,EAAA,GACf,OAAAC,EAAUrE,SAAQ,SAACU,GACjB,IAAM6D,EAAU3E,EAAK4E,wBAAwB9D,EAAU4D,GACvD,GAAI1E,EAAK+C,yBAAyB8B,eAAeF,GAAU,CACzD,GAAI3E,EAAK8E,kBAAkBhE,GACzB,OAGFd,EAAK+C,yBAAyBgC,gBAAgBjE,EAASkE,YAK9DC,aAELzM,KAAKuL,WAAW,cAGlBlB,EAAAnK,UAAAwM,SAAA,WAAA,IAAAlF,EAAAxH,KACEA,KAAKwK,cAAciB,IACjBC,EAAAA,cAAc,CAAC1L,KAAKiL,WAAYjL,KAAKmL,YAClCQ,KACCC,EAAAA,KAAK,GACLC,EAAAA,uBACAC,EAAAA,KAAI,SAACC,OAAAC,EAAA3J,EAAA0J,EAAA,GAACE,EAAAD,EAAA,GAAWE,EAAAF,EAAA,GACf,OAAAC,EAAUrE,SAAQ,SAACU,GACjB,IAAM6D,EAAU3E,EAAK4E,wBAAwB9D,EAAU4D,GACvD,GACGC,GAAmC,MAAxBA,EAAQQ,cACpBnF,EAAK+C,yBAAyBqC,mBAAmBT,GACjD,CACA,GAAI3E,EAAK8E,kBAAkBhE,GACzB,OAGFd,EAAK+C,yBAAyBsC,YAAYvE,EAASkE,YAK1DC,aAELzM,KAAKuL,WAAW,aAGVlB,EAAAnK,UAAAoM,kBAAR,SAA0BhE,GACxB,OACEuC,QAAQ7K,KAAK4F,OAAOkF,oBACpBD,QAAQ7K,KAAK4F,OAAOkF,kBAAkBF,mBACtC5K,KAAK4F,OAAOkF,kBAAkBF,iBAAiB5E,SAASsC,EAASkE,KAIrEnC,EAAAnK,UAAA4M,gBAAA,SAAgBf,OACdgB,EAAAhB,EAAAgB,MACAzE,EAAAyD,EAAAzD,SAKIyE,EACF/M,KAAKuK,yBAAyBsC,YAAYvE,EAASkE,IAEnDxM,KAAKuK,yBAAyBgC,gBAAgBjE,EAASkE,KAI3DnC,EAAAnK,UAAAkM,wBAAA,SACE9D,EACA4D,gBAAA,IAAAA,IAAAA,EAAA,QAEA,IAAsB,IAAAc,EAAAnL,EAAAqK,GAAQe,EAAAD,EAAA9K,QAAA+K,EAAA7K,KAAA6K,EAAAD,EAAA9K,OAAE,CAA3B,IAAMiK,EAAOc,EAAA9K,MAChB,GAAImG,EAASkE,KAAOL,EAAQe,aAC1B,OAAOf,oGAGX,OAAO,MAGT9B,EAAAnK,UAAAiN,YAAA,WACEnN,KAAKwK,cAAc4C,wDA5GHC,EAAAA,+BACMhE,SACYiE,EAAAA,4BAdzBjD,EAA+BtJ,EAAA,CAJ3CqH,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAA,olEAEW+B,mBCEX,SAAAkD,EACUjD,EACAC,GADAvK,KAAAsK,aAAAA,EACAtK,KAAAuK,yBAAAA,EARFvK,KAAAwK,cAAgB,IAAIC,EAAAA,aAE5BzK,KAAAwN,eAEIxN,KAAKuK,yBAAyBkD,kBA+BpC,OAxBEF,EAAArN,UAAAwN,YAAA,WACE1N,KAAK2N,aACL3N,KAAKsK,aAAad,KAAKa,EAAiC,CACtDuD,UAAU,EACVC,KAAM,QAIVN,EAAArN,UAAAwM,SAAA,WAAA,IAAAlF,EAAAxH,KACEA,KAAKwK,cAAciB,IACjBzL,KAAKuK,yBACFuD,kBACAnC,KAAKG,EAAAA,KAAI,WAAM,OAAAtE,EAAKmG,iBACpBlB,cAIPc,EAAArN,UAAAyN,WAAA,WACE3N,KAAKuK,yBAAyBwD,uBAAsB,IAGtDR,EAAArN,UAAAiN,YAAA,WACEnN,KAAKwK,cAAc4C,wDA1BG/D,SACYiE,EAAAA,4BATzBC,EAAyCxM,EAAA,CAJrDqH,EAAAA,UAAU,CACTC,SAAU,yCACVC,SAAA,8/BAEWiF,mBCFX,SAAAS,EAAsB1D,GAAAtK,KAAAsK,aAAAA,EAQxB,OANE0D,EAAA9N,UAAA+N,WAAA,WACEjO,KAAKsK,aAAad,KAAKa,EAAiC,CACtDuD,UAAU,EACVC,KAAM,iDAL0BxE,KADzB2E,EAAmCjN,EAAA,CAJ/CqH,EAAAA,UAAU,CACTC,SAAU,mCACVC,SAAA,gLAEW0F,mBCgCb,SAAAE,KAAqD,OAAxCA,EAAsCnN,EAAA,CA5BlDyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcwF,EAAAA,WAAYC,EAAAA,sBACpCxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbd,0CAA2C,CACzCe,UAAWf,EACXgB,aAAcC,EAAAA,qBAAqBC,SAErCT,oCAAqC,CACnCM,UAAWN,OAKnBvF,aAAc,CACZ8E,EACAS,GAEF/E,QAAS,CACPsE,EACAS,GAEFU,gBAAiB,CACfnB,EACAS,MAGSE,MC7BbS,EAAA,WAGE,SAAAA,EACU/I,EACqBgJ,GADrB5O,KAAA4F,OAAAA,EACqB5F,KAAA4O,WAAAA,EAJvB5O,KAAA6O,kBAA8B,UAO/BF,EAAAzO,UAAA4O,oBAAP,SAA2BC,SACnBC,EAA2C,QAA5BjD,EAAG/L,KAAK4F,OAAOyI,qBAAa,IAAAtC,OAAA,EAAAA,EAAGgD,GAYpD,OAVKC,GACEhP,KAAK6O,kBAAkB7I,SAAS+I,KACnC/O,KAAK6O,kBAAkBrM,KAAKuM,GAC5BE,QAAQC,KACN,iEAAiEH,EAAa,OAC9E,uEAKCC,GAGTL,EAAAzO,UAAAiP,mBAAA,SAAmBJ,SAEjB,QADcK,EAAAA,iBAAiBpP,KAAK4O,cACqB,QAA3C7C,EAAI/L,KAAK8O,oBAAoBC,UAAc,IAAAhD,OAAA,EAAAA,EAAEsD,cAG7DV,EAAAzO,UAAAoP,uBAAA,SAAuBC,WACfC,EAAS,OACf,IAA4B,IAAAC,EAAA5N,EAAA0N,GAAcG,EAAAD,EAAAvN,QAAAwN,EAAAtN,KAAAsN,EAAAD,EAAAvN,OAAE,CAAvC,IAAM6M,EAAaW,EAAAvN,MAClBnC,KAAKmP,mBAAmBJ,IAC1BS,EAAOhN,KAAI1B,MAAX0O,EAAM9M,EAAS1C,KAAK2P,sBAAsBZ,uGAG9C,OAAOS,GAGTb,EAAAzO,UAAA0P,uBAAA,SAAuBL,WACfM,EAAS,IAAIC,QACnB,IAA4B,IAAAC,EAAAlO,EAAA0N,GAAcS,EAAAD,EAAA7N,QAAA8N,EAAA5N,KAAA4N,EAAAD,EAAA7N,OAAE,CAAvC,IAAM6M,EAAaiB,EAAA7N,MACtBnC,KAAKiQ,sBAAsBlB,GAAenH,SAAQ,SAACsI,GACjD,OAAAL,EAAOpE,IAAIyE,wGAGf,OAAOvQ,MAAMwQ,KAAKN,IAGpBlB,EAAAzO,UAAAkQ,yBAAA,SAAyBb,WACjBc,EAAW,IAAIP,QACrB,IAA4B,IAAAQ,EAAAzO,EAAA0N,GAAcgB,EAAAD,EAAApO,QAAAqO,EAAAnO,KAAAmO,EAAAD,EAAApO,OAAE,CAAvC,IAAM6M,EAAawB,EAAApO,MAClBnC,KAAKmP,mBAAmBJ,IAC1B/O,KAAKwQ,wBAAwBzB,GAAenH,SAAQ,SAAC1G,GACnD,OAAAmP,EAAS5E,IAAIvK,wGAInB,OAAOvB,MAAMwQ,KAAKE,IAGZ1B,EAAAzO,UAAAyP,sBAAR,SAA8BZ,WAC5B,OAA2D,QAA3D/C,EAA8C,QAA9CD,EAAO/L,KAAK8O,oBAAoBC,UAAc,IAAAhD,OAAA,EAAAA,EAAE0E,mBAAW,IAAAzE,EAAAA,EAAI,IAGzD2C,EAAAzO,UAAA+P,sBAAR,SAA8BlB,WAC5B,OAAsD,QAAtD/C,EAA8C,QAA9CD,EAAO/L,KAAK8O,oBAAoBC,UAAc,IAAAhD,OAAA,EAAAA,EAAE8D,cAAM,IAAA7D,EAAAA,EAAI,IAGpD2C,EAAAzO,UAAAsQ,wBAAR,SAAgCzB,WAC9B,OAAwD,QAAxD/C,EAA8C,QAA9CD,EAAO/L,KAAK8O,oBAAoBC,UAAc,IAAAhD,OAAA,EAAAA,EAAEsE,gBAAQ,IAAArE,EAAAA,EAAI,6CAlE5C0E,EAAAA,iBACyBlR,OAAMwB,WAAA,CAAA,CAAA0D,KAA9CiM,EAAAA,OAAMC,KAAA,CAACC,EAAAA,yKALClC,EAAiB5N,EAAA,CAH7BiG,EAAAA,WAAW,CACVC,WAAY,SAOTvF,EAAA,EAAAiP,EAAAA,OAAOE,EAAAA,eALClC,GAAb,GCEAmC,EAAA,aCOAC,EAAA,WACE,SAAAA,EAGYC,GAAAhR,KAAAgR,SAAAA,EAGFhR,KAAAiR,gBAAkB,IAAInB,WAOtBiB,EAAA7Q,UAAAgR,QAAV,SAAkBC,SACVC,GAAgC,QAAdrF,EAAC/L,KAAKgR,gBAAQ,IAAAjF,EAAAA,EAAI,IAAIsF,QAAO,SAACC,GACpD,OAAAA,EAAQC,SAASJ,MAkBnB,OAhBIC,EAAgBxQ,OAAS,GAC3BwQ,EAAgBI,MACd,SAACC,EAAGlS,GACF,OAACkS,EAAEC,YAAcD,EAAEC,cAAgB,IAClCnS,EAAEmS,YAAcnS,EAAEmS,cAAgB,MAGrCC,EAAAA,aAA0C,IAA3BP,EAAgBxQ,SAC5BZ,KAAKiR,gBAAgBW,IAAIT,KAC5BnR,KAAKiR,gBAAgBxF,IAAI0F,GACzBlC,QAAQC,KACN,gDACAiC,KAICC,EAAgBA,EAAgBxQ,OAAS,IAUlDmQ,EAAA7Q,UAAA2R,YAAA,SACEV,EACAW,EACAC,SAEA,OAAqC,QAArChG,EAAO/L,KAAKkR,QAAQC,UAAiB,IAAApF,OAAA,EAAAA,EAAEiG,SACrCb,EACAW,EACAC,qEAlDDE,EAAAA,UAAQ,CAAAvN,KACRiM,EAAAA,OAAMC,KAAA,CAACE,0HAHCC,EAAuBhQ,EAAA,CAHnCiG,EAAAA,WAAW,CACVC,WAAY,SAITvF,EAAA,EAAAuQ,EAAAA,YACAvQ,EAAA,EAAAiP,EAAAA,OAAOG,KAHCC,GAAb,KCjBA,aCWAmB,EAAA,WACE,SAAAA,EACYC,EACAC,GADApS,KAAAmS,WAAAA,EACAnS,KAAAoS,SAAAA,SAGJF,EAAAhS,UAAAmS,WAAR,SACEC,EACAC,GAEA,MAAO,CACLD,IAAKA,EACLE,OAAQD,MAAAA,EAAAA,EAAkBvS,KAAKoS,UAC5BK,IAAIC,EAAAA,YACJC,iBAAoBL,KAIpBJ,EAAAhS,UAAA0S,YAAP,SACElO,EACA4N,EACAC,WAEMM,EACgD,QADjC7G,EACsB,QADtBD,EACnB/L,KAAKmS,WAAWrD,oBAAoBpK,UAAK,IAAAqH,OAAA,EAAAA,EAAEnD,iBAAS,IAAAoD,EAAAA,EAAI,GAC1D,OAAO8G,EAAAA,SAAS3S,OAAO,CACrByI,UAASlG,EAAA,CACP,CACEoG,QAASiK,EACTC,SAAUhT,KAAKqS,WAAWC,KAEzBO,GAELI,OAAQV,MAAAA,EAAAA,EAAkBvS,KAAKoS,qDA/BXzD,SACFmE,EAAAA,sJAHXZ,EAAkBnR,EAAA,CAH9BiG,EAAAA,WAAW,CACVC,WAAY,UAEDiL,GAAb,GCaAgB,EAAA,WAcE,SAAAA,EACYC,EACAC,EACAhB,EACAiB,EACAhM,EACAiM,EACAC,EACAC,GAPAxT,KAAAmT,IAAAA,EACAnT,KAAAoT,kBAAAA,EACApT,KAAAoS,SAAAA,EACApS,KAAAqT,wBAAAA,EACArT,KAAAqH,SAAAA,EACArH,KAAAsT,iBAAAA,EACAtT,KAAAuT,YAAAA,EACAvT,KAAAwT,WAAAA,EAqDd,OAlDEN,EAAAhT,UAAA8K,SAAA,WAEIhL,KAAKoT,kBAAkBjE,mBACrBnP,KAAKyT,mBAAmBC,WAG1B1T,KAAK2T,mBAIDT,EAAAhT,UAAAyT,gBAAR,WAAA,MAAAnM,EAAAxH,KACQmR,EAAmBnR,KAAKoT,kBAAkBtE,oBAC9C9O,KAAKyT,mBAAmBC,UAGrBvC,IAILnR,KAAK4T,iBASF,QATkB7H,EAAG/L,KAAKsT,iBAC1BzB,YACCV,EACAnR,KAAKmT,IACLnT,KAAKuT,YAAYX,YACf5S,KAAKyT,mBAAmBC,SACxB1T,KAAKyT,mBAAmBnB,IACxBtS,KAAKoS,kBAER,IAAArG,OAAA,EAAAA,EACCU,WAAU,SAACV,OAAE3E,EAAA2E,EAAA3E,WAAYyM,EAAA9H,EAAA8H,aACzBrM,EAAKsM,OAASD,EACdrM,EAAKhG,SAAS4F,QAIZ8L,EAAAhT,UAAAsB,SAAR,SAAiB4F,GACXpH,KAAKwT,WAAWO,uBAClB/T,KAAKqT,wBAAwBW,qBAC3BhU,KAAKyT,mBAAmBQ,WACxB7M,EAAWY,cACXhI,KAAKqH,WAKX6L,EAAAhT,UAAAiN,YAAA,WACMnN,KAAK4T,kBACP5T,KAAK4T,iBAAiBxG,wDAzDT8G,EAAAA,wBACcvF,SACTmE,EAAAA,gBACeqB,EAAAA,+BACfjM,EAAAA,iBACQ6I,SACLmB,SACDQ,EAAAA,cArBf3R,EAAA,CAARoH,EAAAA,kDADU+K,EAAyBnS,EAAA,CAHrCqT,EAAAA,UAAU,CACT/L,SAAU,0BAEC6K,GAAb,GCRAmB,EAAA,WAAA,SAAAA,YACEA,EAAAnU,UAAAqR,SAAA,SAASJ,GACP,MACwC,mBAA/BA,EAAiB7C,WACxB6C,EAAiB7C,UAAUpO,WAI/BmU,EAAAnU,UAAAwR,YAAA,WACE,OAAA,IAGF2C,EAAAnU,UAAA8R,SAAA,SACEb,EACAW,EACAC,GAHF,IAAAvK,EAAAxH,KAKE,OAAO,IAAIsU,EAAAA,YAGR,SAACC,GACF,IAAIV,EAEEzB,EAAWL,MAAAA,EAAAA,EAAmBD,EAAiBM,SAQ/CoC,EAAUhN,EAAKiN,oBACnBrC,EACAjB,EAAiB7C,WAYnB,OATIkG,IACFX,EAAe/B,EAAiB4C,gBAC9BF,OACAG,EACAvC,GAEFmC,EAAWrS,KAAK,CAAEkF,WAAYyM,EAAae,SAAUf,aAAYA,KAjBnD,WACVA,GACFA,EAAagB,eAsBXR,EAAAnU,UAAAuU,oBAAV,SAA8BrC,EAAoB9D,GAChD,OAAKA,EAGW8D,EACbK,IAAIqC,EAAAA,0BACJC,wBAAwBzG,GAJlB,oGAnDA+F,EAAuBtT,EAAA,CAHnCiG,EAAAA,WAAW,CACVC,WAAY,UAEDoN,GAAb,GCkBAW,EAAA,WAGE,SAAAA,EAEqBC,EAEAC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EAEAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEZC,EAEAC,EACYC,EAEZC,GA5CY9W,KAAAiV,KAAAA,EAEAjV,KAAAkV,KAAAA,EAEAlV,KAAAmV,SAAAA,EACAnV,KAAAoV,iBAAAA,EACApV,KAAAqV,gBAAAA,EAEArV,KAAAsV,IAAAA,EACAtV,KAAAuV,SAAAA,EAEAvV,KAAAwV,cAAAA,EAEAxV,KAAAyV,cAAAA,EAEAzV,KAAA0V,YAAAA,EAEA1V,KAAA2V,KAAAA,EAEA3V,KAAA4V,aAAAA,EAEA5V,KAAA6V,QAAAA,EACA7V,KAAA8V,cAAAA,EACA9V,KAAA+V,cAAAA,EACA/V,KAAAgW,iBAAAA,EACAhW,KAAAiW,UAAAA,EAEAjW,KAAAkW,QAAAA,EAEAlW,KAAAmW,SAAAA,EACAnW,KAAAoW,SAAAA,EACApW,KAAAqW,SAAAA,EAEArW,KAAAsW,KAAAA,EACAtW,KAAAuW,YAAAA,EACAvW,KAAAwW,YAAAA,EACAxW,KAAAyW,UAAAA,EACAzW,KAAA0W,YAAAA,EAEZ1W,KAAA2W,kCAAAA,EAEA3W,KAAA4W,qBAAAA,EACY5W,KAAA6W,qBAAAA,EAEZ7W,KAAA8W,OAAAA,kDA5CkBC,EAAAA,YAAW/V,WAAA,CAAA,CAAA0D,KAAnCuN,EAAAA,kBAEwB+E,EAAAA,kBAAiBhW,WAAA,CAAA,CAAA0D,KAAzCuN,EAAAA,kBAE4BgF,EAAAA,gBAAejW,WAAA,CAAA,CAAA0D,KAA3CuN,EAAAA,kBACoCiF,EAAAA,wBAAuBlW,WAAA,CAAA,CAAA0D,KAA3DuN,EAAAA,kBACmCkF,EAAAA,uBAAsBnW,WAAA,CAAA,CAAA0D,KAAzDuN,EAAAA,kBAEuBS,EAAAA,WAAU1R,WAAA,CAAA,CAAA0D,KAAjCuN,EAAAA,kBAC4BmF,EAAAA,gBAAepW,WAAA,CAAA,CAAA0D,KAA3CuN,EAAAA,kBAEiCoF,EAAAA,qBAAoBrW,WAAA,CAAA,CAAA0D,KAArDuN,EAAAA,kBAEiCqF,EAAAA,qBAAoBtW,WAAA,CAAA,CAAA0D,KAArDuN,EAAAA,kBAE+BsF,EAAAA,mBAAkBvW,WAAA,CAAA,CAAA0D,KAAjDuN,EAAAA,kBAEwBuF,EAAAA,YAAWxW,WAAA,CAAA,CAAA0D,KAAnCuN,EAAAA,kBAEgCwF,EAAAA,oBAAmBzW,WAAA,CAAA,CAAA0D,KAAnDuN,EAAAA,kBAE2ByF,EAAAA,eAAc1W,WAAA,CAAA,CAAA0D,KAAzCuN,EAAAA,kBACiC0F,EAAAA,qBAAoB3W,WAAA,CAAA,CAAA0D,KAArDuN,EAAAA,kBACiC2F,EAAAA,qBAAoB5W,WAAA,CAAA,CAAA0D,KAArDuN,EAAAA,kBACoC4F,EAAAA,wBAAuB7W,WAAA,CAAA,CAAA0D,KAA3DuN,EAAAA,kBAC6B6F,EAAAA,iBAAgB9W,WAAA,CAAA,CAAA0D,KAA7CuN,EAAAA,kBAE2B8F,EAAAA,eAAc/W,WAAA,CAAA,CAAA0D,KAAzCuN,EAAAA,kBAE4B+F,EAAAA,gBAAehX,WAAA,CAAA,CAAA0D,KAA3CuN,EAAAA,kBAC4BgG,EAAAA,gBAAejX,WAAA,CAAA,CAAA0D,KAA3CuN,EAAAA,kBAC4BiG,EAAAA,gBAAelX,WAAA,CAAA,CAAA0D,KAA3CuN,EAAAA,kBAEwBkG,EAAAA,YAAWnX,WAAA,CAAA,CAAA0D,KAAnCuN,EAAAA,kBAC+BmG,EAAAA,mBAAkBpX,WAAA,CAAA,CAAA0D,KAAjDuN,EAAAA,kBAC+BoG,EAAAA,mBAAkBrX,WAAA,CAAA,CAAA0D,KAAjDuN,EAAAA,kBAC6BqG,EAAAA,iBAAgBtX,WAAA,CAAA,CAAA0D,KAA7CuN,EAAAA,kBAC+BsG,EAAAA,mBAAkBvX,WAAA,CAAA,CAAA0D,KAAjDuN,EAAAA,kBAEyCuG,EAAAA,kCAAiCxX,WAAA,CAAA,CAAA0D,KAD1EuN,EAAAA,kBAG4BwG,EAAAA,qBAAoBzX,WAAA,CAAA,CAAA0D,KADhDuN,EAAAA,kBAEwCyG,EAAAA,qBAAoB1X,WAAA,CAAA,CAAA0D,KAA5DuN,EAAAA,kBAEc0G,EAAAA,gsCAjDN3D,EAAYjU,EAAA,CAHxBiG,EAAAA,WAAW,CACVC,WAAY,SAOTvF,EAAA,EAAAuQ,EAAAA,YAEAvQ,EAAA,EAAAuQ,EAAAA,YAEAvQ,EAAA,EAAAuQ,EAAAA,YACAvQ,EAAA,EAAAuQ,EAAAA,YACAvQ,EAAA,EAAAuQ,EAAAA,YAEAvQ,EAAA,EAAAuQ,EAAAA,YACAvQ,EAAA,EAAAuQ,EAAAA,YAEAvQ,EAAA,EAAAuQ,EAAAA,YAEAvQ,EAAA,EAAAuQ,EAAAA,YAEAvQ,EAAA,EAAAuQ,EAAAA,YAEAvQ,EAAA,GAAAuQ,EAAAA,YAEAvQ,EAAA,GAAAuQ,EAAAA,YAEAvQ,EAAA,GAAAuQ,EAAAA,YACAvQ,EAAA,GAAAuQ,EAAAA,YACAvQ,EAAA,GAAAuQ,EAAAA,YACAvQ,EAAA,GAAAuQ,EAAAA,YACAvQ,EAAA,GAAAuQ,EAAAA,YAEAvQ,EAAA,GAAAuQ,EAAAA,YAEAvQ,EAAA,GAAAuQ,EAAAA,YACAvQ,EAAA,GAAAuQ,EAAAA,YACAvQ,EAAA,GAAAuQ,EAAAA,YAEAvQ,EAAA,GAAAuQ,EAAAA,YACAvQ,EAAA,GAAAuQ,EAAAA,YACAvQ,EAAA,GAAAuQ,EAAAA,YACAvQ,EAAA,GAAAuQ,EAAAA,YACAvQ,EAAA,GAAAuQ,EAAAA,YACAvQ,EAAA,GAAAuQ,EAAAA,YAEAvQ,EAAA,GAAAuQ,EAAAA,YAEAvQ,EAAA,GAAAuQ,EAAAA,aA/CQ+C,GAAb,GCfA4D,EAAA,WACE,SAAAA,EAC8BtS,EACGuS,GADH7Y,KAAAsG,SAAAA,EACGtG,KAAA6Y,SAAAA,EAGzB7Y,KAAA8Y,oBAA+C,UAEvDF,EAAA1Y,UAAAqR,SAAA,SAASJ,GACP,MACwC,iBAA/BA,EAAiB7C,WACxB6C,EAAiB7C,UAAUtI,SAAS,MAIxC4S,EAAA1Y,UAAAwR,YAAA,WACE,OAAA,IAGFkH,EAAA1Y,UAAA8R,SAAA,SACEb,EACAW,EACAC,GAHF,IAAAvK,EAAAxH,KAKE,OAAO,IAAIsU,EAAAA,YAAuC,SAACC,GACjD,IAAIwE,EACAC,GAAS,EACP5G,EAAWL,MAAAA,EAAAA,EAAmBD,EAAiBM,SAE/C/K,EAAW+K,EAASK,IAAIvK,EAAAA,WAExB+Q,EAAc,WAClBD,GAAS,EACLD,GACFA,EAAWG,UA8Bf,OA1BA1R,EAAK2R,iBAAiBhI,EAAiB7C,UAAWjH,GAAU+R,MAC1D,SAACC,GACC,GAAIA,EAAa,CACfN,EAAa1R,EAASZ,cAAc4S,GAEpC,IAAMC,EAAmBlH,EAASK,IAAIM,EAAkB,MAExDgG,EAAWQ,MAAKlZ,EAAAA,EAAA,GACX+R,EAASK,IAAIuC,IAAa,CAC7BsE,iBAAgBA,IAGlBjS,EAAST,YACPkL,EAAiB0H,QAAQxR,cAAcyR,cACvCV,GAGFxE,EAAWrS,KAAK,CAAEkF,WAAY,IAAIa,EAAAA,WAAW8Q,KAExCC,GACHC,QAMDA,MAIHL,EAAA1Y,UAAAiZ,iBAAR,SACE7K,EACAjH,GAFF,IAAAG,EAAAxH,KAIE,OAAO,IAAI0Z,SAAQ,SAACxI,GACZ,IAAAnF,EAAA1J,EAAAiM,EAAAvG,MAAA,KAAA,GAAC4R,EAAA5N,EAAA,GAAM1D,EAAA0D,EAAA,GAET6N,EAASpS,EAAKsR,oBAAoBa,GAkBtC,GAhBKC,IACCD,GACFC,EAASvS,EAASZ,cAAc,UAChCe,EAAKsR,oBAAoBa,GAAQC,EACjCA,EAAOC,aAAa,MAAOF,GAC3BtS,EAAST,YAAYY,EAAKlB,SAASwT,KAAMF,GACrCG,EAAAA,kBAAkBvS,EAAKqR,YACzBe,EAAOI,OAAS,WACdJ,EAAOI,OAAS,QAIpBJ,EAAS,IAITA,EAAOI,OAAQ,CAIjB,IAAMC,EAAgBL,EAAOI,OAC7BJ,EAAOI,OAAS,WACdC,IACA/I,EAAQ7I,SAGV6I,EAAQ7I,yEArGXsI,EAAAA,OAAMC,KAAA,CAACsJ,EAAAA,4CACPvJ,EAAAA,OAAMC,KAAA,CAACC,EAAAA,wKAHC+H,EAAmB7X,EAAA,CAH/BiG,EAAAA,WAAW,CACVC,WAAY,SAITvF,EAAA,EAAAiP,EAAAA,OAAOuJ,EAAAA,WACPxY,EAAA,EAAAiP,EAAAA,OAAOE,EAAAA,eAHC+H,GAAb,gBCEA,SAAAuB,KAAkC,OAArBA,EAAmBpZ,EAAA,CAjB/ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVC,UAAW,CACT,CACEE,QAASgI,EACT/H,YAAasL,EACb+F,OAAO,GAET,CACEtR,QAASgI,EACT/H,YAAa6P,EACbwB,OAAO,IAGX3R,aAAc,CAACyK,GACfjK,QAAS,CAACiK,MAECiH,mBCTX,SAAAE,EACYC,EACAC,EACAC,EACA1V,GAHA9E,KAAAsa,YAAAA,EACAta,KAAAua,eAAAA,EACAva,KAAAwa,eAAAA,EACAxa,KAAA8E,OAAAA,SAGZuV,EAAAna,UAAAua,sCAAA,WAAA,IAAAjT,EAAAxH,KACEA,KAAKsa,YACFI,eACA/O,KAAKC,EAAAA,KAAK,IACVa,WAAU,SAACkO,GACNnT,EAAK+S,eAAeK,yBAAyBD,IAC/CnT,EAAKqT,iBAEPrT,EAAK+S,eAAeO,iCAI1BT,EAAAna,UAAA2a,eAAA,WACE7a,KAAKsa,YAAYS,SACjB/a,KAAKwa,eAAeQ,GAAG,CAAEC,QAAS,UAGpCZ,EAAAna,UAAAgb,qCAAA,WAAA,IAAA1T,EAAAxH,KACE,OAAOA,KAAKsa,YACTI,eACA/O,KACCwP,EAAAA,UAAS,SAACC,GACR,OAAAC,EAAAA,GAAG7T,EAAK+S,eAAeK,yBAAyBQ,SAYxDf,EAAAna,UAAAob,OAAA,WACMtb,KAAK8E,OAAOyW,cACdvb,KAAK8E,OAAOyW,aAAaC,WC1Dc,yDDgBlBzE,EAAAA,mBACG0E,EAAAA,sBACA1D,EAAAA,sBACRlR,EAAAA,oOALTwT,EAAmBtZ,EAAA,CAH/BiG,EAAAA,WAAW,CACVC,WAAY,UAEDoT,mBEqBX,SAAAqB,EACYpB,EACAC,EACAoB,EACAC,EACAC,EACArB,GALAxa,KAAAsa,YAAAA,EACAta,KAAAua,eAAAA,EACAva,KAAA2b,YAAAA,EACA3b,KAAA4b,oBAAAA,EACA5b,KAAA6b,qBAAAA,EACA7b,KAAAwa,eAAAA,EAViBxa,KAAA8b,UAAW,EAEhC9b,KAAA+b,yBAA0B,EAqEpC,OA1DEL,EAAAxb,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKgc,cAAgBhc,KAAKua,eAAe0B,+BACzCjc,KAAKkc,qBAAuBlc,KAAKua,eAAe4B,sCAChDnc,KAAKoc,UAAYpc,KAAKsa,YAAYI,eAAe/O,KAC/C0Q,EAAAA,WAAU,SAAC1B,GACT,OAAIA,GAAWA,EAAM2B,cACnB9U,EAAK+U,sCAAsC5B,GACpCnT,EAAKmU,YAAYlJ,OAEjB4I,EAAAA,QAAG1G,QAMV+G,EAAAxb,UAAAqc,sCAAR,SAA8C5B,GAE1C3a,KAAK+b,yBACL/b,KAAKua,eAAeK,yBAAyBD,KAE7C3a,KAAK+b,yBAA0B,EAC/B/b,KAAK6b,qBAAqB3C,OAAOsD,EAAAA,kBAAkBC,gBACnDzc,KAAKwa,eAAeQ,GAAG,OAI3BU,EAAAxb,UAAAwc,0BAAA,SAA0B3Q,OACxB4Q,EAAA5Q,EAAA4Q,OACAC,EAAA7Q,EAAA6Q,SAKA5c,KAAKua,eAAesC,8BAA8BF,EAAQC,IAG5DlB,EAAAxb,UAAA6a,OAAA,WACE/a,KAAK4b,oBAAoBnB,yCAG3BiB,EAAAxb,UAAA4c,8BAAA,SAA8B/Q,GAA9B,IAAAvE,EAAAxH,KAAgC+c,EAAAhR,EAAAgR,WAC9B/c,KAAKua,eACF0B,+BACAtQ,KAAKC,EAAAA,KAAK,IACVa,WAAU,SAACuQ,GACV,OAAAxV,EAAK+S,eAAeuC,8BAClBE,EACAD,MAGH3P,cACHpN,KAAK+b,yBAA0B,GAGjCL,EAAAxb,UAAA+c,OAAA,WACEjd,KAAK8b,UAAW,EAChB9b,KAAK4b,oBAAoBN,mDAhEFvE,EAAAA,mBACG0E,EAAAA,sBACHtD,EAAAA,mBACQkC,SACC/C,EAAAA,4BACNS,EAAAA,kBAVChX,EAAA,CAA5Bmc,EAAAA,YAAY,gDALFxB,EAAkB3a,EAAA,CAN9BqH,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,40NAEA6U,cAAeC,EAAAA,kBAAkBC,w1GAEtB3B,mBCrBb,SAAA4B,0GAAsBA,EAAgBvc,EAAA,CAHrCiG,EAAAA,WAAW,CACVC,WAAY,UAEQqW,MCgBtBC,EAAA,WAeE,SAAAA,EACYnW,EACAoW,GADAxd,KAAAoH,WAAAA,EACApH,KAAAwd,QAAAA,EANFxd,KAAAyd,cAAiC,GAgE7C,OAvDEF,EAAArd,UAAA8K,SAAA,WACEhL,KAAK0d,0BACL1d,KAAK2d,kBAAoB,GASjBJ,EAAArd,UAAAwd,wBAAV,WACQ1d,KAAK4F,QAA0B,KAAhB5F,KAAK4F,SAAkB5F,KAAKyd,gBAC/Czd,KAAK4F,OAAS5F,KAAKyd,gBAQvBje,OAAAiC,eAAc8b,EAAArd,UAAA,OAAI,KAAlB,WACE,OAAOF,KAAKoH,WAAWY,+CAUzBxI,OAAAiC,eAAc8b,EAAArd,UAAA,mBAAgB,KAA9B,SAA+B0d,GACzB5d,KAAK6d,2BACP7d,KAAK4d,SAAWA,oCASpBpe,OAAAiC,eAAc8b,EAAArd,UAAA,2BAAwB,KAAtC,WACE,YACoByU,IAAlB3U,KAAK4d,WAGE,IAFP,CAAC,SAAU,QAAS,SAAU,YAAYE,QACxC9d,KAAK0H,KAAKqW,QAAQC,kBAGI,MAAtBhe,KAAK0H,KAAKqW,UACT/d,KAAK0H,KAAKuW,aAAa,SAAWje,KAAK0H,KAAKuW,aAAa,0FAvDxChW,EAAAA,kBACHqV,KAJkBvc,EAAA,CAAtCoH,EAAAA,QAAS+U,EAAAA,YAAY,iDAbFK,EAAkBxc,EAAA,CADvCqT,EAAAA,aACqBmJ,GAAtB,GCXAW,EAAA,SAAA/U,GAAA,SAAA+U,IAAA,IAAA1W,EAAA,OAAA2B,GAAAA,EAAArI,MAAAd,KAAAW,YAAAX,YACYwH,EAAAiW,cAAoC,CAAEU,mBAAmB,GAMjC3W,EAAA4W,YAAa,IAiBjD,OAxB2Cte,EAAAoe,EAAA/U,GASd+U,EAAAhe,UAAAme,gBAAA,WACrBre,KAAKse,qBACPte,KAAKoe,YAAa,IAIGF,EAAAhe,UAAAqe,cAAA,WACnBve,KAAKse,qBACPte,KAAKoe,YAAa,IAItB5e,OAAAiC,eAAcyc,EAAAhe,UAAA,qBAAkB,KAAhC,iBACE,OAAkB,QAAlB6L,EAAO/L,KAAK4F,cAAM,IAAAmG,OAAA,EAAAA,EAAEoS,mDAfYpd,EAAA,CAAjCmc,EAAAA,YAAY,uDAEcnc,EAAA,CAA1Byd,EAAAA,aAAa,kDAMWzd,EAAA,CAAxByd,EAAAA,aAAa,8CAfHN,EAAqBnd,EAAA,CADjCqT,EAAAA,aACY8J,GAAb,CAA2CX,iBCIzC,SAAAkB,EACYrX,EACAoW,GAFZ,IAAAhW,EAIE2B,EAAAtI,KAAAb,KAAMoH,EAAYoW,IAAQxd,YAHhBwH,EAAAJ,WAAAA,EACAI,EAAAgW,QAAAA,EAPFhW,EAAAiW,cAAkC,CAAEiB,OAAO,GAG3ClX,EAAA5B,OAA2B,KAevC,OApByC9F,EAAA2e,EAAAtV,GAcvCsV,EAAAve,UAAA8K,SAAA,WACE7B,EAAAjJ,UAAM8K,SAAQnK,KAAAb,MACVA,KAAK4F,OAAO8Y,QACd1e,KAAK4d,UAAY,6CATG3V,EAAAA,kBACHqV,KATVmB,EAAmB1d,EAAA,CAF/BqT,EAAAA,aAEYqK,IAA4BP,GCQzCS,GAAA,SAAAxV,GAAA,SAAAwV,IAAA,IAAAnX,EAAA,OAAA2B,GAAAA,EAAArI,MAAAd,KAAAW,YAAAX,YAGYwH,EAAAoX,MAAQ,IAAIC,aAHiB/e,EAAA6e,EAAAxV,GAKvCwV,EAAAze,UAAAuS,IAAA,SAAIqM,GACF,OAAO9e,KAAK4e,MAAMnM,IAAIqM,GAjBL,QAwBnBH,EAAAze,UAAA6e,IAAA,SAAI7d,EAAa4d,GACX5d,GACFlB,KAAK4e,MAAMG,IAAID,GA1BA,MA0BuB5d,IAO1Cyd,EAAAze,UAAA8e,MAAA,SAAMF,GACJ9e,KAAK4e,MAAMK,OAAOH,GAlCD,QAyCnBH,EAAAze,UAAAgf,oBAAA,SAAoBxX,EAAmB9B,GACrC,OAAOA,MAAAA,OAAM,EAANA,EAAQkZ,OAAQlZ,EAAOkZ,MAAQpX,EAAKyX,aC3Cf,sHDYnBR,EAAmB5d,EAAA,CAH/BiG,EAAAA,WAAW,CACVC,WAAY,UAED0X,GAAb,CAAyCrB,GEwBzC8B,GAAA,SAAAjW,GA2BE,SAAAiW,EACYhY,EACAoW,GAFZ,IAAAhW,EAIE2B,EAAAtI,KAAAb,KAAMoH,EAAYoW,IAAQxd,YAHhBwH,EAAAJ,WAAAA,EACAI,EAAAgW,QAAAA,EA3BFhW,EAAAiW,cAAoC,GAQpCjW,EAAA5B,OAA6B,KAkEzC,OA5E2C9F,EAAAsf,EAAAjW,GAoBzCiW,EAAAlf,UAAAmf,YAAA,SAAYC,GACVtf,KAAKwd,QAAQuB,IAAI/e,KAAKkB,IAAKlB,KAAK8e,OAEhCQ,MAAAA,GAAAA,EAAOC,iBACPD,MAAAA,GAAAA,EAAOE,mBAUTJ,EAAAlf,UAAA8K,SAAA,WACE7B,EAAAjJ,UAAM8K,SAAQnK,KAAAb,MACdA,KAAKyf,KAAOzf,KAAKkB,IAAMlB,KAAKkB,SAAMyT,GAG1ByK,EAAAlf,UAAAwd,wBAAV,WAC6B,iBAAhB1d,KAAK4F,QAAuC,KAAhB5F,KAAK4F,SAC1C5F,KAAK4F,OAAS,CAAE1E,IAAKlB,KAAK4F,SAE5BuD,EAAAjJ,UAAMwd,wBAAuB7c,KAAAb,OAM/Bof,EAAAlf,UAAAwf,gBAAA,WACM1f,KAAK2f,aACP3f,KAAK0H,KAAKkX,MAAM,CAAEgB,eAAe,KAIrCpgB,OAAAiC,eAAc2d,EAAAlf,UAAA,cAAW,KAAzB,WACE,QAASF,KAAKkB,KAAOlB,KAAKwd,QAAQ/K,IAAIzS,KAAK8e,SAAW9e,KAAKkB,qCAO7D1B,OAAAiC,eAAc2d,EAAAlf,UAAA,MAAG,KAAjB,iBACE,OAA0C,QAA1C6L,EAAQ/L,KAAK4F,cAA6B,IAAAmG,OAAA,EAAAA,EAAE7K,qCAM9C1B,OAAAiC,eAAc2d,EAAAlf,UAAA,QAAK,KAAnB,WACE,OAAOF,KAAKwd,QAAQ0B,oBAClBlf,KAAK0H,KACL1H,KAAK4F,kFA7CeqC,EAAAA,kBACH0W,MAZc5d,EAAA,CAAlCmc,EAAAA,YAAY,kDAGbnc,EAAA,CADCyd,EAAAA,aAAa,QAAS,CAAC,4CAnBbY,EAAqBre,EAAA,CADjCqT,EAAAA,aACYgL,GAAb,CAA2CX,iBCjC3C,SAAAoB,IAKY7f,KAAA8f,mBAA+B,CACvC,UACA,SACA,aACA,QACA,SACA,YAQQ9f,KAAA+f,wBAA0B,wCAEpCF,EAAA3f,UAAA8f,MAAA,SAAMtY,EAAmBW,GACvB,OAAKA,GAAyB,KAAbA,EAGV1I,MAAMwQ,KACXzI,EAAKuY,iBAAiB5X,IAHf,IAOXwX,EAAA3f,UAAAggB,mBAAA,SACExY,EACA9B,GAFF,IAAA4B,EAAAxH,UAEE,IAAA4F,IAAAA,EAAA,CAA4Bua,WAAW,IAEvC,IAAM9X,EACyB,iBAAtBzC,MAAAA,OAAM,EAANA,EAAQua,WAAyBva,EAAOua,UAAY,cAE7D,OACEngB,KAAKggB,MAAMtY,EAAMW,GAAUxC,MAAK,SAACua,GAAO,OAAC5Y,EAAK6Y,SAASD,OACvDpgB,KAAKsgB,cAAc5Y,GAAM7B,MAAK,SAACua,GAAO,OAAAvV,QAAQuV,OAYlDP,EAAA3f,UAAAogB,cAAA,SACE5Y,EACA6Y,EACAC,GAHF,IAAAhZ,EAAAxH,UAEE,IAAAugB,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,GAEA,IAAIC,EAASzgB,KAAK+f,wBACbQ,IACHE,GAAU,yBAEZ,IAAMpY,EAAWrI,KAAK8f,mBACnBY,KAAI,SAAClgB,GAAM,OAACA,EAAKigB,KACjBE,KAAK,KACR,OAAO3gB,KAAKggB,MAAMtY,EAAMW,GAAUgJ,QAAO,SAAC+O,GACxC,OAACI,EAAiC3V,QAAQuV,IAA5B5Y,EAAK6Y,SAASD,OActBP,EAAA3f,UAAAmgB,SAAV,SAAmBD,GACjB,OAA2B,OAApBA,EAAGQ,4GA/EDf,EAAkB9e,EAAA,CAH9BiG,EAAAA,WAAW,CACVC,WAAY,UAED4Y,qBCGX,SAAAgB,EAAsBC,GAAtB,IAAAtZ,EACE2B,EAAAtI,KAAAb,OAAOA,YADawH,EAAAsZ,gBAAAA,WADgBhhB,EAAA+gB,EAAA1X,GAKtC0X,EAAA3gB,UAAA6gB,YAAA,SAAYnb,GACV,SAASA,MAAAA,OAAM,EAANA,EAAQob,gBAGnBH,EAAA3gB,UAAA+gB,aAAA,SACEvZ,EACA9B,EACA0Z,SAEItf,KAAK+gB,YAAYnb,KACf8B,IAAS4X,EAAMre,QACjByG,EAAKkX,MAAM,CAAEgB,eAAe,IAC5BN,EAAMC,iBACND,EAAME,oBAEF5Z,MAAAA,OAAM,EAANA,EAAQsb,uBAEsC,QADhDnV,EAAA/L,KAAK8gB,gBACFZ,mBAAmBxY,EAAM,CAAEyY,WAAW,WAAO,IAAApU,GAAAA,EAC5C6S,oDAtB2BiB,uHAD5BgB,EAAkB9f,EAAA,CAH9BiG,EAAAA,WAAW,CACVC,WAAY,UAED4Z,IAA2BlC,ICYxCwC,GAAA,SAAAhY,GAqBE,SAAAgY,EACY/Z,EACAoW,GAFZ,IAAAhW,EAIE2B,EAAAtI,KAAAb,KAAMoH,EAAYoW,IAAQxd,YAHhBwH,EAAAJ,WAAAA,EACAI,EAAAgW,QAAAA,EArBFhW,EAAAiW,cAAmC,CAAEuD,eAAe,GAKpDxZ,EAAA4Z,IAAM,IAAIC,EAAAA,eA2BtB,OAlC0CvhB,EAAAqhB,EAAAhY,GAcxCgY,EAAAjhB,UAAA+gB,aAAA,SAAa3B,GACPtf,KAAKwd,QAAQuD,YAAY/gB,KAAK4F,SAChC5F,KAAKwd,QAAQyD,aAAajhB,KAAK0H,KAAM1H,KAAK4F,OAAQ0Z,GAEpDtf,KAAKohB,IAAIE,KAAKthB,KAAKwd,QAAQuD,YAAY/gB,KAAK4F,UAU9Cub,EAAAjhB,UAAA8K,SAAA,WACMhL,KAAKwd,QAAQuD,YAAY/gB,KAAK4F,UAChC5F,KAAK2d,kBAAoB,GAE3BxU,EAAAjJ,UAAM8K,SAAQnK,KAAAb,gDAVQiI,EAAAA,kBACH4Y,MAhBX9f,EAAA,CAATwgB,EAAAA,oCAODxgB,EAAA,CADCyd,EAAAA,aAAa,iBAAkB,CAAC,6CAbtB2C,EAAoBpgB,EAAA,CADhCqT,EAAAA,aACY+M,GAAb,CAA0C/B,mBCT1C,SAAAoC,0DAAsC1hB,EAAA0hB,EAAArY,GAIpCqY,EAAAthB,UAAAggB,mBAAA,SACExY,EACA9B,GAEA,YAFA,IAAAA,IAAAA,EAAA,CAA4Bua,WAAW,IAEb,WAAtBva,MAAAA,OAAM,EAANA,EAAQua,WACHzY,EACE1H,KAAKyhB,kBAAkB/Z,EAAM9B,GAC/B5F,KAAK0hB,aAAaha,EAAM1H,KAAKkf,oBAAoBxX,EAAM9B,IAEvD5F,KAAK8gB,gBAAgBZ,mBAAmBxY,EAAM9B,IAAW8B,GAOpE8Z,EAAAthB,UAAAuhB,kBAAA,SAAkB/Z,EAAmB9B,GACnC,QAAS5F,KAAK0hB,aAAaha,EAAM1H,KAAKkf,oBAAoBxX,EAAM9B,KAUxD4b,EAAAthB,UAAAwhB,aAAV,SAAuBha,EAAmBoX,GACxC,GAAK9e,KAAKyS,IAAIqM,GAAd,CAGA,IAAM6C,EAAWhiB,MAAMwQ,KACrBzI,EAAKuY,iBACH,mBAAmBjgB,KAAKyS,IAAIqM,GAAM,OAGtC,OAAO6C,EAAS/gB,OAAS,EAAI+gB,EAAS,GAAK,wHAxClCH,EAAgBzgB,EAAA,CAH5BiG,EAAAA,WAAW,CACVC,WAAY,UAEDua,IAAyBX,ICetCe,GAAA,SAAAzY,GAQE,SAAAyY,EACYxa,EACAoW,GAFZ,IAAAhW,EAIE2B,EAAAtI,KAAAb,KAAMoH,EAAYoW,IAAQxd,YAHhBwH,EAAAJ,WAAAA,EACAI,EAAAgW,QAAAA,EAPFhW,EAAAiW,cAAiC,CAAE0C,WAAW,KA8D1D,OAjEwCrgB,EAAA8hB,EAAAzY,GAkBtCyY,EAAA1hB,UAAAwf,gBAAA,WACM1f,KAAK6hB,iBACP7hB,KAAKqf,cAEFrf,KAAK6hB,kBAAmB7hB,KAAKyhB,mBAChCtY,EAAAjJ,UAAMwf,gBAAe7e,KAAAb,OAQzB4hB,EAAA1hB,UAAAmf,YAAA,SAAYC,SACNtf,KAAK6hB,mBACFvC,MAAAA,OAAK,EAALA,EAAOre,SAAUqe,EAAMre,SAAWjB,KAAK0H,KAGzC4X,EAAMre,OAAuB2d,QAFX,QAAnB7S,EAAA/L,KAAK8hB,sBAAc,IAAA/V,GAAAA,EAAE6S,SAKzBzV,EAAAjJ,UAAMmf,YAAWxe,KAAAb,KAACsf,IAMpB9f,OAAAiC,eAAcmgB,EAAA1hB,UAAA,oBAAiB,KAA/B,WACE,OAAOF,KAAKwd,QAAQiE,kBAAkBzhB,KAAK0H,KAAM1H,KAAK4F,yCAOxDpG,OAAAiC,eAAcmgB,EAAA1hB,UAAA,kBAAe,KAA7B,iBACE,SAAoB,QAAZ6L,EAAC/L,KAAK4F,cAAM,IAAAmG,OAAA,EAAAA,EAAEoU,4CAQxB3gB,OAAAiC,eAAYmgB,EAAA1hB,UAAA,iBAAc,KAA1B,WACE,OAAOF,KAAKwd,QAAQ0C,mBAAmBlgB,KAAK0H,KAAM1H,KAAK4F,kFAtDjCqC,EAAAA,kBACHuZ,MAVVI,EAAkB7gB,EAAA,CAD9BqT,EAAAA,aACYwN,GAAb,CAAwCT,mBCnBxC,SAAAY,0DAAqCjiB,EAAAiiB,EAAA5Y,GAInC4Y,EAAA7hB,UAAA8hB,QAAA,SACEta,EACA9B,EACAqc,EACA3C,GAEA,GAAI1Z,MAAAA,OAAM,EAANA,EAAQsc,IAAK,CACf,IAAMhgB,EACW,WAAf0D,EAAOsc,IACHliB,KAAKmiB,mBAAmBza,EAAM9B,EAAQqc,GACtCjiB,KAAKoiB,SAAS1a,EAAM9B,EAAQqc,GAElC/f,MAAAA,GAAAA,EAAM0c,QAENU,EAAMC,iBACND,EAAME,oBASAuC,EAAA7hB,UAAAiiB,mBAAV,SACEza,EACA9B,EACAqc,SAEMjJ,EAAShZ,KAAKqiB,eAAe3a,EAAM9B,GAEzC,GAAKoT,EAAL,CAIA,IAAMsJ,EAAoBC,KAAKC,MAAM9a,EAAK+a,YAAc/a,EAAKgb,aAOzDC,EAJwBJ,KAAKC,MAC/BxJ,EAAO4J,YAAclb,EAAK+a,YAAcH,IAGGL,EAiB7C,OAfW,IAATA,GACAU,GAAoBL,IAEpBK,EAAmB,IAER,IAATV,GAAiCU,EAAmB,IACtDA,EAAmBL,EAAoB,GAGkB,QAAjCvW,EAAG/L,KAAK6iB,YAAYnb,EAAM9B,UAAO,IAAAmG,OAAA,EAAAA,EAAElG,MAC3D,SAACqc,GACC,OAAAA,EAAIU,YACHlb,EAAK+a,YAAcH,EAAqBK,OAMrCZ,EAAA7hB,UAAAkiB,SAAV,SACE1a,EACA9B,EACAqc,GAHF,IAAAza,EAAAxH,KAKQ8iB,EAAS9iB,KAAK6iB,YAAYnb,EAAM9B,GAClCmd,EAAcD,MAAAA,OAAM,EAANA,EAAQE,WACxB,SAAC5hB,GAAM,OAAAA,IAAMoG,EAAK6a,eAAe3a,EAAM9B,MAczC,OAXKmd,IAAgC,IAAjBA,IAClBA,EAAc,GAEhBA,GAAed,EAEF,IAATA,GAAiCc,IAAeD,MAAAA,OAAM,EAANA,EAAQliB,UAC1DmiB,EAAcD,EAAOliB,OAAS,IAEnB,IAATqhB,GAAiCc,EAAc,IACjDA,EAAc,GAETD,EAASA,EAAOC,QAAepO,GAO9BoN,EAAA7hB,UAAAmiB,eAAV,SACE3a,EACA9B,GAFF,IAAA4B,EAAAxH,KAIQijB,EAAYjjB,KAAK0hB,aAAaha,EAAM9B,MAAAA,OAAM,EAANA,EAAQkZ,OAClD,GAAImE,EACF,OAAOA,EAET,IAAMC,EAAWljB,KAAK6iB,YAAYnb,EAAM9B,GACpCud,EAAQD,EAASF,WAAU,SAACd,GAAQ,OAAA1a,EAAK4b,SAASlB,MAItD,OAHKiB,IAAoB,IAAXA,IACZA,EAAQ,GAEHD,EAASC,IAGRpB,EAAA7hB,UAAA2iB,YAAV,SACEnb,EACA9B,GAEA,MAA0B,iBAAfA,EAAOsc,KAAmC,WAAftc,EAAOsc,IACpCliB,KAAK8gB,gBAAgBd,MAAMtY,EAAM9B,EAAOsc,KAExCliB,KAAKsgB,cAAc5Y,GAAM,IAWpCqa,EAAA7hB,UAAAogB,cAAA,SACE5Y,EACA6Y,EACAC,GAEA,YAHA,IAAAD,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,GAEOxgB,KAAK8gB,gBAAgBR,cAAc5Y,EAAM6Y,EAAQC,IAGhDuB,EAAA7hB,UAAAkjB,SAAV,SAAmBhD,GACjB,IAAMiD,EAAQ/c,SAASgd,cACjBjb,EAAWgb,EAAMtF,QAEvB,OACEqC,IAAOiD,KACL1jB,MAAMwQ,KAAKiQ,EAAGH,iBAAiB5X,IAAWxC,MAAK,SAACvD,GAAM,OAAAA,IAAM+gB,uHA9IvDtB,EAAehhB,EAAA,CAH3BiG,EAAAA,WAAW,CACVC,WAAY,UAED8a,IAAwBP,ICIrC+B,GAAA,SAAApa,GAqBE,SAAAoa,EACYnc,EACAoW,GAFZ,IAAAhW,EAIE2B,EAAAtI,KAAAb,KAAMoH,EAAYoW,IAAQxd,YAHhBwH,EAAAJ,WAAAA,EACAI,EAAAgW,QAAAA,EArBFhW,EAAAiW,cAAgC,CAAEyE,KAAK,GAGvC1a,EAAA5B,OAAyB,KAsBrC,OA3BuC9F,EAAAyjB,EAAApa,GAQrCoa,EAAArjB,UAAAsjB,cAAA,SAAclE,UACG,QAAfvT,EAAI/L,KAAK4F,cAAM,IAAAmG,OAAA,EAAAA,EAAEmW,MACfliB,KAAKwd,QAAQwE,QAAQhiB,KAAK0H,KAAM1H,KAAK4F,OAAM,EAAmB0Z,IAKlEiE,EAAArjB,UAAAujB,kBAAA,SAAkBnE,UACD,QAAfvT,EAAI/L,KAAK4F,cAAM,IAAAmG,OAAA,EAAAA,EAAEmW,MACfliB,KAAKwd,QAAQwE,QAAQhiB,KAAK0H,KAAM1H,KAAK4F,QAAM,EAAmB0Z,6CAK1CrX,EAAAA,kBACH8Z,MAfrBhhB,EAAA,CADCyd,EAAAA,aAAa,qBAAsB,CAAC,8CAQrCzd,EAAA,CADCyd,EAAAA,aAAa,oBAAqB,CAAC,kDAdzB+E,EAAiBxiB,EAAA,CAD7BqT,EAAAA,aACYmP,GAAb,CAAuC3B,mBCJvC,SAAA8B,0DAAsC5jB,EAAA4jB,EAAAva,GAMpCua,EAAAxjB,UAAAyjB,qBAAA,SAAqBjc,GACnB,OAAO1H,KAAKsgB,cAAc5Y,GAAM9G,OAAS,GAQ3C8iB,EAAAxjB,UAAA0jB,UAAA,SACElc,EACA9B,EACAqc,EACA3C,GAEA,IAAMuE,EAA2B7jB,KAAKsgB,cAAc5Y,GAEhDyb,EAAQU,EAAUb,WAAU,SAACc,GAAM,OAAAA,IAAMxE,EAAMre,UAAUghB,GAG1DkB,GAAS,GAAKA,EAAQU,EAAUjjB,QAChCuiB,EAAQ,GAAKnjB,KAAK+jB,aAAane,EAAOoe,OACtCb,GAASU,EAAUjjB,QAAUZ,KAAKikB,WAAWre,EAAOoe,SAGjDb,GAASU,EAAUjjB,SACrBuiB,EAAQ,GAENA,EAAQ,IACVA,EAAQU,EAAUjjB,OAAS,GAG7B0e,EAAMC,iBACND,EAAME,kBAEKqE,EAAUV,GAElBvE,UAIG8E,EAAAxjB,UAAA6jB,aAAV,SAAuBC,GACrB,OAAgB,IAATA,GAA0B,UAATA,GAGhBN,EAAAxjB,UAAA+jB,WAAV,SAAqBD,GACnB,OAAgB,IAATA,GAA0B,QAATA,oHApDfN,EAAgB3iB,EAAA,CAH5BiG,EAAAA,WAAW,CACVC,WAAY,UAEDyc,IAAyB3B,ICGtCmC,GAAA,SAAA/a,GAsBE,SAAA+a,EACY9c,EACAoW,GAFZ,IAAAhW,EAIE2B,EAAAtI,KAAAb,KAAMoH,EAAYoW,IAAQxd,YAHhBwH,EAAAJ,WAAAA,EACAI,EAAAgW,QAAAA,EAvBFhW,EAAAiW,cAAiC,CAAEuG,MAAM,GAGzCxc,EAAA5B,OAA0B,GAIpC4B,EAAA2c,eAAiB,SAAC7E,GACV9X,EAAK5B,OAAOoe,MAChBxc,EAAKoc,UAAUtE,EAAK,IAMxB9X,EAAA4c,aAAe,SAAC9E,GACR9X,EAAK5B,OAAOoe,MAChBxc,EAAKoc,UAAUtE,GAAK,MA6B1B,OA/CwCxf,EAAAokB,EAAA/a,GAqC5B+a,EAAAhkB,UAAA0jB,UAAV,SAAoBtE,EAAgB2C,GAC9BjiB,KAAKwd,QAAQmG,qBAAqB3jB,KAAK0H,OACzC1H,KAAKwd,QAAQoG,UACX5jB,KAAK0H,KACL1H,KAAK4F,OACLqc,EACA3C,6CApBkBrX,EAAAA,kBACHyb,MAhBrB3iB,EAAA,CAFCyd,EAAAA,aAAa,oBAAqB,CAAC,WACnCA,EAAAA,aAAa,cAAe,CAAC,iDAS9Bzd,EAAA,CAFCyd,EAAAA,aAAa,kBAAmB,CAAC,WACjCA,EAAAA,aAAa,oBAAqB,CAAC,+CAfzB0F,EAAkBnjB,EAAA,CAD9BqT,EAAAA,aACY8P,GAAb,CAAwCX,mBCJxC,SAAAc,0DAAsCvkB,EAAAukB,EAAAlb,oHAAzBkb,EAAgBtjB,EAAA,CAH5BiG,EAAAA,WAAW,CACVC,WAAY,UAEDod,IAAyBX,ICoBtCY,GAAA,SAAAnb,GAgDE,SAAAmb,EACYld,EACAoW,EACAnW,GAHZ,IAAAG,EAKE2B,EAAAtI,KAAAb,KAAMoH,EAAYoW,IAAQxd,YAJhBwH,EAAAJ,WAAAA,EACAI,EAAAgW,QAAAA,EACAhW,EAAAH,SAAAA,EAjDFG,EAAAiW,cAAiC,CAAE8G,MAAM,GAGzC/c,EAAA5B,OAA0B,GAgB1B4B,EAAAgd,OAAS,IAAInD,EAAAA,eAgKzB,OArLwCvhB,EAAAwkB,EAAAnb,GA6BtCmb,EAAApkB,UAAAukB,YAAA,SAAYnF,GACNtf,KAAK0kB,YAAc1kB,KAAK0H,OAAU4X,EAAMre,SAC1CjB,KAAK2kB,YAAYrF,GACjBA,EAAME,oBASV8E,EAAApkB,UAAA0kB,YAAA,SAAYtF,GACNtf,KAAK0kB,YAAc1kB,KAAK6kB,WAC1B7kB,KAAK2kB,YAAYrF,GACjBA,EAAME,oBAYA8E,EAAApkB,UAAA4kB,UAAV,WACE9kB,KAAK+kB,uBAAuB,IAGpBT,EAAApkB,UAAAykB,YAAV,SAAsBrF,GACpBtf,KAAKwkB,OAAOlD,MAAK,GACjBthB,KAAK+kB,sBAAsB,IAEvBzF,MAAAA,OAAK,EAALA,EAAOre,UAAWjB,KAAK0H,MACzByB,EAAAjJ,UAAMmf,YAAWxe,KAAAb,KAACsf,IAItBgF,EAAApkB,UAAA8K,SAAA,mBACE7B,EAAAjJ,UAAM8K,SAAQnK,KAAAb,MAEdA,KAAK0kB,WAAwB,QAAd3Y,EAAG/L,KAAK4F,cAAM,IAAAmG,OAAA,EAAAA,EAAEwY,KAE3BvkB,KAAK0kB,aACP1kB,KAAK4d,SAAW,EAIX5d,KAAK4F,OAAO/F,eAAe,eAC9BG,KAAK4F,OAAOua,WAAY,GAKrBngB,KAAK4F,OAAO/F,eAAe,mBAC9BG,KAAK4F,OAAOob,iBAAiD,KAApB,QAAXhV,EAAAhM,KAAK4F,cAAM,IAAAoG,OAAA,EAAAA,EAAEgV,mBAKjDsD,EAAApkB,UAAAwf,gBAAA,WAAA,IAAAlY,EAAAxH,KACMA,KAAK0kB,aAMD1kB,KAAK8e,OACT9e,KAAKwd,QAAQ8C,cAActgB,KAAK0H,MAAME,SAAQ,SAACwY,GAE7C,OAAA5Y,EAAKH,SAASwS,aAAauG,EZ5HL,sBY4H2B5Y,EAAKsX,UAItD9e,KAAK6hB,iBACP7hB,KAAKqf,eAGTlW,EAAAjJ,UAAMwf,gBAAe7e,KAAAb,OAGvBskB,EAAApkB,UAAAmf,YAAA,SAAYC,GAAZ,IAAA9X,EAAAxH,KACE,GAAIA,KAAK0kB,WAAY,CACnB,IAAI1kB,KAAKglB,2BAA2B1F,GAMlC,OAFA2F,YAAW,WAAM,OAAAzd,EAAKsd,oBACtBxF,MAAAA,GAAAA,EAAOE,mBAHPyF,YAAW,WAAM,OAAAzd,EAAKmd,YAAYrF,MAOtCnW,EAAAjJ,UAAMmf,YAAWxe,KAAAb,KAACsf,IAGpBgF,EAAApkB,UAAA+gB,aAAA,SAAa3B,GACPtf,KAAK0kB,YACP1kB,KAAKwd,QAAQwB,MAAMhf,KAAK4F,OAAOkZ,OAEjC3V,EAAAjJ,UAAM+gB,aAAYpgB,KAAAb,KAACsf,IAUbgF,EAAApkB,UAAA8kB,2BAAR,SAAmC1F,GACjC,OAAQA,GAAStf,KAAKwd,QAAQiE,kBAAkBzhB,KAAK0H,KAAM1H,KAAK4F,SAMxD0e,EAAApkB,UAAA6kB,sBAAV,SAAgCtkB,GAAhC,IAAA+G,EAAAxH,UAAgC,IAAAS,IAAAA,EAAA,GAC1BT,KAAK0kB,aACP1kB,KAAK6kB,UAAkB,IAAPpkB,EACVT,KAAK2jB,sBAA8B,IAANljB,GAAkB,IAANA,GAC7CT,KAAK6jB,UAAUjc,SAAQ,SAACwY,GACtB,OAAA5Y,EAAKH,SAASwS,aAAauG,EAAI,WAAY3f,EAAEykB,iBAWrD1lB,OAAAiC,eAAY6iB,EAAApkB,UAAA,uBAAoB,KAAhC,WACE,OAAOF,KAAKwd,QAAQmG,qBAAqB3jB,KAAK0H,uCAUhDlI,OAAAiC,eAAY6iB,EAAApkB,UAAA,YAAS,KAArB,WACE,OAAOF,KAAKwd,QAAQ8C,cAClBtgB,KAAK0H,KACL1H,KAAK0kB,YAxLoB,6EAwDLzc,EAAAA,kBACHoc,UACCnc,EAAAA,aAxCWnH,EAAA,CAAhCmc,EAAAA,YAAY,sDAKbnc,EAAA,CADCmc,EAAAA,YAAY,mDAMHnc,EAAA,CAATwgB,EAAAA,uCAQDxgB,EAAA,CAFCyd,EAAAA,aAAa,gBAAiB,CAAC,WAC/BA,EAAAA,aAAa,gBAAiB,CAAC,4CAahCzd,EAAA,CADCyd,EAAAA,aAAa,QAAS,CAAC,4CAxCb8F,EAAkBvjB,EAAA,CAD9BqT,EAAAA,aACYkQ,GAAb,CAAwCJ,mBCpBxC,SAAAiB,0DAA0CrlB,EAAAqlB,EAAAhc,oHAA7Bgc,EAAoBpkB,EAAA,CAHhCiG,EAAAA,WAAW,CACVC,WAAY,UAEDke,IAA6Bd,mBCOxC,SAAAe,EACYhe,EACAoW,EACAnW,GAHZ,IAAAG,EAKE2B,EAAAtI,KAAAb,KAAMoH,EAAYoW,EAASnW,IAASrH,YAJ1BwH,EAAAJ,WAAAA,EACAI,EAAAgW,QAAAA,EACAhW,EAAAH,SAAAA,EAPFG,EAAAiW,cAA6B,GAEXjW,EAAA5B,OAAsB,KASpD,OAZoC9F,EAAAslB,EAAAjc,4CAMVlB,EAAAA,kBACHkd,UACCjd,EAAAA,aALJnH,EAAA,CAAjBoH,EAAAA,MAAM,yCAHIid,EAAcrkB,EAAA,CAH1BqT,EAAAA,UAAU,CACT/L,SAAU,eAEC+c,IAAuBd,ICJ9Be,GAAa,CASjBD,IAQFE,GAAA,WAAA,SAAAA,KAAkC,OAArBA,EAAmBvkB,EAAA,CAL/ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVF,aAAY/F,EAAM2iB,IAClBpc,QAAOvG,EAAM2iB,OAEFC,GAAb,M5CrBA,gBAIA,cAOYziB,EAAAA,EAAAA,yBAAAA,EAAAA,uBAAsB,KAChC,OAAA,SACAA,EAAA,MAAA,Y6C0DU0iB,GAUAC,iBCtEV,SAAAC,EACY7f,EACA8f,GADA1lB,KAAA4F,OAAAA,EACA5F,KAAA0lB,qBAAAA,EAJJ1lB,KAAA2lB,WAAa,IAAIC,EAAAA,gBAA4B,WAOrDH,EAAAvlB,UAAA2lB,aAAA,WACE,OAAO7lB,KAAK2lB,YAGdF,EAAAvlB,UAAAuL,IAAA,SAAIvK,EAAaD,GACf,IAAM6kB,EAAkB9lB,KAAK4F,OAAOmgB,UAAUlgB,MAC5C,SAACmgB,GAAa,OAAAA,EAAS9kB,MAAQA,KAGjC,GAAI4kB,EAAO,CACT,IAAMG,EAAuBjmB,KAAK2lB,WAAWxjB,MAC7C8jB,EAASC,OAAOlmB,KAAKmmB,wBAAwBjlB,GAAM,EAAG,CACpDD,OAAMA,EACNmlB,QAASN,EAAMM,QACfC,SAAUP,EAAMO,SAChBnlB,IAAGA,IAELlB,KAAK2lB,WAAWzjB,KAAK+jB,KAIzBR,EAAAvlB,UAAAgZ,OAAA,SAAOhY,GAKL,GAJwBlB,KAAK4F,OAAOmgB,UAAUlgB,MAC5C,SAACmgB,GAAa,OAAAA,EAAS9kB,MAAQA,KAGtB,CACT,IAAI+kB,EAAuBjmB,KAAK2lB,WAAWxjB,MAC3C8jB,EAAWA,EAAS5U,QAAO,SAAC2U,GAAa,OAAAA,EAAS9kB,MAAQA,KAC1DlB,KAAK2lB,WAAWzjB,KAAK+jB,KAIzBR,EAAAvlB,UAAAomB,eAAA,SAAeN,GACb,IAAM/kB,EACJ+kB,EAAS/kB,kBAAkBslB,YACvBP,EAAS/kB,OACR+kB,EAAS/kB,OAAmBwY,cAG7BqI,EACJ9hB,KAAK0lB,qBAAqBxF,mBAAmBjf,IAAWA,EAGpDulB,EAAc1E,EAAe7D,aAAa,YAC3CuI,GACH1E,EAAejI,aAAa,WAAY,MAG1CiI,EAAelD,QAGV4H,GACH1E,EAAe2E,gBAAgB,aAIzBhB,EAAAvlB,UAAAimB,wBAAV,SAAkCjlB,GAKhC,IAJA,IAAIiiB,EAAgBnjB,KAAK4F,OAAOmgB,UAAU/C,WACxC,SAACgD,GAAa,OAAAA,EAAS9kB,MAAQA,kBAI/BiiB,IACA,IAAMuD,EAAqBC,EAAK/gB,OAAOmgB,UAAU5C,GACjD,GAAIuD,EAAU,CACZ,IACMZ,EADuBa,EAAKhB,WAAWxjB,MACd6gB,WAC7B,SAACgD,GAAa,OAAAA,EAAS9kB,MAAQwlB,EAASxlB,OAE1C,GAAI4kB,GAAS,eACJA,EAAQ,YATd3C,EAAQ,GAAC,gDAahB,OAAO,4CA/EWyD,UACczB,yIALvBM,EAAe1kB,EAAA,CAH3BiG,EAAAA,WAAW,CACVC,WAAY,UAEDwe,oBCKX,SAAAoB,EAAoBC,GAAA9mB,KAAA8mB,gBAAAA,EAFpB9mB,KAAA2lB,WAAqC3lB,KAAK8mB,gBAAgBjB,eAO5D,OAHEgB,EAAA3mB,UAAAomB,eAAA,SAAeN,GACbhmB,KAAK8mB,gBAAgBR,eAAeN,6CAHDP,MAH1BoB,EAAiB9lB,EAAA,CAL7BqH,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,sPACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BJ,MCNAK,GAAsC,CACjDC,OAAQ,CACNC,IAAK,CACHC,OAAQ,gBACR/Y,UAAWoN,GAEb4L,WAAY,CACVD,OAAQ,gBACR/Y,UAAWuY,SHVjB,cAqEYtB,GAAAA,EAAAA,cAAAA,EAAAA,YAAW,KACrB,QAAA,UACAA,GAAA,OAAA,SACAA,GAAA,cAAA,gBACAA,GAAA,YAAA,eAMUC,GAAAA,EAAAA,gBAAAA,EAAAA,cAAa,KACvB,IAAA,MACAA,GAAA,WAAA,+BIhFF,SAAA+B,IAEYvnB,KAAAwnB,gBAGL,GA4CP,OAlBYD,EAAArnB,UAAAunB,aAAV,SAAuBC,EAAuB9hB,GAC5C,OAAO5F,KAAKwnB,gBAAgBG,MAAK,SAACvH,GAAO,OAAAA,EAAGsH,SAAWA,QACjD9hB,EAAOwU,OAWRmN,EAAArnB,UAAAgZ,OAAP,SAAcwO,EAAuBE,GACnC5nB,KAAKwnB,gBAAkBxnB,KAAKwnB,gBAAgBnW,QAC1C,SAAC+O,GAAO,OAAAA,EAAGsH,SAAWA,MAG5BH,mBCvCE,SAAAM,EAEYC,EACAC,GADA/nB,KAAA8nB,iBAAAA,EACA9nB,KAAA+nB,aAAAA,EALF/nB,KAAAwnB,gBAAmC,GAO3CxnB,KAAK8nB,iBAAmB9nB,KAAK8nB,kBAAoB,UASnDD,EAAA3nB,UAAAinB,OAAA,SAAOO,EAAuBvU,GAC5B,IAAMvN,EAAS5F,KAAKgoB,kBAAkBN,GAChCrgB,EAAWrH,KAAKioB,YAAYriB,GAG9ByB,GACFA,EAAS6gB,OAAOtiB,EAAQ8hB,EAAQvU,IASpC0U,EAAA3nB,UAAA8e,MAAA,SAAM0I,GACJ,IAAM9hB,EAAS5F,KAAKgoB,kBAAkBN,GAChCrgB,EAAWrH,KAAKioB,YAAYriB,GAG9ByB,GACFA,EAAS6R,OAAOwO,EAAQ9hB,IASlBiiB,EAAA3nB,UAAA8nB,kBAAV,SAA4BN,SAC1B,OAAwB,QAAxB3b,EAAO/L,KAAK+nB,oBAAY,IAAAhc,OAAA,EAAAA,EAAEob,OAAOO,IAQzBG,EAAA3nB,UAAA+nB,YAAV,SAAsBriB,GACpB,OAAO5F,KAAK8nB,iBAAiBjiB,MAAK,SAACsiB,GAAa,OAAAA,EAASC,MAAMxiB,wEArD9D+K,EAAAA,OAAMC,KAAA,CAAC2W,aAEgBc,yIAPfR,EAAmB9mB,EAAA,CAD/BiG,EAAAA,WAAW,CAAEC,WAAY,SAMrBvF,EAAA,EAAAiP,EAAAA,OAAO4W,MALCM,MCMbS,GAAA,WACE,SAAAA,EACY1T,EACA9P,EACAyjB,GAFAvoB,KAAA4U,SAAAA,EACA5U,KAAA8E,OAAAA,EACA9E,KAAAuoB,oBAAAA,SAOZD,EAAApoB,UAAAsoB,KAAA,WACMxoB,KAAKyoB,aACPzoB,KAAK0oB,SAOTJ,EAAApoB,UAAAuoB,UAAA,WAME,OALIzoB,KAAK2oB,eAAiB3oB,KAAK4oB,gBACzB5oB,KAAK8E,OAAOyW,cACdvb,KAAK8E,OAAOyW,aAAasN,Q7BtCY,c6BsC2B,QAG7D7oB,KAAK2oB,cAAgB3oB,KAAK4oB,gBAOzBN,EAAApoB,UAAAyoB,WAAV,WACE,IAAMG,EAAS9oB,KAAK4U,SAAS+E,OAAO5R,MAAM,KAAK,GAC/C,OAAO+gB,GAAUA,EAAO/gB,MAAM,KAAK/B,SAAS,aAMpCsiB,EAAApoB,UAAA0oB,aAAV,WACE,OACE5oB,KAAK8E,OAAOyW,cACwD,SAApEvb,KAAK8E,OAAOyW,aAAawN,Q7B3Dc,gB6BkEjCT,EAAApoB,UAAAwoB,MAAV,WACE1oB,KAAKuoB,oBAAoBpB,OAAO3B,EAAAA,cAAc4B,+CAlD1B4B,EAAAA,gBACFniB,EAAAA,iBACaghB,4KAJtBS,EAAiBvnB,EAAA,CAH7BiG,EAAAA,WAAW,CACVC,WAAY,UAEDqhB,GAAb,GCKAW,GAAA,WAAA,SAAAA,KAA8B,OAAjBA,EAAeloB,EAAA,CAX3ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcwR,GACxBvR,UAAW,CACT,CACEE,QAASogB,EAAAA,gBACTC,WAAYC,GACZC,KAAM,CAACf,IACPlO,OAAO,OAIA6O,GAAb,GAQA,SAAgBG,GAAWE,GAIzB,OAHgB,WACdA,EAAkBd,YC5BVe,iBCsBV,SAAAC,EACU5jB,EACAgW,EACAtB,EACAE,EACAiP,GAJAzpB,KAAA4F,OAAAA,EACA5F,KAAA4b,oBAAAA,EACA5b,KAAAsa,YAAAA,EACAta,KAAAwa,eAAAA,EACAxa,KAAAypB,kBAAAA,EAVFzpB,KAAAwK,cAAgB,IAAIC,EAAAA,aAEpBzK,KAAA0pB,uBAAyB,IAoEnC,OAzDEF,EAAAtpB,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAK2pB,SAAW3pB,KAAK4pB,8BACrB5pB,KAAK6pB,SAAWC,aAAY,WACtBtiB,EAAKmiB,SAAW,EAClBniB,EAAKmiB,YAELI,cAAcviB,EAAKqiB,UACnBriB,EAAKoU,oBAAoBnB,yCAE3BjT,EAAKiiB,kBAAkBO,iBACtB,KAEHhqB,KAAKiqB,kBACLjqB,KAAKkqB,gCAGCV,EAAAtpB,UAAA+pB,gBAAR,WAAA,IAAAziB,EAAAxH,KACEA,KAAKwK,cAAciB,IACjBzL,KAAKwa,eAAe2P,eAAe1d,WAAU,SAAC0d,GACxCA,GACF3iB,EAAK4iB,kBAMLZ,EAAAtpB,UAAAgqB,6BAAR,WAAA,IAAA1iB,EAAAxH,KACEA,KAAKwK,cAAciB,IACjBzL,KAAKsa,YACF+P,eACA1e,KAAKE,EAAAA,wBACLY,WAAU,WAAM,OAAAjF,EAAK4iB,kBAI5BZ,EAAAtpB,UAAAkqB,WAAA,WACMpqB,KAAK2pB,SAAW,IAClB3pB,KAAK2pB,SAAW3pB,KAAK4pB,gCAIjBJ,EAAAtpB,UAAA0pB,4BAAR,WACE,OACE5pB,KAAK4F,OAAO0kB,IAAIC,kBAAkBC,uBAClCxqB,KAAK0pB,uBAEE1pB,KAAK0pB,uBAEL1pB,KAAK4F,OAAO0kB,IAAIC,kBAAkBC,wBAG7ChB,EAAAtpB,UAAAiN,YAAA,WACEnN,KAAKwK,cAAc4C,cACfpN,KAAK6pB,UACPE,cAAc/pB,KAAK6pB,oDA7DLY,EAAAA,iBACapQ,SACRtD,EAAAA,mBACGgB,EAAAA,sBACG2S,EAAAA,qBAXlBlB,EAAwBzoB,EAAA,CANpCqH,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,0UAEA6U,cAAeC,EAAAA,kBAAkBC,4iCAEtBmM,oBCbb,SAAAmB,KAgBA,OAfEA,EAAAzqB,UAAA0qB,UAAA,SAAUC,GACJA,EAAe,IACjBA,EAAe,GAEjB,IAAMC,EAAkBvI,KAAKwI,MAAMF,EAAe,IAC5CG,EAAkBH,EAAe,GAQvC,OANIC,EAAU,IACS,KAAOA,GAASG,OAAO,GAExBH,EAAU,IAGL,KADQ,KAAOE,GAASC,OAAO,IAbjDN,EAAe5pB,EAAA,CAH3BmqB,EAAAA,KAAK,CACJC,KAAM,iBAEKR,oBCoBX,SAAAS,EAAoBC,GAAArrB,KAAAqrB,GAAAA,EALpBrrB,KAAAsrB,qBAAsB,EAGtBtrB,KAAAurB,YAAc,IAAIlK,EAAAA,aAqBpB,OAjBE+J,EAAAlrB,UAAA8K,SAAA,WACEhL,KAAKwrB,iBAAmBxrB,KAAKqrB,GAAGvM,MAAM,CACpCnC,OAAQ,CAAC,GAAI,CAAC8O,EAAAA,WAAWC,WACzB9O,SAAU,CAAC,GAAI,CAAC6O,EAAAA,WAAWC,cAI/BN,EAAAlrB,UAAAyrB,SAAA,WACM3rB,KAAKwrB,iBAAiBI,MACxB5rB,KAAKurB,YAAYjK,KAAK,CACpB3E,OAAQ3c,KAAKwrB,iBAAiB/Y,IAAI,UAAUtQ,MAC5Cya,SAAU5c,KAAKwrB,iBAAiB/Y,IAAI,YAAYtQ,QAGlDnC,KAAKwrB,iBAAiBK,6DAhBFC,EAAAA,eALxB/qB,EAAA,CADCoH,EAAAA,mDAIDpH,EAAA,CADCwgB,EAAAA,4CANU6J,EAAyBrqB,EAAA,CANrCqH,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,03BAEA6U,cAAeC,EAAAA,kBAAkBC,6gBAEtB+N,oBCAX,SAAAW,EACYnQ,EACAD,GADA3b,KAAA4b,oBAAAA,EACA5b,KAAA2b,YAAAA,EAJJ3b,KAAAgsB,aAAe,IAAIvhB,EAAAA,aAqB7B,OAdEshB,EAAA7rB,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKgsB,aAAavgB,IAChBzL,KAAK2b,YAAYlJ,MAAMhG,WAAU,SAAC6J,GAAS,OAAC9O,EAAKykB,SAAW3V,MAE9DtW,KAAKksB,sCAAwClsB,KAAK4b,oBAAoBV,wCAGxE6Q,EAAA7rB,UAAA2a,eAAA,WACE7a,KAAK4b,oBAAoBf,kBAG3BkR,EAAA7rB,UAAAiN,YAAA,WACEnN,KAAKgsB,aAAa5e,wDAhBaiN,SACRlC,EAAAA,eAPd4T,EAA0BhrB,EAAA,CANtCqH,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,8hBAEA6U,cAAeC,EAAAA,kBAAkBC,m+CAEtB0O,oBCgCX,SAAAI,EACUd,EACAe,EACAxmB,GAFA5F,KAAAqrB,GAAAA,EACArrB,KAAAosB,WAAAA,EACApsB,KAAA4F,OAAAA,EAdF5F,KAAAgsB,aAAe,IAAIvhB,EAAAA,aAM3BzK,KAAAurB,YAAc,IAAIlK,EAAAA,aAoFpB,OAzEE8K,EAAAjsB,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKqsB,sBAAwBrsB,KAAKqrB,GAAGvM,MAAM,CACzCwN,WAAY,CAAC,GAAIb,EAAAA,WAAWC,YAE9B1rB,KAAKosB,WAAWG,sBAChBvsB,KAAKwsB,sBAAwBxsB,KAAKosB,WAAWK,kCAC7CzsB,KAAK0sB,cAAgB1sB,KAAKosB,WAAWO,2BAErC3sB,KAAKgsB,aAAavgB,IAChBzL,KAAKqsB,sBAAsBO,SAASN,WAAWO,aAC5ClhB,KAAKmhB,EAAAA,aAAa,MAClBrgB,WAAU,SAACsgB,GACVvlB,EAAKwlB,iBAAiBD,QAKtBZ,EAAAjsB,UAAA8sB,iBAAR,SAAyBD,GAErBliB,QAAQ7K,KAAKitB,mBACbF,IAAoB/sB,KAAKitB,iBAAiB9B,OAE1CnrB,KAAKitB,sBAAmBtY,GAEtB9J,QAAQ7K,KAAKitB,oBAGjBjtB,KAAKosB,WAAWG,sBACZQ,EAAgBG,OAAOtsB,QAAU,GACnCZ,KAAKosB,WAAWe,eAAe,CAC7BnN,MAAO+M,EACPK,SAAUptB,KAAK4F,OAAO0kB,IAAI6C,eAAeE,eAK/ClB,EAAAjsB,UAAAotB,uBAAA,SAAuBrB,GACrBjsB,KAAKitB,iBAAmBhB,EACxBjsB,KAAKqsB,sBAAsBO,SAASN,WAAWiB,SAC7CvtB,KAAKitB,iBAAiB9B,MAExBnrB,KAAKosB,WAAWG,uBAGlBJ,EAAAjsB,UAAAyrB,SAAA,WACM3rB,KAAKqsB,sBAAsBT,OAAS/gB,QAAQ7K,KAAKitB,kBACnDjtB,KAAKurB,YAAYjK,KAAK,CAAEvE,WAAY/c,KAAKitB,iBAAiBlQ,aAE1D/c,KAAKqsB,sBAAsBR,oBAI/BM,EAAAjsB,UAAAstB,gBAAA,SAAgBlO,GACd,GAAIzU,QAAQ7K,KAAKytB,YAAa,CAC5B,GACEztB,KAAKytB,WAAWzlB,cAAc0lB,SAASpO,EAAMre,SAC7CjB,KAAKssB,WAAWtkB,cAAc0lB,SAASpO,EAAMre,QAE7C,OAEAjB,KAAKosB,WAAWG,wBAKtBJ,EAAAjsB,UAAAytB,aAAA,WACE3tB,KAAKosB,WAAWG,uBAGlBJ,EAAAjsB,UAAAiN,YAAA,WACEnN,KAAKgsB,aAAa5e,cAClBpN,KAAKosB,WAAWG,gEA5EJT,EAAAA,mBACQ8B,EAAAA,kBACJnD,EAAAA,aARlB1pB,EAAA,CADCwgB,EAAAA,4CAGwBxgB,EAAA,CAAxB8sB,EAAAA,UAAU,gDACc9sB,EAAA,CAAxB8sB,EAAAA,UAAU,gDAXA1B,EAA0BprB,EAAA,CAVtCqH,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,8vCAEA6U,cAAeC,EAAAA,kBAAkBC,KAEjC3V,KAAM,CACJomB,mBAAoB,u5PAGX3B,oBCqDX,SAAA4B,IAvDA/tB,KAAA2K,UAAYvK,EAAAA,UAGZJ,KAAAguB,WAAmC,IAAI3M,EAAAA,aAEvCrhB,KAAAiuB,eAAuC,IAAI5M,EAAAA,aAE3CrhB,KAAAkuB,SAAiC,IAAI7M,EAAAA,aAErCrhB,KAAAmuB,SAAiC,IAAI9M,EAAAA,aAErCrhB,KAAAouB,WAAmC,IAAI/M,EAAAA,aAGvCrhB,KAAAquB,QAAS,EAGTruB,KAAAsuB,UAAW,EAGXtuB,KAAAuuB,WAAY,EAKZvuB,KAAAwuB,gBAAiB,EAiCnB,OA7BET,EAAA7tB,UAAAuuB,YAAA,WACEzuB,KAAKsuB,UAAW,GAGlBP,EAAA7tB,UAAAwuB,WAAA,WACE1uB,KAAKsuB,UAAW,EAChBtuB,KAAKouB,WAAW9M,KAAK,IAGvByM,EAAA7tB,UAAA+e,OAAA,WACEjf,KAAKguB,WAAW1M,KAAK,IAGvByM,EAAA7tB,UAAAyuB,WAAA,WACE3uB,KAAKuuB,WAAY,EACjBvuB,KAAKiuB,eAAe3M,KAAK,IAG3ByM,EAAA7tB,UAAA0uB,KAAA,WACE5uB,KAAKkuB,SAAS5M,KAAK,IAGrByM,EAAA7tB,UAAA2uB,KAAA,WACE7uB,KAAKmuB,SAAS7M,KAAK,IAKrByM,EAAA7tB,UAAA8K,SAAA,aAtDAjK,EAAA,CADCwgB,EAAAA,2CAGDxgB,EAAA,CADCwgB,EAAAA,+CAGDxgB,EAAA,CADCwgB,EAAAA,yCAGDxgB,EAAA,CADCwgB,EAAAA,yCAGDxgB,EAAA,CADCwgB,EAAAA,2CAIDxgB,EAAA,CADCoH,EAAAA,sCAIDpH,EAAA,CADCoH,EAAAA,wCAIDpH,EAAA,CADCoH,EAAAA,yCAIDpH,EAAA,CADCoH,EAAAA,uCAGDpH,EAAA,CADCoH,EAAAA,8CAzBU4lB,EAAahtB,EAAA,CAJzBqH,EAAAA,UAAU,CACTC,SAAU,UACVC,SAAA,8jGAEWylB,oBChBb,SAAAe,KAAyB,OAAZA,EAAU/tB,EAAA,CALtByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcwF,EAAAA,WAAY5F,GACpCE,aAAc,CAACslB,IACf9kB,QAAS,CAAC8kB,OAECe,oBCFX,SAAAC,EAAoBjqB,GAAA9E,KAAA8E,OAAAA,SAapBiqB,EAAA7uB,UAAA8uB,iBAAA,SACEhnB,EACAinB,GAFF,IAAAznB,EAAAxH,KAIE,OAAOA,KAAK8E,OAAOoqB,QAAQvjB,KACzB+U,EAAAA,KAAI,WAAM,OAAC1Y,EAA8B0a,eACzChC,EAAAA,KAAI,SAACyO,GAAe,OAAA3nB,EAAK4nB,eAAeD,EAAYF,QAWhDF,EAAA7uB,UAAAkvB,eAAR,SAAuBC,EAAwBJ,GAC7C,IAAIK,EAAkB,EAClBL,EAAUM,SAAS,QAErBD,EAAkBD,EADNJ,EAAUO,UAAU,EAAGP,EAAUruB,OAAS,IAIpDquB,EAAUM,SAAS,OAErBD,EACED,GAAkBA,GAFPJ,EAAUO,UAAU,EAAGP,EAAUruB,OAAS,GAEK,OAG9D,OAAO2hB,KAAKwI,MAAMuE,IAAoB,4CA3CZzoB,EAAAA,uIADjBkoB,EAAehuB,EAAA,CAH3BiG,EAAAA,WAAW,CACVC,WAAY,UAED8nB,MC0BbU,GAAA,WA6CE,SAAAA,EAAsBrP,EAA0B5C,GAA1Bxd,KAAAogB,GAAAA,EAA0BpgB,KAAAwd,QAAAA,EAdvCxd,KAAAivB,UAAY,QAKZjvB,KAAA0vB,gBAAiB,EAEjB1vB,KAAA2vB,cAAgBvvB,EAAAA,UAAUkE,OAC1BtE,KAAA4vB,aAAexvB,EAAAA,UAAUqD,WACzBzD,KAAA6vB,SAAWzvB,EAAAA,UAAUoD,YAkBhC,OA9CEhE,OAAAiC,eAAIguB,EAAAvvB,UAAA,WAAQ,KAAZ,SAAa4vB,GACX9vB,KAAK+vB,MAAQD,EAEb9vB,KAAKgwB,YAAc,mCAgCrBP,EAAAvvB,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACOA,KAAKsI,WAAYqJ,EAAAA,YAMtB3R,KAAKiwB,MAAQjwB,KAAKwd,QACfwR,iBAAiBhvB,KAAKogB,GAAGpY,cAAehI,KAAKivB,WAC7CtjB,KAAKG,EAAAA,KAAI,WAAM,OAACtE,EAAKwoB,YAAc,MAPpC/gB,QAAQxM,MACN,+HALoBwF,EAAAA,kBAA+B8mB,MAzChDhuB,EAAA,CAARoH,EAAAA,qCAQDpH,EAAA,CADCoH,EAAAA,MAAM,uCAWEpH,EAAA,CAARoH,EAAAA,wCASQpH,EAAA,CAARoH,EAAAA,yCAKQpH,EAAA,CAARoH,EAAAA,8CAEQpH,EAAA,CAARoH,EAAAA,6CACQpH,EAAA,CAARoH,EAAAA,4CACQpH,EAAA,CAARoH,EAAAA,wCAxCUsnB,EAAiB1uB,EAAA,CAL7BqH,EAAAA,UAAU,CACTC,SAAU,cACVC,SAAA,8rDACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BwI,GAAb,IThCYlG,GAAAA,EAAAA,aAAAA,EAAAA,WAAU,KACpB,GAAA,KACAA,GAAA,GAAA,KACAA,GAAA,GAAA,KACAA,GAAA,GAAA,KACAA,GAAA,GAAA,KA0CF,OUlCY2G,GA4EAC,GV1CZC,GAAA,aW3CMC,KAAmBtkB,GAAA,IACtBwd,EAAAA,WAAW+G,IAAK,IACjBvkB,GAACwd,EAAAA,WAAWgH,IAAK,IACjBxkB,GAACwd,EAAAA,WAAWiH,IAAK,IACjBzkB,GAACwd,EAAAA,WAAWkH,IAAK,SAMnBC,GAAA,WACE,SAAAA,EAAoB5rB,EAA2Bc,GAA3B5F,KAAA8E,OAAAA,EAA2B9E,KAAA4F,OAAAA,SAE/CpG,OAAAiC,eAAIivB,EAAAxwB,UAAA,cAAW,KAAf,WAAA,IAAAsH,EAAAxH,KACE,OAAKA,KAAK2wB,OAGH3wB,KAAK8E,OAAOoqB,QAAQvjB,KACzB+U,EAAAA,KAAI,SAACpB,GAAU,OAAA9X,EAAKopB,cAAuBtR,EAAMre,OAAQ4vB,eACzDhlB,EAAAA,wBAJOwP,EAAAA,GAAGkO,EAAAA,WAAW+G,qCAiBzBI,EAAAxwB,UAAA4wB,QAAA,SAAQC,SACN,OAA8B,QAAvBhlB,EAAA/L,KAAK4F,OAAOorB,mBAAW,IAAAjlB,OAAA,EAAAA,EAAElM,eAAekxB,IAC3C/wB,KAAK4F,OAAOorB,YAAYD,GACxBV,GAAoBU,IAM1BvxB,OAAAiC,eAAIivB,EAAAxwB,UAAA,cAAW,KAAf,WACE,MAAO,CACLqpB,EAAAA,WAAW+G,GACX/G,EAAAA,WAAWgH,GACXhH,EAAAA,WAAWiH,GACXjH,EAAAA,WAAWkH,GACXlH,EAAAA,WAAW0H,qCAWfP,EAAAxwB,UAAAgxB,OAAA,SAAOH,GAAP,IAAAvpB,EAAAxH,KACE,OAAOA,KAAKmxB,YAAYxlB,KACtB+U,EAAAA,KAAI,SAAC0Q,GACH,OAAA5pB,EAAKwpB,YACF/F,MAAM,EAAGzjB,EAAKwpB,YAAYlT,QAAQiT,GAAc,GAChD/qB,SAASorB,QAYlBV,EAAAxwB,UAAAmxB,KAAA,SAAKN,GAAL,IAAAvpB,EAAAxH,KACE,OAAOA,KAAKmxB,YAAYxlB,KACtB+U,EAAAA,KAAI,SAAC0Q,GACH,OAAA5pB,EAAKwpB,YACF/F,MAAMzjB,EAAKwpB,YAAYlT,QAAQiT,IAC/B/qB,SAASorB,QAQlBV,EAAAxwB,UAAAoxB,QAAA,SAAQP,GACN,OAAO/wB,KAAKmxB,YAAYxlB,KAAK+U,EAAAA,KAAI,SAAC0Q,GAAO,OAAAA,IAAOL,OAGxCL,EAAAxwB,UAAA0wB,cAAV,SAAwBW,GACtB,IAAMR,EAAa/wB,KAAKwxB,WAAWD,GACnC,OAAOhI,EAAAA,WAAWwH,GAAcxH,EAAAA,WAAWkH,KAGnCC,EAAAxwB,UAAAsxB,WAAV,SAAqBD,GAArB,IAAA/pB,EAAAxH,KAKE,OAJKuxB,IACHA,EAAcvxB,KAAK2wB,OAAOE,YAGrBU,EAAcvxB,KAAK8wB,QAAQvH,EAAAA,WAAWkH,IACzClH,EAAAA,WAAW0H,GACXjxB,KAAKgxB,YAAYnrB,MAAK,SAACurB,GAAO,OAAAG,GAAe/pB,EAAKspB,QAAQM,OAGhE5xB,OAAAiC,eAAIivB,EAAAxwB,UAAA,SAAM,KAAV,WACE,OAAOF,KAAK8E,OAAO2sB,uFAjGO5qB,EAAAA,iBAA2BupB,kJAD5CM,EAAiB3vB,EAAA,CAH7BiG,EAAAA,WAAW,CACVC,WAAY,UAEDypB,GAAb,GCJAgB,GAAA,WACE,SAAAA,EACY9rB,EACA+rB,GADA3xB,KAAA4F,OAAAA,EACA5F,KAAA2xB,kBAAAA,SAGZnyB,OAAAiC,eAAYiwB,EAAAxxB,UAAA,eAAY,KAAxB,WACE,MAAO,CACL,CACE0xB,KAAM,SACNC,UAAW7xB,KAAK2xB,kBAAkBb,QAAQvH,EAAAA,WAAW+G,KAEvD,CACEsB,KAAM,SACNC,UAAW7xB,KAAK2xB,kBAAkBb,QAAQvH,EAAAA,WAAWgH,KAEvD,CACEqB,KAAM,UACNC,UAAW7xB,KAAK2xB,kBAAkBb,QAAQvH,EAAAA,WAAWiH,KAEvD,CACEoB,KAAM,aACNC,UAAW7xB,KAAK2xB,kBAAkBb,QAAQvH,EAAAA,WAAWkH,uCAK3DiB,EAAAxxB,UAAA4xB,SAAA,SAASC,EAAWC,EAAiBC,GACnC,MAAO,CACLC,IAAKlyB,KAAKmyB,aAAaJ,EAAWC,GAClCI,OAAQpyB,KAAKqyB,UAAUN,GACvBE,IAAKA,GAAOjyB,KAAKsyB,OAAOP,EAAWC,KAI/BN,EAAAxxB,UAAAiyB,aAAR,SAAqBI,EAAOP,GAC1B,OAAIO,GAASA,EAAMP,GAzCM,UA0ChBhyB,KAAKwyB,YAAYD,EAAMP,GA1CP,UA0CuCptB,KACrD2tB,GAASA,EAAM3tB,IACjB5E,KAAKwyB,YAAYD,EAAM3tB,KACrB2tB,GAASA,EAAMvyB,KAAKyyB,0BAA0BF,IAChDvyB,KAAKwyB,YAAYD,EAAMvyB,KAAKyyB,0BAA0BF,IAAQ3tB,KAE9D,MAOH8sB,EAAAxxB,UAAAuyB,0BAAR,SAAkCF,GAE9B,IAAIG,EADN,OAAIH,GAGFvyB,KAAK2yB,aAAa/qB,SAAQ,SAACoqB,KAEtBU,GACAA,EAAYb,UAAYG,EAAOH,WAAaU,EAAMP,EAAOJ,SAE1Dc,EAAcV,MAIXU,EAAYd,MAGd,MAGDF,EAAAxxB,UAAAoyB,OAAR,SAAeC,EAAOP,GACpB,GAAKO,EAEE,OAAIA,EAAMP,GA7EQ,UA8EhBO,EAAMP,GA9EU,UA8EsBY,QACpCL,EAAMK,QACRL,EAAMK,aADR,GAQDlB,EAAAxxB,UAAAmyB,UAAR,SAAkBE,GAAlB,IAAA/qB,EAAAxH,KACE,GAAKuyB,EAAL,CAGA,IAAMH,EAASpyB,KAAK2yB,aAAaE,QAAO,SAAC9T,EAAKiT,GAS5C,OARMO,EAAMP,EAAOJ,QACb7S,IACFA,GAAO,MAETA,GAAUvX,EAAKgrB,YAAYD,EAAMP,EAAOJ,MAAMhtB,KAAI,IAChDotB,EAAOH,UAAS,KAGb9S,IACN,IAEH,MAAkB,KAAXqT,OAAgBzd,EAAYyd,IAG7BV,EAAAxxB,UAAAsyB,YAAR,SAAoB5tB,GAClB,OAAKA,EAGEA,EAAIkuB,WAAW,QAAUluB,EAAM5E,KAAK+yB,aAAenuB,EAFjD,MAKH8sB,EAAAxxB,UAAA6yB,WAAR,WACE,OACE/yB,KAAK4F,OAAOotB,QAAQT,MAAMU,SAAWjzB,KAAK4F,OAAOotB,QAAQE,IAAID,SAAW,6CA5GxDE,EAAAA,iBACWzC,kJAHpBgB,EAAY3wB,EAAA,CAHxBiG,EAAAA,WAAW,CACVC,WAAY,UAEDyqB,GAAb,iBCwDE,SAAA0B,EAAsBC,GAAArzB,KAAAqzB,aAAAA,EA5BZrzB,KAAAszB,OAAgC,IAAIjS,EAAAA,aAYTrhB,KAAAuzB,eAAgB,EAOpBvzB,KAAAwzB,WAAY,EAOZxzB,KAAAyzB,WAAY,EA8C/C,OA1CEL,EAAAlzB,UAAAwzB,YAAA,WACE1zB,KAAKG,UAMCizB,EAAAlzB,UAAAC,OAAR,WACEH,KAAKuyB,MAAQvyB,KAAKqzB,aAAavB,SAC7B9xB,KAAK+xB,UACL/xB,KAAKgyB,OACLhyB,KAAKiyB,KAEFjyB,KAAKuyB,MAAML,KACdlyB,KAAK2zB,iBAOTP,EAAAlzB,UAAA0zB,YAAA,WACE5zB,KAAKwzB,WAAY,EACjBxzB,KAAKuzB,eAAgB,EACrBvzB,KAAKyzB,WAAY,EACjBzzB,KAAKszB,OAAOhS,MAAK,IAOnB8R,EAAAlzB,UAAA2zB,aAAA,WACE7zB,KAAK2zB,iBAGCP,EAAAlzB,UAAAyzB,cAAR,WACE3zB,KAAKwzB,WAAY,EACjBxzB,KAAKuzB,eAAgB,EACrBvzB,KAAKyzB,WAAY,EACjBzzB,KAAKszB,OAAOhS,MAAK,6CA1CiBoQ,MA5C3B3wB,EAAA,CAARoH,EAAAA,yCAKQpH,EAAA,CAARoH,EAAAA,sCAMQpH,EAAA,CAARoH,EAAAA,mCAKSpH,EAAA,CAATwgB,EAAAA,uCAYoCxgB,EAAA,CAApCmc,EAAAA,YAAY,6DAOoBnc,EAAA,CAAhCmc,EAAAA,YAAY,qDAOoBnc,EAAA,CAAhCmc,EAAAA,YAAY,qDAjDFkW,EAAcryB,EAAA,CAL1BqH,EAAAA,UAAU,CACTC,SAAU,WACVC,SAAA,6KACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BmM,oBCRb,SAAAU,KAA0B,OAAbA,EAAW/yB,EAAA,CALvByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVF,aAAc,CAAC2qB,IACfnqB,QAAS,CAACmqB,OAECU,oBCIb,SAAAC,KAA6B,OAAhBA,EAAchzB,EAAA,CAL1ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAczrB,EAAYurB,GAAaG,EAAAA,WAC/DxrB,aAAc,CAACgnB,IACfxmB,QAAS,CAACwmB,OAECsE,MCYbG,GAAA,WAAA,SAAAA,IAWWl0B,KAAAm0B,IAAM,EAYNn0B,KAAAo0B,KAAO,EAOPp0B,KAAAq0B,WAAY,EAUmBr0B,KAAAs0B,UAAW,EAqDrD,OAjDyBJ,EAAAh0B,UAAA0kB,YAAA,WACrB5kB,KAAKu0B,MAAMvsB,cAAc4W,SAG3BsV,EAAAh0B,UAAA+hB,UAAA,WAGEjiB,KAAKw0B,QAAQjH,SAASvtB,KAAKw0B,QAAQryB,MAAQnC,KAAKo0B,MAChDp0B,KAAKw0B,QAAQC,eAGfP,EAAAh0B,UAAAw0B,UAAA,WACE10B,KAAKw0B,QAAQjH,SAASvtB,KAAKw0B,QAAQryB,MAAQnC,KAAKo0B,MAChDp0B,KAAKw0B,QAAQC,eAOfP,EAAAh0B,UAAAy0B,WAAA,WAAA,IAAAntB,EAAAxH,KAUE,OATKA,KAAK40B,YACR50B,KAAK40B,UAAY50B,KAAKw0B,QAAQ3H,aAAalhB,KACzCkpB,EAAAA,UAAU70B,KAAKw0B,QAAQryB,OACvB2J,EAAAA,KAAI,SAAC3J,GACH,OAAAqF,EAAKgtB,QAAQjH,SAAS/lB,EAAKstB,cAAc3yB,GAAQ,CAAE4yB,WAAW,OAEhErU,EAAAA,KAAI,WAAM,OAAAlZ,EAAKgtB,aAGZx0B,KAAK40B,WAUNV,EAAAh0B,UAAA40B,cAAR,SAAsB3yB,GAOpB,OANIA,EAAQnC,KAAKm0B,MAAmB,IAAVhyB,IAAenC,KAAKq0B,aAC5ClyB,EAAQnC,KAAKm0B,KAEXn0B,KAAKg1B,KAAO7yB,EAAQnC,KAAKg1B,MAC3B7yB,EAAQnC,KAAKg1B,KAER7yB,GAtFApB,EAAA,CAARoH,EAAAA,uCAMQpH,EAAA,CAARoH,EAAAA,mCAKQpH,EAAA,CAARoH,EAAAA,mCAOQpH,EAAA,CAARoH,EAAAA,oCAOQpH,EAAA,CAARoH,EAAAA,yCAUuCpH,EAAA,CAAvCmc,EAAAA,YAAY,kBAAmB/U,EAAAA,wCAEdpH,EAAA,CAAjB8sB,EAAAA,UAAU,oCAEY9sB,EAAA,CAAtByd,EAAAA,aAAa,0CA5CH0V,EAAoBnzB,EAAA,CARhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,wZAMW4rB,GAAb,iBCfA,SAAAe,KAAgC,OAAnBA,EAAiBl0B,EAAA,CAL7ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcusB,EAAAA,qBACxBzsB,aAAc,CAACyrB,IACfjrB,QAAS,CAACirB,OAECe,MCDbE,GAAA,WAAA,SAAAA,IACmBn1B,KAAAo1B,cAAwB,gBA2B3C,OAlBE51B,OAAAiC,eAAI0zB,EAAAj1B,UAAA,MAAG,KAAP,WACE,MAAuB,WAAhBF,KAAKiB,OAAsB,WAAa,sCAGjDzB,OAAAiC,eAAI0zB,EAAAj1B,UAAA,YAAS,KAAb,WACE,MAAwB,iBAAbF,KAAK4E,IACP,CAAC5E,KAAKq1B,eAAer1B,KAAK4E,MAE5B5E,KAAK4E,qCAGduwB,EAAAj1B,UAAAo1B,cAAA,WACE,MAA2B,iBAAbt1B,KAAK4E,KAAoB5E,KAAKo1B,cAAcG,KAAKv1B,KAAK4E,MAG9DuwB,EAAAj1B,UAAAm1B,eAAR,SAAuBzwB,GACrB,OAAOA,EAAIkuB,WAAW,KAAO9yB,KAAK4E,IAAM,IAAM5E,KAAK4E,KAvB5C7D,EAAA,CAARoH,EAAAA,mCACQpH,EAAA,CAARoH,EAAAA,sCACQpH,EAAA,CAARoH,EAAAA,qCACQpH,EAAA,CAARoH,EAAAA,kCACQpH,EAAA,CAARoH,EAAAA,qCACQpH,EAAA,CAARoH,EAAAA,qCARUgtB,EAAoBp0B,EAAA,CAJhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,8wBAEW6sB,GAAb,iBCCA,SAAAK,KAAgC,OAAnBA,EAAiBz0B,EAAA,CAL7ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,cACxBvrB,aAAc,CAAC0sB,IACflsB,QAAS,CAACksB,OAECK,MCRAC,GAA4C,CACvDC,WAAY,CACVC,UAAU,EACVC,QAAQ,OCHZ,cXaY1F,GAAAA,EAAAA,qBAAAA,EAAAA,mBAAkB,KAC5B,IAAA,MACAA,GAAA,MAAA,QACAA,GAAA,KAAA,OACAA,GAAA,SAAA,WACAA,GAAA,KAAA,OACAA,GAAA,MAAA,QACAA,GAAA,IAAA,MACAA,GAAA,KAAA,QAoEUC,GAAAA,EAAAA,+BAAAA,EAAAA,6BAA4B,KACtC,MAAA,QACAA,GAAA,OAAA,SACAA,GAAA,MAAA,QYrFF,OCTY0F,GDSNC,GAAiD,CACrDC,WAAY,EACZC,UAAW,MACXC,WAAY,IACZC,cAAe,IACfC,UAAW,IACXC,SAAU,KA8BZC,GAAA,WACE,SAAAA,EAAsBC,GAAAt2B,KAAAs2B,iBAAAA,SAYtBD,EAAAn2B,UAAAq2B,SAAA,SAASC,EAAmBC,GAC1B,IAAMC,EAA0B,GAChC,OAAIF,EAAY,EACPE,GAET12B,KAAK22B,SAASD,EAAOF,EAAWC,GAChCz2B,KAAK42B,QAAQF,EAAOF,GACpBx2B,KAAK62B,aAAaH,EAAOF,GACzBx2B,KAAK82B,cAAcJ,EAAOF,EAAWC,GAE9BC,IAWCL,EAAAn2B,UAAAy2B,SAAV,SACED,EACAF,EACAC,GAEA,IAAMM,EAAQ/2B,KAAKg3B,gBAAgBR,EAAWC,GACxCzB,EAAMzS,KAAK4R,IAAIn0B,KAAK4F,OAAOmwB,WAAYS,GAE7C72B,MAAMwQ,KAAKxQ,MAAMq1B,IAAMptB,SAAQ,SAACqvB,EAAGx2B,GACjCi2B,EAAMl0B,KAAK,CACT00B,OAAQz2B,EAAIs2B,EACZI,MAAOC,OAAO32B,EAAIs2B,EAAQ,GAC1BryB,KAAMwrB,EAAAA,mBAAmBmH,WAarBhB,EAAAn2B,UAAA02B,QAAV,SAAkBF,EAAyBF,GAA3C,IAAAhvB,EAAAxH,KACE,GAAKA,KAAK4F,OAAOgxB,QAAjB,CA+DAF,EAAMY,QAAOx2B,MAAb41B,EAAKh0B,EA3De,WAClB,IAAM60B,EAAkBb,EAAM,GAAGQ,OAC3BM,EAAYhwB,EAAK5B,OAAO6xB,SAAW,EAAI,EAC7C,GAAIF,EAAkBC,EAAW,CAC/B,IAAME,GACHlwB,EAAK5B,OAAO+xB,+BACbJ,IAAoBC,EAAY,EAC5BI,EACJpwB,EAAK5B,OAAO6xB,UACZjwB,EAAK5B,OAAO+xB,+BACE,IAAdH,EACI9yB,EAAOgzB,EACTxH,EAAAA,mBAAmB2H,IACnBD,EACA1H,EAAAA,mBAAmB4H,MACnB5H,EAAAA,mBAAmBmH,KACvB,MAAO,CACL73B,OAAOc,OACL,CACE62B,MAAOO,EAAQlwB,EAAK5B,OAAOowB,UAAYoB,OAAOI,EAAY,GAC1D9yB,KAAIA,GAENgzB,EAAQ,KAAO,CAAER,OAAQM,KAGxB,MAAO,GAkCCO,KACjBrB,EAAMl0B,KAAI1B,MAAV41B,EAAKh0B,EAhCc,WACjB,IAAMs1B,EAAiBtB,EAAMA,EAAM91B,OAAS,GAAGs2B,OAAS,EAClDe,EAAOzB,GAAahvB,EAAK5B,OAAOsyB,QAAU,EAAI,GACpD,GAAIF,GAAkBC,EAAM,CAC1B,IAAML,EACJpwB,EAAK5B,OAAOsyB,SACZ1wB,EAAK5B,OAAO+xB,+BACZK,IAAmBC,EACfP,EACJM,EACAxB,GACGhvB,EAAK5B,OAAO+xB,8BAAgC,EAAI,IAChDnwB,EAAK5B,OAAOsyB,QAAU,EAAI,GAEzBxzB,EAAOgzB,EACTxH,EAAAA,mBAAmB2H,IACnBD,EACA1H,EAAAA,mBAAmBiI,KACnBjI,EAAAA,mBAAmBmH,KACvB,MAAO,CACL73B,OAAOc,OACL,CACE62B,MAAOO,EAAQlwB,EAAK5B,OAAOowB,UAAYoB,OAAOY,EAAiB,GAC/DtzB,KAAIA,GAENgzB,EAAQ,KAAO,CAAER,OAAQc,KAGxB,MAAO,GAIFI,OAUN/B,EAAAn2B,UAAA22B,aAAV,SAAuBH,EAAyBF,GAC1Cx2B,KAAK4F,OAAO6xB,UAAgC,IAApBf,EAAM,GAAGQ,QACnCR,EAAMY,QAAQ,CACZJ,OAAQ,EACRC,MAAO,IACPzyB,KAAMwrB,EAAAA,mBAAmB4H,QAI3B93B,KAAK4F,OAAOsyB,SACZxB,EAAMA,EAAM91B,OAAS,GAAGs2B,SAAWV,EAAY,GAE/CE,EAAMl0B,KAAK,CACT00B,OAAQV,EAAY,EACpBW,MAAOC,OAAOZ,GACd9xB,KAAMwrB,EAAAA,mBAAmBiI,QAoBrB9B,EAAAn2B,UAAA42B,cAAV,SACEJ,EACAF,EACAC,GAEA,IAAM4B,EAASr4B,KAAKs4B,eAAe7B,GAC7B8B,EAAQv4B,KAAKw4B,SAAShC,EAAWC,GACjCgC,EAAMz4B,KAAK4F,OAAO8yB,mBACnBD,GAAOA,IAAQtI,EAAAA,6BAA6BwI,OAI3CF,IAAQtI,EAAAA,6BAA6ByI,QACvClC,EAAMY,QAAOx2B,MAAb41B,EAAKh0B,EAAY21B,EAAWE,IAE1BE,IAAQtI,EAAAA,6BAA6B0I,OACvCnC,EAAMl0B,KAAI1B,MAAV41B,EAAKh0B,EAAS21B,EAAWE,MAP3B7B,EAAMY,QAAOx2B,MAAb41B,EAAKh0B,EAAY21B,IACjB3B,EAAMl0B,KAAI1B,MAAV41B,EAAKh0B,EAAS61B,MAcVlC,EAAAn2B,UAAAo4B,eAAR,SAAuB7B,GAAvB,IAAAjvB,EAAAxH,KACQ84B,EAAO,GAEb,GAAI94B,KAAK4F,OAAO+vB,SAAU,CAUxBmD,EAAKt2B,KARIhD,OAAOc,OACZ,CACE62B,MAAO3vB,EAAK5B,OAAOqwB,WACnBvxB,KAAMwrB,EAAAA,mBAAmB6I,OAE3BtC,EAAU,EAAI,CAAES,OAAQ,GAAM,OAKpC,GAAIl3B,KAAK4F,OAAOozB,YAAa,CAU3BF,EAAKt2B,KARIhD,OAAOc,OACZ,CACE62B,MAAO3vB,EAAK5B,OAAOswB,cACnBxxB,KAAMwrB,EAAAA,mBAAmB+I,UAE3BxC,EAAU,EAAI,CAAES,OAAQT,EAAU,GAAM,OAK9C,OAAOqC,GAMDzC,EAAAn2B,UAAAs4B,SAAR,SAAiBhC,EAAmBC,GAApC,IAAAjvB,EAAAxH,KACQ84B,EAAO,GAEb,GAAI94B,KAAK4F,OAAOszB,QAAS,CAUvBJ,EAAKt2B,KARIhD,OAAOc,OACZ,CACE62B,MAAO3vB,EAAK5B,OAAOuwB,UACnBzxB,KAAMwrB,EAAAA,mBAAmBiJ,MAE3B1C,EAAUD,EAAY,EAAI,CAAEU,OAAQT,EAAU,GAAM,OAK1D,GAAIz2B,KAAK4F,OAAOgwB,OAAQ,CAUtBkD,EAAKt2B,KARIhD,OAAOc,OACZ,CACE62B,MAAO3vB,EAAK5B,OAAOwwB,SACnB1xB,KAAMwrB,EAAAA,mBAAmBkJ,KAE3B3C,EAAUD,EAAY,EAAI,CAAEU,OAAQV,EAAY,GAAM,OAM5D,OAAOsC,GAUDzC,EAAAn2B,UAAA82B,gBAAR,SAAwBR,EAAmBC,GACzC,IAAM4C,EAAQr5B,KAAK4F,OAAOmwB,WAAa,EAEjCuD,EAAQ/W,KAAKC,MAAM6W,EAAQ,GAG3BE,EAAWhX,KAAKyS,IAAI,EAAGyB,EAAU6C,GAEjCE,EAAWjX,KAAKyS,IAAI,EAAGwB,EAAY6C,EAAQ,GAGjD,OAAO9W,KAAK4R,IAAIqF,EAAUD,IAG5B/5B,OAAAiC,eAAY40B,EAAAn2B,UAAA,SAAM,KAAlB,WACE,OAAOV,OAAOc,OACZw1B,GACA91B,KAAKs2B,iBAAiBZ,sFAxRc+D,uHAD7BpD,EAAiBt1B,EAAA,CAH7BiG,EAAAA,WAAW,CACVC,WAAY,UAEDovB,GAAb,GEvBAqD,GAAA,WA0BE,SAAAA,EACUC,EACAC,GADA55B,KAAA25B,kBAAAA,EACA35B,KAAA45B,eAAAA,EANA55B,KAAA65B,cAAsC,IAAIxY,EAAAA,aAEpDrhB,KAAA02B,MAA0B,GAkE5B,OA5EEl3B,OAAAiC,eAAIi4B,EAAAx5B,UAAA,aAAU,KAAd,WACE,OAAOF,KAAK85B,iBAEL,SAAe33B,GACtBnC,KAAK85B,YAAc33B,EACnBnC,KAAKkoB,OAAO/lB,oCAYNu3B,EAAAx5B,UAAAgoB,OAAR,SAAewN,GACb11B,KAAK02B,MAAQ12B,KAAK25B,kBAAkBpD,SAClCb,EAAWqE,WACXrE,EAAWsE,cAUfN,EAAAx5B,UAAA+5B,UAAA,SAAUC,GACR,OACEA,EAAKx1B,OAASwrB,EAAAA,mBAAmBmH,MACjC6C,EAAKhD,SAAWl3B,KAAK01B,WAAWsE,aAapCN,EAAAx5B,UAAAi6B,WAAA,SAAWD,GACT,OACGA,EAAKr6B,eAAe,WACrBq6B,EAAKhD,SAAWl3B,KAAK01B,WAAWsE,aAIpCN,EAAAx5B,UAAAk6B,eAAA,SAAeF,GACb,IAAMG,EAAc76B,OAAOc,OACzB,GACAN,KAAK45B,eAAeU,SAASD,aAc/B,OAXEr6B,KAAKu6B,YACLL,EAAKhD,OAASl3B,KAAK01B,WAAWqE,aAC7B/5B,KAAKi6B,UAAUC,KAEhBG,EAAYr6B,KAAKu6B,YAAcL,EAAKhD,QAIlCmD,EAAYr6B,KAAKu6B,cAAgBv6B,KAAKw6B,oBACjCH,EAAYr6B,KAAKu6B,YAEnBF,GAGTX,EAAAx5B,UAAAu6B,WAAA,SAAWC,GACT16B,KAAK65B,cAAcvY,KAAKoZ,EAAKxD,kDA7DFb,UACHsE,EAAAA,kBA1BjB55B,EAAA,CAARoH,EAAAA,yCAGQpH,EAAA,CAARoH,EAAAA,0CAMQpH,EAAA,CAARoH,EAAAA,2CAMQpH,EAAA,CAARoH,EAAAA,wCAKSpH,EAAA,CAATwgB,EAAAA,8CAtBUmY,EAAmB34B,EAAA,CAL/BqH,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,iTACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9ByS,GAAb,iBCNA,SAAAkB,KAA+B,OAAlBA,EAAgB75B,EAAA,CAT5ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,cACxBprB,UAAW,CACTC,EAAAA,qBAAqB4sB,IACrB,CAAE3sB,QAAS2wB,GAAkB1wB,YAAaC,EAAAA,SAE5CP,aAAc,CAACixB,IACfzwB,QAAS,CAACywB,OAECkB,oBCWX,SAAAC,IACE76B,KAAK86B,cAAgB,IAAIzZ,EAAAA,aAM7B,OAHEwZ,EAAA36B,UAAA66B,SAAA,SAASC,GACPh7B,KAAK86B,cAAcxZ,KAAK0Z,IAhB1Bj6B,EAAA,CADCoH,EAAAA,2CAGDpH,EAAA,CADCoH,EAAAA,8CAGDpH,EAAA,CADCoH,EAAAA,2CAGDpH,EAAA,CADCoH,EAAAA,0CAIDpH,EAAA,CADCwgB,EAAAA,8CAVUsZ,EAAgB95B,EAAA,CAL5BqH,EAAAA,UAAU,CACTC,SAAU,aACVC,SAAA,8UACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B4T,oBCFb,SAAAI,KAAmC,OAAtBA,EAAoBl6B,EAAA,CALhCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcuyB,EAAAA,eAAgBC,EAAAA,YAAaP,IACrDnyB,aAAc,CAACoyB,IACf5xB,QAAS,CAAC4xB,GAAkBnB,OAEjBuB,MCJbG,GAAA,WACE,SAAAA,KACF,OAFaA,EAAgBr6B,EAAA,CAJ5BqH,EAAAA,UAAU,CACTC,SAAU,aACVC,SAAA,mHAEW8yB,GAAb,iBCGA,SAAAC,KAA4B,OAAfA,EAAat6B,EAAA,CALzByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcwF,EAAAA,YACxB1F,aAAc,CAAC2yB,IACfnyB,QAAS,CAACmyB,OAECC,oBCQX,SAAAC,EAAsBzf,GAAA7b,KAAA6b,qBAAAA,EALtB7b,KAAA2K,UAAYvK,EAAAA,UAGZJ,KAAAu7B,YAAwC/e,EAAAA,kBAW1C,OAPE8e,EAAAp7B,UAAA8K,SAAA,WACEhL,KAAKw7B,UAAYx7B,KAAK6b,qBAAqBpJ,OAG7C6oB,EAAAp7B,UAAA8e,MAAA,SAAMta,EAAyBye,GAC7BnjB,KAAK6b,qBAAqB3C,OAAOxU,EAAMye,6CAPG7L,EAAAA,wBANjCgkB,EAAsBv6B,EAAA,CAJlCqH,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,26DAEWgzB,oBCDb,SAAAG,KAA2C,OAA9BA,EAA4B16B,EAAA,CALxCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAc+yB,EAAAA,iBAAkBnzB,EAAY4F,EAAAA,YACtD1F,aAAc,CAAC6yB,IACfryB,QAAS,CAACqyB,OAECG,SCZb,2BCYE,SAAAE,EAAoB72B,EAA2Bc,GAA3B5F,KAAA8E,OAAAA,EAA2B9E,KAAA4F,OAAAA,EAFvC5F,KAAA47B,iBAAmB,IAAIhW,EAAAA,iBAAyB,GAIpD/a,QAAQ7K,KAAK8E,OAAO2sB,eACpB5mB,QAAQ7K,KAAK8E,OAAOwB,WACpBtG,KAAK67B,0BAEL77B,KAAK87B,aACL97B,KAAK+7B,gBAIDJ,EAAAz7B,UAAA47B,WAAR,WAAA,IAAAt0B,EAAAxH,KACEg8B,EAAAA,UAAUh8B,KAAK8E,OAAO2sB,aAAc,iBAAiBhlB,WAAU,WAC7D,OAAAjF,EAAKo0B,iBAAiB15B,MAAK,OAIvBy5B,EAAAz7B,UAAA67B,MAAR,WACE,IAAME,EAAkBj8B,KAAK8E,OAAOwB,SAASG,cAAc,UAC3Dw1B,EAAgBv3B,KAAO,kBACvBu3B,EAAgBC,OAAQ,EACxBD,EAAgB/J,IAAM,iCAEtB,IAAMiK,EAAWn8B,KAAK8E,OAAOwB,SAASG,cAAc,OACpD01B,EAAS3vB,GAAKxM,KAAK4F,OAAOw2B,UAAUC,UAEpCr8B,KAAK8E,OAAOwB,SACTC,qBAAqB,QAAQ,GAC7BK,YAAYq1B,GAEfj8B,KAAK8E,OAAOwB,SAASC,qBAAqB,QAAQ,GAAGK,YAAYu1B,IAG3DR,EAAAz7B,UAAA27B,sBAAR,WACE,OACEhxB,QAAQ7K,KAAK4F,OAAOw2B,YAAcvxB,QAAQ7K,KAAK4F,OAAOw2B,UAAUC,YAIpEV,EAAAz7B,UAAAsoB,KAAA,WAAA,IAAAhhB,EAAAxH,KACE,OAAOA,KAAK47B,iBAAiBjwB,KAC3B0F,EAAAA,QAAO,SAACiiB,GAAW,OAAAA,KACnBjX,EAAAA,WAAU,WACR,IAAMigB,EAAM90B,EAAK1C,OAAO2sB,aAAkB,IAC1C,OAAOjqB,EAAK+0B,eAAe5wB,KACzBE,EAAAA,uBACAC,EAAAA,KAAI,SAAC0wB,GACCA,IACFF,EAAIG,IAAInhB,SACRghB,EAAIG,IAAIjU,OAAOpmB,KAAKk6B,EAAIG,IAAIC,iBAa9Bf,EAAAz7B,UAAAq8B,aAAV,WACE,OAAOlhB,EAAAA,IAAG,6CA/DgBxU,EAAAA,iBAA2B81B,kJAH5ChB,EAAsB56B,EAAA,CAHlCiG,EAAAA,WAAW,CACVC,WAAY,UAED00B,oBCCX,SAAAiB,EAAoBC,GAAA78B,KAAA68B,gBAAAA,EAFpB78B,KAAA88B,kBAAoB98B,KAAK68B,gBAAgBrU,OAG3C,gDADuCmT,MAH1BiB,EAAkB77B,EAAA,CAJ9BqH,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAU,uEAECs0B,MCLAG,GAA0C,CACrDX,UAAW,kBCyBb,SAAAY,KAA8B,OAAjBA,EAAej8B,EAAA,CApB3ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAc+yB,EAAAA,kBACxBjzB,aAAc,CAACm0B,IACfluB,gBAAiB,CAACkuB,IAClBh0B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbuuB,mBAAoB,CAClBtuB,UAAWsuB,OAIjB/zB,EAAAA,qBAAqBk0B,IAErB,CACEj0B,QAAS6zB,GACT5zB,YAAaC,EAAAA,YAINg0B,oBClBb,SAAAC,KAAwC,OAA3BA,EAAyBl8B,EAAA,CARrCqH,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAU,mKAIVye,gBAAiBC,EAAAA,wBAAwBC,UAE9BgW,MCGPC,KAAMC,GAAA,IACTC,EAAAA,qBAAsB,WACvBrxB,GAACsxB,EAAAA,qBAAsB,eAIzBC,GAAA,WACE,SAAAA,EAEYC,EACFC,EACEprB,GAFApS,KAAAu9B,cAAAA,EACFv9B,KAAAw9B,kBAAAA,EACEx9B,KAAAoS,SAAAA,EA2Fd,OAxFEkrB,EAAAp9B,UAAAu9B,SAAA,SAASC,GAAT,IAAAl2B,EAAAxH,KACE,OAAOA,KAAK29B,WAAWD,GAAS/xB,KAC9B0Q,EAAAA,WAAU,SAACmB,GAA8B,OAAAA,EAAQogB,YACjDvhB,EAAAA,WAAU,SAAC0T,GACT,OAAAvoB,EAAKq2B,WAAWH,GAAS/xB,KACvB0Q,EAAAA,WAAU,SAACyhB,WACHC,EAAY,OAClB,IAAmB,IAAAC,EAAAn8B,EAAAkuB,GAAKkO,EAAAD,EAAA97B,QAAA+7B,EAAA77B,KAAA67B,EAAAD,EAAA97B,OAAE,CAArB,IAAMg4B,EAAI+D,EAAA97B,MACb47B,EAAUv7B,KAAInC,EAAAA,EAAA,GACT65B,GAAI,CACP/C,MAAO3vB,EAAK02B,eAAehE,EAAM4D,wGAGrC,OAAOziB,EAAAA,GAAG0iB,YAOpBT,EAAAp9B,UAAAi+B,cAAA,SAAcT,GACZ,OAAO19B,KAAK29B,WAAWD,GAAS/xB,KAC9B0Q,EAAAA,WAAU,SAACmB,GAA8B,OAAAA,EAAQ4gB,iBAIrDd,EAAAp9B,UAAAm+B,SAAA,SAASX,GACP,OAAO19B,KAAK69B,WAAWH,GAAS/xB,KAC9B+U,EAAAA,KAAI,SAACod,GACH,OAAOZ,GAAOY,QAKpBR,EAAAp9B,UAAAo+B,UAAA,SAAUn8B,EAAeu7B,GACvB19B,KAAK29B,WAAWD,GACb/xB,KAAKC,EAAAA,KAAK,IACVa,WAAU,SAAC+Q,GACVA,EAAQ8gB,UAAUn8B,OAIdm7B,EAAAp9B,UAAAy9B,WAAV,SACED,GADF,IAAAl2B,EAAAxH,KAGE,OAAOA,KAAK69B,WAAWH,GAAS/xB,KAC9B+U,EAAAA,KAAI,SAACod,GAAgB,OAAAt2B,EAAK+2B,mBAAmBT,MAC7CzsB,EAAAA,QAAO,SAAC7Q,GAAM,QAAEA,OAIV88B,EAAAp9B,UAAA29B,WAAV,SAAqBH,GACnB,OAAIA,EACKriB,EAAAA,GAAGqiB,GACD19B,KAAKu9B,cACPv9B,KAAKu9B,cAAc/qB,MAAM7G,KAC9B+U,EAAAA,KAAI,SAAC8d,GAAS,OAAAA,EAAKd,WACnBhd,EAAAA,KAAI,SAACod,GACH,OAAQA,GACN,IAAK,WACH,OAAOV,EAAAA,oBACT,IAAK,WACH,OAAOC,EAAAA,oBACT,QACE,OAAOS,YAVV,GAiBCR,EAAAp9B,UAAAq+B,mBAAV,SAA6Bb,GAC3B,OAAO19B,KAAKoS,SAASK,IACnBzS,KAAKw9B,kBAAkBE,GACvB,OAIMJ,EAAAp9B,UAAAg+B,eAAV,SAAyBhE,EAAWwD,GAClC,OAAQA,GACN,KAAKN,EAAAA,oBACH,OAAOlD,EAAKuE,WACd,KAAKpB,EAAAA,oBACH,OAAOnD,EAAKwE,OAAS,IAAMxE,EAAKyE,QAClC,QACE,OAAOzE,EAAKyE,mDA1FS5rB,EAAgB/R,WAAA,CAAA,CAAA0D,KADxCuN,EAAAA,kBAE0B2sB,EAAAA,yBACP9rB,EAAAA,YALXwqB,EAA2Bv8B,EAAA,CADvCiG,EAAAA,aAGItF,EAAA,EAAAuQ,EAAAA,aAFQqrB,GAAb,iBCEE,SAAAuB,EAAoBC,GAAA9+B,KAAA8+B,iBAAAA,EAPpB9+B,KAAA2K,UAAYvK,EAAAA,UAwBd,OAfEZ,OAAAiC,eAAIo9B,EAAA3+B,UAAA,SAAM,KAAV,WACE,OAAOF,KAAK8+B,iBAAiBrB,SAASz9B,KAAK09B,0CAG7Cl+B,OAAAiC,eAAIo9B,EAAA3+B,UAAA,cAAW,KAAf,WACE,OAAOF,KAAK8+B,iBAAiBX,cAAcn+B,KAAK09B,0CAGlDl+B,OAAAiC,eAAIo9B,EAAA3+B,UAAA,SAAM,KAAV,SAAWiC,GACTnC,KAAK8+B,iBAAiBR,UAAUn8B,EAAOnC,KAAK09B,0CAG9Cl+B,OAAAiC,eAAIo9B,EAAA3+B,UAAA,SAAM,KAAV,WACE,OAAOF,KAAK8+B,iBAAiBT,SAASr+B,KAAK09B,mFAfPJ,MAF7Bv8B,EAAA,CAARoH,EAAAA,uCAPU02B,EAA4B99B,EAAA,CALxCqH,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAA,kbACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B4X,oBC6Bb,SAAAE,KAAwC,OAA3BA,EAAyBh+B,EAAA,CA1BrCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAcgL,EAAAA,kBAAmBz2B,GACzDK,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb4wB,wBAAyB,CACvB3wB,UAAWuwB,GACXj2B,UAAW,CACT,CACEE,QAASw0B,GACT4B,SAAU5B,GACVjU,KAAM,CAACtW,EAAkB6rB,EAAAA,kBAAmB9rB,EAAAA,aAIlDmqB,0BAA2B,CACzB3uB,UAAW2uB,OAIjBK,IAEF70B,aAAc,CAACo2B,GAA8B5B,IAC7CvuB,gBAAiB,CAACmwB,GAA8B5B,IAChDh0B,QAAS,CAAC41B,GAA8B5B,OAE7B8B,OjBzCDlJ,GAAAA,EAAAA,kBAAAA,EAAAA,gBAAe,KACzB,SAAA,WACAA,GAAA,SAAA,6BkBsCA,SAAAsJ,EAAsB/e,EAA0B/Y,GAA1BrH,KAAAogB,GAAAA,EAA0BpgB,KAAAqH,SAAAA,EAjBTrH,KAAA8b,UAAW,EAWxC9b,KAAAo/B,OAAS,IAAI/d,EAAAA,aAEfrhB,KAAAq/B,YAAc,EAEtBr/B,KAAA2K,UAAYvK,EAAAA,UAiCd,OA7BE++B,EAAAj/B,UAAA8K,SAAA,WACEhL,KAAKs/B,QAAQt/B,KAAKu/B,QAAQ,IAG5BJ,EAAAj/B,UAAAo/B,QAAA,SAAQn9B,EAAeq9B,GAChBx/B,KAAK8b,WAAY0jB,GACpBx/B,KAAKqH,SAASwS,aACZ7Z,KAAKogB,GAAGpY,cACR,QACA,gBAAe7F,GAASnC,KAAKq/B,aAAW,MAK9CF,EAAAj/B,UAAAu/B,SAAA,SAASF,GACHv/B,KAAK8b,WAGT9b,KAAKq/B,YAAcE,EACnBv/B,KAAKs/B,QAAQC,GACbv/B,KAAKo/B,OAAO9d,KAAKie,KAGnBJ,EAAAj/B,UAAAw/B,eAAA,SAAepgB,EAAYigB,GACN,UAAfjgB,EAAMsS,OACRtS,EAAMC,iBACNvf,KAAKs/B,QAAQC,8CA5BSt3B,EAAAA,kBAAgCC,EAAAA,aAjBnBnH,EAAA,CAAtCoH,EAAAA,QAAS+U,EAAAA,YAAY,iDAKbnc,EAAA,CAARoH,EAAAA,sCAMSpH,EAAA,CAATwgB,EAAAA,uCAhBU4d,EAAmBp+B,EAAA,CAL/BqH,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,4QACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BkY,oBCRb,SAAAQ,KAA+B,OAAlBA,EAAgB5+B,EAAA,CAL5ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcJ,GACxBE,aAAc,CAAC02B,IACfl2B,QAAS,CAACk2B,OAECQ,MCQbC,GAAA,WAAA,SAAAA,KAgCA,OA3BEpgC,OAAAiC,eAAIm+B,EAAA1/B,UAAA,UAAO,KAcX,WACE,OAAOF,KAAK6/B,cAfd,SAAYrL,GACVx0B,KAAK6/B,SAAWrL,EAEhBx0B,KAAK8/B,QAAUtL,MAAAA,OAAO,EAAPA,EAASuL,cAAcp0B,KACpCkpB,EAAAA,UAAU,IACVnU,EAAAA,KAAI,WAAM,OAAA8T,EAAQwL,QAAU,MAC5Btf,EAAAA,KAAI,SAACsf,GACH,OAAAxgC,OAAOygC,QAAQD,GACZ3uB,QAAO,SAAC5O,GAAU,OAAAA,EAAM,MACxBie,KAAI,SAACje,GAAU,OAAAA,EAAM,2CASQjD,OAAAiC,eAAIm+B,EAAA1/B,UAAA,UAAO,KAAX,WACpC,OAAOF,KAAKw0B,QAAQ0L,yCAEc1gC,OAAAiC,eAAIm+B,EAAA1/B,UAAA,QAAK,KAAT,WAClC,OAAOF,KAAKw0B,QAAQ2L,uCAEgB3gC,OAAAiC,eAAIm+B,EAAA1/B,UAAA,UAAO,KAAX,WACpC,OAAOF,KAAKw0B,QAAQ4L,yCAzBtBr/B,EAAA,CADCoH,EAAAA,qCAmBqCpH,EAAA,CAArCmc,EAAAA,YAAY,sDAGuBnc,EAAA,CAAnCmc,EAAAA,YAAY,kDAGyBnc,EAAA,CAArCmc,EAAAA,YAAY,sDA7BF0iB,EAAmB7+B,EAAA,CAL/BqH,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,2GACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B2Y,GAAb,iBCRA,SAAAS,KAA+B,OAAlBA,EAAgBt/B,EAAA,CAL5ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcwF,EAAAA,YACxB1F,aAAc,CAACm3B,IACf32B,QAAS,CAAC22B,OAECS,SCVb,2BCKA,SAAAC,WAeA,SAfaA,EACJA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUC,EACV73B,UAAW,CACTC,EAAAA,qBAAqB,CACnB63B,KAAM,KAER,CACE53B,QAAS63B,GACT53B,YAAaC,EAAAA,WAVVs3B,EAAgBG,EAAA1/B,EAAA,CAD5ByH,EAAAA,SAAS,KACG83B,oBCOX,SAAAM,EACUC,EACArmB,GAFV,IAAAhT,EAAAxH,KACUA,KAAA6gC,iBAAAA,EACA7gC,KAAAwa,eAAAA,EAERxa,KAAK8gC,WAAa9gC,KAAKwa,eACpBumB,iBACAp1B,KAAK+U,EAAAA,KAAI,SAACsgB,GAAgB,OAAAA,EAAYC,MAAMnY,OAAOoY,cAEtDlhC,KAAKmhC,WAAanhC,KAAK8gC,WAAWn1B,KAChCG,EAAAA,KAAI,SAACo1B,GACCA,EACF15B,EAAKq5B,iBAAiBO,iBAAiBF,GAEvC15B,EAAKq5B,iBAAiBQ,uBAG1BC,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,YAI3CZ,EAAA1gC,UAAAuhC,gBAAA,WAAA,IAAAj6B,EAAAxH,KACE,OAAOA,KAAKmhC,WAAWx1B,KACrB0Q,EAAAA,WAAU,WAAM,OAAA7U,EAAKq5B,iBAAiBY,gEArBdnpB,EAAAA,wBACFP,EAAAA,mLANf6oB,EAAmB7/B,EAAA,CAH/BiG,EAAAA,WAAW,CACVC,WAAY,UAED25B,oBCUX,SAAAc,EACYC,EACAC,EACAC,GAFA7hC,KAAA2hC,oBAAAA,EACA3hC,KAAA4hC,gBAAAA,EACA5hC,KAAA6hC,kBAAAA,SAGZH,EAAAxhC,UAAA4hC,mBAAA,SACEC,GAEA,OAAQA,GACN,KAAKC,EAAAA,kBAAkBC,WACrB,OAAOjiC,KAAKkiC,6BACd,KAAKF,EAAAA,kBAAkBG,SACrB,OAAOniC,KAAKoiC,iCACd,KAAKJ,EAAAA,kBAAkBK,MACrB,OAAOriC,KAAKsiC,8BACd,QACE,OAAOjnB,EAAAA,GAAG,MAIhBqmB,EAAAxhC,UAAAgiC,2BAAA,WAAA,IAAA16B,EAAAxH,KACE,OAAOA,KAAK6hC,kBACTzD,YACAzyB,KAAK+U,EAAAA,KAAI,SAACxL,GAAS,OAAA1N,EAAK+6B,iCAAiCrtB,QAGtDwsB,EAAAxhC,UAAAqiC,iCAAR,SAAyCrtB,GACvC,IAAMstB,EAAsB,GAC5BA,EAAoBhgC,KAAI1B,MAAxB0hC,EAAmB9/B,EAAUwS,EAAKutB,0BAA4B,KAE9D,IAAMC,EAAoB,GAG1B,OAFAA,EAAkBlgC,KAAI1B,MAAtB4hC,EAAiBhgC,EAAUwS,EAAKytB,wBAA0B,KAE1DjgC,EAAW8/B,EAAwBE,IAGrChB,EAAAxhC,UAAAkiC,+BAAA,WAAA,IAAA56B,EAAAxH,KACE,OAAOA,KAAK4hC,gBACTH,kBACA91B,KAAK+U,EAAAA,KAAI,SAACkiB,GAAU,OAAAp7B,EAAKq7B,kCAAkCD,QAGhElB,EAAAxhC,UAAAoiC,4BAAA,WAAA,IAAA96B,EAAAxH,KACE,OAAOA,KAAK2hC,oBACTF,kBACA91B,KAAK+U,EAAAA,KAAI,SAACkiB,GAAU,OAAAp7B,EAAKq7B,kCAAkCD,QAGxDlB,EAAAxhC,UAAA2iC,kCAAR,SAA0CD,GACxC,IAAMD,EAAyB,GAG/B,OAFAA,EAAuBngC,KAAI1B,MAA3B6hC,EAAsBjgC,EAAUkgC,EAAMD,wBAA0B,KAEzDA,GAGTjB,EAAAxhC,UAAA4iC,4BAAA,SACE5I,EACA6H,GAFF,IAAAv6B,EAAAxH,KAIE,OAAQ+hC,GACN,KAAKC,EAAAA,kBAAkBC,WACrB,OAAOjiC,KAAK6hC,kBACTzD,YACAzyB,KACC+U,EAAAA,KAAI,SAACxL,GACH,OAAA1N,EAAKu7B,oBACH7I,EACAhlB,EAAK8tB,0BAA4B,QAI3C,KAAKhB,EAAAA,kBAAkBG,SACrB,OAAOniC,KAAK4hC,gBACTH,kBACA91B,KACC+U,EAAAA,KAAI,SAACkiB,GACH,OAAAp7B,EAAKu7B,oBACH7I,EACA0I,EAAMI,0BAA4B,QAI5C,KAAKhB,EAAAA,kBAAkBK,MACrB,OAAOriC,KAAK2hC,oBACTF,kBACA91B,KACC+U,EAAAA,KAAI,SAACkiB,GACH,OAAAp7B,EAAKu7B,oBACH7I,EACA0I,EAAMI,0BAA4B,UAOxCtB,EAAAxhC,UAAA6iC,oBAAR,SACE7I,EACA+I,eAEMC,EAAqC,GAC3C,GAAID,GAAcA,EAAWriC,OAAS,MACpC,IAAwB,IAAAuiC,EAAAthC,EAAAohC,GAAUG,EAAAD,EAAAjhC,QAAAkhC,EAAAhhC,KAAAghC,EAAAD,EAAAjhC,OAAE,CAA/B,IAAMmhC,EAASD,EAAAjhC,MAClB,GACEkhC,EAAUC,aACVD,EAAUE,iBACVF,EAAUE,gBAAgB3iC,OAAS,MAEnC,IAA4B,IAAA4iC,GAAAC,OAAA,EAAA5hC,EAAAwhC,EAAUE,kBAAeG,EAAAF,EAAAthC,QAAAwhC,EAAAthC,KAAAshC,EAAAF,EAAAthC,OAAE,CAAlD,IAAMyhC,EAAaD,EAAAvhC,MAClBnC,KAAK4jC,kBAAkBD,EAAezJ,IACxCgJ,EAAgB1gC,KAAK6gC,wMAM/B,OAAOH,GAGDxB,EAAAxhC,UAAA0jC,kBAAR,SAA0BD,EAAoBE,WACtCC,EAAsBH,EAAcI,iBAC1C,GAAIF,EAAM5D,SAAW4D,EAAM5D,QAAQr/B,OAAS,EAAG,KAC7C,IAAuB,IAAAoL,EAAAnK,EAAAgiC,EAAM5D,SAAOuD,EAAAx3B,EAAA9J,QAAAshC,EAAAphC,KAAAohC,EAAAx3B,EAAA9J,OAAE,CACpC,GADiBshC,EAAArhC,MACJ6hC,cAAgBF,EAC3B,OAAO,oGAGX,OAAO,EAEP,OAAOA,IAAwBD,EAAMG,sDAjIRpD,UACJ3pB,EAAAA,uBACED,EAAAA,0MAJpB0qB,EAAgB3gC,EAAA,CAH5BiG,EAAAA,WAAW,CACVC,WAAY,UAEDy6B,oBCdb,SAAAuC,KAqGA,OA1FSA,EAAAC,eAAP,SAAsB1P,GACpB,IAAM2P,EAAQ3P,EAAQryB,MAEtB,OAAQgiC,EAAMvjC,QAAUujC,EAAM/b,MAAMgc,EAAAA,eAChC,KACA,CAAEC,gBAAgB,IAajBJ,EAAAK,kBAAP,SAAyB9P,GACvB,IAAM5X,EAAW4X,EAAQryB,MAEzB,OAAQya,EAAShc,QAAUgc,EAASwL,MAAMmc,EAAAA,kBACtC,KACA,CAAEC,mBAAmB,IAapBP,EAAAQ,gBAAP,SAAuBjQ,GACrB,IAAM+K,EAAS/K,EAAQryB,MAEvB,OAAOo9B,GAAU,GAAKA,GAAU,EAAI,KAAO,CAAEmF,mBAAmB,IAc3DT,EAAAU,mBAAP,SACE/nB,EACAgoB,GAUA,OARkB,SAACC,GACjB,OAAAC,GACED,EACAjoB,EACAgoB,EACA,0BAiBCX,EAAAc,gBAAP,SAAuBZ,EAAea,GASpC,OARkB,SAACH,GACjB,OAAAC,GACED,EACAV,EACAa,EACA,uBAKRf,KAUA,SAAgBa,GACdD,EACAI,EACAC,EACAC,SAEMC,EAAeP,EAAUjY,SAASqY,GAClCI,EAAgBR,EAAUjY,SAASsY,GAErCG,EAAcrF,SAAWqF,EAAcrF,OAAOmF,IAIlDE,EAAcC,UACZF,EAAajjC,QAAUkjC,EAAcljC,QAAK4J,EAAA,IAAMo5B,IAAY,EAAIp5B,GAAK,UC9H5Dw5B,GAAc,CACzBC,GAAI,EACJC,IAAK,EACLC,KAAM,EACNC,GAAI,EACJC,GAAI,EACJC,IAAK,GAGP,SAAgBC,GAAWC,EAAeC,GACxC,OAAKT,GAAYQ,EAAOnU,OAAU2T,GAAYS,EAAOpU,MAG5C2T,GAAYQ,EAAOnU,MAAQ2T,GAAYS,EAAOpU,MAF9C,MCXCqU,iBC8BZ,SAAAC,KAAwB,OAAXA,EAASnlC,EAAA,CAnBrByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAusB,EAAAA,oBACA/mB,EAAAA,WACAg4B,EAAAA,UAAc5F,UACdtX,GACAoX,IAEF53B,aAAc,CACZiT,EACA0P,GACAe,GACA3C,GACAmB,GACAoB,IAEFrd,gBAAiB,CAACgN,MAEPwqB,oBClBX,SAAAE,EACU5rB,EACA6rB,GADArmC,KAAAwa,eAAAA,EACAxa,KAAAqmC,eAAAA,EAGSrmC,KAAAsmC,sBAAwBC,EAAAA,aAAaC,eAOxDJ,EAAAlmC,UAAAumC,WAAA,SACEC,GADF,IAAAl/B,EAAAxH,KAGE,OAAOA,KAAKwa,eAAeumB,iBAAiBp1B,KAC1C+U,EAAAA,KAAI,SAACugB,GAAU,OAAAA,EAAMA,MAAMnY,OAAoB,eAC/CzM,EAAAA,WAAU,SAACsqB,GACT,OAAOA,EACHn/B,EAAK6+B,eAAe5zB,IAClBk0B,EACAD,GAAUl/B,EAAK8+B,uBAEjBjrB,EAAAA,GAAG,SAEThK,EAAAA,QAAO,SAACu1B,GAAM,YAAMjyB,IAANiyB,KACd/6B,EAAAA,kEAzBsBkM,EAAAA,sBACAL,EAAAA,iLAHf0uB,EAAqBrlC,EAAA,CAHjCiG,EAAAA,WAAW,CACVC,WAAY,UAEDm/B,oBC0BX,SAAAS,EACYv8B,EACAw8B,EACAC,GAFA/mC,KAAAsK,aAAAA,EACAtK,KAAA8mC,YAAAA,EACA9mC,KAAA+mC,iBAAAA,EAtBZ/mC,KAAA2K,UAAYvK,EAAAA,UAOZJ,KAAA+hC,kBAAuCC,EAAAA,kBAAkBC,WAEzDjiC,KAAAgnC,SAAW,EACXhnC,KAAAinC,aAAc,EAKdjnC,KAAAknC,KAAkB,IAAIC,EAAAA,UAAU,IAgElC,OAlDEN,EAAA3mC,UAAAknC,mBAAA,WAAA,IAAA5/B,EAAAxH,KA2BE,OA1BKA,KAAKqnC,mBACRrnC,KAAKqnC,iBAAmBrnC,KAAKsnC,OAAO37B,KAClC0F,EAAAA,QAAO,SAAC/O,GAAM,QAAEA,KAChBoe,EAAAA,KAAI,SAACmjB,GAAU,OAAAr8B,EAAK+/B,eAAe1D,MACnCxnB,EAAAA,WAAU,WACR,OAAA7U,EAAK0/B,KAAKra,aAAalhB,KAErBkpB,EAAAA,UAAU,MACV/oB,EAAAA,KAAI,SAAC07B,GACCA,GACFhgC,EAAKs/B,YAAYW,YACfD,EAAYxD,YACZwD,EAAYR,UAEe,IAAzBQ,EAAYR,UACdx/B,EAAKkgC,aAAa,YAGpBlgC,EAAK0/B,KAAKS,wBAKlBjnB,EAAAA,KAAI,WAAM,OAAalZ,EAAK0/B,KAAKz0B,IAAI,iBAGlCzS,KAAKqnC,kBAGdR,EAAA3mC,UAAA8K,SAAA,WACEhL,KAAK4nC,iBAAmB5nC,KAAK+mC,iBAAiBjF,mBAC5C9hC,KAAK+hC,oBAID8E,EAAA3mC,UAAAqnC,eAAR,SAAuB1D,GACrB,IAAK7jC,KAAKknC,KAAKz0B,IAAI,YAAa,CAC9B,IAAMu0B,EAAW,IAAIa,EAAAA,YAAYhE,EAAMmD,SAAU,CAAEc,SAAU,SAC7D9nC,KAAKknC,KAAKa,WAAW,WAAYf,GAEjC,IAAMhD,EAAc,IAAI6D,EAAAA,YAAYhE,EAAMG,aAC1ChkC,KAAKknC,KAAKa,WAAW,cAAe/D,GAEtC,OAAoBhkC,KAAKknC,KAAKz0B,IAAI,aAGpCo0B,EAAA3mC,UAAAwnC,aAAA,SAAa39B,GACX/J,KAAKsK,aAAaR,mBAAmBC,6CAzDbV,SACD2N,EAAAA,yBACK0qB,MAT9B3gC,EAAA,CADC8sB,EAAAA,UAAU,SAAU,CAAEma,KAAM//B,EAAAA,2CAblB4+B,EAA0B9lC,EAAA,CAJtCqH,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAA,sgHAEWu+B,oBC2BX,SAAAoB,EACY39B,EACA49B,EACFC,EACEtG,GAHA7hC,KAAAsK,aAAAA,EACAtK,KAAAkoC,sBAAAA,EACFloC,KAAAmoC,GAAAA,EACEnoC,KAAA6hC,kBAAAA,EA1BH7hC,KAAAooC,cAAe,EAWxBpoC,KAAAqoC,UAAW,EACXroC,KAAAgnC,SAAW,EACXhnC,KAAAiiB,WAAY,EAKZjiB,KAAAsoC,cAAgB,IAAInB,EAAAA,UAAU,CAC5BH,SAAU,IAAIa,EAAAA,YAAY,KAwF9B,OA9EEI,EAAA/nC,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACMA,KAAK6V,SACP7V,KAAK2mC,YAAc3mC,KAAK6V,QAAQ+b,KAChC5xB,KAAKuoC,WAAavoC,KAAK6hC,kBAAkB2G,SAASxoC,KAAK2mC,aACvD3mC,KAAKyoC,aAAazoC,KAAK6V,SACvB7V,KAAKmoC,GAAGne,gBACChqB,KAAK2mC,aACd3mC,KAAKuoC,WAAavoC,KAAK6hC,kBAAkB2G,SAASxoC,KAAK2mC,aAEvD3mC,KAAKgnC,SAAW,EAChBhnC,KAAKqoC,UAAW,EAChBroC,KAAKmoC,GAAGne,gBAERhqB,KAAKgsB,aAAehsB,KAAKkoC,sBACtBzB,aACA96B,KAAK0F,EAAAA,OAAOxG,UACZ4B,WAAU,SAACoJ,GACVrO,EAAKm/B,YAAc9wB,EAAQ+b,KAC3BpqB,EAAKihC,aAAa5yB,GAClBrO,EAAK+gC,WAAa/gC,EAAKq6B,kBAAkB2G,SAAShhC,EAAKm/B,aACvDn/B,EAAK2gC,GAAGne,mBAKRie,EAAA/nC,UAAAuoC,aAAR,SAAqB5yB,GACnB7V,KAAKgnC,SAAW,EAChBhnC,KAAKqoC,SACHxyB,EAAQ6yB,OAA4C,eAAnC7yB,EAAQ6yB,MAAMC,iBAC7B3oC,KAAKqoC,UAAYxyB,EAAQ6yB,MAAME,aACjC5oC,KAAK6oC,YAAchzB,EAAQ6yB,MAAME,aAIrCX,EAAA/nC,UAAA4oC,YAAA,SAAY3mC,GACVnC,KAAKgnC,SAAW7kC,GAGlB8lC,EAAA/nC,UAAA6oC,UAAA,WAAA,IAAAvhC,EAAAxH,KACQgnC,EAAWhnC,KAAKsoC,cAAc71B,IAAI,YAAYtQ,OAC/CnC,KAAK2mC,aAAeK,GAAY,GAKrChnC,KAAK6hC,kBACF2G,SAASxoC,KAAK2mC,aACdl6B,WAAU,SAACo3B,GACNA,IACFr8B,EAAKya,WAAY,GAEnBza,EAAKwhC,YACLxhC,EAAKq6B,kBAAkBoH,SAASzhC,EAAKm/B,YAAaK,GAClDx/B,EAAKya,WAAY,KAElB7U,eAGG66B,EAAA/nC,UAAA8oC,UAAR,WACE,IAAIE,EACJlpC,KAAKmpC,SAAWnpC,KAAKsK,aAAad,KAAKq9B,GAA4B,CACjEj5B,UAAU,EACVC,KAAM,QAGRq7B,EAAgBlpC,KAAKmpC,SAASC,mBAChB9B,OAAStnC,KAAKuoC,WAC5BW,EAAcG,MAAQrpC,KAAK6hC,kBAAkBzD,YAC7C8K,EAAcI,QAAUtpC,KAAK6hC,kBAAkB0H,WAC/CL,EAAclC,SAAWhnC,KAAKgnC,SAC9BkC,EAAcjnB,UAAYjiB,KAAKiiB,WAGjCgmB,EAAA/nC,UAAAiN,YAAA,WACMnN,KAAKgsB,cACPhsB,KAAKgsB,aAAa5e,wDAjFI/D,SACS+8B,UACrB1b,EAAAA,yBACiB1T,EAAAA,qBA3BtBjW,EAAA,CAARoH,EAAAA,2CACQpH,EAAA,CAARoH,EAAAA,4CAMQpH,EAAA,CAARoH,EAAAA,uCARU8/B,EAAkBlnC,EAAA,CAL9BqH,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,iuBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BghB,oBCVX,SAAAuB,KACF,OAHEzoC,EAAA,CADCoH,EAAAA,0CADUqhC,EAAmBzoC,EAAA,CAL/BqH,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,gZACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BuiB,oBCEb,SAAAC,KAA+B,OAAlBA,EAAgB1oC,EAAA,CAL5ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcyF,EAAAA,sBACxB3F,aAAc,CAAC+gC,IACfvgC,QAAS,CAACugC,OAECC,oBCSX,SAAAC,EAAoBC,GAAA3pC,KAAA2pC,mBAAAA,EANpB3pC,KAAA4pC,eAAgB,EAEhB5pC,KAAA6pC,YAAa,EAEb7pC,KAAA2K,UAAYvK,EAAAA,UAcd,OAVEZ,OAAAiC,eAAWioC,EAAAxpC,UAAA,iBAAc,KAAzB,WAEE,OADAF,KAAK8pC,SAAW9pC,KAAK8pC,UAAY,GAC1B9pC,KAAK8pC,SAAS7e,QAAQzZ,MAAK,SAACC,EAAGlS,GACpC,OAAOkS,EAAEmgB,KAAKmY,cAAcxqC,EAAEqyB,0CAIlC8X,EAAAxpC,UAAA8pC,cAAA,SAAcC,GACZjqC,KAAK2pC,mBAAmBK,cAAcC,6CAVAC,EAAAA,sBARxCnpC,EAAA,CADCoH,EAAAA,wCAGDpH,EAAA,CADCoH,EAAAA,6CAGDpH,EAAA,CADCoH,EAAAA,0CALUuhC,EAAuB3oC,EAAA,CALnCqH,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,isCACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9ByiB,oBCyBX,SAAAS,EACY7vB,EACAqvB,EACAS,EACAC,EACA70B,EACAqsB,GALA7hC,KAAAsa,YAAAA,EACAta,KAAA2pC,mBAAAA,EACA3pC,KAAAoqC,YAAAA,EACApqC,KAAAqqC,sBAAAA,EACArqC,KAAAwV,cAAAA,EACAxV,KAAA6hC,kBAAAA,EAnBZ7hC,KAAAsqC,yBAA2B,IAOnBtqC,KAAAuqC,kBAAmB,EAEnBvqC,KAAAgsB,aAAe,IAAIvhB,EAAAA,aAE3BzK,KAAAwqC,mBAAoB,EAoJtB,OAzIEL,EAAAjqC,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACMA,KAAKqqC,uBACPrqC,KAAKqqC,sBAAsBI,oBACzBzqC,KAAKsqC,0BAGLtqC,KAAKwV,eAAiBxV,KAAKwV,cAAck1B,QAAQ,OACnD1qC,KAAKqpC,MAAQ39B,EAAAA,cAAc,CACzB1L,KAAK6hC,kBAAkBzD,YACvBp+B,KAAKsa,YAAY+P,eACjBrqB,KAAKqqC,sBAAsBM,mBACzB3qC,KAAKsqC,4BAEN3+B,KACDG,EAAAA,KACE,SAACC,OAAAC,EAAA3J,EAAA0J,EAAA,GAACmJ,EAAAlJ,EAAA,GAAM2Q,EAAA3Q,EAAA,GAAQ4+B,EAAA5+B,EAAA,GAKdxE,EAAKqjC,OACHluB,IAAWmuB,EAAAA,sBAAwB51B,EAAK61B,KAAO71B,EAAK0c,KACtDpqB,EAAKwjC,6BAA6B91B,EAAM01B,EAAgBK,YAG5DvqB,EAAAA,KAAI,SAAC3U,GAAuD,OAAvD1J,EAAA0J,EAAA,GAAC,OAKR/L,KAAKqpC,MAAQ39B,EAAAA,cAAc,CACzB1L,KAAK6hC,kBAAkBzD,YACvBp+B,KAAKsa,YAAY+P,iBAChB1e,KACDG,EAAAA,KACE,SAACC,OAAAC,EAAA3J,EAAA0J,EAAA,GAACmJ,EAAAlJ,EAAA,GAAM2Q,EAAA3Q,EAAA,GACN,OAACxE,EAAKqjC,OACJluB,IAAWmuB,EAAAA,sBAAwB51B,EAAK61B,KAAO71B,EAAK0c,QAE1DlR,EAAAA,KAAI,SAAC3U,GAA2B,OAA3B1J,EAAA0J,EAAA,GAAC,OAKV/L,KAAKkrC,eAAiBlrC,KAAK6hC,kBACxB0H,WACA59B,KAAK+U,EAAAA,KAAI,SAAC4S,GAAW,OAACA,MAEzBtzB,KAAK2pC,mBAAmBwB,iCAExBnrC,KAAKorC,WAAaprC,KAAKoqC,YAAYtrB,MAAM,CACvCusB,WAAY,CAAC,GAAI,CAAC5f,EAAAA,WAAWC,aAI/B1rB,KAAKgsB,aAAavgB,IAChBzL,KAAK2pC,mBACF2B,6BACA7+B,WAAU,SAAC8+B,GACV/jC,EAAKgkC,UAAUD,OAKrBvrC,KAAKgsB,aAAavgB,IAChBzL,KAAK2pC,mBAAmB8B,2BAA2Bh/B,WAAU,SAAChK,GAC5D+E,EAAKkkC,QAAQjpC,QAKT0nC,EAAAjqC,UAAAwrC,QAAV,SAAkBjpC,GACZA,IACFzC,KAAKqqC,sBAAsBI,oBACzBzqC,KAAKsqC,0BAEPtqC,KAAK2pC,mBAAmBwB,mCAI5BhB,EAAAjqC,UAAAsrC,UAAA,SAAUD,GACJA,IACFvrC,KAAKorC,WAAWO,QAChB3rC,KAAK2pC,mBAAmBwB,mCAIlBhB,EAAAjqC,UAAA8qC,6BAAV,SACE91B,EACA+1B,GAFF,IAAAzjC,EAAAxH,KAIEA,KAAK4rC,kBAAoBX,GAAW,GAChC/1B,EAAK22B,iBACP32B,EAAK22B,gBAAgBjkC,SAAQ,SAACkkC,GAC5BtkC,EAAKokC,kBAAoBpkC,EAAKokC,kBAAkBv6B,QAC9C,SAAC06B,GAAW,OAAAA,EAAOC,WAAaF,EAAela,YAMvDuY,EAAAjqC,UAAA+rC,aAAA,WACMjsC,KAAKorC,WAAWxf,MAClB5rB,KAAK2pC,mBAAmBuC,WACtBlsC,KAAKorC,WAAWjpC,MAAMkpC,WACtBrrC,KAAK6qC,QAGP7qC,KAAKorC,WAAWvf,oBAIpBse,EAAAjqC,UAAAisC,oBAAA,SAAoBH,GAClBhsC,KAAK2pC,mBAAmBuC,WAAWF,EAAUhsC,KAAK6qC,QAClD7qC,KAAKwqC,mBAAoB,GAG3BL,EAAAjqC,UAAAiK,MAAA,SAAMmV,GACCtf,KAAKuqC,mBACRvqC,KAAKwqC,mBAAoB,EACrBlrB,GAASA,EAAMre,QACHqe,EAAMre,OAAQmrC,QAGhCpsC,KAAKuqC,kBAAmB,GAG1BJ,EAAAjqC,UAAAmsC,aAAA,WACErsC,KAAKuqC,kBAAmB,GAG1BJ,EAAAjqC,UAAAiN,YAAA,WACMnN,KAAKgsB,cACPhsB,KAAKgsB,aAAa5e,cAEpBpN,KAAK2pC,mBAAmBwB,2EA/IDp0B,EAAAA,mBACOmzB,EAAAA,0BACPpe,EAAAA,mBACUwgB,EAAAA,6BACRj1B,EAAAA,4BACIL,EAAAA,qBApBpBmzB,EAAmBppC,EAAA,CAJ/BqH,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,82DAEW6hC,oBCoBb,SAAAoC,KAA+B,OAAlBA,EAAgBxrC,EAAA,CAzB5ByH,EAAAA,SAAS,CACRC,aAAc,CAAC0hC,GAAqBT,IACpCzgC,QAAS,CAACkhC,GAAqBT,IAC/BhhC,QAAS,CACP0F,EAAAA,qBACAzF,EAAAA,aACAuyB,EAAAA,eACAC,EAAAA,YACAjG,EAAAA,oBACA/mB,EAAAA,WACA5F,EACA83B,IAEFz3B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbm+B,yBAA0B,CACxBl+B,UAAW67B,QAMnBz7B,gBAAiB,CAACy7B,OAEPoC,oBCiBX,SAAAE,EACY5K,EACAhrB,GADA7W,KAAA6hC,kBAAAA,EACA7hC,KAAA6W,qBAAAA,EAtCH7W,KAAAs0B,UAAW,EAEXt0B,KAAA0sC,WAAY,EAEZ1sC,KAAA0J,QAAoC,CAC3CijC,gBAAgB,EAChBC,YAAa,MAGP5sC,KAAA6sC,OAAiB,GAehB7sC,KAAA+hC,kBAAuCC,EAAAA,kBAAkBC,WA6EpE,OArFEziC,OAAAiC,eAAIgrC,EAAAvsC,UAAA,QAAK,KAIT,WACE,OAAOF,KAAK6sC,YALd,SAAU9c,GACR/vB,KAAK8sC,aAAa/c,GAClB/vB,KAAK+sC,8CAQiBvtC,OAAAiC,eAAIgrC,EAAAvsC,UAAA,aAAU,KAAd,SAAeiC,GAChCnC,KAAKs0B,WAGRnyB,EACInC,KAAKknC,KAAK8F,QAAQ,CAAEjY,WAAW,IAC/B/0B,KAAKknC,KAAK+F,OAAO,CAAElY,WAAW,sCAa9B0X,EAAAvsC,UAAA4sC,aAAR,SAAqB/c,GACfA,EAAMmd,OAAM,SAAChT,GAAS,OAAAA,EAAKr6B,eAAe,iBAC5CG,KAAK6sC,OAAS9c,EAAMrP,KAAI,SAACysB,GACvB,IAAMtJ,EAAQrkC,OAAOc,OACnB,GACC6sC,EAAsCC,YAGzC,OADAvJ,EAAMmD,SAAWmG,EAAiBnG,SAC3BnD,KAGT7jC,KAAK6sC,OAAS9c,GAIV0c,EAAAvsC,UAAA6sC,WAAR,WAAA,IAAAvlC,EAAAxH,KACEA,KAAKknC,KAAO,IAAIC,EAAAA,UAAU,IAC1BnnC,KAAK6sC,OAAOjlC,SAAQ,SAACsyB,GACX,IAAAtI,EAAAsI,EAAArkB,QAAA+b,KACF9S,EAAQ,IAAIqoB,EAAAA,UAAU,CAC1BnD,YAAa,IAAI6D,EAAAA,YAAkB3N,EAAM8J,aACzCgD,SAAU,IAAIa,EAAAA,YAAY3N,EAAK8M,SAAU,CAAEc,SAAU,WAElD5N,EAAKmT,aAAc7lC,EAAK8sB,UAC3BxV,EAAMkuB,UAERxlC,EAAK0/B,KAAKa,WAAWnW,EAAM9S,OAI/B2tB,EAAAvsC,UAAAotC,YAAA,SAAYpT,GACNl6B,KAAK6W,sBAAwB7W,KAAK0J,QAAQijC,eAC5C3sC,KAAK6W,qBAAqBy2B,YAAYpT,GAEtCl6B,KAAK6hC,kBAAkByL,YAAYpT,UAE9Bl6B,KAAKknC,KAAKta,SAASsN,EAAKrkB,QAAQ+b,OAGzC6a,EAAAvsC,UAAAy0B,WAAA,SAAWuF,GAAX,IAAA1yB,EAAAxH,KACE,OAAOA,KAAKknC,KAAKz0B,IAAIynB,EAAKrkB,QAAQ+b,MAAM/E,aAAalhB,KAEnDkpB,EAAAA,UAAU,MACVnU,EAAAA,KAAI,SAACve,GACCA,GAASqF,EAAKqP,sBAAwBrP,EAAKkC,QAAQijC,eACrDnlC,EAAKqP,qBAAqB4wB,YACxBtlC,EAAM6hC,YACN7hC,EAAM6kC,UAEC7kC,GACTqF,EAAKq6B,kBAAkB4F,YAAYtlC,EAAM6hC,YAAa7hC,EAAM6kC,aAGhEtmB,EAAAA,KAAI,WAAM,OAAWlZ,EAAK0/B,KAAKz0B,IAAIynB,EAAKrkB,QAAQ+b,oDA7DrB5a,EAAAA,yBACG0B,EAAAA,wBAtCzB3X,EAAA,CAARoH,EAAAA,wCAEQpH,EAAA,CAARoH,EAAAA,yCAEQpH,EAAA,CAARoH,EAAAA,uCAYDpH,EAAA,CAJCoH,EAAAA,MAAM,oCAYEpH,EAAA,CAARoH,EAAAA,iDAEuBpH,EAAA,CAAvBoH,EAAAA,MAAM,iDA3BIskC,EAAqB1rC,EAAA,CALjCqH,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,q2CACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BwlB,oBCqBX,SAAAc,EAAsBxG,GAAA/mC,KAAA+mC,iBAAAA,EAjBb/mC,KAAAwtC,SAAU,EAEVxtC,KAAAs0B,UAAW,EAGVt0B,KAAA0gC,KAAO,IAAIrf,EAAAA,aAEZrhB,KAAA+hC,kBAAuCC,EAAAA,kBAAkBC,WAGzDjiC,KAAA0J,QAAoC,CAC3CijC,gBAAgB,EAChBC,YAAa,MA+BjB,OAxBEW,EAAArtC,UAAA8K,SAAA,WACEhL,KAAKytC,0BAA4BztC,KAAK+mC,iBAAiBjE,4BACrD9iC,KAAKk6B,KACLl6B,KAAK+hC,oBAITwL,EAAArtC,UAAAwtC,oBAAA,SAAoB73B,GAElB,OACEA,GACAA,EAAQ6yB,OAC2B,eAAnC7yB,EAAQ6yB,MAAMC,kBAIlB4E,EAAArtC,UAAAsb,WAAA,WACExb,KAAK2tC,gBAAgBpgB,SAAS,GAC9BvtB,KAAK2tC,gBAAgBlZ,eAGvB8Y,EAAArtC,UAAA0tC,SAAA,WACE5tC,KAAK0gC,KAAKpf,iDAxB4BogB,MAjB/B3gC,EAAA,CAARoH,EAAAA,uCACQpH,EAAA,CAARoH,EAAAA,oCACQpH,EAAA,CAARoH,EAAAA,wCACQpH,EAAA,CAARoH,EAAAA,+CAESpH,EAAA,CAATwgB,EAAAA,qCAEQxgB,EAAA,CAARoH,EAAAA,iDAGQpH,EAAA,CAARoH,EAAAA,uCAXUolC,EAAiBxsC,EAAA,CAJ7BqH,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,qwKAEWilC,oBChBb,SAAAM,KAGA,OADE9sC,EAAA,CADCoH,EAAAA,oCADU0lC,EAAqB9sC,EAAA,CAJjCqH,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,yzDAEWulC,oBC4Bb,SAAAC,KAA+B,OAAlBA,EAAgB/sC,EAAA,CArB5ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAuY,GACArX,EAAAA,oBACAjB,EAAAA,UACA8Z,EAAAA,UACAtE,GACAt7B,EAAAA,WACA2lB,GACAmB,GACA7mB,EAAAA,sBAEF3F,aAAc,CACZ8kC,GACAM,GACApB,IAEFxjC,QAAS,CAACskC,GAAmBd,GAAuBoB,OAEzCC,oBCYb,SAAAE,KAA8B,OAAjBA,EAAejtC,EAAA,CA5B3ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAusB,EAAAA,oBACA4Y,GACA9Z,EAAAA,aACAqH,GACAoO,GACAr7B,EAAAA,qBACA6lB,EAAAA,UACA1rB,EACA4F,EAAAA,WACA8mB,GACA3P,IAEF1c,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb4/B,0BAA2B,CACzB3/B,UAAW25B,QAKnBx/B,aAAc,CAACw/B,GAAoBpB,IACnCn4B,gBAAiB,CAACu5B,GAAoBpB,IACtC59B,QAAS,CAACg/B,GAAoBpB,OAEnBmH,oBCjBX,SAAAE,EACYrM,EACAkF,EACAlwB,EACFyD,EACAE,GAJExa,KAAA6hC,kBAAAA,EACA7hC,KAAA+mC,iBAAAA,EACA/mC,KAAA6W,qBAAAA,EACF7W,KAAAsa,YAAAA,EACAta,KAAAwa,eAAAA,EAVVxa,KAAAmuC,UAAW,EAEXnuC,KAAA+hC,kBAAuCC,EAAAA,kBAAkBC,WA2C3D,OAhCEiM,EAAAhuC,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKqpC,MAAQrpC,KAAK6hC,kBAAkBzD,YACpCp+B,KAAKouC,YAAcpuC,KAAK+mC,iBAAiB7E,6BAEzCliC,KAAKquC,SAAWruC,KAAK6hC,kBAClByM,aACA3iC,KAAK0F,EAAAA,QAAO,SAAC4uB,GAAY,OAAAA,EAAQr/B,OAAS,MAE7CZ,KAAKuuC,YAAc7iC,EAAAA,cAAc,CAC/B1L,KAAK6hC,kBAAkB0H,WACvBvpC,KAAK6W,qBAAqB23B,YAC1BxuC,KAAKsa,YAAYm0B,mBAChB9iC,KACDG,EAAAA,KAAI,SAACC,OAAKoiC,EAAL9rC,EAAA0J,EAAA,GAAK,GAAc,OAACvE,EAAK2mC,SAAWA,KACzCztB,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC2iC,EAAA1iC,EAAA,GAAY2iC,EAAA3iC,EAAA,GAChB,OAD2BA,EAAA,GAChB0iC,GAAcC,EAAYD,MAIzC1uC,KAAK4nC,iBAAmB5nC,KAAK+mC,iBAAiBjF,mBAC5C9hC,KAAK+hC,oBAITmM,EAAAhuC,UAAA0uC,aAAA,SAAa1U,GACPl6B,KAAKmuC,UACPnuC,KAAK6hC,kBAAkByL,YAAYpT,GACnCl6B,KAAK6W,qBAAqBoyB,SAAS/O,EAAKrkB,QAAQ+b,KAAMsI,EAAK8M,WAE3DhnC,KAAKwa,eAAeQ,GAAG,CAAEC,QAAS,oDApCPjE,EAAAA,yBACD0qB,UACIhpB,EAAAA,4BACX3B,EAAAA,mBACGgB,EAAAA,kBAdfm2B,EAAoBntC,EAAA,CALhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,6mCACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BinB,oBCkBb,SAAAW,KAAgC,OAAnBA,EAAiB9tC,EAAA,CAxB7ByH,EAAAA,SAAS,CACRE,QAAS,CACPolC,GACAnlC,EAAAA,aACA4jC,GACAvY,EAAAA,aACAC,EAAAA,UACAwV,GACAr7B,EAAAA,qBACAD,EAAAA,YAEFvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbygC,cAAe,CACbxgC,UAAW4/B,QAKnBzlC,aAAc,CAACylC,IACfjlC,QAAS,CAACilC,IACVx/B,gBAAiB,CAACw/B,OAEPW,oBC7BX,SAAAE,EACYv0B,EACAqnB,GADA7hC,KAAAwa,eAAAA,EACAxa,KAAA6hC,kBAAAA,SAGZkN,EAAA7uC,UAAA8uC,YAAA,WAAA,IAAAxnC,EAAAxH,KACE,OAAO0L,EAAAA,cAAc,CACnB1L,KAAK6hC,kBAAkBzD,YACvBp+B,KAAK6hC,kBAAkB0H,aACtB59B,KACD0F,EAAAA,QAAO,SAACtF,OAAAC,EAAA3J,EAAA0J,EAAA,GAACC,EAAA,GAAe,OAAZA,EAAA,MACZ0U,EAAAA,KAAI,SAAC3U,OAACmJ,EAAD7S,EAAA0J,EAAA,GAAC,GACJ,OAAIvE,EAAKynC,QAAQ/5B,KACf1N,EAAKgT,eAAeQ,GAAG,CAAEC,QAAS,UAC3B,QAOP8zB,EAAA7uC,UAAA+uC,QAAR,SAAgB/5B,GACd,OAAOA,IAASA,EAAKg6B,qDArBKn3B,EAAAA,sBACGf,EAAAA,uLAHpB+3B,EAAiBhuC,EAAA,CAH7BiG,EAAAA,WAAW,CACVC,WAAY,UAED8nC,oBCCX,SAAAI,EACYtN,EACAhrB,GADA7W,KAAA6hC,kBAAAA,EACA7hC,KAAA6W,qBAAAA,SAGZs4B,EAAAjvC,UAAAkvC,OAAA,SACEC,EACAC,EACAC,GAEA,MAAqB,qBAAjBD,GAAwCC,EAwBrCF,EAvBE3jC,EAAAA,cAAc,CACnB2jC,EACArvC,KAAK6hC,kBAAkBzD,YACvBp+B,KAAK6W,qBAAqB24B,YACzB7jC,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC0jC,EAAAzjC,EAAA,GAAOkJ,EAAAlJ,EAAA,GAAM0jC,EAAA1jC,EAAA,GACjB,OAAIkJ,EAAKg6B,WACAO,EAAMp+B,QAAO,SAACs+B,GAAS,MAAS,2BAATA,KACrBD,EAAcR,WAChBO,EAAMp+B,QACX,SAACs+B,GACC,MAAS,2BAATA,GACS,2BAATA,KAGGF,EAAMp+B,QACX,SAACs+B,GACC,MAAS,eAATA,GAAkC,2BAATA,mDA3BR34B,EAAAA,yBACG0B,EAAAA,gMAHvBy2B,EAAqBpuC,EAAA,CAHjCiG,EAAAA,WAAW,CACVC,WAAY,UAEDkoC,oBCKX,SAAAS,EAAsB/N,GAAA7hC,KAAA6hC,kBAAAA,EAQxB,OANE+N,EAAA1vC,UAAA8K,SAAA,WACEhL,KAAKqpC,MAAQrpC,KAAK6hC,kBAAkBzD,YACpCp+B,KAAKquC,SAAWruC,KAAK6hC,kBAClByM,aACA3iC,KAAK0F,EAAAA,QAAO,SAAC4uB,GAAY,OAAAA,EAAQr/B,OAAS,gDANNoW,EAAAA,qBAJ9B44B,EAAmB7uC,EAAA,CAL/BqH,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,wbACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B2oB,oBCyBb,SAAAC,KAA+B,OAAlBA,EAAgB9uC,EAAA,CAtB5ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAC,EAAAA,UACA6Z,GACA3/B,EAAAA,WACAo+B,IAEF3jC,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbuhC,oBAAqB,CACnBthC,UAAWshC,QAKnBnnC,aAAc,CAACmnC,IACf3mC,QAAS,CAAC2mC,IACVlhC,gBAAiB,CAACkhC,OAEPC,MC/BAC,GAAsB,IAAIC,EAAAA,eACrC,mCCmBA,SAAAC,EAAsBnO,GAAA7hC,KAAA6hC,kBAAAA,EAZtB7hC,KAAA2K,UAAYvK,EAAAA,UAEZJ,KAAAiwC,UAAgCjwC,KAAK6hC,kBAAkBzD,YAAYzyB,KACjEkpB,EAAAA,UAAU,CAAEqb,sBAAuB,IACnCxvB,EAAAA,KAAI,SAACxL,GAAS,OAAAA,EAAKg7B,uBAAyB,MAG9ClwC,KAAAmwC,OAA6BnwC,KAAK6hC,kBAAkBzD,YAAYzyB,KAC9D0F,EAAAA,QAAO,SAAC6D,GAAS,QAAEA,EAAKk7B,cACxB1vB,EAAAA,KAAI,SAACxL,GAAS,OAAAA,EAAKk7B,WAAWC,mBAIlC,gDAD2Cr5B,EAAAA,qBAb9Bg5B,EAAiBjvC,EAAA,CAL7BqH,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,yaACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B+oB,oBCgBb,SAAAM,KAA6B,OAAhBA,EAAcvvC,EAAA,CAf1ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAcC,EAAAA,UAAW1rB,EAAY4F,EAAAA,YAC7DvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb2hC,kBAAmB,CACjB1hC,UAAW0hC,QAKnBvnC,aAAc,CAACunC,IACf/mC,QAAS,CAAC+mC,IACVthC,gBAAiB,CAACshC,OAEPM,oBCSX,SAAAC,EACYC,EACAtI,EACA5tB,GAHZ,IAAA9S,EAAAxH,KACYA,KAAAwwC,gBAAAA,EACAxwC,KAAAkoC,sBAAAA,EACAloC,KAAAsa,YAAAA,EArBZta,KAAAywC,SAAgCzwC,KAAKkoC,sBAAsBzB,aAAa96B,KACtE0F,EAAAA,QAAO,SAACwE,GAAY,OAAAhL,QAAQgL,MAC5B/J,EAAAA,KAAI,SAAC+J,GAAY,OAAArO,EAAKihC,aAAa5yB,OAGrC7V,KAAA0wC,iBAEI1wC,KAAKwwC,gBAAgBG,cAAchlC,KACrC0F,EAAAA,QAAO,SAACu/B,GAAa,OAAA/lC,QAAQ+lC,MAC7BlwB,EAAAA,KAAI,SAACmwB,GAAa,OAAAA,EAAS5Q,YAG7BjgC,KAAA8wC,cAAqC9wC,KAAKsa,YAAYm0B,iBACtDzuC,KAAAqL,SAAgCrL,KAAKwwC,gBAAgBO,qBAErD/wC,KAAAqoC,UAAW,EACXroC,KAAA2K,UAAYvK,EAAAA,UAyBd,OAjBEmwC,EAAArwC,UAAAuL,IAAA,SAAIoK,GACF7V,KAAKwwC,gBAAgBvH,SAASpzB,EAAQ+b,OAGxC2e,EAAArwC,UAAAgZ,OAAA,SAAO2qB,GACL7jC,KAAKwwC,gBAAgBlD,YAAYzJ,IAGnC0M,EAAArwC,UAAA8wC,qBAAA,SAAqBn7B,EAAkBoqB,GAErC,OADaA,EAAQp6B,MAAK,SAACg+B,GAAU,OAAAA,EAAMhuB,QAAQ+b,OAAS/b,EAAQ+b,SAI9D2e,EAAArwC,UAAAuoC,aAAR,SAAqB5yB,GACnB7V,KAAKqoC,SACHxyB,EAAQ6yB,OAA4C,eAAnC7yB,EAAQ6yB,MAAMC,2DApBNsI,EAAAA,uBACM7K,UACVrvB,EAAAA,eAtBdw5B,EAAsBxvC,EAAA,CALlCqH,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,6iDACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BspB,oBCUb,SAAAW,KAAkC,OAArBA,EAAmBnwC,EAAA,CAf/ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcwF,EAAAA,WAAY5F,EAAYyrB,EAAAA,aAAcC,EAAAA,WAC9DrrB,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbkiC,uBAAwB,CACtBjiC,UAAWiiC,QAKnB9nC,aAAc,CAAC8nC,IACf7hC,gBAAiB,CAAC6hC,IAClBtnC,QAAS,CAACsnC,OAECW,oBCFX,SAAAC,EACY39B,EACAszB,EACAjwB,GAFA7W,KAAAwT,WAAAA,EACAxT,KAAA8mC,YAAAA,EACA9mC,KAAA6W,qBAAAA,EAwBd,OArBEs6B,EAAAjxC,UAAA8K,SAAA,WACEhL,KAAKoxC,aAAepxC,KAAK8mC,YACtB1I,YACAzyB,KAAK+U,EAAAA,KAAI,SAACxL,GAAS,QAAEA,GAAQA,EAAKg6B,YAAch6B,EAAKg6B,WAAa,OACrElvC,KAAKqxC,cAAgBrxC,KAAK6W,qBAAqB24B,UAC/CxvC,KAAKquC,SAAWruC,KAAK6W,qBAClBy3B,aACA3iC,KAAK0F,EAAAA,QAAO,SAAC4uB,GAAY,OAAAA,EAAQr/B,OAAS,MAC7CZ,KAAKuuC,YAAc7iC,EAAAA,cAAc,CAC/B1L,KAAK8mC,YAAYyC,WACjBvpC,KAAK6W,qBAAqB23B,cACzB7iC,KAAK+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC2iC,EAAA1iC,EAAA,GAAY2iC,EAAA3iC,EAAA,GAAe,OAAA0iC,GAAcC,MACvD3uC,KAAKwS,MAAQxS,KAAKwT,WAAWb,iBAC3B,gCAIJw+B,EAAAjxC,UAAAoxC,WAAA,SAAWpX,GACTl6B,KAAK6W,qBAAqBy2B,YAAYpT,GACtCl6B,KAAK8mC,YAAYmC,SAAS/O,EAAKrkB,QAAQ+b,KAAMsI,EAAK8M,oDAxB5Bt0B,EAAAA,kBACCsE,EAAAA,yBACS0B,EAAAA,wBAXvBy4B,EAAqBpwC,EAAA,CAJjCqH,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,sqCAEW6oC,oBCYb,SAAAI,KAAiC,OAApBA,EAAkBxwC,EAAA,CAlB9ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcwF,EAAAA,WAAY2/B,IACpCllC,UAAW,CACTC,EAAAA,qBAAiD,CAC/CwF,cAAe,CACb8iC,sBAAuB,CACrB7iC,UAAW6iC,KAGfK,SAAU,CACR5C,aAAc,UAIpBnmC,aAAc,CAAC0oC,IACfloC,QAAS,CAACkoC,IACVziC,gBAAiB,CAACyiC,OAEPI,oBCUb,SAAAE,KAAkC,OAArBA,EAAmB1wC,EAAA,CA3B/ByH,EAAAA,SAAS,CACRE,QAAS,CACPqlC,EAAAA,UACAc,GACAgB,GACA/B,GACAyD,IAEFtoC,QAAS,CACPioC,GACArC,GACAgB,GACA/B,GACAE,GACAsC,GACAoB,EAAAA,WACAH,IAEF9oC,aAAc,GACdG,UAAW,CACT,CACEE,QAASgnC,GACT/mC,YAAaomC,GACb/0B,OAAO,OAIAq3B,O5BrCDxL,GAAAA,EAAAA,0BAAAA,EAAAA,wBAAuB,KACjC,KAAA,OACAA,GAAA,gBAAA,kBACAA,GAAA,eAAA,iBAGF,I6BRY0L,G7BQZC,GAAA,c6BRYD,GAAAA,EAAAA,mBAAAA,EAAAA,iBAAgB,KAC1B,iBAAA,kBACAA,GAAA,cAAA,eACAA,GAAA,gBAAA,iBACAA,GAAA,aAAA,kBCJUE,GCGCC,GAAwC,CACnD38B,SAAU,CACR48B,MAAO,CACL,CACEvlC,GAAI,kBACJ2e,KAAM,mCACN6mB,UAAW,0BACXttC,KAAM,CAACitC,EAAAA,iBAAiBM,mBAE1B,CACEzlC,GAAI,eACJ2e,KAAM,gCACN6mB,UAAW,uBACXttC,KAAM,CAACitC,EAAAA,iBAAiBO,gBAE1B,CACE1lC,GAAI,iBACJ2e,KAAM,kCACN6mB,UAAW,yBACXttC,KAAM,CAACitC,EAAAA,iBAAiBQ,kBAE1B,CACE3lC,GAAI,cACJ2e,KAAM,+BACN6mB,UAAW,sBACXttC,KAAM,CAACitC,EAAAA,iBAAiBS,gBAG5BC,SAAS,EACTC,oBAAqB,CAACrM,EAAAA,wBAAwBsM,MAC9CC,OAAO,kBCdT,SAAAC,EACUC,EACAC,GADA3yC,KAAA0yC,eAAAA,EACA1yC,KAAA2yC,qBAAAA,EARV3yC,KAAA+xC,MAAwB/xC,KAAK0yC,eAAev9B,SAAS48B,MAC7C/xC,KAAAqyC,QAAmBryC,KAAK0yC,eAAev9B,SAASk9B,QAChDryC,KAAAwyC,MAAiBxyC,KAAK0yC,eAAev9B,SAASq9B,MAC9CxyC,KAAAsyC,oBACNtyC,KAAK0yC,eAAev9B,SAASm9B,qBAAuB,UAOtDG,EAAAvyC,UAAA0yC,gBAAA,SAAgBC,GACd,OAAO7yC,KAAK+xC,MAAM/xC,KAAK8yC,qBAAqB,OAAQD,KAGtDJ,EAAAvyC,UAAA6yC,qBAAA,SAAqBF,GACnB,OAAO7yC,KAAK4yC,gBAAgBC,GAAiBb,WAG/CS,EAAAvyC,UAAA8yC,0BAAA,WACE,OAAOhzC,KAAK+xC,MAAM,GAAGC,WAGvBS,EAAAvyC,UAAA+yC,uBAAA,SAAuBrZ,GACrB,IAAMsZ,EAAYlzC,KAAKmzC,oBAAoBvZ,GAE3C,OAAOsZ,GAAa,GAAKlzC,KAAK+xC,MAAMmB,EAAY,GAC5ClzC,KAAKozC,wBAAwBpzC,KAAK+xC,MAAMmB,EAAY,GAAGlB,WACvD,MAGNS,EAAAvyC,UAAAmzC,2BAAA,SAA2BzZ,GACzB,IAAMsZ,EAAYlzC,KAAKmzC,oBAAoBvZ,GAE3C,OAAOsZ,GAAa,GAAKlzC,KAAK+xC,MAAMmB,EAAY,GAC5ClzC,KAAKozC,wBAAwBpzC,KAAK+xC,MAAMmB,EAAY,GAAGlB,WACvD,MAGNS,EAAAvyC,UAAAizC,oBAAA,SAAoBvZ,WAKdsZ,EAJEI,EAAyBtzC,KAAKuzC,6BAClC3Z,GAIEzW,EAAQ,MACZ,IAAmB,IAAAnX,EAAAnK,EAAA7B,KAAK+xC,OAAKvO,EAAAx3B,EAAA9J,QAAAshC,EAAAphC,KAAAohC,EAAAx3B,EAAA9J,OAAE,CAA1B,IAAMkyB,EAAIoP,EAAArhC,MAEXmxC,IAAmB,IAAItzC,KAAKozC,wBAAwBhf,EAAK4d,WAEzDkB,EAAY/vB,EAEZA,sGAIJ,OAAO+vB,GAAa,EAAIA,EAAY,MAG5BT,EAAAvyC,UAAAszC,oBAAV,SACEC,EACAC,GAEA,OAAID,EAAcE,aAAaxxC,MAAQuxC,EAAcC,aAAaxxC,MACzD,EAEPsxC,EAAcE,aAAaxxC,MAAQuxC,EAAcC,aAAaxxC,OAEtD,EAEH,GAGCswC,EAAAvyC,UAAA0zC,yBAAV,SACEC,EACA1wB,GAFF,IAAA3b,EAAAxH,KAIE,YAFA,IAAAmjB,IAAAA,EAAA,GAEQnjB,KAAKsyC,oBAAoBnvB,IAC/B,KAAK8iB,EAAAA,wBAAwBsM,KAC3B,GAA4C,IAAxCsB,EAAc,GAAGF,aAAaxxC,MAChC,OAAO0xC,EAAc,GAAGjiB,KAE1B,MACF,KAAKqU,EAAAA,wBAAwB6N,gBAC3B,IAAMC,EAAsBF,EAAchuC,MACxC,SAACmuC,GAAiB,OAAoC,IAApCA,EAAaL,aAAaxxC,SAE9C,GAAI4xC,EACF,OAAOA,EAAoBniB,KAE7B,MACF,KAAKqU,EAAAA,wBAAwBgO,eAC3B,OAAOJ,EAAcA,EAAcjzC,OAAS,GAAGgxB,KACjD,QACE,IAAMsiB,EAAYL,EAAchuC,MAC9B,SAACmuC,GACC,OAAAA,EAAapiB,OAASpqB,EAAK8qC,oBAAoBnvB,MAEnD,GAAI+wB,EACF,OAAOA,EAAUtiB,KAIvB,OADiB5xB,KAAKsyC,oBAAoB1xC,OAAS,GAAKuiB,EAEpD0wB,EAAc,GAAGjiB,KACjB5xB,KAAK4zC,yBAAyBC,EAAe1wB,EAAQ,IAG3DsvB,EAAAvyC,UAAAi0C,yBAAA,SAAyBN,GAEvB,OADAA,EAAcriC,KAAKxR,KAAKwzC,qBACjBxzC,KAAK4zC,yBAAyBC,IAGvCpB,EAAAvyC,UAAAk0C,kBAAA,WACE,OAAOp0C,KAAKqyC,SAGdI,EAAAvyC,UAAAm0C,gBAAA,WACE,OAAOr0C,KAAKwyC,OAGNC,EAAAvyC,UAAAqzC,6BAAR,SACE3Z,GAEA,OAAOA,GACLA,EAAeU,UACfV,EAAeU,SAAS11B,IACtB,IAAIg1B,EAAeU,SAAS11B,IAAI+b,KAAK,KACrC,MAGE8xB,EAAAvyC,UAAAkzC,wBAAR,SAAgCkB,GAC9B,OAAOt0C,KAAK2yC,qBAAqB4B,eAAeD,GAAWE,MAAM,IAG3D/B,EAAAvyC,UAAA4yC,qBAAR,SAA6B5xC,EAAaiB,GACxC,OAAOjB,GAAOiB,EACVnC,KAAK+xC,MAAM/uB,WAAU,SAACoR,GAAuB,OAAAA,EAAKlzB,GAAK8E,SAAS7D,MAChE,+CAnIoByvC,UACM6C,EAAAA,+KATrBhC,EAAqB1xC,EAAA,CAHjCiG,EAAAA,WAAW,CACVC,WAAY,UAEDwrC,oBCMX,SAAAiC,EACYl6B,EACAF,EACAq6B,EACAC,EACA/S,GAJA7hC,KAAAwa,eAAAA,EACAxa,KAAAsa,YAAAA,EACAta,KAAA20C,oBAAAA,EACA30C,KAAA40C,sBAAAA,EACA50C,KAAA6hC,kBAAAA,SAGZ6S,EAAAx0C,UAAA8uC,YAAA,WAAA,IAAAxnC,EAAAxH,KACE,OAAO0L,EAAAA,cAAc,CACnB1L,KAAKsa,YAAYI,eACjB1a,KAAK6hC,kBAAkBgT,oBACtBlpC,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC4O,EAAA3O,EAAA,GAAOsK,EAAAtK,EAAA,GACX,IAAK2O,EAAM2B,aAAc,CACvB,GAAI9U,EAAKq6B,kBAAkBiT,cACzB,OAAOjqC,QAAQyL,GAEb9O,EAAKotC,sBAAsBP,kBAC7B7sC,EAAKgT,eAAeQ,GAAG,CAAEC,QAAS,SAAW,CAAE85B,QAAQ,IAEvDvtC,EAAKgT,eAAeQ,GAAG,CAAEC,QAAS,UAEpCzT,EAAKmtC,oBAAoBK,kBAE3B,QAASr6B,EAAM2B,2DAxBOvE,EAAAA,sBACHhB,EAAAA,mBACQk+B,EAAAA,2BACExC,UACJz7B,EAAAA,2QANpB09B,EAAiB3zC,EAAA,CAH7BiG,EAAAA,WAAW,CACVC,WAAY,UAEDytC,oBCUX,SAAAQ,EACYtT,EACAuT,EACAC,EACAvT,GAJZ,IAAAr6B,EAAAxH,KACYA,KAAA4hC,gBAAAA,EACA5hC,KAAAm1C,wBAAAA,EACAn1C,KAAAo1C,uBAAAA,EACAp1C,KAAA6hC,kBAAAA,EAEV7hC,KAAKq1C,QAAUr1C,KAAK6hC,kBAAkBzD,YAAYzyB,KAChD+U,EAAAA,KAAI,SAAC40B,GACH,OACGA,EAASh/B,MAAQg/B,EAASh/B,KAAKhE,MAAQw4B,EAAAA,uBACxCtjC,EAAKq6B,kBAAkBiT,cAEhBQ,EAASvK,KAEXuK,EAAS1jB,QAElBvgB,EAAAA,QAAO,SAACw5B,GAAW,QAAEA,MAGvB7qC,KAAKu1C,0BAA4Bv1C,KAAKq1C,QAAQ1pC,KAC5CG,EAAAA,KAAI,SAAC++B,GAAW,OAAArjC,EAAKo6B,gBAAgB4T,oBAAoB3K,MACzDvJ,EAAAA,YAAY,GACZjlB,EAAAA,WAAU,WAAM,OAAA7U,EAAKo6B,gBAAgB6T,8BACrCC,EAAAA,WAAU,SAACpiB,GAAW,OAACA,aAI3B4hB,EAAAh1C,UAAAy1C,mBAAA,WAAA,IAAAnuC,EAAAxH,KACE,OAAOA,KAAKu1C,0BAA0B5pC,KACpC0Q,EAAAA,WAAU,WAAM,OAAA7U,EAAK2tC,wBAAwBQ,0BAIjDT,EAAAh1C,UAAA01C,4BAAA,WAAA,IAAApuC,EAAAxH,KACE,OAAOA,KAAKu1C,0BAA0B5pC,KACpC0Q,EAAAA,WAAU,WACR,OAAA7U,EAAK2tC,wBAAwBS,mCAKnCV,EAAAh1C,UAAA21C,kBAAA,WAAA,IAAAruC,EAAAxH,KACE,OAAOA,KAAKu1C,0BAA0B5pC,KACpC0Q,EAAAA,WAAU,WAAM,OAAA7U,EAAK4tC,uBAAuBS,kEA1CnB5+B,EAAAA,uBACQC,EAAAA,+BACDC,EAAAA,8BACLH,EAAAA,yQARpBk+B,EAAsBn0C,EAAA,CAHlCiG,EAAAA,WAAW,CACVC,WAAY,UAEDiuC,oBCEX,SAAAY,EACYC,EACAC,EACAb,EACAC,EACAa,EACArB,GALA50C,KAAA+1C,mBAAAA,EACA/1C,KAAAg2C,mBAAAA,EACAh2C,KAAAm1C,wBAAAA,EACAn1C,KAAAo1C,uBAAAA,EACAp1C,KAAAi2C,uBAAAA,EACAj2C,KAAA40C,sBAAAA,EAEV50C,KAAKk2C,qBACLl2C,KAAKm2C,kBACLn2C,KAAKo2C,0BAGGN,EAAA51C,UAAAg2C,mBAAV,WAAA,IAAA1uC,EAAAxH,KACEA,KAAKq2C,oBAAsB3qC,EAAAA,cAAc,CACvC1L,KAAK+1C,mBAAmBO,eACxBt2C,KAAK+1C,mBAAmBQ,4BACxBv2C,KAAKm1C,wBAAwBqB,iCAC5B7qC,KACDmhB,EAAAA,aAAa,GACbhhB,EAAAA,KACE,SAACC,GAAA1J,EAAA0J,EAAA,GAAG,IAMAvE,EAAKuuC,mBAAmBU,mBAI9BplC,EAAAA,QACE,SAACtF,GACC,OADD1J,EAAA0J,EAAA,GAAG,MAGNsQ,EAAAA,WACE,SAACtQ,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC2qC,EAAA1qC,EAAA,GAAa2qC,EAAA3qC,EAAA,GAKP4qC,EACJF,EAAU7wC,MAAK,SAACgxC,GAAY,OAAAA,EAAQD,mBAAmBF,EAAU,GACnE,OAAIE,GAAkBp3C,OAAOs3C,KAAKF,GAAgBh2C,QAG5C+1C,EAA0BpL,SAC1BoL,EAA0Bl0C,OAC1Bk0C,EAA0BI,SAG5BvvC,EAAK2tC,wBAAwB6B,mBAAmBJ,GAE3Cv7B,EAAAA,GAAGs7B,GAA2BhrC,KACnC0F,EAAAA,QAAO,SAAC4lC,GACN,OACGA,EAA+B1L,SAC9B0L,EAA+Bx0C,SAChCw0C,EAA+BF,WAGpC16B,EAAAA,WAAU,SAAC46B,GACT,OAAIA,EAA+B1L,QAC1B/jC,EAAKyuC,uBAAuBN,qBAE9Bt6B,EAAAA,IAAG,MAEZqF,EAAAA,KAAI,SAAC8d,GAAS,OAAA3zB,QAAQ2zB,GAAQh/B,OAAOs3C,KAAKtY,GAAM59B,aAG7Cya,EAAAA,IAAG,QAMRy6B,EAAA51C,UAAAk2C,iBAAV,WAAA,IAAA5uC,EAAAxH,KACEA,KAAKk3C,kBAAoBxrC,EAAAA,cAAc,CACrC1L,KAAKg2C,mBAAmBmB,oBACxBn3C,KAAKg2C,mBAAmBoB,iCACxBp3C,KAAKo1C,uBAAuBiC,sCAC3B1rC,KACDmhB,EAAAA,aAAa,GACbhhB,EAAAA,KACE,SAACC,GAAA1J,EAAA0J,EAAA,GAAG,IAMAvE,EAAKwuC,mBAAmBsB,wBAI9BjmC,EAAAA,QACE,SAACtF,GAAgE,OAAhE1J,EAAA0J,EAAA,GAAG,MAENsQ,EAAAA,WACE,SAACtQ,OAAAC,EAAA3J,EAAA0J,EAAA,GAACwrC,EAAAvrC,EAAA,GAAYwrC,EAAAxrC,EAAA,GAKNyrC,EACJF,EAAS1xC,MAAK,SAACgxC,GAAY,OAAAA,EAAQY,mBAAmBF,EAAS,GACjE,OAAIE,GAAkBj4C,OAAOs3C,KAAKW,GAAgB72C,QAG5C42C,EAAyBjM,SACzBiM,EAAyB/0C,OACzB+0C,EAAyBT,SAG3BvvC,EAAK4tC,uBAAuBsC,kBAAkBD,GAEzCp8B,EAAAA,GAAGm8B,GAA0B7rC,KAClC0F,EAAAA,QAAO,SAACsmC,GACN,OACGA,EAA8BpM,SAC7BoM,EAA8Bl1C,SAC/Bk1C,EAA8BZ,WAGnC16B,EAAAA,WAAU,SAACs7B,GACT,OAAIA,EAA8BpM,QACzB/jC,EAAKyuC,uBAAuBJ,oBAE9Bx6B,EAAAA,IAAG,MAEZqF,EAAAA,KAAI,SAAC8d,GAAS,OAAA3zB,QAAQ2zB,GAAQh/B,OAAOs3C,KAAKtY,GAAM59B,aAG7Cya,EAAAA,IAAG,QAMRy6B,EAAA51C,UAAAi2C,gBAAV,WAAA,IAAA3uC,EAAAxH,KACEA,KAAK43C,iBAAmBlsC,EAAAA,cAAc,CACpC1L,KAAKq2C,oBACLr2C,KAAKm1C,wBAAwB0C,4BAC7B73C,KAAKm1C,wBAAwB2C,4BAC7B93C,KAAKm1C,wBAAwB4C,wCAC5BpsC,KACDmhB,EAAAA,aAAa,GACbzQ,EAAAA,WACE,SAACtQ,OAAAC,EAAA3J,EAAA0J,EAAA,GACCisC,EAAAhsC,EAAA,GACAisC,EAAAjsC,EAAA,GACAksC,EAAAlsC,EAAA,GACAmsC,EAAAnsC,EAAA,GAEA,OAAIgsC,EACK38B,EAAAA,GAAG,CACR48B,EACAC,EACAC,IACCxsC,KACD0F,EAAAA,QACE,SAACtF,GAIK,OAJL1J,EAAA0J,EAAA,GAAK,GAI4Bw/B,WAEpClvB,EAAAA,WACE,SAACtQ,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC8nC,EAAA7nC,EAAA,GAAeosC,EAAApsC,EAAA,GAKf,GAAInB,QAAQgpC,EAAcjzC,QAAS,CACjC,IAAMy3C,EAAwB7wC,EAAKotC,sBAAsBT,yBACvDN,GAEF,OAAOx4B,EAAAA,GAAG,CACRg9B,EACAD,IACCzsC,KACDG,EAAAA,KACE,SAACC,OAAAC,EAAA3J,EAAA0J,EAAA,GAACioC,EAAAhoC,EAAA,GAAcssC,EAAAtsC,EAAA,GAKZgoC,KAEEsE,EAA0B/M,SAC1B+M,EAA0B71C,OAC1B61C,EAA0BvB,UAG5BvvC,EAAK2tC,wBAAwBgB,gBAC3BnC,MAKR3iC,EAAAA,QACE,SAACtF,OAAGusC,EAAHj2C,EAAA0J,EAAA,GAAG,GAIF,OACGusC,EAA0B/M,SACzB+M,EAA0B71C,SAC3B61C,EAA0BvB,WAIjC16B,EAAAA,WACE,SAACtQ,GAIC,OAJD1J,EAAA0J,EAAA,GAAG,GAI4Bw/B,QACrB/jC,EAAKyuC,uBAAuBL,8BAE9Bv6B,EAAAA,IAAG,MAGdqF,EAAAA,KAAI,SAAC8d,GAAS,OAAA3zB,QAAQ2zB,OAG1B,OAAOnjB,EAAAA,IAAG,OAKTA,EAAAA,IAAG,QAOVy6B,EAAA51C,UAAAq4C,uBAAV,WACEv4C,KAAKm1C,wBAAwBqD,iCAC7Bx4C,KAAKo1C,uBAAuBqD,gCAC5Bz4C,KAAKm1C,wBAAwBuD,+BAGxB5C,EAAA51C,UAAAy4C,6BAAP,WAEE,OADA34C,KAAKu4C,yBACE7sC,EAAAA,cAAc,CAAC1L,KAAK43C,iBAAkB53C,KAAKk3C,oBAAoBvrC,KACpE+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC6sC,EAAA5sC,EAAA,GAAiB6sC,EAAA7sC,EAAA,GACrB,OAAAnB,QAAQ+tC,GAAmBC,iDAtPDzgC,EAAAA,0BACAG,EAAAA,0BACKrB,EAAAA,+BACDC,EAAAA,8BACA+9B,UACDzC,kSAXxBqD,EAAsB/0C,EAAA,CAHlCiG,EAAAA,WAAW,CACVC,WAAY,UAED6uC,oBCLX,SAAAgD,EACYC,EACApG,EACAiC,EACAoE,EACAnX,GAJA7hC,KAAA+4C,OAAAA,EACA/4C,KAAA2yC,qBAAAA,EACA3yC,KAAA40C,sBAAAA,EACA50C,KAAAg5C,uBAAAA,EACAh5C,KAAA6hC,kBAAAA,EAEV7hC,KAAKi5C,WAAa59B,EAAAA,GAChBrb,KAAK+4C,OAAOG,SACVl5C,KAAK2yC,qBAAqB4B,eACxBv0C,KAAK40C,sBAAsB5B,6BAC3BwB,MAAM,YAKdsE,EAAA54C,UAAA8uC,YAAA,WAAA,IAAAxnC,EAAAxH,KACE,OACEA,KAAK40C,sBAAsBR,sBAC1Bp0C,KAAK6hC,kBAAkBiT,cAEjB90C,KAAKg5C,uBAAuBL,+BAA+BhtC,KAChE0Q,EAAAA,WAAU,SAAC88B,GACT,OAAOA,EACH99B,EAAAA,GACE7T,EAAKuxC,OAAOG,SACV1xC,EAAKmrC,qBAAqB4B,eACxB/sC,EAAKotC,sBAAsB7B,qBACzBpB,EAAAA,iBAAiBS,eAEnBoC,MAAM,KAGZhtC,EAAKyxC,eAIRj5C,KAAKi5C,qDApCMG,EAAAA,cACc3E,EAAAA,4BACChC,UACCqD,UACL9+B,EAAAA,yPARpB8hC,EAAa/3C,EAAA,CAHzBiG,EAAAA,WAAW,CACVC,WAAY,UAED6xC,oBCJX,SAAAO,KACF,OAFaA,EAA6Bt4C,EAAA,CALzCqH,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAA,GACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BoyB,oBCqBb,SAAAC,KAAyC,OAA5BA,EAA0Bv4C,EAAA,CAlBtCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVC,UAAW,CACTC,EAAAA,qBAAqBipC,IACrBjpC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbkrC,qBAAsB,CACpBjrC,UAAW+qC,GACXxpC,OAAQ,CAAC6kC,GAAmB3F,GAAmB+J,QAIrD,CAAEhwC,QAAS8oC,GAAgB7oC,YAAaC,EAAAA,SAE1CP,aAAc,CAAC4wC,IACf3qC,gBAAiB,CAAC2qC,IAClBpwC,QAAS,CAACowC,OAECC,oBCjBX,SAAAE,EAAsB3X,GAAA7hC,KAAA6hC,kBAAAA,EACpB7hC,KAAKqpC,MAAQrpC,KAAK6hC,kBAAkBzD,YAExC,gDAH2CpnB,EAAAA,qBAH9BwiC,EAA6Bz4C,EAAA,CALzCqH,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,iEACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BuyB,oBCab,SAAAC,KAAyC,OAA5BA,EAA0B14C,EAAA,CAftCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcmlC,IACxBllC,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbqrC,qBAAsB,CACpBprC,UAAWkrC,QAKnB/wC,aAAc,CAAC+wC,IACf9qC,gBAAiB,CAAC8qC,IAClBvwC,QAAS,CAACuwC,OAECC,oBCTX,SAAAE,EACY/zC,EACA4U,EACAm4B,GAFA3yC,KAAA4F,OAAAA,EACA5F,KAAAwa,eAAAA,EACAxa,KAAA2yC,qBAAAA,EAyBd,OAjBEgH,EAAAz5C,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAK+xC,MAAQ/xC,KAAK4F,OAAOuP,SAAS48B,MAClC/xC,KAAK45C,aAAe55C,KAAKwa,eAAeumB,iBAAiBp1B,KACvDG,EAAAA,KAAI,SAACitC,GACHvxC,EAAKqyC,cAAgBd,EAAO9X,MAAMvD,QAAQlxB,GAE1ChF,EAAKuqC,MAAMnqC,SAAQ,SAACwsB,EAAMjR,GACP,IACf3b,EAAKmrC,qBAAqB4B,eAAengB,EAAK4d,WAAWwC,MAAM,KAEhDhtC,EAAKqyC,gBACpBryC,EAAKsyC,gBAAkB32B,oDArBbyuB,UACQ75B,EAAAA,sBACM08B,EAAAA,wBAJvBkF,EAAqC54C,EAAA,CAJjDqH,EAAAA,UAAU,CACTC,SAAU,qCACVC,SAAA,kTAEWqxC,oBCoBb,SAAAI,KAAiD,OAApCA,EAAkCh5C,EAAA,CAjB9CyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcsrB,EAAAA,UAAW9lB,EAAAA,WAAY6lB,EAAAA,cAC/CprB,UAAW,CACTC,EAAAA,qBAAqBipC,IACrBjpC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb2rC,6BAA8B,CAC5B1rC,UAAWqrC,GACX9pC,OAAQ,CAAC6kC,GAAmB3F,SAKpCtmC,aAAc,CAACkxC,IACfjrC,gBAAiB,CAACirC,IAClB1wC,QAAS,CAAC0wC,OAECI,oBCdX,SAAAE,EACYr0C,EACA4U,EACAm4B,EACA9Q,GAHA7hC,KAAA4F,OAAAA,EACA5F,KAAAwa,eAAAA,EACAxa,KAAA2yC,qBAAAA,EACA3yC,KAAA6hC,kBAAAA,EA2Bd,OAlBEoY,EAAA/5C,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAK+xC,MAAQ/xC,KAAK4F,OAAOuP,SAAS48B,MAClC/xC,KAAKqpC,MAAQrpC,KAAK6hC,kBAAkBzD,YACpCp+B,KAAK45C,aAAe55C,KAAKwa,eAAeumB,iBAAiBp1B,KACvDG,EAAAA,KAAI,SAACitC,GACHvxC,EAAKqyC,cAAgBd,EAAO9X,MAAMvD,QAAQlxB,GAE1ChF,EAAKuqC,MAAMnqC,SAAQ,SAACwsB,EAAMjR,GACP,IACf3b,EAAKmrC,qBAAqB4B,eAAengB,EAAK4d,WAAWwC,MAAM,KAEhDhtC,EAAKqyC,gBACpBryC,EAAKsyC,gBAAkB32B,oDAxBbyuB,UACQ75B,EAAAA,sBACM08B,EAAAA,4BACHz9B,EAAAA,qBALpBijC,EAAkCl5C,EAAA,CAJ9CqH,EAAAA,UAAU,CACTC,SAAU,kCACVC,SAAA,i7BAEW2xC,oBCeb,SAAAC,KAA8C,OAAjCA,EAA+Bn5C,EAAA,CAjB3CyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcsrB,EAAAA,UAAW9lB,EAAAA,WAAY6lB,EAAAA,cAC/CprB,UAAW,CACTC,EAAAA,qBAAqBipC,IACrBjpC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb8rC,0BAA2B,CACzB7rC,UAAW2rC,GACXpqC,OAAQ,CAAC6kC,GAAmB3F,SAKpCtmC,aAAc,CAACwxC,IACfvrC,gBAAiB,CAACurC,IAClBhxC,QAAS,CAACgxC,OAECC,oBClBX,SAAAE,EACYx0C,EACA4U,EACAm4B,GAFA3yC,KAAA4F,OAAAA,EACA5F,KAAAwa,eAAAA,EACAxa,KAAA2yC,qBAAAA,EAqCd,OA7BEyH,EAAAl6C,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAK+xC,MAAQ/xC,KAAK4F,OAAOuP,SAAS48B,MAClC/xC,KAAK45C,aAAe55C,KAAKwa,eAAeumB,iBAAiBp1B,KACvDG,EAAAA,KAAI,SAACitC,GACHvxC,EAAKqyC,cAAgBd,EAAO9X,MAAMvD,QAAQlxB,GAE1ChF,EAAKuqC,MAAMnqC,SAAQ,SAACwsB,EAAMjR,GACP,IACf3b,EAAKmrC,qBAAqB4B,eAAengB,EAAK4d,WAAWwC,MAAM,KAEhDhtC,EAAKqyC,gBACpBryC,EAAKsyC,gBAAkB32B,WAOjCi3B,EAAAl6C,UAAAm6C,YAAA,SAAYnH,GACV,OAAQlzC,KAAKojB,SAAS8vB,IAAelzC,KAAKs6C,WAAWpH,IAAkB,EAAL,GAGpEkH,EAAAl6C,UAAAkjB,SAAA,SAASD,GACP,OAAOA,IAAUnjB,KAAK85C,iBAGxBM,EAAAl6C,UAAAo6C,WAAA,SAAWn3B,GACT,OAAOA,EAAQnjB,KAAK85C,0DArCFlI,UACQ75B,EAAAA,sBACM08B,EAAAA,wBAJvB2F,EAAyBr5C,EAAA,CALrCqH,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,4iBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BmzB,oBCsBb,SAAAG,KAAqC,OAAxBA,EAAsBx5C,EAAA,CAlBlCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcsrB,EAAAA,UAAW9lB,EAAAA,WAAY6lB,EAAAA,cAC/CvrB,aAAc,CAAC2xC,IACf1rC,gBAAiB,CAAC0rC,IAClBnxC,QAAS,CAACmxC,IACVxxC,UAAW,CACTC,EAAAA,qBAAqBipC,IACrBjpC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbmsC,iBAAkB,CAChBlsC,UAAW8rC,GACXvqC,OAAQ,CAAC6kC,GAAmB3F,QAIlC,CAAEjmC,QAAS8oC,GAAgB7oC,YAAaC,EAAAA,YAG/BuxC,oBCrBX,SAAAE,EACUxE,EACArB,EACAjC,EACAoG,GAHA/4C,KAAAi2C,uBAAAA,EACAj2C,KAAA40C,sBAAAA,EACA50C,KAAA2yC,qBAAAA,EACA3yC,KAAA+4C,OAAAA,SAGV0B,EAAAv6C,UAAA8uC,YAAA,WAAA,IAAAxnC,EAAAxH,KACQ06C,EAA6B16C,KAAK40C,sBAAsBhC,gBAC5DjB,EAAAA,iBAAiBM,kBASnB,OANKyI,GAAgB/oC,EAAAA,aACnB1C,QAAQC,KACN,0BAA0ByiC,EAAAA,iBAAiBM,iBAAgB,+BAIxDjyC,KAAKi2C,uBACTN,qBACAhqC,KACC+U,EAAAA,KAAI,SAACi6B,GACH,SAAAA,IAAmBn7C,OAAOs3C,KAAK6D,GAAiB/5C,SAE5C4G,EAAKuxC,OAAOG,SACVwB,GACElzC,EAAKmrC,qBAAqB4B,eACxBmG,EAAa1I,WACbwC,MAAM,kDA3BUU,UACDzC,UACDgC,EAAAA,4BACd2E,EAAAA,2MALPqB,EAAuB15C,EAAA,CAHnCiG,EAAAA,WAAW,CACVC,WAAY,UAEDwzC,oBCwBX,SAAAG,EACUvvB,EACA8pB,EACA36B,EACAo6B,EACAhb,GAJA55B,KAAAqrB,GAAAA,EACArrB,KAAAm1C,wBAAAA,EACAn1C,KAAAwa,eAAAA,EACAxa,KAAA40C,sBAAAA,EACA50C,KAAA45B,eAAAA,EAbF55B,KAAA66C,eAAgB,EAIxB76C,KAAA86C,KAAkB96C,KAAKqrB,GAAGvM,MAAM,CAC9Bi8B,eAAgB,CAAC,GAAItvB,EAAAA,WAAWC,YAmFpC,OAxEEkvB,EAAA16C,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKg7C,oBAAsBh7C,KAAK40C,sBAAsB3B,uBACpDjzC,KAAK45B,gBAEP55B,KAAKi7C,wBAA0Bj7C,KAAK40C,sBAAsBvB,2BACxDrzC,KAAK45B,gBAGP55B,KAAKk7C,wBAA0Bl7C,KAAKm1C,wBAAwB0C,4BAE5D73C,KAAKm7C,gBAAkBn7C,KAAKk7C,wBACzBvvC,KACCyvC,EAAAA,eACEp7C,KAAKm1C,wBACFkG,0BACA1vC,KACC+U,EAAAA,KAAI,SAACszB,GACH,OAAAA,GAAgBA,EAAapiB,KAAOoiB,EAAapiB,KAAO,WAKjEnlB,WAAU,SAACV,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC8nC,EAAA7nC,EAAA,GAAe4lB,EAAA5lB,EAAA,IACrB4lB,GAAQiiB,GAAiBA,EAAcjzC,SAC1CgxB,EAAOpqB,EAAKotC,sBAAsBT,yBAChCN,IAIFrsC,EAAKqzC,eACHjpB,GACFA,IAASpqB,EAAK8zC,uBAEd9zC,EAAKgT,eAAeQ,GAAGxT,EAAKwzC,qBAE9BxzC,EAAK8zC,sBAAwB1pB,EACzBA,GACFpqB,EAAKszC,KAAKluB,SAAyB,eAAEW,SAASqE,OAKtDgpB,EAAA16C,UAAAq7C,WAAA,SAAW3pB,GACLA,IAAS5xB,KAAKs7C,wBAChBt7C,KAAKs7C,sBAAwB1pB,IAIjCgpB,EAAA16C,UAAAgC,KAAA,WACElC,KAAK66C,eAAgB,EACjB76C,KAAK86C,KAAKlvB,OAAS5rB,KAAK86C,KAAK34C,QAC1BnC,KAAKs7C,wBACRt7C,KAAKs7C,sBAAwBt7C,KAAK86C,KAAK34C,MAAM44C,gBAE/C/6C,KAAKm1C,wBAAwBgB,gBAAgBn2C,KAAKs7C,wBAEpDt7C,KAAKwa,eAAeQ,GAAGhb,KAAKg7C,sBAG9BJ,EAAA16C,UAAAs7C,KAAA,WACEx7C,KAAKwa,eAAeQ,GAAGhb,KAAKi7C,0BAG9Bz7C,OAAAiC,eAAIm5C,EAAA16C,UAAA,sBAAmB,KAAvB,WACE,OAAOF,KAAK86C,KAAKluB,SAAyB,eAAEsT,yCAG9C0a,EAAA16C,UAAAiN,YAAA,WACMnN,KAAKm7C,iBACPn7C,KAAKm7C,gBAAgB/tC,wDA5EX0e,EAAAA,mBACqB5U,EAAAA,+BACTa,EAAAA,sBACO06B,UACP9X,EAAAA,kBAnBfigB,EAAqB75C,EAAA,CALjCqH,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,k1DACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B2zB,oBCQb,SAAAa,KAAiC,OAApBA,EAAkB16C,EAAA,CApB9ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcusB,EAAAA,oBAAqB/mB,EAAAA,WAAYktB,IACzDzyB,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbqtC,qBAAsB,CACpBptC,UAAWssC,GACX/qC,OAAQ,CACN6kC,GACA3F,GACA0L,SAMVhyC,aAAc,CAACmyC,IACflsC,gBAAiB,CAACksC,IAClB3xC,QAAS,CAAC2xC,OAECa,oBCjBX,SAAAE,EACU1F,EACArB,EACAjC,EACAoG,GAHA/4C,KAAAi2C,uBAAAA,EACAj2C,KAAA40C,sBAAAA,EACA50C,KAAA2yC,qBAAAA,EACA3yC,KAAA+4C,OAAAA,SAGV4C,EAAAz7C,UAAA8uC,YAAA,WAAA,IAAAxnC,EAAAxH,KACQ06C,EAA6B16C,KAAK40C,sBAAsBhC,gBAC5DjB,EAAAA,iBAAiBO,eASnB,OANKwI,GAAgB/oC,EAAAA,aACnB1C,QAAQC,KACN,0BAA0ByiC,EAAAA,iBAAiBO,cAAa,+BAIrDlyC,KAAKi2C,uBACTL,8BACAjqC,KACC+U,EAAAA,KAAI,SAACo6B,GACH,SAAAA,IAAQA,EAAKl6C,SAET4G,EAAKuxC,OAAOG,SACVwB,GACElzC,EAAKmrC,qBAAqB4B,eACxBmG,EAAa1I,WACbwC,MAAM,kDA3BUU,UACDzC,UACDgC,EAAAA,4BACd2E,EAAAA,2MALPuC,EAAoB56C,EAAA,CAHhCiG,EAAAA,WAAW,CACVC,WAAY,UAED00C,oBCMX,SAAAC,EAAsBtxC,GAAAtK,KAAAsK,aAAAA,EAFtBtK,KAAA2K,UAAYvK,EAAAA,UAoBd,OATEw7C,EAAA17C,UAAA8K,SAAA,WACEhL,KAAK67C,gBAAkB77C,KAAK87C,mBAAmBl7C,OAC3CZ,KAAK87C,mBAAmB,GACxB97C,KAAK+7C,gBAGXH,EAAA17C,UAAAqL,WAAA,SAAWxB,GACT/J,KAAKsK,aAAaJ,iBAAiBH,6CAhBDV,KAGpCtI,EAAA,CADCoH,EAAAA,kDAGDpH,EAAA,CADCoH,EAAAA,8CAPUyzC,EAA+B76C,EAAA,CAL3CqH,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAA,66GACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B20B,oBCmFX,SAAAI,EACY5G,EACAD,EACAa,EACAn6B,EACAwP,EACA/gB,EACAyrC,GANA/1C,KAAAo1C,uBAAAA,EACAp1C,KAAAm1C,wBAAAA,EACAn1C,KAAAg2C,mBAAAA,EACAh2C,KAAA6b,qBAAAA,EACA7b,KAAAqrB,GAAAA,EACArrB,KAAAsK,aAAAA,EACAtK,KAAA+1C,mBAAAA,EAjEZ/1C,KAAA2K,UAAYvK,EAAAA,UAKZJ,KAAAi8C,OAAmB,GACnBj8C,KAAAk8C,MAAkB,GAMlBl8C,KAAAm8C,uBAAwB,EAExBn8C,KAAAo8C,iBAA4C,IAAIx2B,EAAAA,gBAAwB,IASxE5lB,KAAAq8C,OAAS,IAAIh7B,EAAAA,aAGbrhB,KAAAs8C,UAAY,IAAIj7B,EAAAA,aAGhBrhB,KAAA03C,kBAAoB,IAAIr2B,EAAAA,aAExBrhB,KAAAu8C,YAAyBv8C,KAAKqrB,GAAGvM,MAAM,CACrC09B,SAAUx8C,KAAKqrB,GAAGvM,MAAM,CACtB8S,KAAM,CAAC,KAAMnG,EAAAA,WAAWC,YAE1B+wB,kBAAmB,CAAC,GAAIhxB,EAAAA,WAAWC,UACnCgxB,WAAY,CAAC,GAAIjxB,EAAAA,WAAWC,UAC5BixB,YAAa,CAAC,KAAMlxB,EAAAA,WAAWC,UAC/BkxB,WAAY,CAAC,KAAMnxB,EAAAA,WAAWC,UAC9BmxB,IAAK,CAAC,GAAIpxB,EAAAA,WAAWC,UACrB+rB,eAAgB,EAAC,KAGnBz3C,KAAA88C,mBAAgC98C,KAAKqrB,GAAGvM,MAAM,CAC5Ci+B,UAAW,CAAC,GAAItxB,EAAAA,WAAWC,UAC3BsxB,SAAU,CAAC,GAAIvxB,EAAAA,WAAWC,UAC1BuxB,MAAO,CAAC,GAAIxxB,EAAAA,WAAWC,UACvBwxB,MAAO,CAAC,IACRC,KAAM,CAAC,GAAI1xB,EAAAA,WAAWC,UACtB0xB,OAAQp9C,KAAKqrB,GAAGvM,MAAM,CACpBu+B,aAAc,CAAC,KAAM5xB,EAAAA,WAAWC,YAElC4xB,QAASt9C,KAAKqrB,GAAGvM,MAAM,CACrB6f,QAAS,CAAC,KAAMlT,EAAAA,WAAWC,YAE7B6xB,WAAY,CAAC,GAAI9xB,EAAAA,WAAWC,YAyOhC,OA5NEswB,EAAA97C,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKw9C,kBACLx9C,KAAKy9C,WAAaz9C,KAAKg2C,mBAAmB0H,yBAAyB/xC,KACjEG,EAAAA,KAAI,SAAC6xC,GAEmC,IAAlCn+C,OAAOs3C,KAAK6G,GAAW/8C,QACzB4G,EAAKwuC,mBAAmB4H,2BAK9B59C,KAAK69C,WAAa79C,KAAKo1C,uBAAuB0I,eAAenyC,KAC3DG,EAAAA,KAAI,SAACiyC,GACmC,IAAlCv+C,OAAOs3C,KAAKiH,GAAWn9C,QACzB4G,EAAK4tC,uBAAuB4I,6BAKlCh+C,KAAKi+C,iBAAmBj+C,KAAKm1C,wBAAwBQ,qBACrD31C,KAAKqL,SAAWrL,KAAKo1C,uBAAuBiC,oCAE5Cr3C,KAAKk+C,YAAcl+C,KAAKm+C,oCAAoC1xC,WAC1D,SAAC2xC,GAEC52C,EAAK20C,sBAAwBiC,KAKjCp+C,KAAKq+C,iBAAmBr+C,KAAKm1C,wBAC1BmJ,gCACA7xC,WAAU,SAAC8xC,GACe,SAArBA,EAAQC,SACVh3C,EAAK2tC,wBAAwBsJ,kCACC,WAArBF,EAAQC,SACjBh3C,EAAKtF,OACyB,WAArBq8C,EAAQC,UACjBh3C,EAAKqU,qBAAqBpQ,IACxB,CAAEvK,IAAK,8BACPsb,EAAAA,kBAAkBC,gBAEpBjV,EAAK2tC,wBAAwBsJ,mCACC,WAArBF,EAAQC,UACjBh3C,EAAKk3C,qBAAqBH,MAIhCv+C,KAAK2+C,SAAW3+C,KAAKo8C,iBAAiBzwC,KACpC0Q,EAAAA,WAAU,SAACihC,GAAY,OAAA91C,EAAKuuC,mBAAmB6I,WAAWtB,MAC1DxxC,EAAAA,KAAI,SAAC+yC,GACH,IAAMC,EAAgBt3C,EAAKs1C,mBAAmBrqC,IAC5C,uBAEEosC,EAAQj+C,OAAS,EACnBk+C,EAAc7R,SAEd6R,EAAc9R,eAMtBgP,EAAA97C,UAAAs9C,gBAAA,WAGE,IAFA,IAAMuB,GAAO,IAAIC,MAAOC,cAEfx+C,EAAI,EAAGA,EAAI,GAAIA,IACtBT,KAAKk8C,MAAM15C,KAAKu8C,EAAOt+C,GAGzB,IAAK,IAAIy+C,EAAI,EAAGA,GAAK,GAAIA,IACnBA,EAAI,GACNl/C,KAAKi8C,OAAOz5C,KAAK,IAAI08C,GAErBl/C,KAAKi8C,OAAOz5C,KAAK08C,EAAEh6B,aAKzB82B,EAAA97C,UAAAi/C,2BAAA,WACEn/C,KAAKu8C,YAAYp6C,MAAMs1C,gBAAkBz3C,KAAKu8C,YAAYp6C,MACvDs1C,gBAGLuE,EAAA97C,UAAAk/C,gBAAA,SAAgBC,GACdr/C,KAAKu8C,YAAY9pC,IAAI,iBAAiB8a,SAAS8xB,EAAKztB,OAGtDoqB,EAAA97C,UAAAo/C,cAAA,SAAcC,GACZv/C,KAAKu8C,YAAY9pC,IAAI,eAAe8a,SAASgyB,IAG/CvD,EAAA97C,UAAAs/C,aAAA,SAAaT,GACX/+C,KAAKu8C,YAAY9pC,IAAI,cAAc8a,SAASwxB,IAG9C/C,EAAA97C,UAAAu/C,4BAAA,WACEz/C,KAAKm8C,uBAAyBn8C,KAAKm8C,uBAQrCH,EAAA97C,UAAAi+C,kCAAA,WACE,OAAOzyC,EAAAA,cAAc,CAAC1L,KAAKy9C,WAAYz9C,KAAKi+C,mBAAmBtyC,KAC7D+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC4xC,EAAA3xC,EAAA,GAAW6qC,EAAA7qC,EAAA,GACf,OACE6qC,MAAAA,OAAO,EAAPA,EAASyG,YACPK,EAAUtsC,QACV,SAACisC,GACC,OAAAA,EAAQ3e,UAAYkY,EAAQyG,QAAQ3e,WACtC/9B,YAMVo7C,EAAA97C,UAAAw/C,sBAAA,SAAsB7I,GACpB,IAAIuG,EAAS,GAKb,OAJIvG,EAAQuG,QAAUvG,EAAQuG,OAAOze,UACnCye,EAASvG,EAAQuG,OAAOze,QAAU,MAG7B,CACLghB,SAAU9I,EAAQkG,UAAY,IAAMlG,EAAQmG,SAC5C4C,KAAM,CACJ/I,EAAQoG,MACRpG,EAAQqG,MACRrG,EAAQsG,KAAO,KAAOC,EAASvG,EAAQyG,QAAQ3e,QAC/CkY,EAAQ0G,WACR1G,EAAQgJ,SAKd7D,EAAA97C,UAAAw+C,qBAAA,SAAqBH,GAArB,IAAA/2C,EAAAxH,KACOA,KAAK8/C,2BACR9/C,KAAK8/C,yBAA2B9/C,KAAKsK,aAAad,KAChDoyC,GACA,CAAEhuC,UAAU,EAAMC,KAAM,OAE1B7N,KAAK8/C,yBAAyB1W,kBAAkB2S,eAAiB/7C,KAAK88C,mBAAmB36C,MACzFnC,KAAK8/C,yBAAyB1W,kBAAkB0S,mBAC9CyC,EAAQzC,mBACV97C,KAAK8/C,yBAAyBC,OAC3B3mC,MAAK,WACJ5R,EAAK2tC,wBAAwBsJ,kCAC7Bj3C,EAAKs4C,yBAA2B,QAEjCE,OAAM,WAELx4C,EAAK2tC,wBAAwBsJ,kCAC7Bj3C,EAAKs4C,yBAA2B,UAKxC9D,EAAA97C,UAAAiK,MAAA,WACEnK,KAAKs8C,UAAUh7B,QAGjB06B,EAAA97C,UAAAs7C,KAAA,WACEx7C,KAAKq8C,OAAO/6B,QAGd06B,EAAA97C,UAAA+/C,cAAA,WACMjgD,KAAKm8C,sBACPn8C,KAAKkC,OAELlC,KAAKm1C,wBAAwB8K,cAAcjgD,KAAK88C,mBAAmB36C,QAIvE65C,EAAA97C,UAAAggD,gBAAA,SAAgB5C,GACdt9C,KAAK88C,mBAAmBrqC,IAAI,mBAAmB8a,SAAS+vB,EAAQ3e,SAChE3+B,KAAKo8C,iBAAiBl6C,KAAKo7C,EAAQ3e,UAGrCqd,EAAA97C,UAAAigD,eAAA,SAAe/C,GACbp9C,KAAK88C,mBACFrqC,IAAI,uBACJ8a,SAAS6vB,EAAOC,eAGrBrB,EAAA97C,UAAAgC,KAAA,WACMlC,KAAKu8C,YAAY3wB,MACf5rB,KAAKm8C,sBACPn8C,KAAK03C,kBAAkBp2B,KAAK,CAC1B8+B,eAAgBpgD,KAAKu8C,YAAYp6C,MACjCk+C,eAAgB,OAGdrgD,KAAK88C,mBAAmBlxB,MAC1B5rB,KAAK03C,kBAAkBp2B,KAAK,CAC1B8+B,eAAgBpgD,KAAKu8C,YAAYp6C,MACjCk+C,eAAgBrgD,KAAK88C,mBAAmB36C,QAG1CnC,KAAK88C,mBAAmBjxB,oBAI5B7rB,KAAKu8C,YAAY1wB,mBAEZ7rB,KAAKm8C,uBACRn8C,KAAK88C,mBAAmBjxB,qBAK9BmwB,EAAA97C,UAAAiN,YAAA,WACMnN,KAAKk+C,aACPl+C,KAAKk+C,YAAY9wC,cAEfpN,KAAKq+C,kBACPr+C,KAAKq+C,iBAAiBjxC,wDAlOU+J,EAAAA,8BACCD,EAAAA,+BACLqB,EAAAA,0BACEjB,EAAAA,4BAClBwU,EAAAA,mBACUziB,SACM+O,EAAAA,sBAhDhCrX,EAAA,CADCoH,EAAAA,iDAIDpH,EAAA,CADCoH,EAAAA,mDAIDpH,EAAA,CADCwgB,EAAAA,uCAIDxgB,EAAA,CADCwgB,EAAAA,0CAIDxgB,EAAA,CADCwgB,EAAAA,kDA7BUy6B,EAAoBj7C,EAAA,CALhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,m7cACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B+0B,oBCbb,SAAAsE,KAAgC,OAAnBA,EAAiBv/C,EAAA,CAf7ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAusB,EAAAA,oBACAgG,EAAAA,eACApM,GACA3gB,EAAAA,WACA5F,EACA8yB,GACAgF,IAEF53B,aAAc,CAACuzC,IACfttC,gBAAiB,CAACstC,IAClB/yC,QAAS,CAAC+yC,OAECsE,oBCoBX,SAAAC,EACYvK,EACApU,EACAuT,EACAC,EACAv5B,EACArB,EACAo6B,EACAhb,EACAlkB,EACAmsB,GATA7hC,KAAAg2C,mBAAAA,EACAh2C,KAAA4hC,gBAAAA,EACA5hC,KAAAm1C,wBAAAA,EACAn1C,KAAAo1C,uBAAAA,EACAp1C,KAAA6b,qBAAAA,EACA7b,KAAAwa,eAAAA,EACAxa,KAAA40C,sBAAAA,EACA50C,KAAA45B,eAAAA,EACA55B,KAAA0V,YAAAA,EACA1V,KAAA6hC,kBAAAA,EAxBZ7hC,KAAA2K,UAAYvK,EAAAA,UACZJ,KAAAwgD,8BAA+B,EAK/BxgD,KAAAq0C,iBAAkB,EAqMpB,OAhLEkM,EAAArgD,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKygD,cAAe,EACpBzgD,KAAK0gD,WAAa1gD,KAAKg2C,mBAAmB2K,2BAErC3gD,KAAK6hC,kBAAkBiT,cAG1B90C,KAAKq0C,iBAAkB,EAFvBr0C,KAAKg2C,mBAAmBsB,qBAK1Bt3C,KAAKg7C,oBAAsBh7C,KAAK40C,sBAAsB3B,uBACpDjzC,KAAK45B,gBAGP55B,KAAKi7C,wBAA0Bj7C,KAAK40C,sBAAsBvB,2BACxDrzC,KAAK45B,gBAGP55B,KAAKm1C,wBACFQ,qBACAhqC,KAAKC,EAAAA,KAAK,IACVa,WAAU,SAACoqC,GACVrvC,EAAKmzC,gBAAkB9D,KAG3B72C,KAAK4gD,wBAA0B5gD,KAAKg2C,mBAAmBmB,oBACvDn3C,KAAK6gD,qBAAuB7gD,KAAKo1C,uBAC9BS,oBACAlqC,KACC0F,EAAAA,QACE,SAACyvC,GAAgB,OAAAA,KAAiBthD,OAAOs3C,KAAKgK,GAAalgD,WAG9D6L,WAAU,SAACq0C,GACNt5C,EAAKi5C,cACPj5C,EAAKgT,eAAeQ,GAAGxT,EAAKwzC,qBAEzB8F,EAAsB,UAGzBthD,OAAOs3C,KAAKgK,GAAal5C,SAAQ,SAAC1G,GAC5BA,EAAI4xB,WAAW,iBACjBtrB,EAAKu5C,mCAAmCD,EAAY5/C,OAGxDsG,EAAKo6B,gBAAgBof,kBAAkB,IAPvCx5C,EAAKy5C,gBAAkBH,MAY/BP,EAAArgD,UAAAghD,eAAA,SAAeC,GAAf,IAAA35C,EAAAxH,KAKE,OAJKA,KAAKihD,iBAAmBE,EAAQ1J,iBACnCz3C,KAAKihD,gBAAkBE,GAGlBz1C,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,sBAAuB,CAChD7B,MAAO4B,EAAQxE,YACfoC,KAAMoC,EAAQvE,aAEhB58C,KAAK0V,YAAY0rC,UAAU,8BAC3BphD,KAAK0V,YAAY0rC,UAAU,oCAC3BphD,KAAK0V,YAAY0rC,UAAU,0BAC1Bz1C,KACD+U,EAAAA,KACE,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GACCs1C,EAAAr1C,EAAA,GACAs1C,EAAAt1C,EAAA,GACAu1C,EAAAv1C,EAAA,GACAw1C,EAAAx1C,EAAA,GAEA,OAAOxE,EAAKi6C,WAAWN,EAAS,CAC9BE,YAAWA,EACXC,mBAAkBA,EAClBC,yBAAwBA,EACxBC,aAAYA,SAOtBjB,EAAArgD,UAAAwhD,oBAAA,SAAoBtB,GAClBpgD,KAAKihD,gBAAkBb,GAGzBG,EAAArgD,UAAAyhD,mBAAA,WACE3hD,KAAKwgD,8BAA+B,GAGtCD,EAAArgD,UAAA0hD,mBAAA,WACE5hD,KAAKwgD,8BAA+B,GAGtCD,EAAArgD,UAAAw3C,kBAAA,SAAkB3rC,OAChBq0C,EAAAr0C,EAAAq0C,eACAC,EAAAt0C,EAAAs0C,eACAr0C,EAAAD,EAAA81C,aAAAA,OAAA,IAAA71C,GAAAA,EAMM81C,EAAOzhD,EAAA,GAAwB+/C,GACrC0B,EAAQzB,eAAiBA,GAAkBrgD,KAAK26C,gBAE5CkH,EACF7hD,KAAKo1C,uBAAuB2M,qBAAqBD,GACxC9hD,KAAKihD,iBAAmBjhD,KAAKihD,gBAAgBz0C,KAAOs1C,EAAQt1C,IACrExM,KAAKo1C,uBAAuBsC,kBAAkBoK,GAGhD9hD,KAAKygD,cAAe,GAGtBF,EAAArgD,UAAAiN,YAAA,WACMnN,KAAK6gD,sBACP7gD,KAAK6gD,qBAAqBzzC,cAG5BpN,KAAKo1C,uBAAuB4M,yBAGpBzB,EAAArgD,UAAA+hD,YAAV,SAAsBrwB,GAcpB,MAZa,SAATA,EACO5xB,KAAK2K,UAAU7G,KACN,WAAT8tB,GAA8B,wBAATA,EACrB5xB,KAAK2K,UAAU5G,YACN,WAAT6tB,EACA5xB,KAAK2K,UAAU1G,YACN,SAAT2tB,EACA5xB,KAAK2K,UAAU3G,KAEfhE,KAAK2K,UAAUzG,aAMlBq8C,EAAArgD,UAAA6gD,mCAAV,SAA6CmB,GAC3CliD,KAAK6b,qBAAqBpQ,IACxB,CACEvK,IAAK,8BACL4nB,OAAQ,CAAEq5B,MAAOD,IAEnB1lC,EAAAA,kBAAkBC,iBAIZ8jC,EAAArgD,UAAAuhD,WAAV,SAAqBrB,EAAgBgC,GACnC,MAAO,CACLC,MAAOjC,EAAe3I,eAClB2K,EAAWb,yBACX,GACJ5B,SAAUS,EAAe3D,kBACzBmD,KAAM,CAACQ,EAAe1D,WAAY0F,EAAWf,aAC7CiB,IAAKtiD,KAAKiiD,YAAY7B,EAAe5D,SAAS5qB,MAC9C2wB,QAAS,CAAC,CAAEp3B,KAAMi3B,EAAWd,mBAAoBhiC,MAAO,SACxDkjC,OACExiD,KAAKihD,iBAAmBjhD,KAAKihD,gBAAgBz0C,KAAO4zC,EAAe5zC,GAC/D41C,EAAWZ,kBACX7sC,IAIV4rC,EAAArgD,UAAAuiD,OAAA,WACEziD,KAAK03C,kBAAkB,CACrB0I,eAAgBpgD,KAAKihD,gBACrBY,cAAc,KAIlBtB,EAAArgD,UAAAwiD,WAAA,WACE1iD,KAAKwa,eAAeQ,GAAGhb,KAAKi7C,mEA1LE1iC,EAAAA,0BACHtB,EAAAA,uBACQC,EAAAA,+BACDC,EAAAA,8BACFG,EAAAA,4BACNS,EAAAA,sBACO06B,UACP9X,EAAAA,sBACHpjB,EAAAA,0BACMP,EAAAA,qBAzBpBupC,EAAsBx/C,EAAA,CALlCqH,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,m6EACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bs5B,oBCUb,SAAAoC,KAAkC,OAArBA,EAAmB5hD,EAAA,CA5B/ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAssB,GACAxxB,GACAuM,GACAltB,EAAAA,YAEFvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbu0C,uBAAwB,CACtBt0C,UAAWiyC,GACX1wC,OAAQ,CACN6kC,GACA3F,GACA0L,GACAkB,SAMVlzC,aAAc,CAAC83C,IACf7xC,gBAAiB,CAAC6xC,IAClBt3C,QAAS,CAACs3C,OAECoC,oBChBX,SAAAE,EACYjhB,EACApnB,EACA6Q,GAFArrB,KAAA4hC,gBAAAA,EACA5hC,KAAAwa,eAAAA,EACAxa,KAAAqrB,GAAAA,EAPZrrB,KAAA8iD,mBAAqB9iD,KAAKqrB,GAAGvM,MAAM,CACjCikC,mBAAoB,EAAC,EAAOt3B,EAAAA,WAAWu3B,gBA+B3C,OAtBEH,EAAA3iD,UAAA+iD,WAAA,WACMjjD,KAAK8iD,mBAAmBl3B,MAC1B5rB,KAAK4hC,gBAAgBshB,aAErBljD,KAAK8iD,mBAAmBj3B,oBAI5Bg3B,EAAA3iD,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKmjD,uBAAyBnjD,KAAK4hC,gBAChCH,kBACA91B,KAAK0F,EAAAA,QAAO,SAACuxB,GAAU,OAA8B,IAA9BpjC,OAAOs3C,KAAKlU,GAAOhiC,WAC1C6L,WAAU,WACTjF,EAAKgT,eAAeQ,GAAG,CAAEC,QAAS,0BAIxC4nC,EAAA3iD,UAAAiN,YAAA,WACMnN,KAAKmjD,wBACPnjD,KAAKmjD,uBAAuB/1C,wDAxBH6J,EAAAA,uBACDc,EAAAA,sBACZ+T,EAAAA,eAVL+2B,EAAmB9hD,EAAA,CAL/BqH,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,y5BACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B47B,oBCoBb,SAAAO,KAA+B,OAAlBA,EAAgBriD,EAAA,CAvB5ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAC,EAAAA,UACA9lB,EAAAA,WACA+mB,EAAAA,oBACAmL,IAEFz3B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbg1C,mBAAoB,CAClB/0C,UAAWu0C,GACXhzC,OAAQ,CAAC6kC,GAAmB3F,SAKpCtmC,aAAc,CAACo6C,IACfn0C,gBAAiB,CAACm0C,IAClB55C,QAAS,CAAC45C,OAECO,oBCzBX,SAAAE,EACUrN,EACArB,EACAjC,EACAoG,GAHA/4C,KAAAi2C,uBAAAA,EACAj2C,KAAA40C,sBAAAA,EACA50C,KAAA2yC,qBAAAA,EACA3yC,KAAA+4C,OAAAA,SAGVuK,EAAApjD,UAAA8uC,YAAA,WAAA,IAAAxnC,EAAAxH,KACQ06C,EAA6B16C,KAAK40C,sBAAsBhC,gBAC5DjB,EAAAA,iBAAiBQ,iBASnB,OANKuI,GAAgB/oC,EAAAA,aACnB1C,QAAQC,KACN,0BAA0ByiC,EAAAA,iBAAiBQ,gBAAe,+BAIvDnyC,KAAKi2C,uBACTJ,oBACAlqC,KACC+U,EAAAA,KAAI,SAAC0/B,GACH,SAAAA,GAAyD,IAAvC5gD,OAAOs3C,KAAKsJ,GAAgBx/C,SAE1C4G,EAAKuxC,OAAOG,SACVwB,GACElzC,EAAKmrC,qBAAqB4B,eACxBmG,EAAa1I,WACbwC,MAAM,kDA3BUU,UACDzC,UACDgC,EAAAA,4BACd2E,EAAAA,2MALPkK,EAAsBviD,EAAA,CAHlCiG,EAAAA,WAAW,CACVC,WAAY,UAEDq8C,oBC2BX,SAAAC,EACYpO,EACAC,EACAW,EACAlU,EACAnsB,EACAk/B,EACA7N,GANA/mC,KAAAm1C,wBAAAA,EACAn1C,KAAAo1C,uBAAAA,EACAp1C,KAAA+1C,mBAAAA,EACA/1C,KAAA6hC,kBAAAA,EACA7hC,KAAA0V,YAAAA,EACA1V,KAAA40C,sBAAAA,EACA50C,KAAA+mC,iBAAAA,EAjBZ/mC,KAAAwjD,iBAAmB7R,EAAAA,iBAQnB3xC,KAAA+hC,kBAAuCC,EAAAA,kBAAkBC,WAgH3D,OApGEshB,EAAArjD,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKqpC,MAAQrpC,KAAK6hC,kBAAkBzD,YACpCp+B,KAAKquC,SAAWruC,KAAK6hC,kBAAkByM,aACvCtuC,KAAKyjD,iBAAmBzjD,KAAKm1C,wBAAwBQ,qBACrD31C,KAAK0jD,gBAAkB1jD,KAAKo1C,uBAAuBS,oBACnD71C,KAAK4nC,iBAAmB5nC,KAAK+mC,iBAAiBjF,mBAC5C9hC,KAAK+hC,mBAGP/hC,KAAK2jD,cAAgB3jD,KAAKm1C,wBACvBkG,0BACA1vC,KACCG,EAAAA,KAAI,SAAC83C,GACc,OAAbA,GACFp8C,EAAK2tC,wBAAwB0O,iCAKrC7jD,KAAK8jD,aAAe9jD,KAAKyjD,iBAAiB93C,KACxC0Q,EAAAA,WAAU,SAACw6B,GACT,OAAArvC,EAAKuuC,mBAAmBgO,WAAWlN,EAAQyG,QAAQ3e,YAErD7yB,EAAAA,KAAI,SAACwxC,GACa,OAAZA,GACF91C,EAAKuuC,mBAAmBiO,2BAG5BtjC,EAAAA,KAAI,SAAC48B,GAAqB,OAAAA,GAAWA,EAAQnyB,UAIjDo4B,EAAArjD,UAAA+jD,uBAAA,SACEtJ,EACAuJ,GAEA,OAAOx4C,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,wBAC1Bz1C,KACD+U,EAAAA,KAAI,SAAC3U,OAACo4C,EAAD9hD,EAAA0J,EAAA,GAAC,GACCm4C,IACHA,EAAcvJ,EAAgB2C,QAAQ3e,SAGxC,IAAIye,EAAS,GAKb,OAJIzC,EAAgByC,QAAUzC,EAAgByC,OAAOze,UACnDye,EAASzC,EAAgByC,OAAOze,QAAU,MAGrC,CACL0jB,MAAO8B,EACPxE,SAAUhF,EAAgBoC,UAAY,IAAMpC,EAAgBqC,SAC5D4C,KAAM,CACJjF,EAAgBsC,MAChBtC,EAAgBuC,MAChBvC,EAAgBwC,KAAO,KAAOC,EAAS8G,EACvCvJ,EAAgB4C,WAChB5C,EAAgBkF,aAO1B0D,EAAArjD,UAAAkkD,oBAAA,SAAoBpQ,GAClB,OAAOtoC,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,qCAC1Bz1C,KACD+U,EAAAA,KAAI,SAAC3U,GACH,MAAO,CACLs2C,MAFChgD,EAAA0J,EAAA,GAAC,GAGF4zC,SAAU3L,EAAa7oB,KACvBy0B,KAAM,CAAC5L,EAAa1Q,mBAM5BigB,EAAArjD,UAAAmkD,qBAAA,SAAqBjE,GACnB,OAAO10C,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,uBAC3BphD,KAAK0V,YAAY0rC,UAAU,sBAAuB,CAChD7B,MAAOa,EAAezD,YACtBoC,KAAMqB,EAAexD,eAEtBjxC,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAACo4C,EAAAn4C,EAAA,GAAWq1C,EAAAr1C,EAAA,GACf,MAAO,CACLq2C,MAAO8B,EACPxE,SAAUS,EAAe3D,kBACzBmD,KAAM,CAACQ,EAAe1D,WAAY2E,SAM1CkC,EAAArjD,UAAAokD,mBAAA,SAAmBC,GACjB,IAAMnwB,EAAOp0B,KAAK40C,sBAAsBhC,gBAAgB2R,GACxD,OAAOnwB,GAAQA,EAAK4d,oDA3Ge96B,EAAAA,+BACDC,EAAAA,8BACJiB,EAAAA,0BACDpB,EAAAA,yBACNO,EAAAA,0BACUk7B,UACL/Q,MAlBnB6hB,EAAqBxiD,EAAA,CALjCqH,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,q5GACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bs8B,oBCuBb,SAAAiB,KAAiC,OAApBA,EAAkBzjD,EAAA,CA/B9ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAmmB,GACAgf,GACA3/B,EAAAA,WACA8lB,EAAAA,UACAD,EAAAA,aACAyV,GACAr7B,EAAAA,sBAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbo2C,oBAAqB,CACnBn2C,UAAWi1C,GACX1zC,OAAQ,CACN6kC,GACA3F,GACA0L,GACAkB,GACA2H,SAMV76C,aAAc,CAAC86C,IACf70C,gBAAiB,CAAC60C,IAClBt6C,QAAS,CAACs6C,OAECiB,oBCqCX,SAAAE,EACYr5B,EACA8pB,EACAx5B,EACAo6B,EACAl6B,EACAvR,GALAtK,KAAAqrB,GAAAA,EACArrB,KAAAm1C,wBAAAA,EACAn1C,KAAA2b,YAAAA,EACA3b,KAAA+1C,mBAAAA,EACA/1C,KAAA6b,qBAAAA,EACA7b,KAAAsK,aAAAA,EAtDZtK,KAAAo8C,iBAA4C,IAAIx2B,EAAAA,gBAAwB,IAkBxE5lB,KAAA2kD,eAAgB,EAGhB3kD,KAAA4kD,cAAgB,IAAIvjC,EAAAA,aAGpBrhB,KAAA6kD,cAAgB,IAAIxjC,EAAAA,aAMpBrhB,KAAA8kD,YAAyB9kD,KAAKqrB,GAAGvM,MAAM,CACrCw+B,QAASt9C,KAAKqrB,GAAGvM,MAAM,CACrB6f,QAAS,CAAC,KAAMlT,EAAAA,WAAWC,YAE7Bq5B,UAAW,CAAC,IACZhI,UAAW,CAAC,GAAItxB,EAAAA,WAAWC,UAC3BsxB,SAAU,CAAC,GAAIvxB,EAAAA,WAAWC,UAC1BuxB,MAAO,CAAC,GAAIxxB,EAAAA,WAAWC,UACvBwxB,MAAO,CAAC,IACRC,KAAM,CAAC,GAAI1xB,EAAAA,WAAWC,UACtB0xB,OAAQp9C,KAAKqrB,GAAGvM,MAAM,CACpB6f,QAAS,CAAC,KAAMlT,EAAAA,WAAWC,YAE7B6xB,WAAY,CAAC,GAAI9xB,EAAAA,WAAWC,UAC5Bm0B,MAAO,GACPjJ,eAAgB,EAAC,KAiMrB,OArLE8N,EAAAxkD,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KAEEA,KAAKy9C,WAAaz9C,KAAK+1C,mBAAmBiP,uBAAuBr5C,KAC/DG,EAAAA,KAAI,SAAC6xC,GACmC,IAAlCn+C,OAAOs3C,KAAK6G,GAAW/8C,QACzB4G,EAAKuuC,mBAAmBiO,4BAM9BhkD,KAAKilD,QAAUjlD,KAAK2b,YAAYupC,YAAYv5C,KAC1CG,EAAAA,KAAI,SAACq5C,GACgC,IAA/B3lD,OAAOs3C,KAAKqO,GAAQvkD,QACtB4G,EAAKmU,YAAYypC,gBAGrB1kC,EAAAA,KAAI,SAACykC,GACHA,EAAO3zC,KAAKs0B,IAEZ,OAAApjC,EAAA,CADkB,CAAEkvB,KAAM,GAAIzG,KAAM,UACdg6B,OAK1BnlD,KAAK2+C,SAAW3+C,KAAKo8C,iBAAiBzwC,KACpC0Q,EAAAA,WAAU,SAACihC,GAAY,OAAA91C,EAAKuuC,mBAAmB6I,WAAWtB,MAC1DxxC,EAAAA,KAAI,SAAC+yC,GACH,IAAMC,EAAgBt3C,EAAKs9C,YAAYryC,IAAI,kBACvCosC,GAAWA,EAAQj+C,OAAS,EAC9Bk+C,EAAc7R,SAEd6R,EAAc9R,cAMpBhtC,KAAKq+C,iBAAmBr+C,KAAKm1C,wBAC1BmJ,gCACA7xC,WAAU,SAAC8xC,GACe,SAArBA,EAAQC,SACVh3C,EAAK2tC,wBAAwBsJ,kCACC,WAArBF,EAAQC,SACjBh3C,EAAKo9C,cAActjC,KAAK9Z,EAAKs9C,YAAY3iD,OACX,WAArBo8C,EAAQC,UAGfD,EAAQve,OAAOA,OAAOrY,MAAK,SAACllB,GAAU,MAAkB,cAAlBA,EAAM4iD,WAE5C79C,EAAKqU,qBAAqBpQ,IACxB,CAAEvK,IAAK,6BACPsb,EAAAA,kBAAkBC,gBAGpBjV,EAAKqU,qBAAqBpQ,IACxB,CAAEvK,IAAK,8BACPsb,EAAAA,kBAAkBC,gBAGtBjV,EAAK2tC,wBAAwBsJ,mCACC,WAArBF,EAAQC,UACjBh3C,EAAKk3C,qBAAqBH,MAI5Bv+C,KAAKslD,aAAwD,IAAzC9lD,OAAOs3C,KAAK92C,KAAKslD,aAAa1kD,SACpDZ,KAAK8kD,YAAYS,WAAWvlD,KAAKslD,aAEjCtlD,KAAKkgD,gBAAgBlgD,KAAKslD,YAAYhI,SAClCt9C,KAAKslD,YAAYlI,QACnBp9C,KAAKmgD,eAAengD,KAAKslD,YAAYlI,UAK3CsH,EAAAxkD,UAAAslD,cAAA,SAAcnD,GACZriD,KAAK8kD,YAAsB,SAAEC,UAAUx3B,SAAS80B,EAAMzwB,OAGxD8yB,EAAAxkD,UAAAggD,gBAAA,SAAgB5C,GACdt9C,KAAK8kD,YAAsB,SAAExH,QAAkB,SAAE3e,QAAQpR,SACvD+vB,EAAQ3e,SAEV3+B,KAAKo8C,iBAAiBl6C,KAAKo7C,EAAQ3e,UAGrC+lB,EAAAxkD,UAAAigD,eAAA,SAAe/C,GACbp9C,KAAK8kD,YAAsB,SAAE1H,OAAiB,SAAEze,QAAQpR,SACtD6vB,EAAOze,UAIX+lB,EAAAxkD,UAAAulD,qBAAA,WACEzlD,KAAK8kD,YAAsB,SAAElO,eAAerpB,SAC1CvtB,KAAK8kD,YAAY3iD,MAAMy0C,iBAI3B8N,EAAAxkD,UAAAs7C,KAAA,WACEx7C,KAAK6kD,cAAcvjC,QAGrBojC,EAAAxkD,UAAA+/C,cAAA,WAAA,IAAAz4C,EAAAxH,KACMA,KAAK8kD,YAAYl5B,OACf5rB,KAAK8kD,YAAYryC,IAAI,UAAUtQ,MAAMw8B,UACvC3+B,KAAK0lD,WAAa1lD,KAAK2+C,SAAShzC,KAAKC,EAAAA,KAAK,IAAIa,WAAU,SAACoyC,GACvD,IAAM8G,EAAM9G,EAAQh5C,MAClB,SAACu3C,GACC,OAAAA,EAAOze,UACPn3B,EAAKs9C,YAAYl4B,SAAiB,OAAEzqB,MAAMw8B,WAE9Cn/B,OAAOc,OAAOkH,EAAKs9C,YAAY3iD,MAAMi7C,OAAQ,CAC3CC,aAAcsI,EAAItI,mBAKpBr9C,KAAK8kD,YAAY3kB,MACnBngC,KAAKm1C,wBAAwB8K,cAAcjgD,KAAK8kD,YAAY3iD,OAI5DnC,KAAK4kD,cAActjC,UAAK3M,IAG1B3U,KAAK8kD,YAAYj5B,oBAIrB64B,EAAAxkD,UAAAw+C,qBAAA,SAAqBH,GAArB,IAAA/2C,EAAAxH,KACOA,KAAK8/C,2BACR9/C,KAAK8/C,yBAA2B9/C,KAAKsK,aAAad,KAChDoyC,GACA,CAAEhuC,UAAU,EAAMC,KAAM,OAE1B7N,KAAK8/C,yBAAyB1W,kBAAkB2S,eAAiB/7C,KAAK8kD,YAAY3iD,MAClFnC,KAAK8/C,yBAAyB1W,kBAAkB0S,mBAC9CyC,EAAQzC,mBACV97C,KAAK8/C,yBAAyBC,OAC3B3mC,MAAK,SAACy9B,GACLrvC,EAAK2tC,wBAAwBsJ,kCACzB5H,IACFA,EAAUr3C,OAAOc,OACf,CACEykD,UAAWv9C,EAAKs9C,YAAY3iD,MAAM4iD,UAClClF,MAAOr4C,EAAKs9C,YAAY3iD,MAAM09C,MAC9B+D,UAAU,GAEZ/M,GAEFrvC,EAAKo9C,cAActjC,KAAKu1B,IAE1BrvC,EAAKs4C,yBAA2B,QAEjCE,OAAM,WAELx4C,EAAK2tC,wBAAwBsJ,kCAC7B,IAAM5H,EAAUr3C,OAAOc,OACrB,CACEsjD,UAAU,GAEZp8C,EAAKs9C,YAAY3iD,OAEnBqF,EAAKo9C,cAActjC,KAAKu1B,GACxBrvC,EAAKs4C,yBAA2B,UAKxC4E,EAAAxkD,UAAAiN,YAAA,WACEnN,KAAKm1C,wBAAwBsJ,kCAEzBz+C,KAAKq+C,kBACPr+C,KAAKq+C,iBAAiBjxC,cAGpBpN,KAAK0lD,YACP1lD,KAAK0lD,WAAWt4C,wDA1LJ0e,EAAAA,mBACqB5U,EAAAA,+BACZiB,EAAAA,mBACOC,EAAAA,0BACEd,EAAAA,4BACRjO,KAnD1BtI,EAAA,CADCoH,EAAAA,2CAIDpH,EAAA,CADCoH,EAAAA,8CAIDpH,EAAA,CADCoH,EAAAA,8CAIDpH,EAAA,CADCoH,EAAAA,iDAIDpH,EAAA,CADCoH,EAAAA,6CAIDpH,EAAA,CADCoH,EAAAA,6CAIDpH,EAAA,CADCwgB,EAAAA,8CAIDxgB,EAAA,CADCwgB,EAAAA,8CA3BUmjC,EAAoB3jD,EAAA,CALhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,slPACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9By9B,oBCVb,SAAAkB,KAAgC,OAAnBA,EAAiB7kD,EAAA,CAf7ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAusB,EAAAA,oBACAiG,EAAAA,YACAnH,EAAAA,aACAkH,EAAAA,eACA3yB,EACA4F,EAAAA,WACAkyB,IAEF53B,aAAc,CAACi8C,GAAsB9I,IACrCltC,gBAAiB,CAACktC,IAClB3yC,QAAS,CAACy7C,GAAsB9I,OAErBgK,oBChBX,SAAAC,EAAoB5P,GAAAj2C,KAAAi2C,uBAAAA,SAEpB4P,EAAA3lD,UAAA8uC,YAAA,WACE,OAAOhvC,KAAKi2C,uBAAuBV,oEAHOL,uHADjC2Q,EAA0B9kD,EAAA,CAHtCiG,EAAAA,WAAW,CACVC,WAAY,UAED4+C,oBCyBX,SAAAC,EACY/P,EACAv7B,EACA26B,EACAP,EACAhb,EACAlkB,EACAmsB,GANA7hC,KAAA+1C,mBAAAA,EACA/1C,KAAAwa,eAAAA,EACAxa,KAAAm1C,wBAAAA,EACAn1C,KAAA40C,sBAAAA,EACA50C,KAAA45B,eAAAA,EACA55B,KAAA0V,YAAAA,EACA1V,KAAA6hC,kBAAAA,EAdZ7hC,KAAA+lD,8BAA+B,EAI/B/lD,KAAAgmD,aAAc,EACdhmD,KAAAq0C,iBAAkB,EA4IpB,OAhIEyR,EAAA5lD,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAK0gD,WAAa1gD,KAAK+1C,mBAAmBkQ,sBAC1CjmD,KAAKkmD,mBAAqBlmD,KAAK+1C,mBAAmBO,eAClDt2C,KAAKmmD,iBAAmBnmD,KAAKm1C,wBAAwBQ,qBAErD31C,KAAKomD,OAAS16C,EAAAA,cAAc,CAC1B1L,KAAKkmD,mBACLlmD,KAAKmmD,iBACLnmD,KAAK0V,YAAY0rC,UAAU,0CAC3BphD,KAAK0V,YAAY0rC,UAAU,qCAC3BphD,KAAK0V,YAAY0rC,UAAU,0BAC1Bz1C,KACD+U,EAAAA,KACE,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GACC2qC,EAAA1qC,EAAA,GACA43C,EAAA53C,EAAA,GACAq6C,EAAAr6C,EAAA,GACAs6C,EAAAt6C,EAAA,GACAw1C,EAAAx1C,EAAA,GAGA,GACE0qC,EAAU91C,UACRgjD,GAA6C,IAAjCpkD,OAAOs3C,KAAK8M,GAAUhjD,QACpC,CACA,IAAMg2C,EAAiBF,EAAU7wC,MAC/B,SAACgxC,GAAY,OAAAA,EAAQD,kBAEvBgN,EAAWhN,EACXpvC,EAAK++C,cAAc3P,GAErB,OAAOF,EAAUh2B,KAAI,SAACm2B,GAQpB,MAAO,CACLA,QAAOA,EACPwI,KATW73C,EAAK05C,eAChBrK,EACA+M,EACAyC,EACAC,EACA9E,WAWLxhD,KAAK6hC,kBAAkBiT,cAG1B90C,KAAKq0C,iBAAkB,EAFvBr0C,KAAK+1C,mBAAmBU,iBAM5BqP,EAAA5lD,UAAAghD,eAAA,SACErK,EACA+M,EACAyC,EACAC,EACA9E,GAEA,IAAIpE,EAAS,GAMb,OAJIvG,EAAQuG,QAAUvG,EAAQuG,OAAOze,UACnCye,EAASvG,EAAQuG,OAAOze,QAAU,MAG7B,CACL0jB,MAAOxL,EAAQD,eAAiByP,EAA6B,GAC7D1G,SAAU9I,EAAQkG,UAAY,IAAMlG,EAAQmG,SAC5C4C,KAAM,CACJ/I,EAAQoG,MACRpG,EAAQqG,MACRrG,EAAQsG,KAAO,KAAOC,EAASvG,EAAQyG,QAAQ3e,QAC/CkY,EAAQ0G,WACR1G,EAAQgJ,OAEV0C,QAAS,CAAC,CAAEp3B,KAAMm7B,EAAuBhnC,MAAO,SAChDkjC,OAAQoB,GAAYA,EAASp3C,KAAOqqC,EAAQrqC,GAAKg1C,EAAe,KAIpEsE,EAAA5lD,UAAAqmD,cAAA,SAAc1P,GACZ72C,KAAKm1C,wBAAwB6B,mBAAmBH,IAGlDiP,EAAA5lD,UAAAsmD,WAAA,SAAW3P,GAAX,IAAArvC,EAAAxH,KACQymD,EAAczmD,KAAKmmD,iBAAiB15C,WAAU,SAACm3C,GAC/CA,GAAYA,EAAS8C,kBACvBl/C,EAAKi7C,SACLgE,EAAYr5C,kBAIhBpN,KAAKgmD,aAAc,EAEnBhmD,KAAKkmD,mBAAmBv6C,KAAKC,EAAAA,KAAK,IAAIa,WAAU,SAACiqC,GAC/CA,EAAU1wC,SAAS6wC,GACfrvC,EAAK++C,cAAc1P,GACnBrvC,EAAK2tC,wBAAwBwR,oBAAoB9P,OAIzDiP,EAAA5lD,UAAA0mD,mBAAA,WACE5mD,KAAK+lD,8BAA+B,GAGtCD,EAAA5lD,UAAA2mD,mBAAA,SAAmBnE,QAAA,IAAAA,IAAAA,GAAA,GACjB1iD,KAAK+lD,8BAA+B,EAChCrD,GACF1iD,KAAK0iD,cAIToD,EAAA5lD,UAAAuiD,OAAA,WACEziD,KAAKwa,eAAeQ,GAClBhb,KAAK40C,sBAAsB3B,uBAAuBjzC,KAAK45B,kBAI3DksB,EAAA5lD,UAAAwiD,WAAA,WACE1iD,KAAKwa,eAAeQ,GAClBhb,KAAK40C,sBAAsBvB,2BACzBrzC,KAAK45B,iBACF,kDAtIuBxhB,EAAAA,0BACJL,EAAAA,sBACSb,EAAAA,+BACFu7B,UACP9X,EAAAA,sBACHpjB,EAAAA,0BACMP,EAAAA,qBAhBpB8uC,EAAwB/kD,EAAA,CALpCqH,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAA,u7FACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B6+B,oBCmBb,SAAAgB,KAAoC,OAAvBA,EAAqB/lD,EAAA,CA7BjCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACA4xB,GACA92B,GACAuM,GACAltB,EAAAA,WACA+rC,GACAH,IAEFnxC,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb04C,wBAAyB,CACvBz4C,UAAWw3C,GACXj2C,OAAQ,CACN6kC,GACA3F,GACA8W,SAMVp9C,aAAc,CAACq9C,IACfp3C,gBAAiB,CAACo3C,IAClB78C,QAAS,CAAC68C,OAECgB,oBCZb,SAAAE,KAAsC,OAAzBA,EAAuBjmD,EAAA,CAhBnCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA2wC,GACAG,GACAc,GACAL,GACAH,GACA0B,GACAkH,GACAS,GACA3Z,GACA+a,GACAsC,OAGSE,oBClBX,SAAAC,EACYzsC,EACAF,EACAunB,GAFA7hC,KAAAwa,eAAAA,EACAxa,KAAAsa,YAAAA,EACAta,KAAA6hC,kBAAAA,SAGZolB,EAAA/mD,UAAA8uC,YAAA,WAAA,IAAAxnC,EAAAxH,KACE,OAAOA,KAAKsa,YAAYI,eAAe/O,KACrC+U,EAAAA,KAAI,SAAC/F,GACH,GAAIA,EAAM2B,aACR9U,EAAKgT,eAAeQ,GAAG,CAAEC,QAAS,cAC7B,GAAIzT,EAAKq6B,kBAAkBiT,cAEhC,OADAttC,EAAKgT,eAAeQ,GAAG,CAAEC,QAAS,UAC3B,EAET,OAAQN,EAAM2B,2DAdQvE,EAAAA,sBACHhB,EAAAA,mBACMC,EAAAA,oNAJpBiwC,EAAoBlmD,EAAA,CAHhCiG,EAAAA,WAAW,CACVC,WAAY,UAEDggD,MCXAC,GAAwC,CACnDnhC,UAAW,CACT,CACE7kB,IAAK,YACLklB,QAAS,0BAEX,CACEllB,IAAK,UACLklB,QAAS,wBAEX,CAAEllB,IAAK,YAAaklB,QAAS,0CCH/B,SAAA+gC,EACY//C,EACA0f,GADA9mB,KAAAoH,WAAAA,EACApH,KAAA8mB,gBAAAA,EAUd,OAPEqgC,EAAAjnD,UAAA8K,SAAA,WACEhL,KAAK8mB,gBAAgBrb,IAAIzL,KAAKonD,WAAYpnD,KAAKoH,WAAWY,gBAG5Dm/C,EAAAjnD,UAAAiN,YAAA,WACEnN,KAAK8mB,gBAAgB5N,OAAOlZ,KAAKonD,sDATXn/C,EAAAA,kBACKwd,MAJpB1kB,EAAA,CAARoH,EAAAA,0CADUg/C,EAAiBpmD,EAAA,CAH7BqT,EAAAA,UAAU,CACT/L,SAAU,kBAEC8+C,OvCNDtV,GAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KACxB,QAAA,UACAA,GAAA,OAAA,SACAA,GAAA,MAAA,QAGF,kBwCAA,SAAAwV,IACUrnD,KAAAsnD,cAAgB,IAAIzoC,IACpB7e,KAAAunD,oBAAsB,IAAI1oC,IAC1B7e,KAAAwnD,mBAAqB,IAAI3oC,WAyBjCwoC,EAAAnnD,UAAAuL,IAAA,SACE4b,EACAogC,EACAphC,QAAA,IAAAA,IAAAA,EAA2BwrB,EAAAA,eAAe6V,SAEtCrhC,IAAawrB,EAAAA,eAAejZ,QAC9B54B,KAAK2nD,MAAM3nD,KAAKunD,oBAAqBlgC,EAAQogC,GAE3CphC,IAAawrB,EAAAA,eAAe6V,SAC9B1nD,KAAK2nD,MAAM3nD,KAAKsnD,cAAejgC,EAAQogC,GAErCphC,IAAawrB,EAAAA,eAAehZ,OAC9B74B,KAAK2nD,MAAM3nD,KAAKwnD,mBAAoBngC,EAAQogC,IAahDJ,EAAAnnD,UAAAuS,IAAA,SACE4U,EACAhB,EACAuhC,GAEA,IAAIC,EACJ,YAJA,IAAAxhC,IAAAA,EAA2BwrB,EAAAA,eAAe6V,cAC1C,IAAAE,IAAAA,GxCxDiC,GwC2DzBvhC,GACN,KAAKwrB,EAAAA,eAAejZ,OAClBivB,EAAc7nD,KAAKunD,oBAAoB90C,IAAI4U,GAC3C,MACF,KAAKwqB,EAAAA,eAAehZ,MAClBgvB,EAAc7nD,KAAKwnD,mBAAmB/0C,IAAI4U,GAC1C,MACF,QACEwgC,EAAc7nD,KAAKsnD,cAAc70C,IAAI4U,GAEzC,OAAIwgC,IAAgBD,EACXC,EAAY,GAEdA,GAGTR,EAAAnnD,UAAAgZ,OAAA,SACEmO,EACAhB,EACAlkB,GAEA,YAHA,IAAAkkB,IAAAA,EAA2BwrB,EAAAA,eAAe6V,SAGlCrhC,GACN,KAAKwrB,EAAAA,eAAejZ,OAClB54B,KAAK8nD,iBAAiB9nD,KAAKunD,oBAAqBlgC,EAAQllB,GACxD,MACF,KAAK0vC,EAAAA,eAAehZ,MAClB74B,KAAK8nD,iBAAiB9nD,KAAKwnD,mBAAoBngC,EAAQllB,GACvD,MACF,QACEnC,KAAK8nD,iBAAiB9nD,KAAKsnD,cAAejgC,EAAQllB,KAIhDklD,EAAAnnD,UAAAynD,MAAR,SAAcA,EAAyBtgC,EAAgBllB,GACrD,IACM4lD,GADWJ,EAAMl1C,IAAI4U,IAAW,IACP1kB,OAAO,CAACR,IACvCwlD,EAAM5oC,IAAIsI,EAAQ0gC,IAGVV,EAAAnnD,UAAA4nD,iBAAV,SACEH,EACAtgC,EACAllB,GAEA,IAAKA,GAASwlD,EAAM/1C,IAAIyV,GACtBsgC,EAAM1oC,OAAOoI,QACR,GAAIllB,GAASwlD,EAAM/1C,IAAIyV,GAAS,CACrC,IAAIpB,EAAW0hC,EAAMl1C,IAAI4U,GACzBpB,EAAWA,EAAS5U,QAAO,SAAC22C,GAAQ,OAAAA,IAAQ7lD,KAC5CwlD,EAAM5oC,IAAIsI,EAAQpB,mGA5GXohC,EAAatmD,EAAA,CAHzBiG,EAAAA,WAAW,CACVC,WAAY,UAEDogD,oBCoCb,SAAAY,KAA6B,OAAhBA,EAAclnD,EAAA,CAtB1ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAwF,EAAAA,WACA+5C,EAAAA,aAAaC,WAAWjB,IACxB5hC,IAEF7c,aAAc,CAACoe,GAAmBsgC,IAClCl+C,QAAS,CAACk+C,IACVz4C,gBAAiB,CAACmY,IAElBje,UAAW,CACTC,EAAAA,qBAAqBq+C,IACrB,CAAEp+C,QAAS8d,GAAgB7d,YAAaC,EAAAA,QACxC,CACEF,QAASogB,EAAAA,gBACTC,WAAYi/B,GACZ/+B,KAAM,CAACvU,EAAAA,yBAA0BuyC,IACjCjtC,OAAO,OAIA6tC,MAKb,SAAgBG,GACdC,EACAC,GAQA,OANgB,WACd,IAAM9zC,EAAU6zC,EAAyBtzC,wBACvC8R,IAEFyhC,EAAc78C,IAAI,gBAAsB+I,EAASq9B,EAAAA,eAAejZ,2BC5ClE,SAAA2vB,EAAYxP,GAAZ,IAAAvxC,EAAAxH,KAFAA,KAAAwoD,WAAuC,IAAI5iC,EAAAA,iBAAgB,GAGzDmzB,EAAO0P,OACJ98C,KAAK0F,EAAAA,QAAO,SAACiO,GAAU,OAAAA,aAAiBopC,EAAAA,oBACxCj8C,WAAU,WACTjF,EAAKmhD,QAAO,aAOlBJ,EAAAroD,UAAAyoD,OAAA,SAAOC,GACDA,EACF5oD,KAAKwoD,WAAWtmD,MAAK,GAErBlC,KAAKwoD,WAAWtmD,MAAMlC,KAAKwoD,WAAWrmD,iDAftBi3C,EAAAA,iIAHTmP,EAAoBxnD,EAAA,CAHhCiG,EAAAA,WAAW,CACVC,WAAY,UAEDshD,oBCEX,SAAAM,EAAoBC,GAAA9oD,KAAA8oD,qBAAAA,EAStB,OAPED,EAAA3oD,UAAAyoD,OAAA,WACE3oD,KAAK8oD,qBAAqBH,UAG5BnpD,OAAAiC,eAAIonD,EAAA3oD,UAAA,aAAU,KAAd,WACE,OAAOF,KAAK8oD,qBAAqBN,qFAPOD,MAD/BM,EAAsB9nD,EAAA,CALlCqH,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,6XACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B4hC,oBCWb,SAAAE,KAAkC,OAArBA,EAAmBhoD,EAAA,CAf/ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVC,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbw6C,uBAAwB,CACtBv6C,UAAWu6C,QAKnBpgD,aAAc,CAACogD,IACf5/C,QAAS,CAAC4/C,IACVn6C,gBAAiB,CAACm6C,OAEPE,qBCTX,SAAAC,EAAsBX,GAAtB,IAAA7gD,EACE2B,EAAAtI,KAAAb,OAAOA,YADawH,EAAA6gD,yBAAAA,WADkBvoD,EAAAkpD,EAAA7/C,GAYxC6/C,EAAA9oD,UAAAgoB,OAAA,SACEtiB,EACA8hB,EACAvU,GAGA,GAAIA,GAAOnT,KAAKynB,aAAaC,EAAQ9hB,GAAS,CAC5C,IAAM0C,EAAWtI,KAAKqoD,yBAAyBtzC,wBAC7CnP,EAAO0I,WAET6E,EAAIuB,gBAAgBpM,GACpBtI,KAAKwnB,gBAAgBhlB,KAAK,CAAEklB,OAAMA,EAAElO,QAASrG,EAAIqG,eACxC7H,EAAAA,cACJwB,EAGHlE,QAAQC,KACN,eAAewY,EAAM,yEAHvBzY,QAAQC,KAAK,sCAAsCwY,KASzDshC,EAAA9oD,UAAAkoB,MAAA,SAAMxiB,GACJ,OAAOiF,QAAQjF,EAAOqjD,kDAnCwBn0C,EAAAA,qKADrCk0C,EAAoBjoD,EAAA,CADhCiG,EAAAA,WAAW,CAAEC,WAAY,UACb+hD,IAA6BzhC,kBCIxC,SAAA2hC,EACUC,EACAb,GADAtoD,KAAAmpD,IAAAA,EACAnpD,KAAAsoD,cAAAA,EAMZ,OAHEY,EAAAhpD,UAAA8K,SAAA,WACEhL,KAAKsoD,cAAc78C,IAAIzL,KAAKopD,YAAappD,KAAKmpD,IAAKnpD,KAAKqpD,uDAL3CC,EAAAA,mBACUjC,MANzBtmD,EAAA,CADCoH,EAAAA,2CAGDpH,EAAA,CADCoH,EAAAA,2CAHU+gD,EAAkBnoD,EAAA,CAH9BqT,EAAAA,UAAU,CACT/L,SAAU,mBAEC6gD,oBCEb,SAAAK,KAA8B,OAAjBA,EAAexoD,EAAA,CAL3ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVF,aAAc,CAACygD,IACfjgD,QAAS,CAACigD,OAECK,MCIbC,GAAA,WACE,SAAAA,EAAsB5jD,GAAA5F,KAAA4F,OAAAA,SAUtB4jD,EAAAtpD,UAAAupD,cAAA,SACEjwC,EACA9P,GAEA,OAAO1J,KAAK0pD,WAAWlwC,EAAS9P,GAASiC,KAAKg+C,EAAAA,OAAM,SAAC7lC,GAAM,OAAM,IAANA,OAWrD0lC,EAAAtpD,UAAAwpD,WAAR,SACElwC,EACA9P,GAFF,IAAAlC,EAAAxH,KAoBE,OAhBwB,IAAIsU,EAAAA,YAAW,SAACs1C,GACtC,IAAMC,EAAariD,EAAKsiD,cAAcpgD,GAEhCqgD,EAAuB,IAAIC,sBAAqB,SAAC/pB,GACrD2pB,EAAS1nD,KAAK+9B,KAFS,CAAE4pB,WAAUA,IAKrC,OADAE,EAAqBE,QAAQzwC,GACtB,WACLuwC,EAAqBG,iBAEtBv+C,KACDw+C,EAAAA,SAAQ,SAAClqB,GAAyC,OAAAA,KAClDvf,EAAAA,KAAI,SAACmjB,GAAqC,OAAAA,EAAMumB,kBAChDv+C,EAAAA,yBAMI29C,EAAAtpD,UAAA4pD,cAAR,SAAsBpgD,GACpB,QADoB,IAAAA,IAAAA,EAAA,IAChBA,EAAQmgD,WACV,OAAOngD,EAAQmgD,WAEjB,IAAMQ,EAAerqD,KAAK4F,OAC1B,OACEykD,EAAaC,iBACbD,EAAaC,gBAAgBC,mBAEtBF,EAAaC,gBAAgBC,wBAJtC,4CArD4Bn6B,uHADnBo5B,EAAmBzoD,EAAA,CAH/BiG,EAAAA,WAAW,CACVC,WAAY,UAEDuiD,GAAb,GCCAgB,GAAA,WAGE,SAAAA,EAC+B57C,EACnBhJ,EACA6kD,GAFmBzqD,KAAA4O,WAAAA,EACnB5O,KAAA4F,OAAAA,EACA5F,KAAAyqD,oBAAAA,EAEVzqD,KAAK0qD,mBAAqB9kD,EAAO0kD,gBAC7B1kD,EAAO0kD,gBAAgBniC,SACvB3Z,EAAAA,qBAAqBC,eAa3B+7C,EAAAtqD,UAAAsoB,KAAA,SACEhP,EACA9P,GAEA,OAAI1J,KAAK2qD,qBAAqBjhD,GAAW,IAAI6E,cACpC8M,EAAAA,IAAG,GAEHrb,KAAKyqD,oBAAoBhB,cAAcjwC,EAAS9P,IAInD8gD,EAAAtqD,UAAAyqD,oBAAR,SACEC,GAEA,OACEx7C,EAAAA,iBAAiBpP,KAAK4O,aACtBg8C,IAA2Bp8C,EAAAA,qBAAqBC,SAC/Cm8C,IAA2Bp8C,EAAAA,qBAAqBq8C,OAC/C7qD,KAAK0qD,qBAAuBl8C,EAAAA,qBAAqBC,kDArCZjP,OAAMwB,WAAA,CAAA,CAAA0D,KAA9CiM,EAAAA,OAAMC,KAAA,CAACC,EAAAA,sBACUuf,UACao5B,sKANtBgB,EAAkBzpD,EAAA,CAH9BiG,EAAAA,WAAW,CACVC,WAAY,SAMTvF,EAAA,EAAAiP,EAAAA,OAAOE,EAAAA,eAJC25C,GAAb,iBCTA,SAAAM,IACU9qD,KAAA+qD,WAAa,IAAIlsC,WAEzBisC,EAAA5qD,UAAAgoB,OAAA,SAAOb,GACwB,IAAzBrnB,KAAK+qD,WAAWl9C,MAClB7N,KAAK+qD,WAAWt4C,IAAI4U,GAAQa,UAIhC4iC,EAAA5qD,UAAA8qD,SAAA,SAASC,EAAkBvtB,GACzB19B,KAAK+qD,WAAWhsC,IAAIksC,EAAUvtB,kGAVrBotB,EAAqB/pD,EAAA,CAHjCiG,EAAAA,WAAW,CACVC,WAAY,UAED6jD,oBCgCX,SAAAI,EACU/3C,EACA00C,EACAS,EAGA6C,EACAC,GANAprD,KAAAmT,IAAAA,EACAnT,KAAA6nD,YAAAA,EACA7nD,KAAAsoD,cAAAA,EAGAtoD,KAAAmrD,mBAAAA,EACAnrD,KAAAorD,sBAAAA,EAtBFprD,KAAAqrD,iBAAmB,GAWjBrrD,KAAAszB,OAAgC,IAAIjS,EAAAA,cAAsB,GAEpErhB,KAAAgsB,aAAe,IAAIvhB,EAAAA,aA8GrB,OAlGSygD,EAAAhrD,UAAAgoB,OAAP,WACEloB,KAAKmT,IAAI6L,QACThf,KAAKqrD,iBAAmB,GACxBrrD,KAAKgsB,aAAa5e,cAClBpN,KAAKgsB,aAAe,IAAIvhB,EAAAA,aACxBzK,KAAKorD,sBAAsBJ,SAAShrD,KAAKirD,SAAUjrD,MAE/CA,KAAKsrD,cACPtrD,KAAKuO,eAELvO,KAAKurD,SAITL,EAAAhrD,UAAAwzB,YAAA,SAAY83B,GACNA,EAAQP,UACVjrD,KAAKkoB,UAIDgjC,EAAAhrD,UAAAqO,aAAR,WAAA,IAAA/G,EAAAxH,KACEA,KAAKszB,OAAOhS,MAAK,GACjB,IAAMmqC,EAAczrD,KAAK0rD,eAAe1rD,KAAKmT,IAAIqG,QAAQxR,eAIzDhI,KAAKgsB,aAAavgB,IAChBzL,KAAKmrD,mBACF3iC,KAAKijC,EAAazrD,KAAKsrD,eACvB7+C,WAAU,WACTjF,EAAK+jD,QACL/jD,EAAK8rB,OAAOhS,MAAK,QAKjB4pC,EAAAhrD,UAAAqrD,MAAR,WACEvrD,KAAK2rD,YAAY9Z,EAAAA,eAAejZ,QAChC54B,KAAK2rD,YAAY9Z,EAAAA,eAAe6V,SAChC1nD,KAAK2rD,YAAY9Z,EAAAA,eAAehZ,QAG1BqyB,EAAAhrD,UAAAyrD,YAAR,SAAoBtlC,GAApB,IAAA7e,EAAAxH,KACMiM,EACFjM,KAAKsoD,cAAc71C,IAAIzS,KAAKirD,SAAU5kC,GnDrFT,ImDwF/Bpa,EAAYA,MAAAA,OAAS,EAATA,EAAWoF,QAAO,SAAC+O,GAAO,OAAC5Y,EAAK6jD,iBAAiBrlD,SAASoa,QAEpDiG,IAAawrB,EAAAA,eAAe6V,UAC5Cz7C,EAAY,CAACjM,KAAK6nD,cAKfloD,MAAMisD,QAAQ3/C,KACjBA,EAAY,CAACA,IAGfA,EAAUrE,SAAQ,SAAC+9C,GACjBn+C,EAAKrH,OAAOwlD,OAIRuF,EAAAhrD,UAAAC,OAAR,SAAe0rD,GACb,GAAIA,aAAyBC,EAAAA,iBAC3B9rD,KAAKmT,IAAIuB,gBAAgBm3C,QACpB,GAAIA,aAAyBvC,EAAAA,YAAa,CAClCtpD,KAAKmT,IAAI44C,mBACFF,EAClB,CACEG,UAAWhsD,KAAKisD,kBAMfjiC,eAEPhqB,KAAKqrD,iBAAiB7oD,KAAKqpD,IASrBX,EAAAhrD,UAAAwrD,eAAR,SAAuBlyC,GACrB,OAAIA,aAAmB+M,YACd/M,EAEFxZ,KAAK0rD,eAAelyC,EAAQC,gBAGrCyxC,EAAAhrD,UAAAiN,YAAA,WACEnN,KAAKgsB,aAAa5e,wDAzGL8G,EAAAA,wBACQo1C,EAAAA,mBACEjC,UAGKmD,UACIM,MApBzB/pD,EAAA,CAARoH,EAAAA,wCAEQpH,EAAA,CAARoH,EAAAA,+CAKQpH,EAAA,CAARoH,EAAAA,6CAESpH,EAAA,CAATwgB,EAAAA,uCAZU2pC,EAAenqD,EAAA,CAH3BqT,EAAAA,UAAU,CACT/L,SAAU,gBAEC6iD,oBCXb,SAAAgB,KAA2B,OAAdA,EAAYnrD,EAAA,CANxByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVF,aAAc,CAACyiD,IACftiD,UAAW,CAACy+C,IACZp+C,QAAS,CAACiiD,OAECgB,qBCKX,SAAAC,EACY7D,EACAD,EACA+C,GAHZ,IAAA5jD,EAKE2B,EAAAtI,KAAAb,OAAOA,YAJGwH,EAAA8gD,cAAAA,EACA9gD,EAAA6gD,yBAAAA,EACA7gD,EAAA4jD,sBAAAA,WAJ4BtrD,EAAAqsD,EAAAhjD,GAgBxCgjD,EAAAjsD,UAAAgoB,OAAA,SACEtiB,EACA8hB,EACAvU,GAEA,GAAInT,KAAKynB,aAAaC,EAAQ9hB,GAAS,CACrC,IAAM0C,EAAWtI,KAAKqoD,yBAAyBtzC,wBAC7CnP,EAAO0I,WAETtO,KAAKsoD,cAAc78C,IACjB7F,EAAOyhB,OACP/e,EACA1C,EAAOygB,SAAWzgB,EAAOygB,SAAWwrB,EAAAA,eAAejZ,QAErD54B,KAAKorD,sBAAsBljC,OAAOtiB,EAAOyhB,QAEzC,IAAM7N,EAAUrG,MAAAA,OAAG,EAAHA,EAAKqG,QACrBxZ,KAAKwnB,gBAAgBhlB,KAAK,CAAEklB,OAAMA,EAAElO,QAAOA,MAI/C2yC,EAAAjsD,UAAAkoB,MAAA,SAAMxiB,GACJ,OAAOiF,QAAQjF,EAAOyhB,SAGxB8kC,EAAAjsD,UAAAgZ,OAAA,SAAOwO,EAAuB9hB,GAC5B,IAAM0C,EAAWtI,KAAKqoD,yBAAyBtzC,wBAC7CnP,EAAO0I,WAETtO,KAAKwnB,gBAAkBxnB,KAAKwnB,gBAAgBnW,QAC1C,SAAC+O,GAAO,OAAAA,EAAGsH,SAAWA,KAGxB1nB,KAAKsoD,cAAcpvC,OACjBtT,EAAOyhB,OACPzhB,EAAOygB,SAAWzgB,EAAOygB,SAAWwrB,EAAAA,eAAejZ,OACnDtwB,6CAlDuB++C,UACWvyC,EAAAA,gCACHg2C,mLAJxBqB,EAAoBprD,EAAA,CADhCiG,EAAAA,WAAW,CAAEC,WAAY,UACbklD,IAA6B5kC,mBCRxC,SAAA6kC,EAAsB5xC,GAAtB,IAAAhT,EACE2B,EAAAtI,KAAAb,OAAOA,YADawH,EAAAgT,eAAAA,WADmB1a,EAAAssD,EAAAjjD,GAOzCijD,EAAAlsD,UAAAgoB,OAAA,SAAOtiB,EAAqBymD,GAC1BrsD,KAAKwa,eAAeQ,GAAGpV,IAGzBwmD,EAAAlsD,UAAAkoB,MAAA,SAAMxiB,GACJ,OAAOiF,QAAQjF,EAAOqV,mDAXclD,EAAAA,iJAD3Bq0C,EAAqBrrD,EAAA,CADjCiG,EAAAA,WAAW,CAAEC,WAAY,UACbmlD,IAA8B7kC,kBCwB3C,SAAA+kC,WAUA,SAVaA,EACJA,EAAA/rB,QAAP,WACE,MAAO,CACLC,SAAU+rB,EACV3jD,UAAW,CACT4jD,EAAAA,cAActlC,IACd,CAAEpe,QAASuf,GAActf,YAAaC,EAAAA,WANjCsjD,EAAkBC,EAAAxrD,EAAA,CAnB9ByH,EAAAA,SAAS,CACRI,UAAW,CACT,CACEE,QAASye,GACTxe,YAAaojD,GACb/xC,OAAO,GAET,CACEtR,QAASye,GACTxe,YAAaigD,GACb5uC,OAAO,GAET,CACEtR,QAASye,GACTxe,YAAaqjD,GACbhyC,OAAO,OAIAkyC,oBCnBb,SAAAG,KAA2B,OAAdA,EAAY1rD,EAAA,CALxByH,EAAAA,SAAS,CACRE,QAAS,CAAC6gD,GAAiB+C,GAAmB/rB,WAC9C33B,UAAW,CAAC,CAAEE,QAASsnB,GAAcrnB,YAAaC,EAAAA,SAClDC,QAAS,CAACsgD,OAECkD,oBCiFX,SAAAC,EACYl5C,EACAH,EACAhM,EACAokD,EACA7lD,EACA+mD,GANZ,IAAAnlD,EAAAxH,KACYA,KAAAwT,WAAAA,EACAxT,KAAAqT,wBAAAA,EACArT,KAAAqH,SAAAA,EACArH,KAAAyrD,YAAAA,EACAzrD,KAAA4F,OAAAA,EACA5F,KAAA2sD,MAAAA,EAvDqB3sD,KAAA4sD,WAAY,EACR5sD,KAAA6sD,eAAgB,EACZ7sD,KAAA8sD,YAAa,EAI7C9sD,KAAA+sD,UAAY,IAAInnC,EAAAA,qBAAwBjR,GAQxC3U,KAAAgtD,MAAqChtD,KAAK+sD,UAAUphD,KAC3D0Q,EAAAA,WAAU,SAACgK,GAAa,OAAA7e,EAAKgM,WAAWy5C,eAAe5mC,MACvDva,EAAAA,KAAI,SAAC6jC,GAAS,OAAAnoC,EAAK0lD,sBAAsBvd,OAGlC3vC,KAAAmtD,YAELntD,KAAKgtD,MAAMrhD,KACb+U,EAAAA,KAAI,SAACivB,GAAS,OAACA,GAAQA,EAAKyd,WAAazd,EAAKyd,WAAa,MAC3DvhD,EAAAA,sBACE,SAAC4F,EAAGlS,GACF,OAAAkS,EAAE7Q,SAAWrB,EAAEqB,SAAW6Q,EAAE5L,MAAK,SAACua,EAAI+C,GAAU,OAAA/C,EAAG9N,MAAQ/S,EAAE4jB,GAAO7Q,WAIlEtS,KAAAgsB,aAAe,IAAIvhB,EAAAA,aAqF7B,OA1HEjL,OAAAiC,eAAIirD,EAAAxsD,UAAA,WAAQ,KAIZ,WACE,OAAOF,KAAK+sD,UAAU5qD,WALxB,SAAakkB,GACXrmB,KAAK+sD,UAAU7qD,KAAKmkB,GACpBrmB,KAAKqH,SAASI,SAASzH,KAAKyrD,YAAYzjD,cAAeqe,oCAgEzDqmC,EAAAxsD,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKgsB,aAAavgB,IAChBzL,KAAKmtD,YAAY1gD,WAAU,SAAC2gD,GAC1B5lD,EAAKqlD,cAAgBO,GAAcA,EAAWxsD,OAAS,EACvD4G,EAAK6lD,sBAAwBD,EAAaA,EAAWxsD,OAAS,EAC9D4G,EAAKolD,UAAYplD,EAAK6lD,sBAAwB,OAKpDX,EAAAxsD,UAAAiN,YAAA,WACEnN,KAAKgsB,aAAa5e,eAQpBs/C,EAAAxsD,UAAAotD,SAAA,SAASC,SACHA,GACFvtD,KAAKqtD,wBAEPrtD,KAAK4sD,UAAY5sD,KAAKqtD,sBAAwB,EACpC,QAAVthD,EAAA/L,KAAK2sD,aAAK,IAAA5gD,GAAAA,EAAEie,gBAGd0iC,EAAAxsD,UAAAstD,yBAAA,SAAyBz+C,GAEvB,MAAO,CAAER,aADYvO,KAAKytD,wBAAwB1+C,KAQ5C29C,EAAAxsD,UAAAutD,wBAAR,SAAgC1+C,GAC9B,GAAI/O,KAAK4F,OACP,OAAS5F,KAAK4F,OAAqByI,cAAcU,IAAkB,IAChER,cAICm+C,EAAAxsD,UAAAgtD,sBAAR,SAA8Bvd,GACxBA,GAAQ3vC,KAAKwT,WAAWO,uBAC1B/T,KAAK0tD,qBAAqB/d,IAItB+c,EAAAxsD,UAAAwtD,qBAAR,SAA6B/d,GAC3B3vC,KAAKqT,wBAAwBW,qBAC3B27B,EAAK17B,WACLjU,KAAKyrD,YAAYzjD,cACjBhI,KAAKqH,oDA7DeqL,EAAAA,kBACayB,EAAAA,+BACfjM,EAAAA,iBACGD,EAAAA,kBACJyI,EAAAA,iBACDga,EAAAA,qBA/DpB3pB,EAAA,CADCoH,EAAAA,sCASgCpH,EAAA,CAAhCmc,EAAAA,YAAY,qDACwBnc,EAAA,CAApCmc,EAAAA,YAAY,6DAC4Bnc,EAAA,CAAxCmc,EAAAA,YAAY,mBAAoB/U,EAAAA,0CAjBtBukD,EAAiB3rD,EAAA,CAL7BqH,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAA,2cACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BylC,oBChBb,SAAAiB,KAA6B,OAAhBA,EAAc5sD,EAAA,CAN1ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcujD,GAAc/xC,GACtCvR,UAAW,GACXH,aAAc,CAACikD,IACfzjD,QAAS,CAACyjD,OAECiB,oBCGX,SAAAC,EACUt4C,EACA1P,EACA+rB,EAGA3gB,GALAhR,KAAAsV,IAAAA,EACAtV,KAAA4F,OAAAA,EACA5F,KAAA2xB,kBAAAA,EAGA3xB,KAAAgR,SAAAA,EAMFhR,KAAA6tD,gBAAkB,GAClB7tD,KAAA8tD,SAAW,GA8NrB,OA5NEF,EAAA1tD,UAAA6tD,SAAA,SAASxe,GAAT,IAAA/nC,EAAAxH,KACE,OAAO0L,EAAAA,cAAc,CAAC1L,KAAKguD,MAAOhuD,KAAK2xB,kBAAkBR,cAAcxlB,KACrE+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC2uB,EAAA1uB,EAAA,GAAM+kB,EAAA/kB,EAAA,GACJsjC,EAAe5U,EAAKpyB,SAE1B,MAAO,CAAEmnC,MADKjoC,EAAKymD,aAAavzB,EAAM6U,EAASxe,GAC/Bue,aAAYA,EAAEve,WAAUA,MAE1C1U,EAAAA,WAAU,SAACtQ,WAAE0jC,EAAA1jC,EAAA0jC,MAAOH,EAAAvjC,EAAAujC,aAAcve,EAAAhlB,EAAAglB,WAC5BgvB,EAAS1kC,EAAAA,GAAGo0B,OAChB,IAAsB,IAAAjM,EAAA3hC,EAAA2F,EAAKwJ,UAAY,IAAE0yB,EAAAF,EAAAthC,QAAAwhC,EAAAthC,KAAAshC,EAAAF,EAAAthC,OAAE,CACzC69C,EADgBrc,EAAAvhC,MACCitC,OAAO2Q,EAAQzQ,EAAcC,EAASxe,qGAEzD,OAAOgvB,KAETl0C,EAAAA,sBAAqB,SAAC4F,EAAGlS,GACvB,GAAIkS,EAAE7Q,SAAWrB,EAAEqB,OACjB,OAAO,EAET,IAAK,IAAIH,EAAI,EAAGA,EAAIgR,EAAE7Q,OAAQH,IAC5B,GAAIgR,EAAEhR,KAAOlB,EAAEkB,GACb,OAAO,EAGX,OAAO,OAWbmtD,EAAA1tD,UAAAguD,gBAAA,SAAgB5e,GAAhB,IAAA9nC,EAAAxH,KACE,OAAOA,KAAK2xB,kBAAkBR,YAAYxlB,KACxC+U,EAAAA,KAAI,SAACqQ,GACH,IAAKvpB,EAAK5B,OAAOuoD,YAEf,OAAO,KAET,IAAMC,EAAqB5mD,EAAK5B,OAAOuoD,YAAY7e,GAC7C1pC,EAAS4B,EAAK6mD,wBACAD,EAClB,WACAr9B,GAEF,OAAOnrB,EAASA,EAAO0oD,SAAW,UAKhCV,EAAA1tD,UAAA+tD,aAAR,SAAqBvzB,EAAM6U,EAASxe,GAClC,IAAMnrB,EAAS5F,KAAKuuD,cAClB7zB,EAAKpyB,SACL,QACAinC,EACAxe,GAEF,GAAInrB,GAAUA,EAAO6pC,MAAO,CAC1B,IAAM+e,EAAYhvD,OAAOs3C,KAAKpc,EAAK+U,OACnC,OAAO7pC,EAAO6pC,MAAMp+B,QAAO,SAACs+B,GAAS,OAAA6e,EAAUxoD,SAAS2pC,MACnD,OAAKJ,GAIVvvC,KAAKyuD,uBAAuB/zB,EAAM6U,GAC3B,KAJPvvC,KAAKyuD,uBAAuB/zB,GACrBl7B,OAAOs3C,KAAKpc,EAAK+U,SAO5BjwC,OAAAiC,eAAImsD,EAAA1tD,UAAA,QAAK,KAAT,WACE,OAAOF,KAAKsV,IAAIo5C,iBAAiB/iD,KAAK0F,EAAAA,QAAO,SAACqpB,GAAS,QAAEA,uCAG3Dl7B,OAAAiC,eAAImsD,EAAA1tD,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAKguD,MAAMriD,KAChB0F,EAAAA,QAAO,SAACqpB,GAAS,QAAEA,EAAKpyB,YACxBoY,EAAAA,KAAI,SAACga,GAAe,OAAAA,EAAKpyB,8CAUnBslD,EAAA1tD,UAAAquD,cAAV,SACEI,EACAC,EACArf,EACAxe,GAEA,IAAK/wB,KAAK4F,OAAOuoD,YACf,OAAO,KAET,IAAMC,EAAqBpuD,KAAK4F,OAAOuoD,YAAYQ,GAEnD,OAAIpf,EACKvvC,KAAK6uD,wBACVF,EACAC,EACArf,EACAxe,GAIAq9B,EACKpuD,KAAKquD,wBACQD,EAClBQ,EACA79B,QAJJ,GASQ68B,EAAA1tD,UAAA2uD,wBAAV,SACEF,EACAC,EACArf,EACAxe,GAEA,IAAMq9B,EAAqBpuD,KAAK4F,OAAOuoD,YAAYQ,GAEnD,IAAKP,EACH,OAAO,KAKT,IAAMU,EAAgBV,EAAmB7e,GACrC6e,EAAmB7e,GACnBvvC,KAAK4F,OAAOuoD,YAAY5e,GAE5B,IAAKuf,EACH,OAAO,KAGT,IAAMC,EAAmB/uD,KAAKquD,wBACVS,EAClBF,EACA79B,GAGF,OAAIg+B,EAAiBlvD,eAAe+uD,GAC3BG,EACEX,EAAmB7e,GAAS1vC,eAAe+uD,GAC7CR,EAAmB7e,GACjBvvC,KAAK4F,OAAOuoD,YAAY5e,GACdvvC,KAAK4F,OAAOuoD,YAAY5e,QADtC,GAUCqe,EAAA1tD,UAAAmuD,wBAAV,SACEW,EACAJ,EACA79B,WAEIk+B,EAAyBD,EAG7B,IAAKA,IAAqBj+B,EACxB,OAAOk+B,EAIT,GACED,EAAiBj+B,IACjBi+B,EAAiBj+B,GAAYlxB,eAAe+uD,GAE5C,OAAmBI,EAAiBj+B,GAItC,IAAMm+B,EAAMlvD,KAAK2xB,kBAAkBX,gBAEnC,IAAiB,IAAAhlB,EAAAnK,EAAAqtD,EAAIhpC,OAAO,EAAGgpC,EAAIpxC,QAAQiT,KAAYyS,EAAAx3B,EAAA9J,QAAAshC,EAAAphC,KAAAohC,EAAAx3B,EAAA9J,OAAE,CAApD,IAAMkvB,EAAEoS,EAAArhC,MAET6sD,EAAiB59B,IACjB49B,EAAiB59B,GAAIvxB,eAAe+uD,KAEpCK,EAAyBD,EAAiB59B,sGAG9C,OAAO69B,GASDrB,EAAA1tD,UAAAuuD,uBAAR,SAA+B/zB,EAAY6U,GACzC,GAAK59B,EAAAA,YAAL,CAGK3R,KAAK8tD,SAASpzB,EAAKpyB,YAGtB2G,QAAQkgD,KACN,8BAA8B3vD,OAAOs3C,KAAKpc,EAAK+U,OAAO9uB,KAAK,OAAM,KAEnE3gB,KAAK8tD,SAASpzB,EAAKpyB,WAAY,GAGjC,IAAM8mD,EAAW7f,GAAW7U,EAAKpyB,SAC5BtI,KAAK6tD,gBAAgBuB,KACxBngD,QAAQC,KACN,8BAA8BkgD,EAAQ,gFAExCpvD,KAAK6tD,gBAAgBuB,IAAY,8CAvOtB18C,EAAAA,kBACG0d,UACWM,kCAC1Bze,EAAAA,UAAQ,CAAAvN,KACRiM,EAAAA,OAAMC,KAAA,CAACk/B,SANC8d,EAAiB7sD,EAAA,CAD7BiG,EAAAA,aAMItF,EAAA,EAAAuQ,EAAAA,YACAvQ,EAAA,EAAAiP,EAAAA,OAAOm/B,MANC8d,oBC8BX,SAAAyB,EACUjvC,EACA/Y,EACAioD,GAHV,IAAA9nD,EAAAxH,KACUA,KAAAogB,GAAAA,EACApgB,KAAAqH,SAAAA,EACArH,KAAAsvD,kBAAAA,EA3BDtvD,KAAAuvD,SAAoC,IAAI3pC,EAAAA,qBAAgBjR,GACxD3U,KAAAwvD,cAAoCxvD,KAAKsvD,kBAC/CE,cAEMxvD,KAAAyvD,YAAkCzvD,KAAKuvD,SAAS5jD,KACvD0Q,EAAAA,WAAU,SAACkzB,GAAY,OAACA,EAAUl0B,EAAAA,GAAGk0B,GAAW/nC,EAAKgoD,iBACrD1jD,EAAAA,KAAI,SAACqf,GACH3jB,EAAKkoD,WAAavkC,MAIbnrB,KAAAqvC,OAA+BrvC,KAAKuvD,SAAS5jD,KACpD0Q,EAAAA,WAAU,SAACkzB,GAAY,OAAA/nC,EAAK8nD,kBAAkBvB,SAASxe,OAGhDvvC,KAAA2vD,cAAoC3vD,KAAKwvD,cAAc7jD,KAC9D0Q,EAAAA,WAAU,SAACuzC,GACT,OAAApoD,EAAK8nD,kBAAkBpB,gBAAgB0B,MAEzC/jD,EAAAA,wBAkBJ,OAxCWrM,OAAAiC,eAAI4tD,EAAAnvD,UAAA,UAAO,KAAX,SAAYiC,GACnBnC,KAAKuvD,SAASrtD,KAAKC,oCAgCrB3C,OAAAiC,eAAI4tD,EAAAnvD,UAAA,aAAU,KAAd,SAAe2H,GACT7H,KAAK6vD,cACP7vD,KAAKqH,SAASS,YAAY9H,KAAKogB,GAAGpY,cAAehI,KAAK6vD,cAExD7vD,KAAKqH,SAASI,SAASzH,KAAKogB,GAAGpY,cAAeH,GAC9C7H,KAAK6vD,aAAehoD,4EAVRI,EAAAA,kBACMC,EAAAA,iBACS0lD,MA9BpB7sD,EAAA,CAARoH,EAAAA,qCADUknD,EAAmBtuD,EAAA,CAL/BqH,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,+WACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BooC,oBCHb,SAAAS,KAA+B,OAAlBA,EAAgB/uD,EAAA,CAN5ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcujD,GAAcyB,IACtCllD,aAAc,CAAC4mD,IACfzmD,UAAW,CAACglD,IACZ3kD,QAAS,CAAComD,OAECS,SCbb,aAOaC,GAA0C,CACrDC,IAAK,CACHC,SAAS,EACTC,iBAAiB,kBCOnB,SAAAC,EACUvqD,EACAiW,EACA/W,GAFA9E,KAAA4F,OAAAA,EACA5F,KAAA6b,qBAAAA,EACA7b,KAAA8E,OAAAA,EAPF9E,KAAAowD,UAAY,IAAIxqC,EAAAA,iBAAyB,GAEjD5lB,KAAAqwD,WAAkCrwD,KAAKowD,UAAUE,eAO3CtwD,KAAK4F,OAAOoqD,IAAIE,iBAClBlwD,KAAKuwD,OAwCX,OApCEJ,EAAAjwD,UAAAqwD,KAAA,WAAA,IAAA/oD,EAAAxH,KACMA,KAAK8E,OAAO2sB,eACdzxB,KAAK8E,OAAO2sB,aAAa++B,iBACvB,uBACA,SAAClxC,GACCA,EAAMC,iBACN/X,EAAKipD,cAAgBnxC,EACrB9X,EAAKkpD,2BAIT1wD,KAAK8E,OAAO2sB,aAAa++B,iBAAiB,gBAAgB,WACxDhpD,EAAKqU,qBAAqBpQ,IACxB,CAAEvK,IAAK,yBACPsb,EAAAA,kBAAkBm0C,uBAGpBnpD,EAAKopD,yBACLppD,EAAKipD,cAAgB,UAK3BN,EAAAjwD,UAAAwwD,sBAAA,WACE1wD,KAAKowD,UAAUluD,MAAK,IAGtBiuD,EAAAjwD,UAAA0wD,uBAAA,WACE5wD,KAAKowD,UAAUluD,MAAK,IAGtBiuD,EAAAjwD,UAAA2wD,WAAA,WACM7wD,KAAKywD,eACPzwD,KAAKywD,cAAcK,mDA1CLC,UACcz5C,EAAAA,4BACdzQ,EAAAA,aAVPspD,EAAsBpvD,EAAA,CADlCiG,EAAAA,cACYmpD,oBCJX,SAAAa,EAAsBC,GAAAjxD,KAAAixD,uBAAAA,EASxB,OAPED,EAAA9wD,UAAA8K,SAAA,WACEhL,KAAKqwD,WAAarwD,KAAKixD,uBAAuBZ,YAGhDW,EAAA9wD,UAAA4wD,OAAA,WACE9wD,KAAKixD,uBAAuBJ,cAEhCG,oBCNE,SAAAE,EAAsBD,GAAtB,IAAAzpD,EACE2B,EAAAtI,KAAAb,KAAMixD,IAAuBjxD,YADTwH,EAAAypD,uBAAAA,IAGxB,OAJoDnxD,EAAAoxD,EAAA/nD,4CACJgnD,MADnCe,EAA8BnwD,EAAA,CAJ1CqH,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,oiBAEW4oD,IAAuCF,mBCClD,SAAAG,EAAsBF,GAAtB,IAAAzpD,EACE2B,EAAAtI,KAAAb,KAAMixD,IAAuBjxD,YADTwH,EAAAypD,uBAAAA,IAGxB,OAJiDnxD,EAAAqxD,EAAAhoD,4CACDgnD,MADnCgB,EAA2BpwD,EAAA,CAJvCqH,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,kGAEW6oD,IAAoCH,aCIjCI,GACdC,GAEA,MAAO,CAAEpB,SAAWt+C,EAAAA,aAAe0/C,EAAUrB,IAAIC,UAAY,GAG/D,SAAgBqB,GAAWL,GAEzB,OADe,WAAM,OAAAA,GA6BvB,IAAAM,GAAA,WAAA,SAAAA,KAAwB,OAAXA,EAASxwD,EAAA,CAzBrByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA6oD,EAAAA,oBAAoBxG,SAAS,mBAC7B78C,EAAAA,YAEFvF,UAAW,CACTC,EAAAA,qBAAqBknD,IACrB,CAAEjnD,QAASioD,GAAiBhoD,YAAaC,EAAAA,QACzC,CACEF,QAAS2oD,EAAAA,sBACTtoC,WAAYioC,GACZ/nC,KAAM,CAACrgB,EAAAA,SAET,CACEF,QAASogB,EAAAA,gBACTC,WAAYmoC,GACZjoC,KAAM,CAAC8mC,IACP/1C,OAAO,GAET+1C,IAEF1nD,aAAc,CAAC0oD,GAA6BD,IAC5CjoD,QAAS,CAACkoD,GAA6BD,OAE5BK,GAAb,GC7CaG,GAA6B,CACxC5oD,QAASogB,EAAAA,gBACT9O,OAAO,EACP+O,WAAYwoC,GACZtoC,KAAM,CAACxiB,EAAAA,UAAWoR,EAAAA,kBAMpB,SAAgB05C,GACd7sD,EACA8sD,GAOA,OALe,WACbA,EAAgBxzB,YAAY3xB,WAAU,SAAColD,GACrC/sD,EAAOwB,SAASwrD,gBAAgBD,KAAOA,EAAKE,QAAQ,KAAM,2BCV9D,SAAAC,EACYC,EACAC,EACAC,GAFAnyD,KAAAiyD,QAAAA,EACAjyD,KAAAkyD,OAAAA,EACAlyD,KAAAmyD,gBAAAA,SAGZH,EAAA9xD,UAAAqwD,KAAA,WAAA,IAAA/oD,EAAAxH,KACEA,KAAKmyD,gBACFC,UACAzmD,KAAK0F,EAAAA,OAAOxG,UACZ4B,WAAU,SAAC4lD,GAAmB,OAAC7qD,EAAK6qD,KAAOA,MAGhD7yD,OAAAiC,eAAcuwD,EAAA9xD,UAAA,OAAI,KAAlB,SAAmBmyD,GACjBryD,KAAKqiD,MAAQgQ,EAAKhQ,MAClBriD,KAAKsjC,YAAc+uB,EAAK/uB,YACxBtjC,KAAKsyD,MAAQD,EAAKC,MAClBtyD,KAAKuyD,OAASF,EAAKE,QAAU,CAACC,EAAAA,eAAeC,MAAOD,EAAAA,eAAeE,yCAGrElzD,OAAAiC,eAAcuwD,EAAA9xD,UAAA,QAAK,KAAnB,SAAoBmiD,GAClBriD,KAAKiyD,QAAQU,SAAStQ,GAAS,qCAGjC7iD,OAAAiC,eAAcuwD,EAAA9xD,UAAA,cAAW,KAAzB,SAA0BiC,GACxBnC,KAAK4yD,OAAO,CAAEznC,KAAM,cAAe1hB,QAAStH,qCAG9C3C,OAAAiC,eAAcuwD,EAAA9xD,UAAA,QAAK,KAAnB,SAAoB2yD,GACdA,GACF7yD,KAAK4yD,OAAO,CAAEznC,KAAM,WAAY1hB,QAASopD,qCAI7CrzD,OAAAiC,eAAcuwD,EAAA9xD,UAAA,SAAM,KAApB,SAAqBiC,GACfA,GACFnC,KAAK4yD,OAAO,CAAEznC,KAAM,SAAU1hB,QAAStH,EAAMwe,KAAK,yCAI5CqxC,EAAA9xD,UAAA0yD,OAAV,SAAiBP,GACXA,EAAK5oD,SACPzJ,KAAKkyD,OAAOY,UAAUT,6CAzCLU,EAAAA,aACDC,EAAAA,YACS57C,EAAAA,gMAJlB46C,EAAcjxD,EAAA,CAH1BiG,EAAAA,WAAW,CACVC,WAAY,UAED+qD,oBCSX,SAAAiB,EACiCrkD,EACrB9J,EACAouD,EACAluD,GAHqBhF,KAAA4O,WAAAA,EACrB5O,KAAA8E,OAAAA,EACA9E,KAAAkzD,gBAAAA,EACAlzD,KAAAgF,UAAAA,SAGZiuD,EAAA/yD,UAAAqrD,MAAA,SAAM4H,GACAA,GAAUnzD,KAAKozD,qBACjBpzD,KAAKqzD,4BAA4BC,UAAYtzD,KAAKuzD,SAASJ,KAQ/DF,EAAA/yD,UAAAkzD,iBAAA,WACE,OAAQr5C,EAAAA,kBAAkB/Z,KAAK4O,aAAe+C,EAAAA,aAGxCshD,EAAA/yD,UAAAmzD,0BAAR,WACE,IAAM7mD,EAAK,UACPgnD,EACFxzD,KAAK8E,OAAOwB,SAASmtD,eAAejnD,GAGtC,IAAKgnD,EAAe,CAClB,IAAMnsD,EAAsBrH,KAAKkzD,gBAAgBQ,eAC/C,KACA,MAEI95C,EAA4BvS,EAASZ,cAAc,UACzDmT,EAAOpN,GAAKA,EACZoN,EAAOlV,KAAO,sBACd2C,EAAST,YAAY5G,KAAK8E,OAAOwB,SAASwT,KAAMF,GAChD45C,EAAgB55C,EAElB,OAAO45C,GASTP,EAAA/yD,UAAAqzD,SAAA,SAASJ,GAAT,IAAA3rD,EAAAxH,KACE,OAAO2zD,KAAKC,UAAUT,GAAQ,SAACU,EAAM1xD,GACnC,MAAiB,iBAAVA,EACHqF,EAAKxC,UAAUuuD,SAASO,EAAAA,gBAAgBC,KAAM5xD,GAC9CA,wEAlDLwO,EAAAA,OAAMC,KAAA,CAACC,EAAAA,sBACUhK,EAAAA,iBACSmtD,EAAAA,wBACNjtD,EAAAA,uOALZksD,EAAmBlyD,EAAA,CAH/BiG,EAAAA,WAAW,CACVC,WAAY,SAITvF,EAAA,EAAAiP,EAAAA,OAAOE,EAAAA,eAFCoiD,MCJbgB,GAAA,WAOE,SAAAA,EACYC,EACAlvD,GADAhF,KAAAk0D,oBAAAA,EACAl0D,KAAAgF,UAAAA,EAUd,OAlBWxF,OAAAiC,eAAIwyD,EAAA/zD,UAAA,WAAQ,KAAZ,SAAaizD,GACpBnzD,KAAKm0D,YAAYhB,oCAUXc,EAAA/zD,UAAAi0D,YAAR,SAAoBhB,GAClB,GAAIA,GAAUnzD,KAAKk0D,oBAAoBd,mBAAoB,CACzD,IACMgB,EAAO,sCADWp0D,KAAKk0D,oBAAoBX,SAASJ,GACQ,aAClEnzD,KAAKq0D,OAASr0D,KAAKgF,UAAUK,wBAAwB+uD,8CARxBnB,UACVlsD,EAAAA,gBARdhG,EAAA,CAARoH,EAAAA,sCAIyBpH,EAAA,CAAzBmc,EAAAA,YAAY,2CALF+2C,EAAelzD,EAAA,CAH3BqT,EAAAA,UAAU,CACT/L,SAAU,gBAEC4rD,GAAb,GCJaK,GAAiB,IAAIvkB,EAAAA,eAAe,sBAMpCwkB,GAAyB,IAAIxkB,EAAAA,eACxC,6BCNFykB,GAAA,WACE,SAAAA,EACUC,EAGAC,GAHA10D,KAAAy0D,cAAAA,EAGAz0D,KAAA00D,SAAAA,SAGVF,EAAAt0D,UAAAqrD,MAAA,WAAA,IAAA/jD,EAAAxH,KACEA,KAAK20D,iBAAiBloD,WAAU,SAAC0mD,GAC/B3rD,EAAKitD,cAAclJ,MAAM4H,OAIrBqB,EAAAt0D,UAAAy0D,eAAR,WACE,OAAK30D,KAAKy0D,cAAcrB,oBAAuBpzD,KAAK00D,SAG7ChpD,EAAAA,cACL1L,KAAK00D,SAASh0C,KAAI,SAACk0C,GAAY,OAAAA,EAAQrJ,YACvC5/C,OAJO0P,EAAAA,+CAdc43C,kCACtBhhD,EAAAA,UAAQ,CAAAvN,KACRiM,EAAAA,OAAMC,KAAA,CAAC0jD,8IAJCE,EAAqBzzD,EAAA,CAHjCiG,EAAAA,WAAW,CACVC,WAAY,SAKTvF,EAAA,EAAAuQ,EAAAA,YACAvQ,EAAA,EAAAiP,EAAAA,OAAO2jD,MAJCE,GAAb,GCAA,SAAgBK,GAAyBziD,GAKvC,OAJe,WACGA,EAASK,IAAI+hD,IACrBjJ,SAkBZ,IAAAuJ,GAAA,WAAA,SAAAA,KAAmC,OAAtBA,EAAoB/zD,EAAA,CAbhCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVF,aAAc,CAACwrD,IACfhrD,QAAS,CAACgrD,IACVrrD,UAAW,CACT,CACEE,QAASogB,EAAAA,gBACTC,WAAY0rC,GACZxrC,KAAM,CAACvW,EAAAA,UACPsH,OAAO,OAIA06C,GAAb,YCzBgBC,GAAe3iD,GAK7B,OAJe,WACGA,EAASK,IAAIu/C,IACrBzB,QAiBZ,IAAAyE,GAAA,WAAA,SAAAA,KAAwB,OAAXA,EAASj0D,EAAA,CAZrByH,EAAAA,SAAS,CACRE,QAAS,CAACosD,IACVlsD,UAAW,CACT,CACEE,QAASogB,EAAAA,gBACTC,WAAY4rC,GACZ1rC,KAAM,CAACvW,EAAAA,UACPsH,OAAO,GAETs3C,OAGSsD,GAAb,iBCIE,SAAAC,IAjBAj1D,KAAAk1D,cAAe,EAMfl1D,KAAA4K,iBAA6B,GAM7B5K,KAAAm1D,eAAiB,IAAI9zC,EAAAA,aAmCvB,OA5BE4zC,EAAA/0D,UAAA8K,SAAA,WACMhL,KAAKmM,QACPnM,KAAKk1D,aAAerqD,QAClB7K,KAAKmM,QAAQQ,eAAiByoD,EAAAA,yBAAyBC,OAGrDr1D,KAAKs1D,iBAAmBt1D,KAAKs1D,gBAAgBC,iBAC3Cv1D,KAAKs1D,gBAAgBC,eAAeC,qBACtCx1D,KAAKk1D,cAAe,EACXl1D,KAAKs1D,gBAAgBC,eAAeE,mBAC7Cz1D,KAAKk1D,cAAe,KAM5BD,EAAA/0D,UAAA4M,gBAAA,WACE9M,KAAKk1D,cAAgBl1D,KAAKk1D,aAE1Bl1D,KAAKm1D,eAAe7zC,KAAK,CACvBvU,MAAO/M,KAAKk1D,aACZ5sD,SAAUtI,KAAKs1D,mBAInBL,EAAA/0D,UAAAw1D,WAAA,SAAWC,GACT,OAAO31D,KAAK4K,iBAAiB5E,SAAS2vD,IA1CxC50D,EAAA,CADCoH,EAAAA,+CAIDpH,EAAA,CADCoH,EAAAA,gDAIDpH,EAAA,CADCoH,EAAAA,uCAIDpH,EAAA,CADCwgB,EAAAA,+CAZU0zC,EAA8Bl0D,EAAA,CAJ1CqH,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAA,0cAEW2sD,oBC6BX,SAAAW,EACYC,EACAh6C,EACAi6C,EACAvrD,EACA+P,GAJAta,KAAA61D,mBAAAA,EACA71D,KAAA6b,qBAAAA,EACA7b,KAAA81D,wBAAAA,EACA91D,KAAAuK,yBAAAA,EACAvK,KAAAsa,YAAAA,EAbJta,KAAAwK,cAAgB,IAAIC,EAAAA,aACpBzK,KAAA+1D,mBAAqB,IAAInwC,EAAAA,iBAAyB,GAK1D5lB,KAAA4K,iBAA6B,GAsS/B,OA5REgrD,EAAA11D,UAAA8K,SAAA,WACEhL,KAAKqL,SAAWK,EAAAA,cAAc,CAC5B1L,KAAK61D,mBAAmBG,2BACxBh2D,KAAK61D,mBAAmBI,8BACxBj2D,KAAK61D,mBAAmBK,kCACxBl2D,KAAKsa,YAAYm0B,iBACjBzuC,KAAK+1D,qBACJpqD,KACD+U,EAAAA,KACE,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GACCoqD,EAAAnqD,EAAA,GACAoqD,EAAApqD,EAAA,GACAqqD,EAAArqD,EAAA,GACAyiC,EAAAziC,EAAA,GACA+pD,EAAA/pD,EAAA,GAEA,OAAAmqD,GACAC,GACAC,IACC5nB,GACDsnB,MAGN/1D,KAAKs2D,kBACLt2D,KAAKu2D,kBACLv2D,KAAKw2D,uBAGCZ,EAAA11D,UAAAo2D,gBAAR,WAAA,IAAA9uD,EAAAxH,KACEA,KAAKy2D,cAAgBz2D,KAAK61D,mBAAmBzqD,cAAcO,KACzDyvC,EAAAA,eACEp7C,KAAKuK,yBAAyBW,eAC9BlL,KAAKsa,YAAYm0B,kBAEnBp9B,EAAAA,QACE,SAACtF,OAAAC,EAAA3J,EAAA0J,EAAA,GAACC,EAAA,GAAeA,EAAA,GAAyC,OAApBA,EAAA,MAExCF,EAAAA,KAAI,SAACC,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC2qD,EAAA1qD,EAAA,GAAcA,EAAA,GACbxE,EAAKmvD,eAAeD,IACvBlvD,EAAKquD,mBAAmBe,kBAG5Bl2C,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC2qD,EAAA1qD,EAAA,GAAc6qD,EAAA7qD,EAAA,GAClB,OAAInB,QAAQrD,EAAKsuD,wBAAwBhrD,qBAErCD,QACErD,EAAKsuD,wBAAwBhrD,kBAAkBF,oBAGjDpD,EAAKoD,iBAAmBpD,EAAKsuD,wBAAwBhrD,kBAAkBF,kBAGvEC,QACErD,EAAKsuD,wBAAwBhrD,kBAC1BgsD,wBAGEtvD,EAAKuvD,sBAAsBL,EAAcG,GAI7CH,OAKLd,EAAA11D,UAAA62D,sBAAR,SACEL,EACAG,QAAA,IAAAA,IAAAA,EAAA,IAEA,IAAIG,EAA4B,GAEhC,OACGh3D,KAAK81D,wBAAwBhrD,kBAAkBgsD,sBAC7CG,uBAUHpsD,QACE7K,KAAK81D,wBAAwBhrD,kBAAkBgsD,sBAC5CI,eAELl3D,KAAK81D,wBAAwBhrD,kBAAkBgsD,sBAC5CI,aAAat2D,OAAS,IAEzBo2D,EAAkBh3D,KAAK81D,wBAAwBhrD,kBAC5CgsD,sBAAsBI,cAGpBl3D,KAAK61D,mBAAmBsB,uBAC7BT,EACAM,KArBAA,EAAkBH,EAAmBn2C,KAAI,SAACpY,GAAa,OAAAA,EAASkE,MACzDxM,KAAK61D,mBAAmBsB,uBAC7BT,EACAM,KAsBEpB,EAAA11D,UAAAq2D,gBAAR,WAAA,IAAA/uD,EAAAxH,KACEA,KAAK61D,mBAAmBuB,+BACxBp3D,KAAKwK,cAAciB,IACjBzL,KAAK61D,mBACFwB,8BACA5qD,WAAU,SAAC8+B,GAAY,OAAA/jC,EAAK8vD,sBAAsB/rB,QAIjDqqB,EAAA11D,UAAAs2D,oBAAR,WAAA,IAAAhvD,EAAAxH,KACEA,KAAK61D,mBAAmB0B,mCACxBv3D,KAAKwK,cAAciB,IACjBzL,KAAK61D,mBACFK,kCACAvqD,KACC+pC,EAAAA,UAAU7qC,SACVuwC,EAAAA,eACEp7C,KAAK61D,mBAAmB2B,mCAE1B92C,EAAAA,KAAI,SAAC3U,GAA0B,OAA1B1J,EAAA0J,EAAA,GAAG,MACRD,EAAAA,KAAI,SAAC2rD,GACCA,GACFjwD,EAAKquD,mBAAmBe,mBAI7BnqD,WAAU,SAACgrD,GACV,OAAAjwD,EAAKkwD,0BAA0BD,QAK/B7B,EAAA11D,UAAAy2D,eAAR,SAAuBD,GACrB,OAAO7rD,QAAQ6rD,IAAiBA,EAAa91D,OAAS,GAGxDg1D,EAAA11D,UAAA4M,gBAAA,SAAgBf,OACdgB,EAAAhB,EAAAgB,MACAzE,EAAAyD,EAAAzD,SAKIyE,EACF/M,KAAK61D,mBAAmBhpD,YAAYvE,EAASkE,GAAIlE,EAASqvD,SAE1D33D,KAAK61D,mBAAmBtpD,gBAAgBjE,EAASitD,eAAe3jC,OAI5DgkC,EAAA11D,UAAAo3D,sBAAR,SAA8B/rB,GACxBA,IACFvrC,KAAK61D,mBAAmBuB,+BACxBp3D,KAAK6b,qBAAqBpQ,IACxB,CAAEvK,IAAK,+CACPsb,EAAAA,kBAAkBm0C,yBAKhBiF,EAAA11D,UAAAw3D,0BAAR,SAAkCnsB,GAC5BA,IACFvrC,KAAK61D,mBAAmB0B,mCACxBv3D,KAAK6b,qBAAqBpQ,IACxB,CAAEvK,IAAK,mDACPsb,EAAAA,kBAAkBm0C,yBAKxBiF,EAAA11D,UAAAsL,UAAA,SAAUS,GAAV,IAAAzE,EAAAxH,UAAU,IAAAiM,IAAAA,EAAA,IACR,IAAM2rD,EAAwC,GAC9C3rD,EAAUrE,SAAQ,SAACU,GACjB,GAAId,EAAKquD,mBAAmBxpD,eAAe/D,EAASitD,gBAAiB,CACnE,GAAI/tD,EAAK8E,kBAAkBhE,GACzB,OAEFsvD,EAAmBp1D,KAAK8F,OAI5BtI,KAAK+1D,mBAAmB7zD,MAAK,GAE7BlC,KAAKwK,cAAciB,IACjBzL,KAAK63D,sBAAsBD,GACxBjsD,KAAKG,EAAAA,KAAI,SAACgsD,GAAiB,OAAAtwD,EAAKuuD,mBAAmB7zD,MAAK,OACxDuK,cAICmpD,EAAA11D,UAAA23D,sBAAR,SACED,GADF,IAAApwD,EAAAxH,KAuBE,YAtBA,IAAA43D,IAAAA,EAAA,IAEiBj1D,EAAAA,OACf3C,KAAK61D,mBAAmBK,mCACxBvqD,KACAE,EAAAA,uBACAwF,EAAAA,QAAO,SAAC0lC,GAAY,OAACA,MAECprC,KAAKosD,EAAAA,MAAK,SAACC,EAAKC,GAAW,OAAAD,EAAM,KAAI,IACpCrsD,KACvBG,EAAAA,KAAI,SAACrL,GACCA,EAAIm3D,EAAmBh3D,QACzB4G,EAAKquD,mBAAmBtpD,gBACtBqrD,EAAmBn3D,GAAG80D,eAAe3jC,UAKTjmB,KAClC0F,EAAAA,QAAO,SAAC6mD,GAAgB,OAAAA,IAAgBN,EAAmBh3D,YAM/Dg1D,EAAA11D,UAAAwM,SAAA,SAAST,GAAT,IAAAzE,EAAAxH,UAAS,IAAAiM,IAAAA,EAAA,IACP,IAAMksD,EAAoC,GAC1ClsD,EAAUrE,SAAQ,SAACU,GACjB,GAAId,EAAKquD,mBAAmBjpD,mBAAmBtE,EAASitD,gBAAiB,CACvE,GAAI/tD,EAAK8E,kBAAkBhE,GACzB,OAGF6vD,EAAe31D,KAAK8F,OAIxBtI,KAAK+1D,mBAAmB7zD,MAAK,GAE7BlC,KAAKwK,cAAciB,IACjBzL,KAAKo4D,gBAAgBD,GAClBxsD,KAAKG,EAAAA,KAAI,SAACgsD,GAAiB,OAAAtwD,EAAKuuD,mBAAmB7zD,MAAK,OACxDuK,cAICmpD,EAAA11D,UAAAk4D,gBAAR,SACED,GADF,IAAA3wD,EAAAxH,KAwBE,YAvBA,IAAAm4D,IAAAA,EAAA,IAEiBx1D,EAAAA,OACf3C,KAAK61D,mBAAmBI,+BACxBtqD,KACAE,EAAAA,uBACAwF,EAAAA,QAAO,SAAC0lC,GAAY,OAACA,MAECprC,KAAKosD,EAAAA,MAAK,SAACC,EAAKC,GAAW,OAAAD,EAAM,KAAI,IACjCrsD,KAC1BG,EAAAA,KAAI,SAACrL,GACCA,EAAI03D,EAAev3D,QACrB4G,EAAKquD,mBAAmBhpD,YACtBsrD,EAAe13D,GAAG+L,GAClB2rD,EAAe13D,GAAGk3D,aAKahsD,KACrC0F,EAAAA,QAAO,SAAC6mD,GAAgB,OAAAA,IAAgBC,EAAev3D,YAMnDg1D,EAAA11D,UAAAoM,kBAAR,SAA0BhE,GACxB,OACEuC,QAAQ7K,KAAK81D,wBAAwBhrD,oBACrCD,QACE7K,KAAK81D,wBAAwBhrD,kBAAkBF,mBAEjD5K,KAAK81D,wBAAwBhrD,kBAAkBF,iBAAiB5E,SAC9DsC,EAASkE,KAKfopD,EAAA11D,UAAAiN,YAAA,WACEnN,KAAKwK,cAAc4C,cACnBpN,KAAK+1D,mBAAmB3oD,cAExBpN,KAAK61D,mBAAmBuB,+BACxBp3D,KAAK61D,mBAAmB0B,6EAjSMl/C,EAAAA,0BACEf,EAAAA,4BACGjK,EAAAA,+BACCC,EAAAA,gCACbyJ,EAAAA,eAdd6+C,EAA0B70D,EAAA,CAJtCqH,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,stCAEWstD,oBCMb,SAAAyC,KAAsC,OAAzBA,EAAuBt3D,EAAA,CAvBnCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAwyB,EAAAA,YACAjG,EAAAA,oBACAmG,GACAltB,EAAAA,WACA5F,GAEFK,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbunD,2BAA4B,CAC1BtnD,UAAWsnD,GACX/lD,OAAQ,CAACyoD,EAAAA,gBAKjB7vD,aAAc,CAACmtD,GAA4BX,IAC3ChsD,QAAS,CAAC2sD,GAA4BX,IACtCvmD,gBAAiB,CAACknD,OAEPyC,oBCjBb,SAAAE,KAAsC,OAAzBA,EAAuBx3D,EAAA,CAZnCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAwF,EAAAA,WACA5F,EACA8yB,GACAg9B,IAEF5vD,aAAc,CAAC4B,GACfqE,gBAAiB,CAACrE,GAClBpB,QAAS,CAACoB,MAECkuD,oBC4BX,SAAAC,EACU1P,EACAtuC,EACEpT,EACAse,GAHF1lB,KAAA8oD,qBAAAA,EACA9oD,KAAAwa,eAAAA,EACExa,KAAAoH,WAAAA,EACApH,KAAA0lB,qBAAAA,EA5BZ1lB,KAAAy4D,YAAmCz4D,KAAK8oD,qBAAqBN,WAMpCxoD,KAAA4d,SAAW,IAI5B5d,KAAA04D,oBAAmC,CACzC13C,eAAe,EACfE,qBAAqB,GA2CzB,OAvCEs3C,EAAAt4D,UAAA+gB,aAAA,SAAa3B,GACXtf,KAAK0lB,qBAAqBzE,aACxBjhB,KAAKoH,WAAWY,cAChBhI,KAAK04D,oBACLp5C,IAWJk5C,EAAAt4D,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAK24D,qBAAuB34D,KAAKwa,eAC9B2P,eACA1d,WAAU,SAACu7C,GACVxgD,EAAKoxD,iBAA0B,IAAR5Q,EACvBxgD,EAAKqxD,gBAAyB,IAAR7Q,MAI5BwQ,EAAAt4D,UAAA44D,2BAAA,SAA2Bx5C,GACPA,EAAMre,OAAQ83D,UAAU/yD,SAAS,gBACjDhG,KAAKg5D,gBAITR,EAAAt4D,UAAA84D,aAAA,WACEh5D,KAAK8oD,qBAAqBH,QAAO,IAGnC6P,EAAAt4D,UAAAiN,YAAA,WACMnN,KAAK24D,sBACP34D,KAAK24D,qBAAqBvrD,wDA3BEm7C,UACNxwC,EAAAA,sBACF9P,EAAAA,kBACUkd,MA1BKpkB,EAAA,CAAtCmc,EAAAA,YAAY,iEACyBnc,EAAA,CAArCmc,EAAAA,YAAY,+DAGYnc,EAAA,CAAxBmc,EAAAA,YAAY,4CAEiBnc,EAAA,CAA7B8sB,EAAAA,UAAUhH,iCAQX9lB,EAAA,CADCyd,EAAAA,aAAa,iBAAkB,CAAC,6CAjBtBg6C,EAAmBz3D,EAAA,CAJ/BqH,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,i6BAEWkwD,oBCcb,SAAAS,KAAyB,OAAZA,EAAUl4D,EAAA,CApBtByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAyH,GACAywB,GACA3C,GACAgI,GACAzB,GACAkF,GACArH,GACA4K,GACAnqD,EAAAA,qBAEA65C,GACA3iC,IAEF7c,aAAc,CAAC+vD,IACfvvD,QAAS,CAACuvD,OAECS,MCvBbC,GAAA,WACE,SAAAA,EACU/mD,EACAC,GADApS,KAAAmS,WAAAA,EACAnS,KAAAoS,SAAAA,SAGV8mD,EAAAh5D,UAAAi5D,mBAAA,SACE5pD,EACA6pD,EACAn4B,GAHF,IAAAz5B,EAAAxH,KAKQ6P,EAAS7P,KAAKmS,WAAWvC,uBAAuBL,GAEtD,GAAIM,EAAOjP,OAAQ,CACjB,IAAMy4D,EAAyBxpD,EAAO6Q,KAAI,SAAC44C,GACzC,IAAMppD,EAAQ1I,EAAK4K,SAASK,IAAiB6mD,EAAY,MACzD,GAsCR,SAAuBppD,GACrB,OAAOA,IAGc4T,EAHmB5T,EAAM8+B,YAI1B,mBAANlrB,GADhB,IAAuBA,EA1CXy1C,CAAcrpD,GAChB,OAmBV,SACE/N,GAEA,GAAIq3D,EAAAA,aAAar3D,GACf,OAAOA,EAGT,GAOiBwjD,EAPHxjD,EAQLwjD,GAA2B,mBAAbA,EAAIvsC,KAPzB,OAAOjJ,EAAAA,KAAKuJ,QAAQxI,QAAQ/O,IAMhC,IAAmBwjD,EAHjB,OAAOtqC,EAAAA,GAAGlZ,GA9BKs3D,CAAmBvpD,EAAM8+B,YAAYoqB,EAAOn4B,IAAQt1B,KACzDg+C,EAAAA,SAGF,MAAM,IAAI+P,MAAM,8CAIpB,OAAO/2D,EAAAA,OAAM7B,WAAA,EAAA4B,EAAI22D,IAAwB1tD,KACvC+pC,EAAAA,WAAU,SAAC1G,GAAmC,OAAgB,IAAhBA,KAC9C2qB,EAAAA,SAAQ,GACRhQ,EAAAA,SAGF,OAAOtuC,EAAAA,IAAG,6CA7BQ1M,SACFmE,EAAAA,sJAHTomD,EAAgBn4D,EAAA,CAH5BiG,EAAAA,WAAW,CACVC,WAAY,UAEDiyD,GAAb,GCHA,IAAAU,GAAA,WACE,SAAAA,EACUznD,EACAuD,EACAmkD,GAFA75D,KAAAmS,WAAAA,EACAnS,KAAA0V,YAAAA,EACA1V,KAAA65D,iBAAAA,SAGVD,EAAA15D,UAAA45D,kBAAA,SAAkBvqD,WACVc,EAAWrQ,KAAKmS,WAAW/B,yBAAyBb,GACpDwqD,EAAa,IAAIjqD,QACvB,IAAkB,IAAAkqD,EAAAn4D,EAAAwO,GAAQ4pD,EAAAD,EAAA93D,QAAA+3D,EAAA73D,KAAA63D,EAAAD,EAAA93D,OAAE,CAAvB,IAAMhB,EAAG+4D,EAAA93D,MACZ43D,EAAWtuD,IAAIzL,KAAK65D,iBAAiBK,mBAAmBh5D,sGAE1DlB,KAAK0V,YAAYykD,WAAWx6D,MAAMwQ,KAAK4pD,8CAXnBprD,SACC4I,EAAAA,0BACK6iD,EAAAA,wNAJjBR,EAAc74D,EAAA,CAH1BiG,EAAAA,WAAW,CACVC,WAAY,UAED2yD,GAAb,GCFAS,GAAA,WACE,SAAAA,EAAoBthB,EAAwB5mC,GAAxBnS,KAAA+4C,OAAAA,EAAwB/4C,KAAAmS,WAAAA,SAEpCkoD,EAAAn6D,UAAAo6D,eAAR,SAAuB11D,GACrB,IAAM21D,EAAmB31D,EAAIkuB,WAAW,KAExC,IAAKynC,EACH,OAAO,EAGT,IAAMC,EAAY51D,EAAI61D,OAAO,GAE7B,OACEF,KACEv6D,KAAK+4C,OAAOnzC,OAAOC,MACnB,SAACuzD,GACC,OAAAA,EAAM56B,MAAQ46B,EAAM56B,KAAKk8B,mBAAqBtB,EAAMz/C,OAAS6gD,MAcrEH,EAAAn6D,UAAAy6D,uBAAA,SACEC,EACArrD,EACAsrD,EACAC,GAEA,GAAI96D,KAAKs6D,eAAeQ,GACtB,OAAO,EAGT,IAAMC,EAAkB/6D,KAAKmS,WAAW7C,uBACtCC,GAEF,OAAIwrD,EAAgBn6D,SACdZ,KAAKg7D,cAAcJ,EAAaE,EAAkBC,KACpD/6D,KAAK+4C,OAAOkiB,cAAcJ,IACnB,IAMLR,EAAAn6D,UAAA86D,cAAR,SACEJ,EACAM,EACA1rD,GAEA,GACEorD,EAAYl2D,OAASy2D,EAAAA,SAASC,cAC9BF,EAAUpoC,WAAW,MACrBooC,EAAUt6D,OAAS,EACnB,CACA,IAAMy6D,EAAqB,CACzB1hD,KAAMuhD,EAAUT,OAAO,GACvBnsD,UAAW+gD,GACXnsC,SAAU1T,EACVgvB,KAAM,CACJk8B,kBAAmB,CACjBh2D,KAAMk2D,EAAYl2D,KAClB8H,GAAI0uD,KAMV,OADAl7D,KAAK+4C,OAAOuiB,YAAW54D,EAAA,CAAE24D,GAAar7D,KAAK+4C,OAAOnzC,UAC3C,EAGT,OAAO,4CA7EmBwzC,EAAAA,cAA4BzqC,6IAD7C0rD,EAAoBt5D,EAAA,CADhCiG,EAAAA,WAAW,CAAEC,WAAY,UACbozD,GAAb,GCEAkB,GAAA,WAAA,SAAAA,sHAAsBA,EAAgBx6D,EAAA,CAJrCiG,EAAAA,WAAW,CACVC,WAAY,OACZ8B,YAAasxD,MAEOkB,GAAtB,GCmBAC,GAAA,WACE,SAAAA,EACYC,EACFjoD,EACAkoD,EACAC,EACAC,GAJE57D,KAAAy7D,oBAAAA,EACFz7D,KAAAwT,WAAAA,EACAxT,KAAA07D,UAAAA,EACA17D,KAAA27D,QAAAA,EACA37D,KAAA47D,UAAAA,SAmBVJ,EAAAt7D,UAAA27D,gBAAA,SACEjB,EACAkB,EACA1C,EACAn4B,GAJF,IAAAz5B,EAAAxH,KAME,OAAOA,KAAKwT,WAAWuoD,sBAAsBnB,GAAajvD,KACxDC,EAAAA,KAAK,GACLyQ,EAAAA,WAAU,SAAC9M,GACT,OAAA/H,EAAKo0D,UACFzC,mBAAmB5pD,EAAgB6pD,EAAOn4B,GAC1Ct1B,KAAKyvC,EAAAA,eAAe//B,EAAAA,GAAG9L,QAE5BzD,EAAAA,KAAI,SAACC,OAAAC,EAAA3J,EAAA0J,EAAA,GAACijC,EAAAhjC,EAAA,GAAauD,EAAAvD,EAAA,IACG,IAAhBgjC,GACFxnC,EAAKm0D,QAAQ7B,kBAAkBvqD,MAGnCmR,EAAAA,KAAI,SAAC3U,SAAAC,EAAA3J,EAAA0J,EAAA,GAACijC,EAAAhjC,EAAA,GAAauD,EAAAvD,EAAA,GACXkvD,EAAYY,EAAS3kC,OAASyjC,EAAYpuD,GAChD,OAAoB,IAAhBwiC,IAAoC,QAAZxL,EAAC41B,MAAAA,OAAK,EAALA,EAAO56B,YAAI,IAAAgF,OAAA,EAAAA,EAAEk3B,mBAQnC1rB,EAPExnC,EAAKk0D,UAAUf,uBACpBC,EACArrD,EACA0xB,EAAMr8B,IACNs2D,QAcVM,EAAAt7D,UAAA87D,wBAAA,SACEpB,EACAxB,EACAn4B,GAHF,IAAAz5B,EAAAxH,KAKQi8D,EAAsC,CAC1Cv3D,KAAMy2D,EAAAA,SAASC,aACf5uD,GAAIxM,KAAKy7D,oBAAoBhpD,IAAI,aAGnC,OAAOzS,KAAKwT,WAAW0oD,QAAQD,GAAwBtwD,KACrD0Q,EAAAA,WAAU,SAAC8/C,GACT,OAAIA,EACK30D,EAAKgM,WAAW4oD,aAAaH,GAAwBtwD,KAC1DG,EAAAA,KAAI,SAACuwD,GACH70D,EAAKgM,WAAW8oD,iBAAiB1B,EAAayB,MAEhDhgD,EAAAA,WAAU,SAACggD,GACT,OAAA70D,EAAKgM,WAAW4oD,aAAaxB,GAAajvD,KAExC0F,EAAAA,QAAO,SAAC8R,GAAU,OAAAA,IAAUk5C,SAGhChgD,EAAAA,WAAU,WACR,OAAA7U,EAAKq0D,gBAAgBjB,EAAauB,EAAc/C,EAAOn4B,OAItD5lB,EAAAA,IAAG,iDA1FiBkhD,EAAAA,2BACX7pD,EAAAA,kBACD6oD,UACF3B,UACEV,4NANVsC,EAAmBz6D,EAAA,CAH/BiG,EAAAA,WAAW,CACVC,WAAY,UAEDu0D,GAAb,iBCTE,SAAAgB,EACYhiD,EACAhH,EACAipD,EACAj/C,EACgB5X,GAJhB5F,KAAAwa,eAAAA,EACAxa,KAAAwT,WAAAA,EACAxT,KAAAy8D,qBAAAA,EACAz8D,KAAAwd,QAAAA,EACgBxd,KAAA4F,OAAAA,SAc5B42D,EAAAt8D,UAAA8uC,YAAA,SACEoqB,EACAn4B,GAFF,IAAAz5B,EAAAxH,KAIE,OAAOA,KAAKy8D,qBAAqBztB,YAAYoqB,GAAOztD,KAClD0Q,EAAAA,WAAU,SAAC2yB,GACT,OAAAA,EACIxnC,EAAKgT,eAAekiD,qBAAqB/wD,KACvC0Q,EAAAA,WAAU,SAACu+C,GACT,OAAApzD,EAAKgM,WACF0oD,QAAQtB,EAAapzD,EAAKm1D,uBAC1BhxD,KACCg+C,EAAAA,QACAttC,EAAAA,WAAU,SAACy/C,GACT,OAAAA,EACIt0D,EAAKgW,QAAQq+C,gBACXjB,EACAkB,EACA1C,EACAn4B,GAEFz5B,EAAKgW,QAAQw+C,wBACXpB,EACAxB,EACAn4B,WAMhB5lB,EAAAA,IAAG,QAQLmhD,EAAAt8D,UAAAy8D,oBAAR,WACE,OAAQC,EAAAA,iBAAiB58D,KAAK4F,OAAQ,oBA5DjC42D,EAAAK,UAAY,wDAGS9kD,EAAAA,sBACJrF,EAAAA,kBACUoqD,EAAAA,4BACbtB,mCAClB7qD,EAAAA,OAAMC,KAAA,CAAC5H,EAAAA,wPARCwzD,EAAYz7D,EAAA,CAHxBiG,EAAAA,WAAW,CACVC,WAAY,SAUTvF,EAAA,EAAAiP,EAAAA,OAAO3H,EAAAA,UARCwzD,MCZPO,GAAkB,CACtBpjD,KAAM,KACNq1B,YAAa,CAACwtB,IACdluD,UAAW+gD,IAGb,SAAgB2N,GAAY5qD,GAK1B,OAJe,WACEA,EAASK,IAAI2mC,EAAAA,QACrBxzC,OAAOpD,KAAKu6D,YCLLC,GAIlBC,GAAA,WAAA,SAAAA,KAA6B,OAAhBA,EAAcl8D,EAAA,CAV1ByH,EAAAA,SAAS,CACRI,UAAW,CACT,CACEE,QAASogB,EAAAA,gBACT9O,OAAO,EACPiP,KAAM,CAACvW,EAAAA,UACPqW,WAAU+zC,QAIHD,GAAb,GCXaE,GAA8C,CACzDC,KAAM,CAAE5oB,MAAO,CAAC,KAChB6oB,SAAU,CAAE7oB,MAAO,CAAC,cACpBt/B,KAAM,CAAEs/B,MAAO,CAAC,SAGhB8oB,MAAO,CAAE9oB,MAAO,CAAC,SAAU+oB,WAAW,GACtCvS,SAAU,CAAExW,MAAO,CAAC,kBAAmB+oB,WAAW,GAClDC,eAAgB,CAAEhpB,MAAO,CAAC,yBAA0B+oB,WAAW,GAC/DE,cAAe,CAAEjpB,MAAO,CAAC,mBAAoB+oB,WAAW,GACxDxiD,OAAQ,CAAEy5B,MAAO,CAAC,WAClBkpB,cAAe,CAAElpB,MAAO,CAAC,mBAEzBr/B,SAAU,CAAEq/B,MAAO,CAAC,aACpBmpB,wBAAyB,CAAEnpB,MAAO,CAAC,8BACnCopB,qBAAsB,CAAEppB,MAAO,CAAC,2BAChCqpB,uBAAwB,CAAErpB,MAAO,CAAC,6BAClCspB,oBAAqB,CAAEtpB,MAAO,CAAC,0BAC/BupB,kBAAmB,CAAEvpB,MAAO,CAAC,uBAG7BwpB,OAAQ,CAAExpB,MAAO,CAAC,kBAClBypB,SAAU,CACRzpB,MAAO,CAAC,0BACR0pB,cAAe,CAAEC,aAAc,SAEjCC,MAAO,CAAE5pB,MAAO,CAAC,mCAGjB3+B,QAAS,CACP2+B,MAAO,CAAC,8BACR0pB,cAAe,CAAEv3B,YAAa,SAGhCoc,mBAAoB,CAAEvO,MAAO,CAAC,yBAC9B6pB,OAAQ,CACN7pB,MAAO,CAAC,sBAEV8pB,aAAc,CACZ9pB,MAAO,CAAC,+BACR0pB,cAAe,CAAEh9B,UAAW,SAE9Bq9B,WAAY,CACV/pB,MAAO,CAAC,0BACR0pB,cAAe,CAAEh9B,UAAW,SAE9Bs9B,YAAa,CACXhqB,MAAO,CAAC,sCACR0pB,cAAe,CAAEh9B,UAAW,SAE9Bu9B,wBAAyB,CACvBjqB,MAAO,CAAC,mDACR0pB,cAAe,CAAEh9B,UAAW,SAE9Bw9B,YAAa,CACXlqB,MAAO,CAAC,sCACR0pB,cAAe,CAAEh9B,UAAW,SAE9By9B,wBAAyB,CACvBnqB,MAAO,CAAC,mDACR0pB,cAAe,CAAEh9B,UAAW,SAE9B09B,qBAAsB,CACpBpqB,MAAO,CAAC,yCACR0pB,cAAe,CAAEW,WAAY,QAE/B5zB,QAAS,CAAEuJ,MAAO,CAAC,uBACnBsqB,YAAa,CACXtqB,MAAO,CAAC,uCACR0pB,cAAe,CAAE7yB,WAAY,UAIpB0zB,GAAsC,CACjD7oD,QAAS,CACP1G,OAAQ2tD,mBClEZ,SAAA6B,WAOA,SAPaA,EACJA,EAAAz+B,QAAP,WACE,MAAO,CACLC,SAAUy+B,EACVr2D,UAAW,CAACC,EAAAA,qBAAqBk2D,OAJ1BC,EAAaC,EAAAl+D,EAAA,CAHzByH,EAAAA,SAAS,CACRE,QAAS,CAACw2D,EAAAA,cAAkB3+B,UAAW08B,OAE5B+B,MCAb,SAAgBG,GAAoBpzD,OAClCqzD,EAAArzD,EAAAqzD,OACAC,EAAAtzD,EAAAszD,UACAC,EAAAvzD,EAAAuzD,mBAMAA,EAAqBA,GAAsB,QAC3C,IAAMC,EAAU,SACdC,SAEMC,EA0BV,SAA0BC,EAAeC,GACvC,IAAK,IAAIx8C,EAAQu8C,EAAS9+D,OAAS,EAAGuiB,GAAS,EAAGA,IAChD,GAAIw8C,EAAUD,EAASv8C,IACrB,OAAOA,EAGX,OAAQ,EAhCcy8C,CAAcJ,GAAU,SAACzzD,GAAa,OAAXA,EAAA4N,OAAoBylD,KAC7DS,EAAsBJ,IAAgBD,EAAS5+D,OAAS,EAE9D,IAAqB,IAAjB6+D,GAAsBI,EACxB,OAAO,KAQT,IALA,IAAMl+D,EAAa89D,EAAc,EAC3BK,IAAS/zD,EAAA,IACZszD,GAAYG,EAAS79D,MAGflB,EAAI,EAAGA,EAAIg/D,EAAah/D,IAC/Bq/D,EAAU,GAAGR,EAAqB7+D,GAAO++D,EAAS/+D,GAGpD,MAAO,CAAEs/D,SAAUP,EAASv0C,MAAM,EAAGtpB,EAAa,GAAIm+D,UAASA,IAOjE,OAJInuD,EAAAA,cACF4tD,EAA4B,mBAAI,CAAEH,OAAMA,EAAEC,UAASA,EAAEC,mBAAkBA,IAGlEC,MC/CGS,iBCUV,SAAAC,EAAsB9N,GAAAnyD,KAAAmyD,gBAAAA,SAEtB8N,EAAA//D,UAAAqrD,MAAA,WAAA,IAAA/jD,EAAAxH,KACE,OAAOA,KAAKmyD,gBACTC,UACAzmD,KAAK+U,EAAAA,KAAI,SAACnL,GAAuB,OAAA/N,EAAK04D,QAAQ3qD,QAGzC0qD,EAAA//D,UAAAggE,QAAV,SAAkB3qD,GAChB,GAAKA,MAAAA,OAAQ,EAARA,EAAU4qD,YAAf,CAGA,IAAMC,EAAS7qD,EAAS4qD,YAAYz/C,KAAI,SAAC2/C,EAAOl9C,GAC9C,MAAO,CACLm9C,QAAS,WACTj6C,SAAUlD,EAAQ,EAClB+W,KAAM,CACJqmC,MAAOF,EAAM75D,KACb2kB,KAAMk1C,EAAMlpC,WAgBlB,OAXI5hB,EAAS8sC,OACX+d,EAAO59D,KAAK,CACV89D,QAAS,WACTj6C,SAAU+5C,EAAOx/D,OAAS,EAC1Bs5B,KAAM,CACJqmC,MAAOhrD,EAAS8sC,MAChBl3B,KAAM5V,EAAS8sC,SAKd,CACLme,WAAY,oBACZF,QAAS,iBACTG,gBAAiBL,8CArCkBhpD,EAAAA,mJAD5B6oD,EAAuBl/D,EAAA,CAHnCiG,EAAAA,WAAW,CACVC,WAAY,UAEDg5D,MCGbS,GAAA,WAAA,SAAAA,YACEA,EAAAxgE,UAAAqrD,MAAA,SAAM11C,GACJ,OAAOwF,EAAAA,GAAEhb,EAAAA,EAAAA,EAAA,GACJL,KAAK2gE,eAAe9qD,IACpB7V,KAAK4gE,gBAAgB/qD,IACrB7V,KAAK6gE,gBAAgBhrD,MAIpB6qD,EAAAxgE,UAAAygE,eAAR,SAAuB9qD,GACrB,IAAMkqC,EAAc,CAAE+gB,IAAKjrD,EAAQ+b,MAOnC,OANI/b,EAAQsV,OACV40B,EAAO50B,KAAOtV,EAAQsV,MAEpBtV,EAAQkrD,UACVhhB,EAAOzc,YAAcztB,EAAQkrD,SAExBhhB,GAGD2gB,EAAAxgE,UAAA2gE,gBAAR,SAAwBhrD,GACtB,OAAOA,EAAQmrD,QACbnrD,EAAQmrD,OAAOC,SACfprD,EAAQmrD,OAAOC,QAAc,MAC7BprD,EAAQmrD,OAAOC,QAAc,KAAEr8D,IAC7B,CACE0tD,MAAOz8C,EAAQmrD,OAAOC,QAAc,KAAEr8D,KAExC,IAGE87D,EAAAxgE,UAAA0gE,gBAAR,SAAwB/qD,GACtB,OAAOA,EAAsB,aACzB,CACEuoD,MAAOvoD,EAAsB,cAE/B,oGApCK6qD,EAAwB3/D,EAAA,CAHpCiG,EAAAA,WAAW,CACVC,WAAY,UAEDy5D,GAAb,GCAAQ,GAAA,WAAA,SAAAA,YACEA,EAAAhhE,UAAAqrD,MAAA,SAAM11C,GACJ,IAAMs9C,EAAc,CAAEmN,QAAS,SAe/B,OAdIzqD,EAAQsrD,QACNtrD,EAAQsrD,MAAMh/D,QAChBgxD,EAAOgO,MAAQtrD,EAAQsrD,MAAMh/D,OAE3B0T,EAAQsrD,MAAMC,cAChBjO,EAAOkO,cAAgBxrD,EAAQsrD,MAAMC,cAIrCvrD,EAAQ6yB,OAAS7yB,EAAQ6yB,MAAMC,mBACjCwqB,EAAOmO,aAC8B,YAAnCzrD,EAAQ6yB,MAAMC,iBAAiC,UAAY,cAGxDttB,EAAAA,GAAG,CACRkmD,OAAQpO,mGAlBD+N,EAAyBngE,EAAA,CAHrCiG,EAAAA,WAAW,CACVC,WAAY,UAEDi6D,GAAb,GCCAM,GAAA,WACE,SAAAA,EAAoBC,GAAAzhE,KAAAyhE,cAAAA,SAEpBD,EAAAthE,UAAAqrD,MAAA,SAAM11C,GAAN,IAAArO,EAAAxH,KACE,OAAOA,KAAKyhE,cAAcC,iBAAiB7rD,EAAQ+b,MAAMjmB,KACvD0F,EAAAA,OAAOxG,SACP6V,EAAAA,KAAI,SAACihD,GACH,MAAO,CACLC,gBAAiBp6D,EAAKq6D,uBAAuBhsD,EAAS8rD,GACtDG,OAAQH,EAAQjhD,KAAI,SAACohD,GAAW,OAAAt6D,EAAKu6D,aAAaD,YAMlDN,EAAAthE,UAAA2hE,uBAAR,SAA+BhsD,EAAkB8rD,GAC/C,IAAMK,EAAkB,CACtB1B,QAAS,mBASX,OAPIzqD,EAAQosD,gBACVD,EAAWE,YAAcrsD,EAAQosD,eAE/BN,IACFK,EAAWG,YAAcR,EAAQtwD,QAAO,SAACw0B,GAAQ,QAAEA,EAAItG,UAAQ3+B,OAC/DohE,EAAWI,YAAcT,EAAQtwD,QAAO,SAACw0B,GAAQ,QAAEA,EAAIw8B,WAASzhE,QAE3DohE,GAGDR,EAAAthE,UAAA6hE,aAAR,SAAqBD,GACnB,IAAMQ,EAAoB,CACxBhC,QAAS,UAMX,GAHIwB,EAAOS,WAAaT,EAAOS,UAAUp3C,OACvCm3C,EAAaE,OAASV,EAAOS,UAAUp3C,MAErC22C,EAAOW,KAAM,CACf,IAAMA,EAAO,IAAIzjB,KAAK8iB,EAAOW,MAC7BH,EAAaI,cAAmBD,EAAKxjB,cAAa,KAChDwjB,EAAKE,WAAa,GAAC,IACjBF,EAAKG,UAeX,OAbId,EAAOe,WACTP,EAAan3C,KAAO22C,EAAOe,UAEzBf,EAAOO,UACTC,EAAah/B,YAAcw+B,EAAOO,SAEhCP,EAAOviC,SACT+iC,EAAaQ,aAAe,CAC1BxC,QAAS,SACT4B,YAAaJ,EAAOviC,OAAOra,aAIxBo9C,4CAvD0B1qD,EAAAA,6JADxB4pD,EAA0BzgE,EAAA,CAHtCiG,EAAAA,WAAW,CACVC,WAAY,UAEDu6D,GAAb,GCGAuB,GAAA,WACE,SAAAA,EACUC,EAGEtO,GAHF10D,KAAAgjE,eAAAA,EAGEhjE,KAAA00D,SAAAA,SAGZqO,EAAA7iE,UAAAqrD,MAAA,WAAA,IAAA/jD,EAAAxH,KACE,OAAOA,KAAKgjE,eAAev8B,aAAa96B,KACtC0Q,EAAAA,WAAU,SAACxG,GACT,OAAIA,EACKnK,EAAAA,cAAclE,EAAK04D,QAAQrqD,IAAUlK,KAC1C+U,EAAAA,KAAI,SAAC5a,GAAc,OAAAtG,OAAOc,OAAMQ,MAAbtB,OAAMkD,EAAA,CAAQ,IAAOoD,QAGrCuV,EAAAA,GAAG,SAKN0nD,EAAA7iE,UAAAggE,QAAV,SAAkBrqD,GAChB,IAAKA,IAAYA,EAAQ+b,KACvB,MAAO,GAET,IAAM8iC,EAAW10D,KAAK00D,SAClB10D,KAAK00D,SAASh0C,KAAI,SAACk0C,GAAY,OAAAA,EAAQrJ,MAAM11C,MAC7C,GACJ,OAAAnT,EAAA,CACE2Y,EAAAA,GAAG,CACDmlD,WAAY,oBACZF,QAAS,aAER5L,6CA/BmBtuB,kCACvBn0B,EAAAA,UAAQ,CAAAvN,KACRiM,EAAAA,OAAMC,KAAA,CAAC2jD,8IAJCwO,EAAoBhiE,EAAA,CAHhCiG,EAAAA,WAAW,CACVC,WAAY,SAKTvF,EAAA,EAAAuQ,EAAAA,YACAvQ,EAAA,EAAAiP,EAAAA,OAAO4jD,MAJCwO,GAAb,GC6BAE,GAAA,WAAA,SAAAA,KAAkC,OAArBA,EAAmBliE,EAAA,CA/B/ByH,EAAAA,SAAS,CACRI,UAAW,CACT,CACEE,QAASwrD,GACTvrD,YAAag6D,GACb3oD,OAAO,GAET,CACEtR,QAASwrD,GACTvrD,YAAak3D,GACb7lD,OAAO,GAIT,CACEtR,QAASyrD,GACTxrD,YAAa23D,GACbtmD,OAAO,GAET,CACEtR,QAASyrD,GACTxrD,YAAam4D,GACb9mD,OAAO,GAET,CACEtR,QAASyrD,GACTxrD,YAAay4D,GACbpnD,OAAO,OAIA6oD,GAAb,GC3BAC,GAAA,WAmBE,SAAAA,EACU3lC,EACA/pB,GAFV,IAAAhM,EAAAxH,KACUA,KAAAu9B,cAAAA,EACAv9B,KAAAwT,WAAAA,EApBFxT,KAAAmjE,eAAoCnjE,KAAKu9B,cAAc/qB,MAAM7G,KACnE0F,EAAAA,OAAOxG,SACPiB,EAAAA,KAAI,SAACxM,GAAa,OAACkI,EAAK47D,MAAW9jE,EAAE+jE,OAAM,aAGrCrjE,KAAAsjE,OAEJtjE,KAAKmjE,eAAex3D,KACtB+U,EAAAA,KAAI,SAAC8d,GAAS,OAAAA,EAAK+kC,QAAQr2C,OAAOnlB,MAAM,QACxC2Y,EAAAA,KAAI,SAAC8iD,GAAU,OAAAA,EAAM9iD,KAAI,SAACkR,GAAS,OAAApqB,EAAKgM,WAAWb,iBAAiBif,UAOhD5xB,KAAAojE,MAAQ,GAehC,OAHEF,EAAAhjE,UAAAu9B,SAAA,WACE,OAAOz9B,KAAKsjE,iDAVWvwD,SACHL,EAAAA,cAJA3R,EAAA,CAArBmc,EAAAA,YAAY,sCAjBFgmD,EAAuBniE,EAAA,CALnCqH,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,2WACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bi8C,GAAb,iBCIA,SAAAO,KAAmC,OAAtBA,EAAoB1iE,EAAA,CAfhCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcwR,EAAqB4Z,GAAgBD,IAC7DlrB,UAAW,CACTC,EAAAA,qBAAqB,CACnBwF,cAAe,CACbq1D,wBAAyB,CACvBp1D,UAAW40D,QAKnBz6D,aAAc,CAACy6D,IACfx0D,gBAAiB,CAACw0D,IAClBj6D,QAAS,CAACi6D,OAECO,oBCZX,SAAAE,EAAmBr1D,GAAAtO,KAAAsO,UAAAA,EACrB,gDADgCyE,KADnB4wD,EAAe5iE,EAAA,CAL3BqH,EAAAA,UAAU,CACTC,SAAU,YACVC,SAAA,0ZACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B08C,oBCoBb,SAAAC,KAA2B,OAAdA,EAAY7iE,EAAA,CArBxByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAcwB,GAAmB1B,IACzDlrB,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbw1D,gCAAiC,CAC/Bv1D,UAAWq1D,IAEbA,gBAAiB,CACfr1D,UAAWq1D,IAEbG,sBAAuB,CACrBx1D,UAAWq1D,QAKnBl7D,aAAc,CAACk7D,IACfj1D,gBAAiB,CAACi1D,IAClB16D,QAAS,CAAC06D,OAECC,oBCnBX,SAAAG,EAAmBz1D,GAAAtO,KAAAsO,UAAAA,EACrB,gDADgCyE,KADnBgxD,EAAahjE,EAAA,CALzBqH,EAAAA,UAAU,CACTC,SAAU,UACVC,SAAA,kKACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B88C,oBCWb,SAAAC,KAAyB,OAAZA,EAAUjjE,EAAA,CAbtByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAcwB,IACtC5sB,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb41D,iBAAkB,CAAE31D,UAAWy1D,QAIrCt7D,aAAc,CAACs7D,IACf96D,QAAS,CAAC86D,IACVr1D,gBAAiB,CAACq1D,OAEPC,oBCVX,SAAAE,EAAmB51D,GAAAtO,KAAAsO,UAAAA,EACrB,gDADgCyE,KADnBmxD,EAAkBnjE,EAAA,CAL9BqH,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,+EACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bi9C,oBCcb,SAAAC,KAAiC,OAApBA,EAAkBpjE,EAAA,CAlB9ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVC,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb+1D,sBAAuB,CACrB91D,UAAW41D,IAEbG,yBAA0B,CACxB/1D,UAAW41D,QAKnBz7D,aAAc,CAACy7D,IACfj7D,QAAS,CAACi7D,IACVx1D,gBAAiB,CAACw1D,OAEPC,oBCiCX,SAAAG,EACS/mC,EACC/pB,EACA1O,GAHV,IAAA0C,EAAAxH,KACSA,KAAAu9B,cAAAA,EACCv9B,KAAAwT,WAAAA,EACAxT,KAAA8E,OAAAA,EA5BV9E,KAAAukE,aAAe,EAMfvkE,KAAAwkE,eAAoC,GAyBpCxkE,KAAAmtD,YAAiCntD,KAAKu9B,cAAc/qB,MAAM7G,KACxD84D,EAAAA,wBAAwB,cACxBpoD,EAAAA,WAAU,SAACmiB,GACT,OAAA9yB,EAAAA,cACE8yB,EAAK4uB,WAAWrlD,MAAM,KAAK2Y,KAAI,SAACpS,GAC9B,OAAA9G,EAAKgM,WAAWb,iBAAsBrE,GAAW3C,KAC/CE,EAAAA,uBACA6U,EAAAA,KAAI,SAACwB,GAQH,OAPKA,EAAIxO,WACPwO,EAAG7hB,EAAAA,EAAA,GACE6hB,GAAG,CACNxO,SAAUwO,EAAIwiD,YAIlBrkE,EAAAA,EAAA,GACK6hB,GAAG,CACNmgC,MAAU7jB,EAAKlsB,IAAG,SAAS4P,EAAI5P,kBAuD/C,OA9CEgyD,EAAApkE,UAAAykE,OAAA,SAAOC,GACL5kE,KAAKukE,aAAeK,GAGtBN,EAAApkE,UAAA8K,SAAA,WACE,GAAIhL,KAAK8E,QAAU9E,KAAK8E,OAAO2sB,aAAc,CAC3C,IAAMozC,EACJ7kE,KAAK8E,OAAO2sB,aAAaqzC,SACzB9kE,KAAK8E,OAAO2sB,aAAaqzC,QAAQ7jC,MAE/B4jC,GAAcA,EAAsB,YACtC7kE,KAAKukE,aAAeM,EAAsB,aAKhDP,EAAApkE,UAAAwf,gBAAA,WAAA,IAAAlY,EAAAxH,KAKMA,KAAKkjB,SAAStiB,OAAS,EACzBZ,KAAK+kE,eAAe/kE,KAAKkjB,UAEzBljB,KAAKgsB,aAAehsB,KAAKkjB,SAASsoC,QAAQ/+C,WACxC,SAACu4D,GACC,OAAAx9D,EAAKu9D,eAAeC,OAKpBV,EAAApkE,UAAA6kE,eAAR,SAAuB7hD,GAAvB,IAAA1b,EAAAxH,KACEkjB,EAAStb,SAAQ,SAACq9D,GACZA,EAAKnxD,QAAUmxD,EAAKnxD,OAAOoxD,SAASC,eACtC39D,EAAKg9D,eAAehiE,KAAKyiE,EAAKnxD,OAAOoxD,SAASC,gBAE9C39D,EAAKg9D,eAAehiE,KAAK,UAK/B8hE,EAAApkE,UAAAiN,YAAA,WACMnN,KAAKgsB,cACPhsB,KAAKgsB,aAAa5e,wDA1EE2F,SACFL,EAAAA,kBACH7L,EAAAA,aA1BsB9F,EAAA,CAAxCqkE,EAAAA,aAAalyD,mCAJHoxD,EAA8BvjE,EAAA,CAL1CqH,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAA,4dACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bq9C,oBCPb,SAAAe,KAA0C,OAA7BA,EAA2BtkE,EAAA,CAfvCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcwR,EAAqB+xC,GAAc/9C,EAAAA,YAC3DvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbi3D,yBAA0B,CACxBh3D,UAAWg2D,QAKnB77D,aAAc,CAAC67D,IACf51D,gBAAiB,CAAC41D,IAClBr7D,QAAS,CAACq7D,OAECe,oBCZX,SAAAE,EACYxvB,EACAZ,GADAn1C,KAAA+1C,mBAAAA,EACA/1C,KAAAm1C,wBAAAA,EAuBd,OApBEowB,EAAArlE,UAAAo2C,aAAA,WACE,OAAOt2C,KAAK+1C,mBAAmBO,gBAGjCivB,EAAArlE,UAAAslE,yBAAA,WACE,OAAOxlE,KAAK+1C,mBAAmBkQ,uBAGjCsf,EAAArlE,UAAAu2C,cAAA,WACEz2C,KAAK+1C,mBAAmBU,iBAG1B8uB,EAAArlE,UAAAulE,eAAA,SAAe5uB,GACb72C,KAAK+1C,mBAAmB0vB,eAAe5uB,IAGzC0uB,EAAArlE,UAAAwlE,kBAAA,SAAkBC,EAAmB9uB,GACnC72C,KAAK+1C,mBAAmB2vB,kBAAkBC,EAAW9uB,GACrD72C,KAAKm1C,wBAAwBywB,yEAtBCxtD,EAAAA,0BACKlB,EAAAA,2BAH1BquD,EAA2BxkE,EAAA,CADvCiG,EAAAA,cACYu+D,oBCiBX,SAAAM,EACSroD,EACG9H,EACAqgC,EACAZ,GAHHn1C,KAAAwd,QAAAA,EACGxd,KAAA0V,YAAAA,EACA1V,KAAA+1C,mBAAAA,EACA/1C,KAAAm1C,wBAAAA,EARZn1C,KAAA8lE,oBAAqB,EACrB9lE,KAAA+lE,qBAAsB,EAiHxB,OAvGEF,EAAA3lE,UAAA8K,SAAA,WACEhL,KAAKgmE,WAAahmE,KAAKwd,QAAQ84B,eAC/Bt2C,KAAKimE,uBAAyBjmE,KAAKwd,QAAQgoD,2BAC3CxlE,KAAKwd,QAAQi5B,iBAGfovB,EAAA3lE,UAAAgmE,uBAAA,WACElmE,KAAK+lE,qBAAsB,EAC3B/lE,KAAK8lE,oBAAqB,GAG5BD,EAAA3lE,UAAAimE,wBAAA,SAAwBtvB,GACtB72C,KAAK8lE,oBAAqB,EAC1B9lE,KAAK+lE,qBAAsB,EAC3B/lE,KAAKomE,eAAiBvvB,GAGxBgvB,EAAA3lE,UAAAmmE,iBAAA,SAAiBxvB,GACf72C,KAAK8lE,oBAAqB,EAC1B9lE,KAAKwd,QAAQioD,eAAe5uB,IAG9BgvB,EAAA3lE,UAAAomE,iBAAA,WACEtmE,KAAK8lE,oBAAqB,GAG5BD,EAAA3lE,UAAAqmE,kBAAA,SAAkB1vB,GAChB72C,KAAK+lE,qBAAsB,EAC3B/lE,KAAKwd,QAAQkoD,kBAAkB1lE,KAAKomE,eAAmB,GAAGvvB,IAG5DgvB,EAAA3lE,UAAAsmE,kBAAA,WACExmE,KAAK+lE,qBAAsB,GAG7BF,EAAA3lE,UAAAghD,eAAA,SAAerK,GACb,OAAOnrC,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,uBAC3BphD,KAAK0V,YAAY0rC,UAAU,4BAC3BphD,KAAK0V,YAAY0rC,UAAU,iBAC3BphD,KAAK0V,YAAY0rC,UAAU,eAC3BphD,KAAK0V,YAAY0rC,UAAU,2CAC1Bz1C,KACD+U,EAAAA,KACE,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GACC06D,EAAAz6D,EAAA,GACA06D,EAAA16D,EAAA,GACA26D,EAAA36D,EAAA,GACA46D,EAAA56D,EAAA,GACA66D,EAAA76D,EAAA,GAEIoxC,EAAS,GAETvG,EAAQuG,QAAUvG,EAAQuG,OAAOze,UACnCye,EAASvG,EAAQuG,OAAOze,QAAU,MAGpC,IAAM4jB,EAA6C,GAOnD,OANK1L,EAAQD,gBACX2L,EAAQ//C,KAAK,CAAE2oB,KAAMu7C,EAAkBpnD,MAAO,YAEhDijC,EAAQ//C,KAAK,CAAE2oB,KAAMy7C,EAAUtnD,MAAO,SACtCijC,EAAQ//C,KAAK,CAAE2oB,KAAMw7C,EAAYrnD,MAAO,WAEjC,CACLqgC,SAAU9I,EAAQkG,UAAY,IAAMlG,EAAQmG,SAC5C4C,KAAM,CACJ/I,EAAQoG,MACRpG,EAAQqG,MACRrG,EAAQsG,KAAO,KAAOC,EAASvG,EAAQyG,QAAQ3e,QAC/CkY,EAAQ0G,WACR1G,EAAQgJ,OAEV0C,QAASA,EACTC,OAAQ3L,EAAQD,eAAiB,KAAK6vB,EAAgB,GACtDK,UAAWD,QAOrBhB,EAAA3lE,UAAA6mE,oBAAA,SAAoBpB,GAClB3lE,KAAK+1C,mBAAmBgxB,oBAAoBpB,GAC5C3lE,KAAKm1C,wBAAwBywB,gCAG/BC,EAAA3lE,UAAA8mE,cAAA,SAAcrB,GACZ3lE,KAAK+1C,mBAAmBkxB,kBAAkBtB,GAC1C3lE,KAAKm1C,wBAAwBywB,gCAG/BC,EAAA3lE,UAAAgnE,QAAA,SAAQvB,GACF3lE,KAAKmuB,WAAaw3C,EACpB3lE,KAAKmuB,SAAWw3C,EAEhB3lE,KAAKgnE,cAAcrB,IAIvBE,EAAA3lE,UAAAkuB,WAAA,WACEpuB,KAAKmuB,SAAW,+CA3GAo3C,UACOhuD,EAAAA,0BACOa,EAAAA,0BACKlB,EAAAA,2BAd1B2uD,EAAoB9kE,EAAA,CAJhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,yjFAEWu9D,oBC8Bb,SAAAsB,KAAgC,OAAnBA,EAAiBpmE,EAAA,CA/B7ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAmmB,GACA82B,GACAvqB,GACAltB,EAAAA,YAEF1F,aAAc,CAACo9D,IACf58D,QAAS,CAAC48D,IACVj9D,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb+4D,4BAA6B,CAC3B94D,UAAWu3D,GACXj9D,UAAW,CACT,CACEE,QAASy8D,GACTrmC,SAAUqmC,GACVl8C,KAAM,CAACjR,EAAAA,sBAGXvI,OAAQ,CAACyoD,EAAAA,eAIflgD,EAAAA,mBACAmtD,IAEF72D,gBAAiB,CAACm3D,OAEPsB,oBCdX,SAAAE,EACY/8D,EACFqR,EACArB,EACAuB,EACArB,EACA8sD,GALEtnE,KAAAsK,aAAAA,EACFtK,KAAA2b,YAAAA,EACA3b,KAAAsa,YAAAA,EACAta,KAAA6b,qBAAAA,EACA7b,KAAAwa,eAAAA,EACAxa,KAAAsnE,mBAAAA,EAZVtnE,KAAA2K,UAAYvK,EAAAA,UAEJJ,KAAAgsB,aAAe,IAAIvhB,EAAAA,aAuE7B,OA1DE48D,EAAAnnE,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKunE,WAAavnE,KAAKsa,YAAYI,eACnC1a,KAAK2b,YAAY6rD,8BACjBxnE,KAAKgsB,aAAavgB,IAChBzL,KAAK2b,YACF8rD,6BACAh7D,WAAU,SAAC8+B,GAAY,OAAA/jC,EAAKgkC,UAAUD,OAG3CvrC,KAAKgsB,aAAavgB,IAChBzL,KAAK2b,YACF+rD,2BACAj7D,WAAU,SAAChK,GAAU,OAAA+E,EAAKkkC,QAAQjpC,OAEvCzC,KAAK0gD,WAAa1gD,KAAK2b,YAAYgsD,8BAGrCN,EAAAnnE,UAAAsrC,UAAA,SAAUD,GAAV,IAAA/jC,EAAAxH,KACMurC,IACFvrC,KAAK0nC,eACL1nC,KAAKsnE,mBACFlmB,UAAU,0CACVz1C,KAAKg+C,EAAAA,SACLl9C,WAAU,SAACmzC,GACVp4C,EAAKqU,qBAAqBpQ,IACxBm0C,EACApjC,EAAAA,kBAAkBm0C,0BAGxB3wD,KAAKwa,eAAeQ,GAAG,CAAEC,QAAS,WAItCosD,EAAAnnE,UAAAwrC,QAAA,SAAQjpC,GAAR,IAAA+E,EAAAxH,KACMyC,IACFzC,KAAK0nC,eACL1nC,KAAKsnE,mBACFlmB,UAAU,qCACVz1C,KAAKg+C,EAAAA,SACLl9C,WAAU,SAACmzC,GACVp4C,EAAKqU,qBAAqBpQ,IAAIm0C,EAAMpjC,EAAAA,kBAAkBC,qBAK9D4qD,EAAAnnE,UAAAwnC,aAAA,SAAa39B,GACX/J,KAAKsK,aAAaR,mBAAmBC,IAGvCs9D,EAAAnnE,UAAA0nE,aAAA,WACE5nE,KAAK2b,YAAYzC,UAGnBmuD,EAAAnnE,UAAAiN,YAAA,WACMnN,KAAKgsB,cACPhsB,KAAKgsB,aAAa5e,wDA/DI/D,SACH8O,EAAAA,mBACApB,EAAAA,mBACSO,EAAAA,4BACNS,EAAAA,sBACIR,EAAAA,sBAbnB8vD,EAA0BtmE,EAAA,CALtCqH,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,yvCACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BogD,oBCbX,SAAAQ,EAAoBv9D,GAAAtK,KAAAsK,aAAAA,EAOtB,OALEu9D,EAAA3nE,UAAA8oC,UAAA,WACEhpC,KAAK6J,MAAQ7J,KAAKsK,aAAad,KAAK69D,GAA4B,CAC9Dz5D,UAAU,IACTw7B,4DAL6B//B,KAFvBw+D,EAAqB9mE,EAAA,CALjCqH,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,6dACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B4gD,oBC4Bb,SAAAC,KAAiC,OAApBA,EAAkB/mE,EAAA,CAvB9ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAC,EAAAA,UACA9lB,EAAAA,WACA5F,EACA8yB,IAEFzyB,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbw5D,sBAAuB,CACrBv5D,UAAWu5D,GACXh4D,OAAQ,CAACyoD,EAAAA,gBAKjB7vD,aAAc,CAACo/D,GAAuBR,IACtCp+D,QAAS,CAAC4+D,GAAuBR,IACjC34D,gBAAiB,CAACm5D,GAAuBR,OAE9BS,oBC3BX,SAAAC,EACU18C,EACA1P,EACAnB,GAFAxa,KAAAqrB,GAAAA,EACArrB,KAAA2b,YAAAA,EACA3b,KAAAwa,eAAAA,EAsBZ,OAnBEutD,EAAA7nE,UAAA8K,SAAA,WACEhL,KAAKgoE,mBAAqBhoE,KAAKqrB,GAAGvM,MAAM,CACtCmpD,UAAW,CACT,GACA,CAACx8C,EAAAA,WAAWC,SAAUuY,GAAqBC,oBAKjD6jC,EAAA7nE,UAAAgoE,2BAAA,WACMloE,KAAKgoE,mBAAmBp8C,OAC1B5rB,KAAK2b,YAAYusD,2BACfloE,KAAKgoE,mBAAmB7lE,MAAM8lE,WAEhCjoE,KAAKwa,eAAeQ,GAAG,CAAEC,QAAS,WAElCjb,KAAKgoE,mBAAmBn8C,6DArBdC,EAAAA,mBACS3T,EAAAA,mBACGJ,EAAAA,kBANfgwD,EAAuBhnE,EAAA,CAJnCqH,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,y3BAEWy/D,oBC6Bb,SAAAI,KAAmC,OAAtBA,EAAoBpnE,EAAA,CAvBhCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAusB,EAAAA,oBACAlB,EAAAA,aACAC,EAAAA,UACA9lB,EAAAA,WACAkyB,IAEFz3B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb05D,wBAAyB,CACvBz5D,UAAWy5D,GACXl4D,OAAQ,CAACu4D,EAAAA,mBAKjB3/D,aAAc,CAACs/D,IACf9+D,QAAS,CAAC8+D,IACVr5D,gBAAiB,CAACq5D,OAEPI,oBCzBb,SAAAE,IAMwBroE,KAAAsoE,OAAS,MACjC,OANWvnE,EAAA,CAARoH,EAAAA,yCACQpH,EAAA,CAARoH,EAAAA,uCACQpH,EAAA,CAARoH,EAAAA,yCACQpH,EAAA,CAARoH,EAAAA,4CAEqBpH,EAAA,CAArBmc,EAAAA,YAAY,uCANFmrD,EAA0BtnE,EAAA,CALtCqH,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,ozBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BohD,oBCDb,SAAAE,KAAsC,OAAzBA,EAAuBxnE,EAAA,CALnCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAcC,EAAAA,UAAW9lB,EAAAA,YACjD1F,aAAc,CAAC4/D,IACfp/D,QAAS,CAACo/D,OAECE,MCFb,SAASC,GAAiBh0C,GACxB,IAAIi0C,EAAI,EAGR,OAFAjpE,OAAOs3C,KAAKtiB,EAAQryB,OAAOyF,SAAQ,SAAC1G,GAAQ,OAACunE,GAAKj0C,EAAQryB,MAAMjB,MAEzDunE,EAAI,EAAI,KAAO,CAAE/8C,UAAU,I3BbxBs0C,GAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KACxBA,GAAA,OAAA,GAAA,SACAA,GAAAA,GAAA,OAAA,GAAA,S2BeF,ICRY0I,GDQZC,GAAA,WAIE,SAAAA,EAAsBhnC,GAAA3hC,KAAA2hC,oBAAAA,EAwGxB,OA9FEgnC,EAAAzoE,UAAA0oE,kBAAA,WAAA,IAAAphE,EAAAxH,KACE,OAAOA,KAAK6oE,UAAUl9D,KACpB0Q,EAAAA,WAAU,SAAC6qB,GACT,OAAO1/B,EAAK8mC,aAAa3iC,KACvB+U,EAAAA,KAAI,SAACuf,GACH,OAAAA,EAAQ5uB,QACN,SAACwyB,GAAU,OAAAr8B,EAAK+/B,eAAeL,EAAMrD,GAAO1hC,MAAQ,cAahEwmE,EAAAzoE,UAAA4oE,SAAA,WACE,OAAO9oE,KAAK2hC,oBAAoBF,mBAMlCknC,EAAAzoE,UAAA2oE,QAAA,WAAA,IAAArhE,EAAAxH,KACE,OAAOA,KAAK8oE,WAAWn9D,KACrBG,EAAAA,KAAI,SAAC82B,GACEp7B,EAAK0/B,MAAQ1/B,EAAK0/B,KAAKz0B,IAAI,aAAatQ,QAAUygC,EAAMhR,MAC3DpqB,EAAKuhE,UAAUnmC,MAGnBliB,EAAAA,KAAI,WAAM,OAAAlZ,EAAK0/B,UAIXyhC,EAAAzoE,UAAA6oE,UAAR,SAAkBnmC,GAAlB,IAAAp7B,EAAAxH,KACEA,KAAKknC,KAAO,IAAIC,EAAAA,UAAU,IAC1BnnC,KAAKknC,KAAKa,WAAW,YAAa,IAAIF,EAAAA,YAAYjF,EAAMhR,OAExD,IAAMo3C,EAAa,IAAI7hC,EAAAA,UAAU,GAAI,CAAE8hC,WAAY,CAACT,MACpDxoE,KAAKknC,KAAKa,WAAW,UAAWihC,IAE/BpmC,EAAM3C,SAAW,IAAIr4B,SAAQ,SAACi8B,GAC7B,IAAM3iC,EAAM2iC,EAAMG,YAAY9e,WAC9B8jD,EAAWjhC,WACT7mC,EACA,IAAI2mC,EAAAA,YAAY,EAAG,CACjBohC,WAAY,CACVx9C,EAAAA,WAAW0I,IAAI,GACf1I,EAAAA,WAAWuJ,IAAIxtB,EAAK0hE,oBAAoBrlC,YAOxC8kC,EAAAzoE,UAAAqnC,eAAV,SAAyBL,EAAiBrD,GACxC,OAAoBqD,EAAKz0B,IAAI,WAAWA,IAAIoxB,EAAMG,YAAY9e,aAOhEyjD,EAAAzoE,UAAAipE,gBAAA,SAAgBtlC,GACd,IAAMulC,EAAkBppE,KAAKunC,eAAevnC,KAAKknC,KAAMrD,GAAO1hC,MACxDknE,EAAe7pE,OAAOc,OAAO,GAAIujC,EAAMylC,WAY7C,OAXAD,EAAalnE,MACXogB,KAAKC,MAAMqhB,EAAMylC,UAAUnnE,MAAQinE,EAAkB,KAAO,IAE9DC,EAAah5B,eAAiBk5B,EAAAA,eAC5BF,EAAalnE,MAEb,KACAqnE,EAAAA,kBAAkBH,EAAajI,YAAa,UAC5CiI,EAAajI,aAGRiI,GAGTV,EAAAzoE,UAAAgpE,oBAAA,SAAoBrlC,GAClB,OACG7jC,KAAKypE,iBACF5lC,EAAM6lC,oBACN7lC,EAAM8lC,qBAAuB9lC,EAAMmD,UAI3C2hC,EAAAzoE,UAAAupE,eAAA,WACE,OAAOzpE,KAAK4pE,YAAc5J,EAAAA,eAAe6J,iDAtGAjpC,MAJvB+nC,EAAiB5nE,EAAA,CADtCiG,EAAAA,cACqB2hE,GAAtB,iBEAE,SAAAmB,EAAsBC,GAAA/pE,KAAA+pE,kBAAAA,EAJb/pE,KAAAgqE,gBAAiB,EAE1BhqE,KAAAiqE,MAA+BjqE,KAAK+pE,kBAAkBlB,UA+BxD,OA3BEiB,EAAA5pE,UAAAy0B,WAAA,SAAWuS,EAAiBrD,GAC1B,IAAMrP,EACJ0S,EAAKz0B,IAAI,WAAWA,IAAIoxB,EAAMG,YAAY9e,YAK5C,OAHIllB,KAAKgqE,gBACPx1C,EAAQwY,UAEHxY,GAGTs1C,EAAA5pE,UAAAgqE,OAAA,SAAOhjC,GAAP,IAAA1/B,EAAAxH,KACEA,KAAKigC,QAAQr4B,SAAQ,SAACi8B,GACpB,OAAAr8B,EAAKmtB,WAAWuS,EAAMrD,GAAOtW,SAAS/lB,EAAK0hE,oBAAoBrlC,QAInEimC,EAAA5pE,UAAAiqE,aAAA,SAAatmC,GACX,OAAO7jC,KAAK+pE,kBAAkBZ,gBAAgBtlC,IAGhDimC,EAAA5pE,UAAAgpE,oBAAA,SAAoBrlC,GAClB,OAAO7jC,KAAK+pE,kBAAkBb,oBAAoBrlC,IAGpDimC,EAAA5pE,UAAAupE,eAAA,WACE,OAAOzpE,KAAK+pE,kBAAkBN,2DA3BSd,MALhC5nE,EAAA,CAARoH,EAAAA,uCACQpH,EAAA,CAARoH,EAAAA,8CAFU2hE,EAA4B/oE,EAAA,CALxCqH,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,oyJACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B6iD,oBCSb,SAAAM,KAAoC,OAAvBA,EAAqBrpE,EAAA,CAbjCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAusB,EAAAA,oBACA/mB,EAAAA,WACA2lB,GACAmB,GACA7mB,EAAAA,sBAEF3F,aAAc,CAACqhE,IACf7gE,QAAS,CAAC6gE,IACVp7D,gBAAiB,CAACo7D,OAEPM,oBCGX,SAAAC,EAAsBN,GAAtB,IAAAviE,EAAAxH,KAAsBA,KAAA+pE,kBAAAA,EARtB/pE,KAAAiqE,MAAQjqE,KAAK+pE,kBACVlB,UACAl9D,KAAKG,EAAAA,KAAI,SAACo7B,GAAS,OAAC1/B,EAAK05B,UAAYgG,EAAK/kC,MAAM++B,cAEnDlhC,KAAAquC,SAEIruC,KAAK+pE,kBAAkBnB,oBAQ7B,OAJEyB,EAAAnqE,UAAAoqE,OAAA,SAAOpjC,GACLA,EAAK8F,UACLhtC,KAAK+pE,kBAAkBQ,iDAJgB5B,MAX9B0B,EAAgCtpE,EAAA,CAL5CqH,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,gmBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BojD,qBCSX,SAAAG,EACY7oC,EACAd,EACA3qB,EACA2F,GAJZ,IAAArU,EAME2B,EAAAtI,KAAAb,KAAM2hC,IAAoB3hC,YALhBwH,EAAAm6B,oBAAAA,EACAn6B,EAAAq5B,iBAAAA,EACAr5B,EAAA0O,QAAAA,EACA1O,EAAAqU,qBAAAA,EANZrU,EAAAoiE,UAAY5J,EAAAA,eAAe6J,gBADiB/pE,EAAA0qE,EAAArhE,GAc5CqhE,EAAAtqE,UAAAouC,WAAA,WACE,OAAOtuC,KAAK8oE,WAAWn9D,KACrB0F,EAAAA,QAAO,SAACuxB,GAAU,OAAA/3B,QAAQ+3B,MAC1BliB,EAAAA,KAAI,SAACkiB,GACH,OAAAA,EAAM3C,QAAQ5uB,QACZ,SAACwyB,GAAU,OAAuB,IAAvBA,EAAMG,aAAsBH,EAAM6lC,oBAAsB,UAM3Ec,EAAAtqE,UAAAqqE,KAAA,WAAA,IAAA/iE,EAAAxH,KACQkhC,EAAYlhC,KAAKknC,KAAK/kC,MAAM++B,UAC5BjB,EAAUjgC,KAAKknC,KAAK/kC,MAAM89B,QAC1BwqC,EAA4CjrE,OAAOs3C,KAAK7W,GAC3D5uB,QAAO,SAAC2yB,GAAgB,OAAQ/D,EAAQ+D,GAAe,KACvDtjB,KACC,SAACsjB,GACC,MAAA,CACED,iBAAkB2mC,OAAO1mC,GACzBgD,SAAkB/G,EAAQ+D,OAIlChkC,KAAKknC,KAAKyE,QAEV3rC,KAAK6gC,iBAAiB8pC,YAAYzpC,EAAW,CAC3C0pC,+BAAgCH,IAGlCzqE,KAAK6gC,iBACFgqC,wBACAl/D,KAAKg+C,EAAAA,MAAM9+C,UACX4B,WAAU,WAAM,OAAAjF,EAAKsjE,UAAU5pC,OAG5BspC,EAAAtqE,UAAA4qE,UAAR,SAAkB5pC,GAChBlhC,KAAK6gC,iBAAiBkqC,+BACtB/qE,KAAK6b,qBAAqBpQ,IACxB,CACEvK,IAAK,mDACL4nB,OAAQ,CAAEoY,UAASA,IAErB1kB,EAAAA,kBAAkBm0C,uBAEpB3wD,KAAKkW,QAAQ8E,GAAG,CACdC,QAAS,qDAxDoB2lB,UACHtoB,EAAAA,wBACTP,EAAAA,sBACaT,EAAAA,iPAPvBkzD,EAAwBzpE,EAAA,CAHpCiG,EAAAA,WAAW,CACVC,WAAY,UAEDujE,IAAiC7B,kBCP5C,SAAAqC,EACY90D,EACA6zD,GADA/pE,KAAAkW,QAAAA,EACAlW,KAAA+pE,kBAAAA,SAGZiB,EAAA9qE,UAAA8uC,YAAA,WAAA,IAAAxnC,EAAAxH,KACE,OAAOA,KAAK+pE,kBAAkBlB,UAAUl9D,KACtC+U,EAAAA,KAAI,SAACwmB,GACH,QAAKA,EAAKtb,QAIRpkB,EAAK0O,QAAQ8E,GAAG,CAAEC,QAAS,YACpB,iDAZMlD,EAAAA,sBACUyyD,uJAHpBQ,EAAsBjqE,EAAA,CAHlCiG,EAAAA,WAAW,CACVC,WAAY,UAED+jE,SCYC,CACJ/vD,QAAS,2BA4BnBgwD,GAAA,WAAA,SAAAA,KAA4C,OAA/BA,EAA6BlqE,EAAA,CArCzCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aAAak3C,SAAS,CACpB,CACEvxD,KAAM,KACNq1B,YAAa,CAACwtB,IACdluD,UAAW+gD,GACX7wB,KAAI2sC,MAKRj2C,EAAAA,oBACAk1C,GACA7B,IAEF3/D,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbg8D,iCAAkC,CAChC/7D,UAAW+7D,GACXx6D,OAAQ,CAACyoD,EAAAA,UAAW0S,IACpBpiE,UAAW,CACT,CACEE,QAAS6/D,GACT5/D,YAAayhE,UAOzB/hE,aAAc,CAAC4hE,IACfphE,QAAS,CAACohE,IACV37D,gBAAiB,CAAC27D,OAEPY,GAAb,iBC/BE,SAAAG,EAAsBrB,GAAtB,IAAAviE,EAAAxH,KAAsBA,KAAA+pE,kBAAAA,EANtB/pE,KAAAiqE,MAAQjqE,KAAK+pE,kBACVlB,UACAl9D,KAAKG,EAAAA,KAAI,SAACo7B,GAAS,OAAC1/B,EAAK05B,UAAYgG,EAAK/kC,MAAM++B,cAEnDlhC,KAAAquC,SAAqCruC,KAAK+pE,kBAAkBz7B,aAG9D,gDAD2Cq6B,MAT9ByC,EAAoBrqE,EAAA,CALhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,4jBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BmkD,SCWC,CACJnwD,QAAS,eA2BnBowD,GAAA,WAAA,SAAAA,KAAgC,OAAnBA,EAAiBtqE,EAAA,CApC7ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aAAak3C,SAAS,CACpB,CACEvxD,KAAM,KACNq1B,YAAa,CAACwtB,IACdluD,UAAW+gD,GACX7wB,KAAI8sC,MAKRlB,GACA7B,IAEF3/D,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb+8D,qBAAsB,CACpB98D,UAAW88D,GACXv7D,OAAQ,CAACyoD,EAAAA,WACT1vD,UAAW,CACT,CACEE,QAAS6/D,GACT5/D,YAAayhE,UAOzB/hE,aAAc,CAAC2iE,IACfniE,QAAS,CAACmiE,IACV18D,gBAAiB,CAAC08D,OAEPC,GAAb,iBC3CA,SAAAE,KAAsC,OAAzBA,EAAuBxqE,EAAA,CAHnCyH,EAAAA,SAAS,CACRE,QAAS,CAAC2iE,GAAmBJ,OAElBM,qBCcX,SAAAC,EACY7pC,EACA8pC,EACAv1D,EACA2F,GAJZ,IAAArU,EAME2B,EAAAtI,KAAAb,KAAM2hC,IAAoB3hC,YALhBwH,EAAAm6B,oBAAAA,EACAn6B,EAAAikE,qBAAAA,EACAjkE,EAAA0O,QAAAA,EACA1O,EAAAqU,qBAAAA,EANZrU,EAAAoiE,UAAY5J,EAAAA,eAAe0L,gBADW5rE,EAAA0rE,EAAAriE,GAYtCqiE,EAAAtrE,UAAAouC,WAAA,WACE,OAAOtuC,KAAK8oE,WAAWn9D,KACrB0F,EAAAA,QAAO,SAACuxB,GAAU,QAAEA,EAAM3C,WAC1Bvf,EAAAA,KAAI,SAACkiB,GACH,OAAAA,EAAM3C,QAAQ5uB,QACZ,SAACwyB,GAAU,OAAuB,IAAvBA,EAAMG,aAAsBH,EAAM8lC,mBAAqB,UAM1E6B,EAAAtrE,UAAAqqE,KAAA,WAAA,IAAA/iE,EAAAxH,KACQkhC,EAAYlhC,KAAKknC,KAAK/kC,MAAM++B,UAC5BjB,EAAUjgC,KAAKknC,KAAK/kC,MAAM89B,QAC1BwqC,EAA4CjrE,OAAOs3C,KAAK7W,GAC3D5uB,QAAO,SAAC2yB,GAAgB,OAAQ/D,EAAQ+D,GAAe,KACvDtjB,KACC,SAACsjB,GACC,MAAA,CACED,iBAAkB2mC,OAAO1mC,GACzBgD,SAAkB/G,EAAQ+D,OAIlChkC,KAAKknC,KAAKyE,QAEV3rC,KAAKyrE,qBAAqBE,yBAAyB,CACjDzqC,UAASA,EACT0qC,yBAA0BnB,IAG5BzqE,KAAKyrE,qBACFI,0BACAlgE,KAAKg+C,EAAAA,MAAM9+C,UACX4B,WAAU,WAAM,OAAAjF,EAAKsjE,gBAGlBU,EAAAtrE,UAAA4qE,UAAR,WAAA,IAAAtjE,EAAAxH,KACEA,KAAKyrE,qBACFK,wBACAngE,KAAKg+C,EAAAA,OAAM,SAACtoD,GAAM,QAAEA,MACpBoL,WAAU,SAACs/D,GACV,IAAMC,EAAMD,EAAcC,IAC1BxkE,EAAKqU,qBAAqBpQ,IACxB,CACEvK,IAAK,mDACL4nB,OAAQ,CAAEkjD,IAAGA,IAEfxvD,EAAAA,kBAAkBm0C,uBAEpBnpD,EAAK0O,QAAQ8E,GAAG,CACdC,QAAS,uBACT6N,OAAQ,CAAEkjD,IAAGA,kDA5DYprC,UACCqrC,EAAAA,iCACbl0D,EAAAA,sBACaT,EAAAA,0PAPvBk0D,EAAkBzqE,EAAA,CAH9BiG,EAAAA,WAAW,CACVC,WAAY,UAEDukE,IAA2B7C,kBCPtC,SAAAuD,EACYh2D,EACA6zD,GADA/pE,KAAAkW,QAAAA,EACAlW,KAAA+pE,kBAAAA,SAGZmC,EAAAhsE,UAAA8uC,YAAA,WAAA,IAAAxnC,EAAAxH,KACE,OAAOA,KAAK+pE,kBAAkBlB,UAAUl9D,KACtC+U,EAAAA,KAAI,SAACwmB,GACH,QAAKA,EAAKtb,QAIRpkB,EAAK0O,QAAQ8E,GAAG,CAAEC,QAAS,YACpB,iDAZMlD,EAAAA,sBACUyzD,uJAHpBU,EAAgBnrE,EAAA,CAH5BiG,EAAAA,WAAW,CACVC,WAAY,UAEDilE,oBCaX,SAAAC,EAAsBpC,GAAtB,IAAAviE,EAAAxH,KAAsBA,KAAA+pE,kBAAAA,EARtB/pE,KAAAiqE,MAAQjqE,KAAK+pE,kBACVlB,UACAl9D,KAAKG,EAAAA,KAAI,SAACo7B,GAAS,OAAC1/B,EAAK05B,UAAYgG,EAAK/kC,MAAM++B,cAEnDlhC,KAAAquC,SAEIruC,KAAK+pE,kBAAkBnB,oBAQ7B,OAJEuD,EAAAjsE,UAAAoqE,OAAA,SAAOpjC,GACLA,EAAK8F,UACLhtC,KAAK+pE,kBAAkBQ,iDAJgB5B,MAX9BwD,EAAgCprE,EAAA,CAL5CqH,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,gmBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BklD,SCeC,CACJlxD,QAAS,2BA6BnBmxD,GAAA,WAAA,SAAAA,KAA4C,OAA/BA,EAA6BrrE,EAAA,CAtCzCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aAAak3C,SAAS,CACpB,CACEvxD,KAAM,KACNq1B,YAAa,CAACwtB,IACdluD,UAAW+gD,GACX7wB,KAAI6tC,MAKRjC,GACAj8D,EAAAA,WACA+mB,EAAAA,oBACAqzC,IAEF3/D,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb89D,iCAAkC,CAChC79D,UAAW69D,GACXt8D,OAAQ,CAACyoD,EAAAA,UAAW4T,IACpBtjE,UAAW,CACT,CACEE,QAAS6/D,GACT5/D,YAAayiE,UAOzB/iE,aAAc,CAAC0jE,IACfljE,QAAS,CAACkjE,IACVz9D,gBAAiB,CAACy9D,OAEPC,GAAb,iBCrCE,SAAAE,EAAsBvC,GAAtB,IAAAviE,EAAAxH,KAAsBA,KAAA+pE,kBAAAA,EANtB/pE,KAAAiqE,MAAQjqE,KAAK+pE,kBACVlB,UACAl9D,KAAKG,EAAAA,KAAI,SAACo7B,GAAS,OAAC1/B,EAAK05B,UAAYgG,EAAK/kC,MAAM++B,cAEnDlhC,KAAAquC,SAAqCruC,KAAK+pE,kBAAkBz7B,aAG9D,gDAD2Cq6B,MAT9B2D,EAAoBvrE,EAAA,CALhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,4jBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BqlD,SCSC,CACJrxD,QAAS,eA2BnBsxD,GAAA,WAAA,SAAAA,KAAgC,OAAnBA,EAAiBxrE,EAAA,CApC7ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aAAak3C,SAAS,CACpB,CACEvxD,KAAM,KACNq1B,YAAa,CAACwtB,IACdluD,UAAW+gD,GACX7wB,KAAIguC,MAKRpC,GACA7B,IAEF3/D,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbi+D,qBAAsB,CACpBh+D,UAAWg+D,GACXz8D,OAAQ,CAACyoD,EAAAA,WACT1vD,UAAW,CACT,CACEE,QAAS6/D,GACT5/D,YAAayiE,UAOzB/iE,aAAc,CAAC6jE,IACfrjE,QAAS,CAACqjE,IACV59D,gBAAiB,CAAC49D,OAEPC,GAAb,iBCzCA,SAAAE,KAAgC,OAAnBA,EAAiB1rE,EAAA,CAH7ByH,EAAAA,SAAS,CACRE,QAAS,CAAC6jE,GAAmBH,OAElBK,oBCKX,SAAAC,EAAoB/qC,GAAA3hC,KAAA2hC,oBAAAA,EAOtB,OAHE+qC,EAAAxsE,UAAA8K,SAAA,WACEhL,KAAK2sE,OAAS3sE,KAAK2hC,oBAAoBF,4DALAb,MAD9B8rC,EAA4B3rE,EAAA,CAJxCqH,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,i7BAEWokE,MCXAE,GAAkB,CAAC,qBAAsB,mBACzCC,GAAkB,CAAC,2BCoB9B,SAAAC,EACYnrC,EACAoF,GADA/mC,KAAA2hC,oBAAAA,EACA3hC,KAAA+mC,iBAAAA,EAGZ/mC,KAAA+hC,kBAAuCC,EAAAA,kBAAkBK,MACzDriC,KAAA2sE,OAA4B3sE,KAAK2hC,oBAAoBF,kBA0CvD,OApCEqrC,EAAA5sE,UAAA8K,SAAA,WACEhL,KAAK4nC,iBAAmB5nC,KAAK+mC,iBAAiBjF,mBAC5C9hC,KAAK+hC,mBAEP/hC,KAAK+sE,QAAU/sE,KAAKgtE,eAAclsE,MAAnBd,KAAI0C,EAAmBkqE,GAAoBC,KAC1D7sE,KAAKitE,WAAajtE,KAAKktE,eAAeN,IACtC5sE,KAAKmtE,QAAUntE,KAAKktE,eAAeL,KAG7BC,EAAA5sE,UAAAgtE,eAAR,SACEE,GAEA,OAAOptE,KAAK2sE,OAAOhhE,KACjB+U,EAAAA,KAAI,SAACkiB,GACH,GAAI/3B,QAAQ+3B,EAAMyqC,cAChB,OAAOzqC,EAAMyqC,aAAah8D,QAAO,SAACi8D,GAChC,OAAAF,EAAkBpnE,SAASsnE,EAAYC,gBAOzCT,EAAA5sE,UAAA8sE,eAAR,eACE,IAAAI,EAAA,GAAAI,EAAA,EAAAA,EAAA7sE,UAAAC,OAAA4sE,IAAAJ,EAAAI,GAAA7sE,UAAA6sE,GAEA,OAAOxtE,KAAK2sE,OAAOhhE,KACjB+U,EAAAA,KAAI,SAACkiB,GACH,GAAI/3B,QAAQ+3B,EAAMyqC,cAChB,OAAOzqC,EAAMyqC,aAAah8D,QACxB,SAACi8D,GAAgB,OAACF,EAAkBpnE,SAASsnE,EAAYC,yDAzClC3sC,UACHc,MAHnBorC,EAAyB/rE,EAAA,CAJrCqH,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,quBAEWwkE,oBCNX,SAAAW,EACS9jE,EACCk3B,GADD7gC,KAAA2J,YAAAA,EACC3J,KAAA6gC,iBAAAA,EAMZ,OAHE4sC,EAAAvtE,UAAAiN,YAAA,WACEnN,KAAK6gC,iBAAiB6sC,qEALFC,EAAAA,sBACMr1D,EAAAA,oBAPjBm1D,EAAuB1sE,EAAA,CAJnCqH,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,igJAEWmlE,oBCwBX,SAAAG,EACU/sC,EACAv2B,GADAtK,KAAA6gC,iBAAAA,EACA7gC,KAAAsK,aAAAA,EAjBVtK,KAAAotE,kBAA8B,CAC5B,UACA,aACA,qBACA,oBACA,cAuCJ,OAxBEQ,EAAA1tE,UAAA8K,SAAA,WACEhL,KAAK6tE,qBAAuB7tE,KAAK6gC,iBAAiBitC,0BAGpDF,EAAA1tE,UAAA6tE,mBAAA,SAAmBT,GAKjB,IAAIpkC,EAJJlpC,KAAK6gC,iBAAiBmtC,wBACpBhuE,KAAKkhC,UACLosC,EAAY17C,MAGd5xB,KAAKmpC,SAAWnpC,KAAKsK,aAAad,KAAKikE,GAAyB,CAC9D7/D,UAAU,EACVC,KAAM,QAGRq7B,EAAgBlpC,KAAKmpC,SAASC,mBAChB6kC,UAAYjuE,KAAK6tE,qBAC/B3kC,EAAcglC,SAAWZ,EAAYa,WACrCjlC,EAAcklC,gBAAkBd,EAAY17C,MAG9Cg8C,EAAA1tE,UAAAiN,YAAA,WACEnN,KAAK6gC,iBAAiB6sC,qEA1BIp1D,EAAAA,wBACJjP,KAPxBtI,EAAA,CADCoH,EAAAA,2CAGDpH,EAAA,CADCoH,EAAAA,yCAZUylE,EAA4B7sE,EAAA,CAJxCqH,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAA,mXAEWslE,oBCLb,SAAAS,IAGEruE,KAAA+hC,kBAAuCC,EAAAA,kBAAkBK,MAU3D,OAREgsC,EAAAnuE,UAAAouE,uBAAA,SAAuBhB,GACrB,IAAMiB,EAAyB,GAK/B,OAJAjB,EAAYrtC,QAAQr4B,SAAQ,SAAC4R,GAC3B+0D,EAAS/rE,KAAKgX,EAAQ4zB,eAGjBmhC,GAVAxtE,EAAA,CAARoH,EAAAA,4CACQpH,EAAA,CAARoH,EAAAA,qCAFUkmE,EAA8BttE,EAAA,CAJ1CqH,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAA,22BAEW+lE,oBCMX,SAAAG,EACU7sC,EACAjsB,GADA1V,KAAA2hC,oBAAAA,EACA3hC,KAAA0V,YAAAA,EA8EZ,OAzEE84D,EAAAtuE,UAAA8K,SAAA,WACEhL,KAAK2sE,OAAS3sE,KAAK2hC,oBAAoBF,mBAGzC+sC,EAAAtuE,UAAAw/C,sBAAA,SAAsB7I,GACpB,OAAOnrC,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,wBAC1Bz1C,KACD+U,EAAAA,KAAI,SAAC3U,GACH,MAAO,CACLs2C,MAFChgD,EAAA0J,EAAA,GAAC,GAGF4zC,SAAa9I,EAAQkG,UAAS,IAAIlG,EAAQmG,SAC1C4C,KAAM,CACJ/I,EAAQoG,MACRpG,EAAQqG,MACLrG,EAAQsG,KAAI,KAAKtG,EAAQyG,QAAQ3e,QAAO,KAAKkY,EAAQ0G,WACxD1G,EAAQgJ,aAOlB2uB,EAAAtuE,UAAAuuE,6BAAA,SAA6BpuB,GAC3B,OAAO30C,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,wBAC1Bz1C,KACD+U,EAAAA,KAAI,SAAC3U,GACH,MAAO,CACLs2C,MAFChgD,EAAA0J,EAAA,GAAC,GAGF4zC,SAAaU,EAAetD,UAAS,IAAIsD,EAAerD,SACxD4C,KAAM,CACJS,EAAepD,MACfoD,EAAenD,MACZmD,EAAelD,KAAI,KAAKkD,EAAe/C,QAAQ3e,QAAO,KAAK0hB,EAAe9C,WAC7E8C,EAAeR,aAOzB2uB,EAAAtuE,UAAAwuE,sBAAA,SAAsBvtB,GACpB,OAAOz1C,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,uBAC3BphD,KAAK0V,YAAY0rC,UAAU,sBAAuB,CAChD7B,MAAO4B,EAAQxE,YACfoC,KAAMoC,EAAQvE,eAEfjxC,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAACo4C,EAAAn4C,EAAA,GAAWq1C,EAAAr1C,EAAA,GACf,MAAO,CACLq2C,MAAO8B,EACPxE,SAAUwB,EAAQ1E,kBAClBmD,KAAM,CAACuB,EAAQ3E,SAASrxB,KAAMg2B,EAAQzE,WAAY2E,SAM1DmtB,EAAAtuE,UAAAyuE,6BAAA,SAA6BC,GAC3B,OAAOljE,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,qCAC1Bz1C,KACD+U,EAAAA,KAAI,SAAC3U,GACH,MAAO,CACLs2C,MAFChgD,EAAA0J,EAAA,GAAC,GAGF4zC,SAAUivB,EAASzjD,KACnBy0B,KAAM,CAACgvB,EAAStrC,4DA1EO1C,UACRrpB,EAAAA,sBAHZi3D,EAA4BztE,EAAA,CAJxCqH,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,kgCAEWkmE,oBCNX,SAAAK,EAAsBltC,GAAA3hC,KAAA2hC,oBAAAA,EAOxB,OAHEktC,EAAA3uE,UAAA8K,SAAA,WACEhL,KAAK2sE,OAAS3sE,KAAK2hC,oBAAoBF,4DALEb,MADhCiuC,EAA0B9tE,EAAA,CAJtCqH,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAA,qQAEWumE,oBCEX,SAAAC,EAAsBntC,GAAA3hC,KAAA2hC,oBAAAA,EAEtB3hC,KAAA2sE,OAA4B3sE,KAAK2hC,oBAAoBF,kBACvD,gDAH6Cb,MADhCkuC,EAA2B/tE,EAAA,CAJvCqH,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAA,siCAEWwmE,MCiBPC,GAAmB,CACvBD,GACApC,GACAI,GACA+B,GACAL,GACAf,GACAG,GACAS,OAiBY,CAAEnT,UAAW,QAASjgD,QAAS,cAAc+zD,GAM7C,CAAE/zD,QAAS,gBAkCzBg0D,GAAA,WAAA,SAAAA,KAAiC,OAApBA,EAAkBluE,EAAA,CAtD9ByH,EAAAA,SAAS,CACRE,QAAS,CACPolC,GACAhf,GACAnmB,EAAAA,aACAwF,EAAAA,WACAC,EAAAA,qBACAq7B,GACAxV,EAAAA,UACAD,EAAAA,aAAak3C,SAAS,CACpB,CACEvxD,KAAM,KACNq1B,YAAa,CAACwtB,IACdluD,UAAW+gD,GACX7wB,KAAI0wC,IAEN,CACEv1D,KAAM,KACNq1B,YAAa,CAACspB,EAAAA,UAAWkE,IACzBluD,UAAW+gD,GACX7wB,KAAIwwC,MAGR3zC,IAEFzyB,UAAW,CACTC,EAAAA,qBAAiD,CAC/CwF,cAAe,CACb8gE,oCAAqC,CACnC7gE,UAAWwgE,IAEbM,qCAAsC,CACpC9gE,UAAWo+D,IAEb2C,kCAAmC,CACjC/gE,UAAWw+D,IAEbwC,mCAAoC,CAClChhE,UAAWugE,IAEbU,qCAAsC,CACpCjhE,UAAWkgE,KAGfh9B,SAAU,CACRg+B,oBAAqB,SAGzB5uC,IAEFn4B,aAAY/F,EAAMqsE,IAClB9lE,QAAOvG,EAAMqsE,IACbrgE,gBAAehM,EAAMqsE,OAEVE,GAAb,iBC5EE,SAAAQ,EACUv5D,EACA2qB,EACAnrB,GAHV,IAAAlO,EAAAxH,KACUA,KAAAkW,QAAAA,EACAlW,KAAA6gC,iBAAAA,EACA7gC,KAAA0V,YAAAA,EAGF1V,KAAA0vE,UAAY,EAGpB1vE,KAAA2vE,QAEI3vE,KAAK6gC,iBAAiB+uC,oBAAoB5vE,KAAK0vE,WAAW/jE,KAC5DG,EAAAA,KAAI,SAACuyD,GACCA,EAAO3oC,aACTluB,EAAKqoE,SAAWxR,EAAO3oC,WAAWlkB,UAKxCxR,KAAA8vE,UAEI9vE,KAAK6gC,iBAAiBkvC,4BAM1B/vE,KAAAmlE,eAAqCnlE,KAAK2vE,QAAQhkE,KAChD+U,EAAAA,KAAI,SAACkiB,GAAU,OAAAA,EAAMlN,WAAWs6C,gBAChC3+D,EAAAA,QAAO,SAAC2+D,GAAiB,YAAiBr7D,IAAjBq7D,KACzBpkE,EAAAA,KAAK,IAoDT,OAjDE6jE,EAAAvvE,UAAAiN,YAAA,WACEnN,KAAK6gC,iBAAiBovC,kBAGxBR,EAAAvvE,UAAAgwE,eAAA,SAAel1C,GACb,IAAM1b,EAAmD,CACvD0b,SAAQA,EACRhB,YAAa,GAEfh6B,KAAK6vE,SAAW70C,EAChBh7B,KAAKmwE,YAAY7wD,IAGnBmwD,EAAAvvE,UAAAu6B,WAAA,SAAWC,GACT,IAAMpb,EAAmD,CACvD0b,SAAUh7B,KAAK6vE,SACf71C,YAAaU,GAEf16B,KAAKmwE,YAAY7wD,IAGnBmwD,EAAAvvE,UAAAkwE,gBAAA,SAAgBxtC,GACd5iC,KAAKkW,QAAQ8E,GAAG,CACdC,QAAS,eACT6N,OAAQ8Z,KAIZ6sC,EAAAvvE,UAAAmwE,cAAA,WACE,OAAO3kE,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,gBAC3BphD,KAAK0V,YAAY0rC,UAAU,yBAC1Bz1C,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GACH,MAAO,CACLukE,OAFEtkE,EAAA,GAGFukE,cAHcvkE,EAAA,SASdyjE,EAAAvvE,UAAAiwE,YAAR,SAAoB7wD,GAClBtf,KAAK6gC,iBAAiB2vC,cACpBxwE,KAAK0vE,UACLpwD,EAAM0a,YACN1a,EAAM0b,oDA9ESjjB,EAAAA,sBACSO,EAAAA,wBACLf,EAAAA,sBAJZk4D,EAAqB1uE,EAAA,CALjCqH,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,guLACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BwoD,SCSC,CAAEx0D,QAAS,UAwBzBw1D,GAAA,WAAA,SAAAA,KAAiC,OAApBA,EAAkB1vE,EAAA,CAhC9ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aAAak3C,SAAS,CACpB,CACEvxD,KAAM,KACNq1B,YAAa,CAACspB,EAAAA,UAAWkE,IACzBluD,UAAW+gD,GACX7wB,KAAIkyC,MAGR18C,EAAAA,aACAmH,EAAAA,YACAD,EAAAA,eACAD,GACAhH,EAAAA,UACA9lB,EAAAA,YAEF1F,aAAc,CAACgnE,IACfxmE,QAAS,CAACwmE,IACV7mE,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbsiE,6BAA8B,CAC5BriE,UAAWmhE,GACX5/D,OAAQ,CAACyoD,EAAAA,gBAKjB5pD,gBAAiB,CAAC+gE,OAEPgB,GAAb,iBClCE,SAAAG,EACYp2D,EACAixD,EACA5vD,GAFA7b,KAAAwa,eAAAA,EACAxa,KAAAyrE,qBAAAA,EACAzrE,KAAA6b,qBAAAA,SAGZrc,OAAAiC,eAAImvE,EAAA1wE,UAAA,gBAAa,KAAjB,WACE,OAAOF,KAAKyrE,qBAAqBoF,iEAGnCrxE,OAAAiC,eAAImvE,EAAA1wE,UAAA,mBAAgB,KAApB,WACE,OAAOF,KAAKyrE,qBAAqBqF,iEAGnCF,EAAA1wE,UAAA6wE,iBAAA,WAAA,IAAAvpE,EAAAxH,KACE,OAAO0L,EAAAA,cAAc,CACnB1L,KAAKwa,eAAeumB,iBACpB/gC,KAAKyrE,qBAAqBK,wBAC1B9rE,KAAKyrE,qBAAqBuF,4BACzBrlE,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAACklE,EAAAjlE,EAAA,GAAc+/D,EAAA//D,EAAA,GAAewnB,EAAAxnB,EAAA,GAAe,MAAA,CAChDilE,EAAahwC,MAAMnY,OAAmB,WACtCijD,EACAv4C,MAEFniB,EAAAA,QAAO,SAACtF,OAAC8yD,EAADx8D,EAAA0J,EAAA,GAAC,GAAgB,OAAAlB,QAAQg0D,MACjC/yD,EAAAA,KAAI,SAACC,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC8yD,EAAA7yD,EAAA,GAAY+/D,EAAA//D,EAAA,GAAewnB,EAAAxnB,EAAA,QAEV2I,IAAlBo3D,GAA+BA,EAAcC,MAAQnN,GACrDrrC,GAEDhsB,EAAKikE,qBAAqByF,6BAA6BrS,MAG3Dn+C,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAACC,EAAA,GAAsB,OAAnBA,EAAA,MACTqF,EAAAA,OAAOxG,SACPgB,EAAAA,yBAIJ+kE,EAAA1wE,UAAAixE,mBAAA,WACEnxE,KAAKyrE,qBAAqB2F,iCAG5BR,EAAA1wE,UAAAmxE,oBAAA,SAAoBC,GAClBtxE,KAAKyrE,qBAAqB8F,yBAAyBD,EAAmB,CACpE/D,OAAQ,gBAIZqD,EAAA1wE,UAAAsxE,cAAA,SAAcxF,GACZhsE,KAAKyrE,qBAAqBgG,uCAC1BzxE,KAAK6b,qBAAqBpQ,IACxB,CACEvK,IAAK,8BACL4nB,OAAQ,CAAEkjD,IAAGA,IAEfxvD,EAAAA,kBAAkBm0C,uBAEpB3wD,KAAKwa,eAAeQ,GAAG,CACrBC,QAAS,YAIb21D,EAAA1wE,UAAAwxE,WAAA,WACE1xE,KAAKwa,eAAeQ,GAAG,CAAEC,QAAS,UAAY,KAAM,CAClDgmB,MAAO,CACL0wC,UAAW,+CAlEW55D,EAAAA,sBACMk0D,EAAAA,iCACA30D,EAAAA,wOAJvBs5D,EAAoB7vE,EAAA,CAHhCiG,EAAAA,WAAW,CACVC,WAAY,UAED2pE,oBCGX,SAAAgB,EAAsBnG,GAAtB,IAAAjkE,EAAAxH,KAAsBA,KAAAyrE,qBAAAA,EAKtBzrE,KAAA6xE,eAEI7xE,KAAKyrE,qBACNsF,mBACAplE,KAAKG,EAAAA,KAAI,SAACigE,GAAkB,OAACvkE,EAAKwkE,IAAMD,EAAcC,QAEzDhsE,KAAA8xE,cAAgB9xE,KAAKyrE,qBAAqBqG,cAyB5C,OAvBEF,EAAA1xE,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKgsB,aAAehsB,KAAKyrE,qBAAqBsG,iBAAiBtlE,WAC7D,SAAC8+B,GACKA,GACF/jC,EAAKikE,qBAAqB+F,cAAchqE,EAAKwkE,SAMrD4F,EAAA1xE,UAAA8xE,aAAA,SAAaV,GACXtxE,KAAKyrE,qBAAqB4F,oBAAoBC,IAGhDM,EAAA1xE,UAAAs7C,KAAA,WACEx7C,KAAKyrE,qBAAqBiG,cAG5BE,EAAA1xE,UAAAiN,YAAA,WACMnN,KAAKgsB,cACPhsB,KAAKgsB,aAAa5e,wDAjCsBwjE,MADjCgB,EAA8B7wE,EAAA,CAL1CqH,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAA,8+CACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B2qD,oBCLX,SAAAK,EAAsBxG,GAAAzrE,KAAAyrE,qBAAAA,EAEtBzrE,KAAA6xE,eAEI7xE,KAAKyrE,qBAAqBsF,mBAChC,gDAL8CH,MADjCqB,EAA2BlxE,EAAA,CALvCqH,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAA,krHACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BgrD,oBCCX,SAAAC,EAAsBzG,GAAAzrE,KAAAyrE,qBAAAA,EAEtBzrE,KAAA6xE,eAEI7xE,KAAKyrE,qBAAqBsF,mBAKhC,OAHEmB,EAAAhyE,UAAAiN,YAAA,WACEnN,KAAKyrE,qBAAqB0F,+DAPgBP,MADjCsB,EAA4BnxE,EAAA,CALxCqH,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAA,2wCACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BirD,MCQP9kB,GAAa,CACjBwkB,GACAK,GACAC,OAWY,CAAEj3D,QAAS,wBA4BzBk3D,GAAA,WAAA,SAAAA,KAAwC,OAA3BA,EAAyBpxE,EAAA,CApCrCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aAAak3C,SAAS,CACpB,CACEvxD,KAAM,KACNq1B,YAAa,CAACspB,EAAAA,UAAWkE,IACzBluD,UAAW+gD,GACX7wB,KAAI4zC,MAGRp+C,EAAAA,aACAC,EAAAA,UACA9lB,EAAAA,WACA2lB,GACA1lB,EAAAA,sBAEFxF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbujE,+BAAgC,CAC9BtjE,UAAWsjE,IAEbK,4BAA6B,CAC3B3jE,UAAW2jE,IAEbC,6BAA8B,CAC5B5jE,UAAW4jE,QAKnBzpE,aAAY/F,EAAM0qD,IAClBnkD,QAAOvG,EAAM0qD,IACb1+C,gBAAehM,EAAM0qD,OAEV+kB,GAAb,iBC7CE,SAAAE,EACU5G,EACA/1D,GAFV,IAAAlO,EAAAxH,KACUA,KAAAyrE,qBAAAA,EACAzrE,KAAA0V,YAAAA,EAGF1V,KAAA0vE,UAAY,EAGpB1vE,KAAAsyE,gBAEItyE,KAAKyrE,qBAAqB8G,0BAA0BvyE,KAAK0vE,WAAW/jE,KACtEG,EAAAA,KAAI,SAAC0mE,GACCA,EAAY98C,aACdluB,EAAKqoE,SAAW2C,EAAY98C,WAAWlkB,UAS7CxR,KAAAmlE,eAAqCnlE,KAAKsyE,gBAAgB3mE,KACxD+U,EAAAA,KAAI,SAAC+xD,GAAmB,OAAAA,EAAe/8C,WAAWs6C,gBAClD3+D,EAAAA,QAAO,SAAC2+D,GAAiB,YAAiBr7D,IAAjBq7D,KACzBpkE,EAAAA,KAAK,IAgDT,OA7CEymE,EAAAnyE,UAAAiN,YAAA,WACEnN,KAAKyrE,qBAAqBiH,+BAG5BL,EAAAnyE,UAAAgwE,eAAA,SAAel1C,GACb,IAAM1b,EAAmD,CACvD0b,SAAQA,EACRhB,YAAa,GAEfh6B,KAAK6vE,SAAW70C,EAChBh7B,KAAK2yE,oBAAoBrzD,IAG3B+yD,EAAAnyE,UAAAu6B,WAAA,SAAWC,GACT,IAAMpb,EAAmD,CACvD0b,SAAUh7B,KAAK6vE,SACf71C,YAAaU,GAEf16B,KAAK2yE,oBAAoBrzD,IAG3B+yD,EAAAnyE,UAAAmwE,cAAA,WACE,OAAO3kE,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,gBAC3BphD,KAAK0V,YAAY0rC,UAAU,iBAC1Bz1C,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GACH,MAAO,CACLukE,OAFEtkE,EAAA,GAGF4mE,MAHc5mE,EAAA,SASdqmE,EAAAnyE,UAAAyyE,oBAAR,SAA4BrzD,GAI1Btf,KAAKyrE,qBAAqBoH,2BACxB7yE,KAAK0vE,UACLpwD,EAAM0a,YACN1a,EAAM0b,oDArEsBixC,EAAAA,iCACT10D,EAAAA,sBAHZ86D,EAA+BtxE,EAAA,CAL3CqH,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,0jJACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BorD,oBCqBb,SAAAS,KAAsC,OAAzBA,EAAuB/xE,EAAA,CAtBnCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAiH,GACAhH,EAAAA,UACA9lB,EAAAA,YAEFvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbgkE,gCAAiC,CAC/B/jE,UAAW+jE,GACXxiE,OAAQ,CAACyoD,EAAAA,gBAKjB7vD,aAAc,CAAC4pE,IACfppE,QAAS,CAACopE,IACV3jE,gBAAiB,CAAC2jE,OAEPS,oBCfb,SAAAC,KAA0B,OAAbA,EAAWhyE,EAAA,CAVvByH,EAAAA,SAAS,CACRE,QAAS,CACP+nE,GACAxB,GACA1D,GACAkB,GACAqG,GACAX,OAGSY,oBCCX,SAAAC,EACUh9B,EACAtgC,GADA1V,KAAAg2C,mBAAAA,EACAh2C,KAAA0V,YAAAA,EALV1V,KAAA2K,UAAYvK,EAAAA,UAyGd,OAjGE4yE,EAAA9yE,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKizE,gBAAkBjzE,KAAKg2C,mBAAmBmB,oBAAoBxrC,KACjEG,EAAAA,KAAI,SAACs0C,GAGDA,EAAex/C,OAAS,IACvBw/C,EAAev6C,MAAK,SAACqtE,GAAkB,OAAAA,EAAcz7B,mBAEtDjwC,EAAK2rE,wBAAwB/yB,EAAe,QAKlDpgD,KAAKmuB,SAAW,KAChBnuB,KAAKqL,SAAWrL,KAAKg2C,mBAAmB2K,2BACxC3gD,KAAKg2C,mBAAmBsB,sBAG1B07B,EAAA9yE,UAAAghD,eAAA,SAAen1C,GAAf,IAAAvE,EAAAxH,KACEy3C,EAAA1rC,EAAA0rC,eACAgF,EAAA1wC,EAAA0wC,kBACAE,EAAA5wC,EAAA4wC,YACAC,EAAA7wC,EAAA6wC,WACAF,EAAA3wC,EAAA2wC,WACAF,EAAAzwC,EAAAywC,SAEA,OAAO9wC,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,4BAC3BphD,KAAK0V,YAAY0rC,UAAU,iBAC3BphD,KAAK0V,YAAY0rC,UAAU,kCAC3BphD,KAAK0V,YAAY0rC,UAAU,sBAAuB,CAChD7B,MAAO5C,EACPoC,KAAMnC,IAER58C,KAAK0V,YAAY0rC,UAAU,sCAC1Bz1C,KACD+U,EAAAA,KACE,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GACCqnE,EAAApnE,EAAA,GACA26D,EAAA36D,EAAA,GACAqnE,EAAArnE,EAAA,GACAq1C,EAAAr1C,EAAA,GACAu1C,EAAAv1C,EAAA,GAEMu2C,EAA6C,GAcnD,OAbK9K,GACH8K,EAAQ//C,KAAK,CAAE2oB,KAAMioD,EAAkB9zD,MAAO,YAEhDijC,EAAQ//C,KAAK,CAAE2oB,KAAMw7C,EAAYrnD,MAAO,SACrB,CACjBkjC,OAAQ/K,EAAiB8J,EAA2B,KACpD5B,SAAUlD,EACVmD,KAAM,CAAClD,EAAY2E,GACnBkB,QAAOA,EACPukB,UAAWuM,EACX/wB,IAAK96C,EAAKy6C,YAAYzF,EAAS5qB,YASzCohD,EAAA9yE,UAAAozE,oBAAA,SAAoBC,GAClBvzE,KAAKg2C,mBAAmBs9B,oBAAoBC,EAAc/mE,IAC1DxM,KAAKmuB,SAAW,MAGlB6kD,EAAA9yE,UAAAgnE,QAAA,SAAQqM,GACNvzE,KAAKmuB,SAAWolD,EAAc/mE,IAGhCwmE,EAAA9yE,UAAAkuB,WAAA,WACEpuB,KAAKmuB,SAAW,MAGlB6kD,EAAA9yE,UAAAizE,wBAAA,SAAwBI,GACtBvzE,KAAKg2C,mBAAmBw9B,0BAA0BD,EAAc/mE,KAGlEwmE,EAAA9yE,UAAA+hD,YAAA,SAAYrwB,GAcV,MAZa,SAATA,EACO5xB,KAAK2K,UAAU7G,KACN,WAAT8tB,GAA8B,wBAATA,EACrB5xB,KAAK2K,UAAU5G,YACN,WAAT6tB,EACA5xB,KAAK2K,UAAU1G,YACN,SAAT2tB,EACA5xB,KAAK2K,UAAU3G,KAEfhE,KAAK2K,UAAUzG,sDAhGEqU,EAAAA,0BACPhB,EAAAA,sBARZy7D,EAAuBjyE,EAAA,CAJnCqH,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,w0CAEW0qE,oBCab,SAAAS,KAAmC,OAAtBA,EAAoB1yE,EAAA,CAhBhCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcmmB,GAAYuM,GAAeltB,EAAAA,YACnDvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbqlE,+BAAgC,CAC9BplE,UAAW0kE,GACXnjE,OAAQ,CAACyoD,EAAAA,gBAKjB7vD,aAAc,CAACuqE,IACf/pE,QAAS,CAAC+pE,IACVtkE,gBAAiB,CAACskE,OAEPS,oBCEX,SAAAE,EACUtoD,EACA7Q,EACAmB,GAFA3b,KAAAqrB,GAAAA,EACArrB,KAAAwa,eAAAA,EACAxa,KAAA2b,YAAAA,EArBV3b,KAAAgsB,aAAe,IAAIvhB,EAAAA,aAEnBzK,KAAA4zE,kBAA+B5zE,KAAKqrB,GAAGvM,MACrC,CACElC,SAAU,CACR,GACA,CAAC6O,EAAAA,WAAWC,SAAUuY,GAAqBK,oBAE7CuvC,WAAY,CAAC,GAAI,CAACpoD,EAAAA,WAAWC,YAE/B,CACEu9C,WAAYhlC,GAAqBU,mBAC/B,WACA,gBAyCR,OA9BEgvC,EAAAzzE,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKgsB,aAAavgB,IAChBzL,KAAKwa,eACFumB,iBACAt0B,WAAU,SAACw0B,GAAU,OAACz5B,EAAKmT,MAAQsmB,EAAMA,MAAM5G,YAAmB,UAGvEr6B,KAAKgsB,aAAavgB,IAChBzL,KAAK2b,YAAYm4D,kBAAkBrnE,WAAU,SAACk/B,GACxCA,GACFnkC,EAAKgT,eAAeQ,GAAG,CAAEC,QAAS,eAM1C04D,EAAAzzE,UAAAu9D,cAAA,WACE,GAAIz9D,KAAK4zE,kBAAkBhoD,MAAO,CAChC,IAAMhP,EAAW5c,KAAK4zE,kBAAkBnhE,IAAI,YAAYtQ,MACxDnC,KAAK2b,YAAY8hD,cAAcz9D,KAAK2a,MAAOiC,QAE3C5c,KAAK4zE,kBAAkB/nD,oBAI3B8nD,EAAAzzE,UAAAiN,YAAA,WACMnN,KAAKgsB,cACPhsB,KAAKgsB,aAAa5e,wDAhCR0e,EAAAA,mBACY/T,EAAAA,sBACHI,EAAAA,eAvBZw7D,EAA0B5yE,EAAA,CAJtCqH,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,yyCAEWqrE,oBC0Bb,SAAAI,KAAkC,OAArBA,EAAmBhzE,EAAA,CAvB/ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAwyB,EAAAA,YACAjG,EAAAA,oBACAlB,EAAAA,aACA7lB,EAAAA,WACAkyB,IAEFz3B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb2lE,uBAAwB,CACtB1lE,UAAWqlE,GACX9jE,OAAQ,CAACu4D,EAAAA,mBAKjB3/D,aAAc,CAACkrE,IACf1qE,QAAS,CAAC0qE,IACVjlE,gBAAiB,CAACilE,OAEPI,oBCPX,SAAAE,EAAoB5oD,GAAArrB,KAAAqrB,GAAAA,EAnBpBrrB,KAAAk0E,UAAY,IAAI7yD,EAAAA,aAMhBrhB,KAAAm0E,YAAc,IAAI9yD,EAAAA,aAElBrhB,KAAAo0E,gBAA6Bp0E,KAAKqrB,GAAGvM,MACnC,CACEqlB,MAAO,CAAC,GAAI,CAAC1Y,EAAAA,WAAWC,SAAUuY,GAAqBC,iBACvDmwC,aAAc,CAAC,GAAI,CAAC5oD,EAAAA,WAAWC,WAC/B9O,SAAU,CAAC,GAAI,CAAC6O,EAAAA,WAAWC,YAE7B,CACEu9C,WAAYhlC,GAAqBc,gBAAgB,QAAS,kBAoBhE,OAdEkvC,EAAA/zE,UAAAyrB,SAAA,WACE,GAAI3rB,KAAKo0E,gBAAgBxoD,MAAO,CAC9B,IAAM0oD,EAASt0E,KAAKo0E,gBAAgB3hE,IAAI,gBAAgBtQ,MAClDya,EAAW5c,KAAKo0E,gBAAgB3hE,IAAI,YAAYtQ,MAEtDnC,KAAKk0E,UAAU5yD,KAAK,CAAEgzD,OAAMA,EAAE13D,SAAQA,SAEtC5c,KAAKo0E,gBAAgBvoD,oBAIzBooD,EAAA/zE,UAAAq0E,SAAA,WACEv0E,KAAKm0E,YAAY7yD,iDAdKwK,EAAAA,eAnBxB/qB,EAAA,CADCwgB,EAAAA,0CAODxgB,EAAA,CADCwgB,EAAAA,4CAPU0yD,EAAwBlzE,EAAA,CAJpCqH,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,02EAEW2rE,oBCOX,SAAAO,EACUh6D,EACAqB,EACAF,EACArB,GAHAta,KAAAwa,eAAAA,EACAxa,KAAA6b,qBAAAA,EACA7b,KAAA2b,YAAAA,EACA3b,KAAAsa,YAAAA,EAGFta,KAAAgsB,aAAe,IAAIvhB,EAAAA,aA6C7B,OAzCE+pE,EAAAt0E,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAK2b,YAAY84D,8BACjBz0E,KAAKgsB,aAAavgB,IAChBzL,KAAK2b,YACF+4D,8BACAjoE,WAAU,SAAC8+B,GAAY,OAAA/jC,EAAKgkC,UAAUD,OAE3CvrC,KAAK0gD,WAAa1gD,KAAK2b,YAAYg5D,+BAGrCH,EAAAt0E,UAAAq0E,SAAA,WACEv0E,KAAKwa,eAAeQ,GAAG,CAAEC,QAAS,UAGpCu5D,EAAAt0E,UAAAyrB,SAAA,SAAS5f,OAAEuoE,EAAAvoE,EAAAuoE,OAAQ13D,EAAA7Q,EAAA6Q,SACjB5c,KAAKs0E,OAASA,EACdt0E,KAAK2b,YAAYi5D,YAAYh4D,EAAU03D,IAGzCE,EAAAt0E,UAAAsrC,UAAA,SAAUD,GACJA,IACFvrC,KAAK6b,qBAAqBpQ,IACxB,CACEvK,IAAK,qCACL4nB,OAAQ,CAAEwrD,OAAQt0E,KAAKs0E,SAEzB93D,EAAAA,kBAAkBm0C,uBAEpB3wD,KAAKsa,YAAYS,SACjB/a,KAAKwa,eAAeQ,GAAG,CAAEC,QAAS,SAAW,KAAM,CACjDgmB,MAAO,CACLqzC,OAAQt0E,KAAKs0E,YAMrBE,EAAAt0E,UAAAiN,YAAA,WACEnN,KAAKgsB,aAAa5e,cAClBpN,KAAK2b,YAAY84D,wEAjDO18D,EAAAA,sBACMT,EAAAA,4BACTa,EAAAA,mBACApB,EAAAA,eALZy9D,EAAoBzzE,EAAA,CAJhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,ggBAEWksE,oBCuBb,SAAAK,KAAgC,OAAnBA,EAAiB9zE,EAAA,CAvB7ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAwyB,EAAAA,YACAjG,EAAAA,oBACAmG,GACAltB,EAAAA,WACAkyB,IAEFz3B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbmmE,qBAAsB,CACpBlmE,UAAWkmE,GACX3kE,OAAQ,CAACyoD,EAAAA,gBAKjB7vD,aAAc,CAACwrE,GAA0BO,IACzCvrE,QAAS,CAACurE,GAAsBP,IAChCvlE,gBAAiB,CAAC8lE,OAEPK,oBCrBX,SAAAC,EAAoBzpD,GAAArrB,KAAAqrB,GAAAA,EALpBrrB,KAAA+0E,UAAY,IAAI1zD,EAAAA,aAGhBrhB,KAAAg1E,UAAY,IAAI3zD,EAAAA,aAqClB,OAjCEyzD,EAAA50E,UAAA8K,SAAA,WACEhL,KAAKi1E,mBAAqBj1E,KAAKqrB,GAAGvM,MAChC,CACEo2D,YAAa,CAAC,GAAI,CAACzpD,EAAAA,WAAWC,WAC9BypD,YAAa,CACX,GACA,CAAC1pD,EAAAA,WAAWC,SAAUuY,GAAqBK,oBAE7C8wC,mBAAoB,CAAC,GAAI,CAAC3pD,EAAAA,WAAWC,YAEvC,CACEu9C,WAAYhlC,GAAqBU,mBAC/B,cACA,yBAMRmwC,EAAA50E,UAAAyrB,SAAA,WACM3rB,KAAKi1E,mBAAmBrpD,MAC1B5rB,KAAK+0E,UAAUzzD,KAAK,CAClB4zD,YAAal1E,KAAKi1E,mBAAmB9yE,MAAM+yE,YAC3CC,YAAan1E,KAAKi1E,mBAAmB9yE,MAAMgzE,cAG7Cn1E,KAAKi1E,mBAAmBppD,oBAI5BipD,EAAA50E,UAAAq0E,SAAA,WACEv0E,KAAKg1E,UAAU1zD,iDAjCOwK,EAAAA,eALxB/qB,EAAA,CADCwgB,EAAAA,0CAIDxgB,EAAA,CADCwgB,EAAAA,0CANUuzD,EAA2B/zE,EAAA,CAJvCqH,EAAAA,UAAU,CACTC,SAAU,0BACVC,SAAA,k8EAEWwsE,oBCUX,SAAAO,EACU76D,EACAmB,EACAE,GAFA7b,KAAAwa,eAAAA,EACAxa,KAAA2b,YAAAA,EACA3b,KAAA6b,qBAAAA,EANF7b,KAAAgsB,aAAe,IAAIvhB,EAAAA,aAgD7B,OAvCE4qE,EAAAn1E,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAK2b,YAAY25D,kCACjBt1E,KAAKqL,SAAWrL,KAAK2b,YAAY45D,iCACjCv1E,KAAKgsB,aAAavgB,IAChBzL,KAAK2b,YACF65D,iCACA/oE,WAAU,SAAC8+B,GAAY,OAAA/jC,EAAKgkC,UAAUD,QAI7C8pC,EAAAn1E,UAAAsrC,UAAA,SAAUD,GACJA,IACFvrC,KAAK6b,qBAAqBpQ,IACxB,CAAEvK,IAAK,4CACPsb,EAAAA,kBAAkBm0C,uBAEpB3wD,KAAKwa,eAAeQ,GAAG,CAAEC,QAAS,WAItCo6D,EAAAn1E,UAAAq0E,SAAA,WACEv0E,KAAKwa,eAAeQ,GAAG,CAAEC,QAAS,UAGpCo6D,EAAAn1E,UAAAyrB,SAAA,SAAS5f,OACPmpE,EAAAnpE,EAAAmpE,YACAC,EAAAppE,EAAAopE,YAKAn1E,KAAK2b,YAAY85D,eAAeP,EAAaC,IAG/CE,EAAAn1E,UAAAiN,YAAA,WACEnN,KAAKgsB,aAAa5e,cAElBpN,KAAK2b,YAAY25D,4EA1COv9D,EAAAA,sBACHI,EAAAA,mBACSb,EAAAA,wBAPrB+9D,EAAuBt0E,EAAA,CAJnCqH,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,+fAEW+sE,oBCwBb,SAAAK,KAAmC,OAAtBA,EAAoB30E,EAAA,CAvBhCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAwyB,EAAAA,YACAjG,EAAAA,oBACAmG,GACAltB,EAAAA,WACAkyB,IAEFz3B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbgnE,wBAAyB,CACvB/mE,UAAW+mE,GACXxlE,OAAQ,CAACyoD,EAAAA,gBAKjB7vD,aAAc,CAAC4sE,GAAyBP,IACxC7rE,QAAS,CAACosE,GAAyBP,IACnCpmE,gBAAiB,CAAC2mE,OAEPK,oBCVX,SAAAC,EAAoBtqD,GAAArrB,KAAAqrB,GAAAA,EAXpBrrB,KAAA+0E,UAAY,IAAI1zD,EAAAA,aAGhBrhB,KAAAg1E,UAAY,IAAI3zD,EAAAA,aAEhBrhB,KAAA41E,kBAAoB51E,KAAKqrB,GAAGvM,MAAM,CAChCimC,UAAW,CAAC,IACZhI,UAAW,CAAC,GAAItxB,EAAAA,WAAWC,UAC3BsxB,SAAU,CAAC,GAAIvxB,EAAAA,WAAWC,YAwB9B,OAnBEiqD,EAAAz1E,UAAA8K,SAAA,WACMhL,KAAKsW,MACPtW,KAAK41E,kBAAkBrwB,WAAWvlD,KAAKsW,OAI3Cq/D,EAAAz1E,UAAAyrB,SAAA,WACM3rB,KAAK41E,kBAAkBhqD,MACzB5rB,KAAK+0E,UAAUzzD,KAAK,CAClBu0D,YAAWx1E,EAAA,GAAOL,KAAK41E,kBAAkBzzE,SAG3CnC,KAAK41E,kBAAkB/pD,oBAI3B8pD,EAAAz1E,UAAAq0E,SAAA,WACEv0E,KAAKg1E,UAAU1zD,iDAnBOwK,EAAAA,eAjBxB/qB,EAAA,CADCoH,EAAAA,oCAIDpH,EAAA,CADCoH,EAAAA,sCAIDpH,EAAA,CADCwgB,EAAAA,0CAIDxgB,EAAA,CADCwgB,EAAAA,0CAVUo0D,EAA0B50E,EAAA,CAJtCqH,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,6tEAEWqtE,oBCeX,SAAAG,EACUt7D,EACAmB,EACAE,GAFA7b,KAAAwa,eAAAA,EACAxa,KAAA2b,YAAAA,EACA3b,KAAA6b,qBAAAA,EATF7b,KAAAgsB,aAAe,IAAIvhB,EAAAA,aAyD7B,OA7CEqrE,EAAA51E,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KAEEA,KAAK2b,YAAYo6D,4CAEjB/1E,KAAKg2E,MAAQh2E,KAAK2b,YAAYlJ,MAC9BzS,KAAKilD,QAAUjlD,KAAK2b,YAAYupC,YAAYv5C,KAC1CG,EAAAA,KAAI,SAACq5C,GACgC,IAA/B3lD,OAAOs3C,KAAKqO,GAAQvkD,QACtB4G,EAAKmU,YAAYypC,iBAIvBplD,KAAKqL,SAAWrL,KAAK2b,YAAYs6D,wCAEjCj2E,KAAKgsB,aAAavgB,IAChBzL,KAAK2b,YACFu6D,wCACAzpE,WAAU,SAAC8+B,GAAY,OAAA/jC,EAAKgkC,UAAUD,QAI7CuqC,EAAA51E,UAAAsrC,UAAA,SAAUD,GACJA,IACFvrC,KAAK6b,qBAAqBpQ,IACxB,CAAEvK,IAAK,0CACPsb,EAAAA,kBAAkBm0C,uBAEpB3wD,KAAKwa,eAAeQ,GAAG,CAAEC,QAAS,WAItC66D,EAAA51E,UAAAq0E,SAAA,WACEv0E,KAAKwa,eAAeQ,GAAG,CAAEC,QAAS,UAGpC66D,EAAA51E,UAAAyrB,SAAA,SAAS5f,OAAE8pE,EAAA9pE,EAAA8pE,YACT71E,KAAK2b,YAAYw6D,sBAAsBN,IAGzCC,EAAA51E,UAAAiN,YAAA,WACEnN,KAAKgsB,aAAa5e,cAGlBpN,KAAK2b,YAAYo6D,sFAhDOh+D,EAAAA,sBACHI,EAAAA,mBACSb,EAAAA,wBAVrBw+D,EAAsB/0E,EAAA,CAJlCqH,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,6mBAEWwtE,oBCqBb,SAAAM,KAAkC,OAArBA,EAAmBr1E,EAAA,CAvB/ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAwyB,EAAAA,YACAjG,EAAAA,oBACAmG,GACAltB,EAAAA,WACAkyB,IAEFz3B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbynE,uBAAwB,CACtBxnE,UAAWwnE,GACXjmE,OAAQ,CAACyoD,EAAAA,gBAKjB7vD,aAAc,CAACqtE,GAAwBH,IACvC1sE,QAAS,CAAC6sE,GAAwBH,IAClCjnE,gBAAiB,CAAConE,OAEPM,oBCdX,SAAAC,EACY77D,EACA9E,GADA1V,KAAAwa,eAAAA,EACAxa,KAAA0V,YAAAA,EALO1V,KAAAs2E,UAAY,aACZt2E,KAAAu2E,qBAAuB,8BAO1CF,EAAAn2E,UAAAs2E,iBAAA,SAAiBzqC,GACf/rC,KAAKwa,eAAeQ,GAClB,CACEC,QAAS,SACT6N,OAAQ,CAAE9I,MAAOhgB,KAAKy2E,iBAAiB1qC,KAEzC,CAAE2qC,WAAY3qC,EAAOC,YAIjBqqC,EAAAn2E,UAAAu2E,iBAAR,SAAyB1qC,GACvB,OAAOA,EAAO4qC,sBACV32E,KAAKs2E,UACLt2E,KAAKs2E,UAAYt2E,KAAKu2E,qBAAuBxqC,EAAOC,UAG1DqqC,EAAAn2E,UAAAmwE,cAAA,WAME,OAAO3kE,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,0BAC3BphD,KAAK0V,YAAY0rC,UAAU,2BAC3BphD,KAAK0V,YAAY0rC,UAAU,wBAC3BphD,KAAK0V,YAAY0rC,UAAU,2BAC1Bz1C,KACD+U,EAAAA,KACE,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAMC,MAAO,CACL6qE,eANF5qE,EAAA,GAOE6qE,gBANF7qE,EAAA,GAOE8qE,aANF9qE,EAAA,GAOE+qE,cANF/qE,EAAA,kDArCoB+L,EAAAA,sBACHR,EAAAA,yLAbd8+D,EAAyBt1E,EAAA,CAHrCiG,EAAAA,WAAW,CACVC,WAAY,UAEDovE,oBCgDX,SAAAW,EACYC,EACAC,GADAl3E,KAAAi3E,cAAAA,EACAj3E,KAAAk3E,0BAAAA,EA1CZl3E,KAAA2K,UAAYvK,EAAAA,UAEJJ,KAAAwK,cAAgB,IAAIC,EAAAA,aAEpBzK,KAAA0vE,UAAY,GACZ1vE,KAAAm3E,YAAc,CACpBP,eAAgB,gBAChBC,gBAAiB,iBACjBC,aAAc,cACdC,cAAe,gBAEjB/2E,KAAAwR,KAAO,iBAEPxR,KAAAo3E,YAAc,CACZ,CACExlD,KAAM,iBACNgyB,UAAU,GAEZ,CACEhyB,KAAM,kBACNgyB,UAAU,GAEZ,CACEhyB,KAAM,eACNgyB,UAAU,GAEZ,CACEhyB,KAAM,gBACNgyB,UAAU,IAmGhB,OAlFEozB,EAAA92E,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKq3E,cAAgBr3E,KAAKi3E,cACvBtsC,mBAAmB3qC,KAAK0vE,WACxB/jE,KACCG,EAAAA,KACE,SAACm/B,GACC,OAACzjC,EAAKkuB,WAAa,CACjBsE,YAAaiR,EAAQvV,WAAWgF,KAChCtN,SAAU6d,EAAQvV,WAAW2D,MAC7BU,WAAYkR,EAAQvV,WAAWqE,WAC/Bi2C,aAAc/kC,EAAQvV,WAAW4hD,WACjC9lE,KAAMhK,EAAKgK,UAIrBxR,KAAKu3E,gBAAkBv3E,KAAKi3E,cAAcO,4BAC1Cx3E,KAAKy3E,2BAA6B/rE,EAAAA,cAAc,CAC9C1L,KAAKi3E,cAAcS,0CACnB13E,KAAKi3E,cAAcU,8CAClBhsE,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC6rE,EAAA5rE,EAAA,GAAa6rE,EAAA7rE,EAAA,GAAmB,OAAA4rE,GAAeC,MAEvD73E,KAAK83E,WAAa93E,KAAKk3E,0BAA0B7G,gBAEjDrwE,KAAKwK,cACFiB,IACCzL,KAAKi3E,cACFc,wCACAtrE,WAAU,SAAChK,GACV+E,EAAKwwE,iBAAiBv1E,OAG3BgJ,IACCzL,KAAKi3E,cACFgB,0CACAxrE,WAAU,SAAChK,GACV+E,EAAKwwE,iBAAiBv1E,QAKxBu0E,EAAA92E,UAAA83E,iBAAR,SAAyBv1E,GACnBA,GACFzC,KAAKi3E,cAAcxsC,oBAAoBzqC,KAAK0vE,YAIhDsH,EAAA92E,UAAAg4E,WAAA,SAAW1mE,GACTxR,KAAKwR,KAAOA,EAEZxR,KAAKi3E,cAAcxsC,oBACjBzqC,KAAK0vE,UACL1vE,KAAK01B,WAAWsE,YAChBh6B,KAAKm3E,YAAY3lE,KAIrBwlE,EAAA92E,UAAAu6B,WAAA,SAAWC,GACT16B,KAAKi3E,cAAcxsC,oBACjBzqC,KAAK0vE,UACLh1C,EACA16B,KAAKm3E,YAAYn3E,KAAKwR,QAI1BwlE,EAAA92E,UAAAi4E,mBAAA,SAAmBpsE,OACjBigC,EAAAjgC,EAAAigC,SACAjgC,EAAAqsE,aAMEp4E,KAAKi3E,cAAcoB,wBAAwBrsC,GAE3ChsC,KAAKi3E,cAAcqB,0BAA0BtsC,IAIjDgrC,EAAA92E,UAAAiN,YAAA,WACEnN,KAAKwK,cAAc4C,wDApFMk/B,EAAAA,6BACY+pC,MA/C5BW,EAAkBj2E,EAAA,CAJ9BqH,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,wjGAEW0uE,oBCCX,SAAAuB,EAAsBjuE,GAAAtK,KAAAsK,aAAAA,EANtBtK,KAAA2K,UAAYvK,EAAAA,UAWd,OAHEm4E,EAAAr4E,UAAAwnC,aAAA,SAAa39B,GACX/J,KAAKsK,aAAaR,mBAAmBC,6CAHHV,KAFpCtI,EAAA,CADC8sB,EAAAA,UAAU,SAAU,CAAEma,KAAM//B,EAAAA,2CAJlBswE,EAAqBx3E,EAAA,CAJjCqH,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,uhDAEWiwE,oBCiBX,SAAAC,EACYluE,EACA4sE,GADAl3E,KAAAsK,aAAAA,EACAtK,KAAAk3E,0BAAAA,EAPZl3E,KAAAy4E,oBAAsB,IAAIp3D,EAAAA,aA+B5B,OArBEm3D,EAAAt4E,UAAAw4E,qBAAA,WACE14E,KAAKy4E,oBAAoBn3D,KAAK,CAC5B0qB,SAAUhsC,KAAK+rC,OAAOC,SACtBosC,cAAep4E,KAAK+rC,OAAO4sC,kBAI/BH,EAAAt4E,UAAA04E,SAAA,WAEE54E,KAAKmpC,SAAWnpC,KAAKsK,aAAad,KAAK+uE,GAAuB,CAC5D3qE,UAAU,EACVC,KAAM,OAGQ7N,KAAKmpC,SAASC,kBAChB2C,OAAS/rC,KAAK+rC,QAG9BysC,EAAAt4E,UAAA24E,aAAA,WACE74E,KAAKk3E,0BAA0BV,iBAAiBx2E,KAAK+rC,kDAvB7B1iC,SACagtE,MAZ9Bt1E,EAAA,CAARoH,EAAAA,sCACQpH,EAAA,CAARoH,EAAAA,0DAIDpH,EAAA,CADCwgB,EAAAA,oDALUi3D,EAAmBz3E,EAAA,CAJ/BqH,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,68DAEWkwE,oBCCX,SAAAM,EACY7B,EACAz8D,EACAu+D,GAFA/4E,KAAAi3E,cAAAA,EACAj3E,KAAAwa,eAAAA,EACAxa,KAAA+4E,eAAAA,EAiCd,OA9BED,EAAA54E,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKwa,eACFumB,iBACAt0B,WAAU,SAACusE,GACV,IAAM3tC,EAAa2tC,EAAE/3C,MAAMnY,OAAOuiB,WAC9BA,GACF7jC,EAAKyvE,cAAcgC,oBAAoB5tC,GACvC7jC,EAAKwkB,aAAexkB,EAAKyvE,cACtBiC,sCACAzsE,WAAU,SAAC8+B,GACNA,GACF/jC,EAAKuxE,eAAettE,IAClB,CAAEvK,IAAK,iCACPsb,EAAAA,kBAAkBm0C,uBAGtBnpD,EAAKgT,eAAeQ,GAAG,CAAEC,QAAS,gBAGtCzT,EAAKgT,eAAeQ,GAAG,CAAEC,QAAS,gBAGrC7N,eAGL0rE,EAAA54E,UAAAiN,YAAA,WACMnN,KAAKgsB,cACPhsB,KAAKgsB,aAAa5e,wDAhCKk/B,EAAAA,6BACCv0B,EAAAA,sBACAT,EAAAA,wBANjBwhE,EAAoB/3E,EAAA,CAJhCqH,EAAAA,UAAU,CACTE,SAAA,GACAD,SAAU,qBAECywE,SCwBC,CAAE79D,QAAS,eA+BzBk+D,GAAA,WAAA,SAAAA,KAA8B,OAAjBA,EAAep4E,EAAA,CA9C3ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAmmB,GACAuM,GACAltB,EAAAA,WACA6lB,EAAAA,aACAC,EAAAA,UACA1rB,EACA0yB,GACAjH,EAAAA,aAAak3C,SAAS,CACpB,CACEvxD,KAAM,KACNq1B,YAAa,CAACspB,EAAAA,UAAWkE,IACzBluD,UAAW+gD,GACX7wB,KAAI46C,OAIV3wE,aAAc,CACZuuE,GACAwB,GACAD,GACAO,IAEFlwE,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb2oE,mBAAoB,CAClB1oE,UAAW0oE,GACXnnE,OAAQ,CAACyoD,EAAAA,YAEXwgB,qBAAsB,CACpBxqE,UAAWwqE,GACXjpE,OAAQ,CAACyoD,EAAAA,gBAKjBrvD,QAAS,CAAC+tE,GAAoB8B,IAC9BpqE,gBAAiB,CACfsoE,GACAuB,GACAO,OAGSK,GAAb,iBCjDE,SAAAE,EACUC,GAAAt5E,KAAAs5E,8BAAAA,EAHAt5E,KAAAu5E,YAAwC,GAmCpD,OA7BEF,EAAAn5E,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKs5E,8BAA8BE,+BACnCx5E,KAAKy5E,aAAez5E,KAAKs5E,8BACtBI,iBACA/tE,KAAKG,EAAAA,KAAI,SAACytE,GAAgB,OAAC/xE,EAAK+xE,YAAcA,MACjDv5E,KAAKs5E,8BAA8BK,kBAEnC35E,KAAK0gD,WAAah1C,EAAAA,cAAc,CAC9B1L,KAAKs5E,8BAA8BM,wBACnC55E,KAAKs5E,8BAA8BO,sCAClCluE,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC+tE,EAAA9tE,EAAA,GAAc+tE,EAAA/tE,EAAA,GAAmB,OAAA8tE,GAAgBC,OAI3DV,EAAAn5E,UAAA85E,iBAAA,SAAiBC,GACf,IAAMC,EAAqB,GAC3Bl6E,KAAKu5E,YAAY3xE,SAAQ,SAAChI,GACpBA,EAAEu6E,UAAYF,EAAWE,QAC3BD,EAAmB13E,KAAInC,EAAAA,EAAA,GAClBT,GAAC,CACJqwD,SAAUrwD,EAAEqwD,WAGdiqB,EAAmB13E,KAAK5C,MAG5BI,KAAKs5E,8BAA8Bc,kBAAkBF,6CA9Bd1hE,EAAAA,qCAP9B6gE,EAA+Bt4E,EAAA,CAL3CqH,EAAAA,UAAU,CACTC,SAAU,6BACVC,SAAA,69CACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BoyD,oBCcb,SAAAgB,KAA2C,OAA9BA,EAA4Bt5E,EAAA,CAhBxCyH,EAAAA,SAAS,CACRC,aAAc,CAAC4wE,IACf3wE,QAAS,CAACC,EAAAA,aAAc0yB,GAAeltB,EAAAA,YACvCvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbgrE,gCAAiC,CAC/B/qE,UAAW+qE,GACXxpE,OAAQ,CAACyoD,EAAAA,gBAKjBrvD,QAAS,CAACowE,IACV3qE,gBAAiB,CAAC2qE,OAEPgB,oBC4BX,SAAAC,EACUC,EACAjT,EACAjhC,GAFArmC,KAAAu6E,uBAAAA,EACAv6E,KAAAsnE,mBAAAA,EACAtnE,KAAAqmC,eAAAA,EA3BFrmC,KAAAw6E,kBAAoB,GACpBx6E,KAAAm3E,YAAc,CACpBsD,UAAW,WACXC,WAAY,aAGd16E,KAAAwR,KAAO,YACPxR,KAAAo3E,YAAc,CACZ,CACExlD,KAAM,YACNgyB,UAAU,GAEZ,CACEhyB,KAAM,aACNgyB,UAAU,IAyGhB,OAzFE02B,EAAAp6E,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAK26E,WAAa36E,KAAKu6E,uBACpBK,2BAA2B56E,KAAKw6E,mBAChC7uE,KACCG,EAAAA,KACE,SAAC+uE,GACC,OAACrzE,EAAKkuB,WAAa,CACjBsE,YAAa6gD,EAAUnlD,WAAWgF,KAClCtN,SAAUytD,EAAUnlD,WAAW2D,MAC/BU,WAAY8gD,EAAUnlD,WAAWqE,WACjCi2C,aAAc6K,EAAUnlD,WAAW4hD,WACnC9lE,KAAM,gBAGZkP,EAAAA,KAAI,SAACo6D,GAAa,OAAAz6E,EAAAA,EAAA,GACby6E,GAAQ,CACXv8B,QAASu8B,EAASv8B,QACdu8B,EAASv8B,QAAQ79B,KAAI,SAACq/B,GAAW,OAAA1/C,EAAAA,EAAA,GAC5B0/C,GAAM,CACTtP,SAAUjpC,EAAKi/B,WAAWsZ,QAE5B+6B,EAASv8B,cAInBv+C,KAAK+6E,qBAAuB/6E,KAAKu6E,uBAAuBS,4BACxDh7E,KAAKi7E,kBAAoBvvE,EAAAA,cAAc,CACrC1L,KAAK+6E,qBACL/6E,KAAKu6E,uBAAuBW,mCAC3BvvE,KAAK+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAACovE,EAAAnvE,EAAA,GAAYovE,EAAApvE,EAAA,GAAmB,OAAAmvE,GAAcC,MAE3Dp7E,KAAK83E,WAAa93E,KAAKqwE,iBAGjBiK,EAAAp6E,UAAAmwE,cAAR,WAIE,OAAO3kE,EAAAA,cAAc,CACnB1L,KAAKsnE,mBAAmBlmB,UAAU,iCAClCphD,KAAKsnE,mBAAmBlmB,UAAU,oCACjCz1C,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GACH,MAAO,CACL0uE,UAFEzuE,EAAA,GAGF0uE,WAHO1uE,EAAA,SASPsuE,EAAAp6E,UAAAumC,WAAR,SACEq0C,GAEA,OAAO96E,KAAKqmC,eAAe5zB,IAAIqoE,EAASjlE,QAAQ+b,KAAM2U,EAAAA,aAAaC,UAGrE8zC,EAAAp6E,UAAAm7E,eAAA,SACEC,GAIAt7E,KAAKu6E,uBAAuBgB,qBAAqB,CAC/C1lE,QAASylE,EAASzlE,QAClB2lE,qBAAsBF,EAASE,wBAInClB,EAAAp6E,UAAAg4E,WAAA,SAAW1mE,GACTxR,KAAKwR,KAAOA,EACZxR,KAAKu6E,uBAAuBkB,qBAC1Bz7E,KAAKw6E,kBACL,EACAx6E,KAAKm3E,YAAY3lE,KAIrB8oE,EAAAp6E,UAAAu6B,WAAA,SAAWC,GACT16B,KAAKu6E,uBAAuBkB,qBAC1Bz7E,KAAKw6E,kBACL9/C,EACA16B,KAAKm3E,YAAYn3E,KAAKwR,QAI1B8oE,EAAAp6E,UAAAiN,YAAA,WACEnN,KAAKu6E,uBAAuBmB,wBAC5B17E,KAAKu6E,uBAAuBoB,qEA5FIljE,EAAAA,4BACJlB,EAAAA,0BACJG,EAAAA,kBA5Bf4iE,EAAoBv5E,EAAA,CALhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,05PACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BqzD,oBCUb,SAAAsB,KAAgC,OAAnBA,EAAiB76E,EAAA,CAzB7ByH,EAAAA,SAAS,CACRC,aAAc,CAAC6xE,IACf5xE,QAAS,CACPC,EAAAA,aACAwF,EAAAA,WACA6lB,EAAAA,aACAiH,GACA9sB,EAAAA,WACA8lB,EAAAA,UACAH,GACAuH,IAEFzyB,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbisE,qBAAsB,CACpBhsE,UAAWgsE,GACXzqE,OAAQ,CAACyoD,EAAAA,gBAKjBrvD,QAAS,CAACqxE,IACV5rE,gBAAiB,CAAC4rE,OAEPsB,oBCpBX,SAAAC,EACSvtE,EACG6jD,EACFz8C,GAFD1V,KAAAsO,UAAAA,EACGtO,KAAAmyD,gBAAAA,EACFnyD,KAAA0V,YAAAA,EAyBZ,OAtBEmmE,EAAA37E,UAAA8K,SAAA,WACEhL,KAAK2yD,WACL3yD,KAAK87E,aAGCD,EAAA37E,UAAAyyD,SAAR,WACE3yD,KAAK+7E,OAAS/7E,KAAKmyD,gBAAgBC,UAAUzmD,KAC3C0F,EAAAA,OAAOxG,SACP6V,EAAAA,KAAI,SAAC2xC,GAAmB,OAAAA,EAAK2pB,SAAW3pB,EAAKhQ,WAIzCw5B,EAAA37E,UAAA47E,UAAR,WACE97E,KAAKi8E,QAAUvwE,EAAAA,cAAc,CAC3B1L,KAAKmyD,gBAAgBC,UACrBpyD,KAAK0V,YAAY0rC,UAAU,eAAez1C,KAAKuwE,EAAAA,UAAUC,EAAAA,mBACxDxwE,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAACsmD,EAAArmD,EAAA,GAAMowE,EAAApwE,EAAA,GACV,OAAAqmD,MAAAA,OAAI,EAAJA,EAAM8N,aAAc9N,EAAK8N,YAAc,CAAC,CAAEhpC,MAAOilD,EAAU51E,KAAM,oDAvBnDuM,SACSqE,EAAAA,uBACNG,EAAAA,sBAPZskE,EAAmB96E,EAAA,CAL/BqH,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,6KACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B40D,oBCSb,SAAAQ,KAA+B,OAAlBA,EAAgBt7E,EAAA,CAf5ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAcsoD,EAAAA,oBACtC1zE,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbwtE,oBAAqB,CACnBvtE,UAAWutE,QAKnBpzE,aAAc,CAACozE,IACf5yE,QAAS,CAAC4yE,IACVntE,gBAAiB,CAACmtE,OAEPQ,oBCXX,SAAAE,EACY/oE,EACAioD,GADAz7D,KAAAwT,WAAAA,EACAxT,KAAAy7D,oBAAAA,SAGL8gB,EAAAr8E,UAAAs8E,iBAAP,SACEhqE,GAEA,OAAO9G,EAAAA,cAAc,CAAC8G,EAAOxS,KAAKy8E,kBAAkBjqE,KAAS7G,KAC3D+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAACyyB,EAAAxyB,EAAA,GAAM0wE,EAAA1wE,EAAA,GACV,MAAO,CACLq2C,MAAO7jB,EAAKrT,KACZjI,SAAU,CAACw5D,SAWZH,EAAAr8E,UAAAu8E,kBAAP,SACEjqE,GADF,IAAAhL,EAAAxH,KAGE,OAAKwS,EAGEA,EAAM7G,KACX0F,EAAAA,QAAO,SAACmtB,GAAS,QAAEA,KACnBniB,EAAAA,WAAU,SAACmiB,GACT,IAAMm+C,EAAan+C,EAAKo+C,eAAiBp+C,EAAKo+C,eAAiBp+C,EAC/D,OAAOh3B,EAAKgM,WAAWqpE,wBAAwBF,EAAWrqE,KAAK3G,KAC7DG,EAAAA,KAAI,SAACikB,GACH,QAAcpb,IAAVob,EACFvoB,EAAKs1E,yBAAyBH,GAAY,OACrC,CAEL,IAAMI,EAAgB,GACtBv1E,EAAKs1E,yBAAyBH,GAAY,EAAOI,GACjD,IAAMC,EAAgBx9E,OAAOs3C,KAAK/mB,GAAOrP,KACvC,SAACxf,GAAQ,OAAA6uB,EAAM7uB,GAAKoR,OAEhB2qE,EAAeF,EAAc1rE,QACjC,SAAC6rE,GAAO,OAACF,EAAch3E,SAASk3E,EAAG1wE,OAEjCywE,EAAar8E,OAAS,GACxB4G,EAAKgM,WAAW2pE,oBACdR,EAAWrqE,IACX2qE,OAKR5rE,EAAAA,OAAOxG,SACP6V,EAAAA,KAAI,SAACqP,GAAU,OAAAvoB,EAAK41E,uBAAuBT,EAAY5sD,WA7BpD1U,EAAAA,MAyCHkhE,EAAAr8E,UAAA48E,yBAAR,SACEO,EACAC,EACAC,GAHF,IAAA/1E,EAAAxH,UAGE,IAAAu9E,IAAAA,EAAA,IAEIF,EAASp9C,SAAWo9C,EAASp9C,QAAQr/B,OAAS,GAChDy8E,EAASp9C,QAAQr4B,SAAQ,SAACi8B,GACxB05C,EAAU/6E,KAAK,CACbg7E,UAAW35C,EAAM45C,cACjBjxE,GAAIq3B,EAAM65C,YAKZL,EAASn6D,UAAYm6D,EAASn6D,SAAStiB,OAAS,GAClDy8E,EAASn6D,SAAStb,SAAQ,SAACyb,GACzB,OAAA7b,EAAKs1E,yBAAyBz5D,GAAO,EAAOk6D,MAI5CD,GACFt9E,KAAKwT,WAAW2pE,oBAAoBE,EAAS/qE,IAAKirE,IAS9ChB,EAAAr8E,UAAAk9E,uBAAR,SAA+BC,EAAettD,GAA9C,IAAAvoB,EAAAxH,KACQ29E,EAAuB,GAY7B,GAVIN,EAASh7B,QAGXs7B,EAAKt7B,MAAQg7B,EAASh7B,OAGpBg7B,EAASp9C,SAAWo9C,EAASp9C,QAAQr/B,OAAS,GAChDZ,KAAK49E,aAAaD,EAAMN,EAASp9C,QAAQ,GAAIlQ,GAG3CstD,EAASn6D,UAAYm6D,EAASn6D,SAAStiB,OAAS,EAAG,CACrD,IAAMsiB,EAAWm6D,EAASn6D,SACvBxC,KAAI,SAAC2C,GAAU,OAAA7b,EAAK41E,uBAAuB/5D,EAAO0M,MAClD1e,OAAOxG,SACNqY,EAAStiB,OAAS,IACpB+8E,EAAKz6D,SAAWA,GAKpB,OAAoC,IAA7B1jB,OAAOs3C,KAAK6mC,GAAM/8E,OAAe,KAAO+8E,GAMzCpB,EAAAr8E,UAAA09E,aAAR,SAAqBD,EAAsB95C,EAAO9T,GAChD,IAAMmK,EAAOnK,EAAS8T,EAAM65C,OAAM,IAAI75C,EAAM45C,eAG5C,GAAIvjD,GAA2B,qBAAnB2J,EAAMg6C,SAAiC,CAC5CF,EAAKt7B,QACRs7B,EAAKt7B,MAAQnoB,EAAK4jD,UAEpB,IAAMl5E,EAAM5E,KAAK+9E,QAAQ7jD,GAErByjD,EAAKt7B,OAASz9C,IAChB+4E,EAAK/4E,IAAMA,EAGX+4E,EAAK18E,OAAWi5B,EAAKj5B,OAAS,SAAW,MASvCs7E,EAAAr8E,UAAA69E,QAAR,SAAgB7jD,GACd,OAAIA,EAAKt1B,IACAs1B,EAAKt1B,IACHs1B,EAAKikC,aACPn+D,KAAKy7D,oBAAoB7wC,UAAU,CACxC3P,QAAS,WACT6N,OAAQ,CACN8I,KAAMsI,EAAKikC,aACXhzC,KAAM+O,EAAK/O,aALV,4CAxJezY,EAAAA,kBACS6pD,EAAAA,uLAHtBggB,EAAiBx7E,EAAA,CAH7BiG,EAAAA,WAAW,CACVC,WAAY,UAEDs1E,oBCMX,SAAAyB,EACYzgD,EACA/f,GADAxd,KAAAu9B,cAAAA,EACAv9B,KAAAwd,QAAAA,EARZxd,KAAAi+E,MAAoCj+E,KAAKwd,QAAQi/D,kBAC/Cz8E,KAAKu9B,cAAc/qB,OAGrBxS,KAAAwS,MAA4CxS,KAAKu9B,cAAc/qB,MAMjE,gDAH6BO,SACNwpE,MATVyB,EAA2Bj9E,EAAA,CALvCqH,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,oMACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B+2D,oBC8CX,SAAAE,EACUnlC,EACA1xC,EACA82E,GAHV,IAAA32E,EAAAxH,KACUA,KAAA+4C,OAAAA,EACA/4C,KAAAqH,SAAAA,EACArH,KAAAm+E,QAAAA,EA7BDn+E,KAAAo+E,mBAAoB,EAM7Bp+E,KAAA0F,SAAWtF,EAAAA,UAO2BJ,KAAAq+E,QAAS,EAERr+E,KAAAs+E,QAAS,EAExCt+E,KAAAu+E,UAA2B,GAC3Bv+E,KAAAwK,cAAgB,IAAIC,EAAAA,aACpBzK,KAAAw+E,OAAS,IAAIn9D,EAAAA,aAYnBrhB,KAAKwK,cAAciB,IACjBzL,KAAK+4C,OAAO0P,OACT98C,KAAK0F,EAAAA,QAAO,SAACiO,GAAU,OAAAA,aAAiBm/D,EAAAA,kBACxChyE,WAAU,WAAM,OAAAjF,EAAKwX,YAE1Bhf,KAAKwK,cAAciB,IACjBzL,KAAKw+E,OAAO7yE,KAAKmhB,EAAAA,aAAa,KAAKrgB,WAAU,WAC3CjF,EAAKk3E,qCAyHb,OAzIER,EAAAh+E,UAAAy+E,SAAA,WACE3+E,KAAKw+E,OAAOt8E,QAoBdg8E,EAAAh+E,UAAA0+E,WAAA,SAAWt/D,GACU,YAAfA,EAAM5a,MACR4a,EAAMC,iBAER,IAAMo+D,EAAoBr+D,EAAMu/D,cAC5B7+E,KAAKu+E,UAAUv4E,SAAS23E,GACP,YAAfr+D,EAAM5a,KACR1E,KAAKw7C,QAELx7C,KAAKu+E,UAAYv+E,KAAKu+E,UAAUltE,QAAO,SAAC3Q,GAAM,OAAAA,IAAMi9E,KACpD39E,KAAKqH,SAASS,YAAY61E,EAAM,YAGlC39E,KAAKu+E,UAAU/7E,KAAKm7E,GAGtB39E,KAAK8+E,gBAELx/D,EAAMy/D,2BACNz/D,EAAME,mBAGR0+D,EAAAh+E,UAAAs7C,KAAA,WACMx7C,KAAKu+E,UAAUv+E,KAAKu+E,UAAU39E,OAAS,KACzCZ,KAAKqH,SAASS,YACZ9H,KAAKu+E,UAAUv+E,KAAKu+E,UAAU39E,OAAS,GACvC,WAEFZ,KAAKu+E,UAAUt0E,MACfjK,KAAK8+E,kBAITZ,EAAAh+E,UAAA8e,MAAA,WACEhf,KAAKu+E,UAAY,GACjBv+E,KAAK8+E,iBAGPZ,EAAAh+E,UAAA8+E,aAAA,SAAa1/D,GACXtf,KAAKi/E,8BAA2C3/D,EAAMu/D,eACtD7+E,KAAKk/E,0BAA0B5/D,IAGjC4+D,EAAAh+E,UAAAi/E,cAAA,SAAcxB,EAAsByB,GAApC,IAAA53E,EAAAxH,KACE,YADkC,IAAAo/E,IAAAA,EAAA,GAC9BzB,EAAKz6D,UAAYy6D,EAAKz6D,SAAStiB,OAAS,EACnC2hB,KAAKyS,IAAGl0B,MAARyhB,KAAI7f,EACNi7E,EAAKz6D,SAASxC,KAAI,SAAChgB,GAAM,OAAA8G,EAAK23E,cAAcz+E,EAAG0+E,EAAQ,QAGrDA,GAIXlB,EAAAh+E,UAAAm/E,eAAA,SAAez+E,GACb,OAAO2hB,KAAKC,MAAM5hB,GAAUZ,KAAKs/E,WAAa1+E,KAGhDs9E,EAAAh+E,UAAAg/E,0BAAA,SAA0B5/D,GACxB,IAAMre,EACHqe,EAAMre,QAAUqe,EAAMigE,cAQzB,OALEt+E,EAAOu+E,cAAcl8D,cAAcm8D,QAAQ,kBAC3Cx+E,EAAOwY,cAAcgmE,QAAQ,YAE7Bx+E,EAAO2d,QAEF3d,EAAOu+E,eAGhBtB,EAAAh+E,UAAAiN,YAAA,WACMnN,KAAKwK,eACPxK,KAAKwK,cAAc4C,eAIf8wE,EAAAh+E,UAAA++E,8BAAR,SAAsCtB,GACpC,GAAI39E,KAAKo+E,kBAAmB,CAC1B,IAAMsB,EAAuB/B,EAAKgC,cAAc,YAC1CC,EAAsB5/E,KAAKm+E,QAAQn2E,cACrC03E,IACF1/E,KAAKqH,SAASw4E,YAAYH,EAAS,eAEjCA,EAAQ98D,WAAa88D,EAAQI,YAC7BF,EAAOh9D,WAAag9D,EAAOE,aAE3B9/E,KAAKqH,SAAS04E,SACZL,EACA,cACG/B,EAAKmC,YAAcJ,EAAQI,YAAW,SAO3C5B,EAAAh+E,UAAAw+E,+BAAR,WAAA,IAAAl3E,EAAAxH,KACQggF,EAAuBhgF,KAAKm+E,QAAQn2E,cAAci4E,WACxDtgF,MAAMwQ,KAAK6vE,GACR3uE,QAAO,SAACssE,GAAS,MAAiB,QAAjBA,EAAK5/D,WACtBnW,SAAQ,SAAC80E,GAAQ,OAAAl1E,EAAKy3E,8BAA2CvC,OAG9DwB,EAAAh+E,UAAA4+E,cAAR,WAAA,IAAAt3E,EAAAxH,KACEA,KAAKu+E,UAAU32E,SAAQ,SAAC+1E,EAAMl9E,GACxBA,EAAI,EAAI+G,EAAK+2E,UAAU39E,QACzB4G,EAAKH,SAASI,SAASk2E,EAAM,aAC7Bn2E,EAAKH,SAASS,YAAY61E,EAAM,aAEhCn2E,EAAKH,SAASS,YAAY61E,EAAM,aAChCn2E,EAAKH,SAASI,SAASk2E,EAAM,eAIjC39E,KAAKs+E,OAASt+E,KAAKu+E,UAAU39E,OAAS,4CAlItBw4C,EAAAA,cACElxC,EAAAA,iBACDD,EAAAA,cAnCVlH,EAAA,CAARoH,EAAAA,oCAKQpH,EAAA,CAARoH,EAAAA,yCACQpH,EAAA,CAARoH,EAAAA,iDAaqCpH,EAAA,CAArCoH,EAAAA,QAAS+U,EAAAA,YAAY,8CAEiBnc,EAAA,CAAtCoH,EAAAA,QAAS+U,EAAAA,YAAY,+CAOtBnc,EAAA,CADCyd,EAAAA,aAAa,+CA/BH0/D,EAAqBn9E,EAAA,CALjCqH,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,ovEACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bi3D,oBCAX,SAAAgC,EACY3iD,EACA/f,GADAxd,KAAAu9B,cAAAA,EACAv9B,KAAAwd,QAAAA,EAVZxd,KAAAi+E,MAAoCj+E,KAAKwd,QAAQg/D,iBAC/Cx8E,KAAKu9B,cAAc/qB,OAGrBxS,KAAAmgF,YAAkCngF,KAAKu9B,cAAc/qB,MAAM7G,KACzD+U,EAAAA,KAAI,SAACphB,GAAM,OAAAA,EAAEowD,eAOjB,gDAH6B38C,SACNwpE,MAXV2D,EAAmBn/E,EAAA,CAL/BqH,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,mGACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bi5D,oBCiBb,SAAAE,KAA+B,OAAlBA,EAAgBr/E,EAAA,CArB5ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAzrB,EACAitB,GACArnB,EAAAA,YAEFvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb6xE,oBAAqB,CACnB5xE,UAAW4xE,QAKnBz3E,aAAc,CAACy3E,GAAqBhC,IACpCxvE,gBAAiB,CAACwxE,IAClBj3E,QAAS,CAACi3E,GAAqBhC,OAEpBkC,oBCTb,SAAAC,KAAuC,OAA1BA,EAAwBt/E,EAAA,CAfpCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcy3E,IACxBx3E,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb2vE,4BAA6B,CAC3B1vE,UAAW0vE,QAKnBv1E,aAAc,CAACu1E,IACftvE,gBAAiB,CAACsvE,IAClB/0E,QAAS,CAAC+0E,OAECqC,oBCGX,SAAAC,EACY/iD,EACA/f,GADAxd,KAAAu9B,cAAAA,EACAv9B,KAAAwd,QAAAA,EAZZxd,KAAAi+E,MAAoCj+E,KAAKwd,QAAQi/D,kBAC/Cz8E,KAAKu9B,cAAc/qB,OAGrBxS,KAAAmgF,YAAkCngF,KAAKu9B,cAAc/qB,MAAM7G,KACzD+U,EAAAA,KAAI,SAACphB,GAAM,OAAAA,EAAEowD,eAGf1vD,KAAAwS,MAA4CxS,KAAKu9B,cAAc/qB,MAMjE,gDAH6BO,SACNwpE,MAbV+D,EAAyBv/E,EAAA,CALrCqH,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,gNACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bq5D,oBCgBb,SAAAC,KAAqC,OAAxBA,EAAsBx/E,EAAA,CArBlCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAosD,GACA5qD,GACArnB,EAAAA,YAEFvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbiyE,0BAA2B,CACzBhyE,UAAWgyE,QAKnB73E,aAAc,CAAC63E,IACf5xE,gBAAiB,CAAC4xE,IAClBr3E,QAAS,CAACq3E,OAECC,MCZbC,GAAA,WACE,SAAAA,EACSC,EACGjmE,EACA8sD,EACAxiE,GAHH9E,KAAAygF,cAAAA,EACGzgF,KAAAwa,eAAAA,EACAxa,KAAAsnE,mBAAAA,EACAtnE,KAAA8E,OAAAA,SAQZ07E,EAAAtgF,UAAA89D,OAAA,SAAOh+C,EAAepa,GACfoa,GAAmB,KAAVA,EAMZpa,EAAO86E,4BACP1gE,EAAMpf,OAASgF,EAAO86E,6BAKpB96E,EAAO+6E,iBACT3gF,KAAKygF,cAAcziB,OAAOh+C,EAAO,CAC/BoN,SAAUxnB,EAAOg7E,cAIjBh7E,EAAOi7E,oBACT7gF,KAAKygF,cAAcK,kBAAkB9gE,EAAO,CAC1CoN,SAAUxnB,EAAOm7E,kBAnBnB/gF,KAAKghF,gBA6BTR,EAAAtgF,UAAA+gF,WAAA,SAAWr7E,GAAX,IAAA4B,EAAAxH,KACE,OAAO0L,EAAAA,cAAc,CACnB1L,KAAKkhF,kBAAkBt7E,GACvB5F,KAAKmhF,sBAAsBv7E,GAC3B5F,KAAKohF,iBAAiBx7E,KACrB+F,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAACs1E,EAAAr1E,EAAA,GAAgBs1E,EAAAt1E,EAAA,GAAau1E,EAAAv1E,EAAA,GACjC,MAAO,CACLuiE,SAAU8S,EAAiBA,EAAe9S,SAAW,KACrD+S,YAAWA,EACXC,QAAOA,MAGXz1E,EAAAA,KAAI,SAACyyC,GACH,OAAA/2C,EAAKg6E,gBA/DmB,wBA+DsBh6E,EAAKi6E,WAAWljC,SASpEiiC,EAAAtgF,UAAA8gF,aAAA,WACEhhF,KAAKygF,cAAcO,eACnBhhF,KAAKwhF,gBA1EuB,yBA0EkB,IAGhDhB,EAAAtgF,UAAAwhF,aAAA,SAAa3oB,GACX,OAAO/4D,KAAK8E,OAAOwB,SAASwT,KAAK6nE,UAAUj0D,SAASqrC,IAGtDynB,EAAAtgF,UAAAshF,gBAAA,SAAgBzoB,EAAmBttD,QACrBkJ,IAARlJ,EACFzL,KAAK8E,OAAOwB,SAASwT,KAAK6nE,UAAUh5B,OAAOoQ,GAE3CttD,EACIzL,KAAK8E,OAAOwB,SAASwT,KAAK6nE,UAAUl2E,IAAIstD,GACxC/4D,KAAK8E,OAAOwB,SAASwT,KAAK6nE,UAAUzoE,OAAO6/C,IAI3CynB,EAAAtgF,UAAAuhF,WAAR,SAAmBljC,GACjB,QACKA,EAAQgwB,UAAYhwB,EAAQgwB,SAAS3tE,OAAS,KAC9C29C,EAAQ+iC,aAAe/iC,EAAQ+iC,YAAY1gF,OAAS,KACrD29C,EAAQgjC,SAINf,EAAAtgF,UAAAghF,kBAAR,SACEt7E,GAEA,OAAIA,EAAO+6E,gBACF3gF,KAAKygF,cAAcQ,aAEnB5lE,EAAAA,GAAG,KAQNmlE,EAAAtgF,UAAAihF,sBAAR,SAA8Bv7E,GAA9B,IAAA4B,EAAAxH,KACE,OAAK4F,EAAOi7E,mBAGH7gF,KAAKygF,cAAcmB,uBAAuBj2E,KAC/C+U,EAAAA,KAAI,SAAC5a,GAAQ,OAAAA,EAAI4a,KAAI,SAACmhE,GAAe,OAAAA,EAAW1/E,YAChDka,EAAAA,WAAU,SAACilE,GACT,OAA2B,IAAvBA,EAAY1gF,OACP4G,EAAKs6E,mBAAmBl8E,GAAQ+F,KACrC+U,EAAAA,KAAI,SAAC0H,GAAU,OAACA,EAAQ,CAACA,GAAS,OAG7B/M,EAAAA,GAAGimE,OAVTjmE,EAAAA,GAAG,KAqBNmlE,EAAAtgF,UAAA4hF,mBAAR,SAA2Bl8E,GAA3B,IAAA4B,EAAAxH,KACE,OAAOA,KAAKkhF,kBAAkBt7E,GAAQ+F,KACpC0Q,EAAAA,WAAU,SAAC0lE,GACT,OAAOA,EAAcxT,UAAYwT,EAAcxT,SAAS3tE,OAAS,EAC7D4G,EAAKw6E,iBAAiB,4BAA6B,CACjDC,KAAMF,EAAcG,iBAEtB7mE,EAAAA,GAAG,WAKLmlE,EAAAtgF,UAAAkhF,iBAAR,SAAyBx7E,GAAzB,IAAA4B,EAAAxH,KACE,OAAO0L,EAAAA,cAAc,CACnB1L,KAAKkhF,kBAAkBt7E,GACvB5F,KAAKmhF,sBAAsBv7E,KAC1B+F,KACD0Q,EAAAA,WAAU,SAACtQ,OAAAC,EAAA3J,EAAA0J,EAAA,GAACg2E,EAAA/1E,EAAA,GAAes1E,EAAAt1E,EAAA,GACzB,OACE+1E,GACAA,EAAcxT,UACoB,IAAlCwT,EAAcxT,SAAS3tE,QACvB0gF,GACuB,IAAvBA,EAAY1gF,OAEL4G,EAAKw6E,iBAAiB,0BAEtB3mE,EAAAA,GAAG,WASXmlE,EAAAtgF,UAAAs2E,iBAAP,SAAwBx2D,GACtBhgB,KAAKwa,eAAeQ,GAAG,CACrBC,QAAS,SACT6N,OAAQ,CAAE9I,MAAKA,MAIXwgE,EAAAtgF,UAAA8hF,iBAAR,SACEG,EACAz4E,GAEA,OAAO1J,KAAKsnE,mBAAmBlmB,UAAU+gC,EAAgBz4E,6CAhLnCoO,EAAAA,wBACIC,EAAAA,sBACIR,EAAAA,0BACZ1Q,EAAAA,6OALT25E,EAAyBz/E,EAAA,CAHrCiG,EAAAA,WAAW,CACVC,WAAY,UAEDu5E,GAAb,GCHM4B,GAA4C,CAChD1B,2BAA4B,EAC5BC,iBAAiB,EACjBE,oBAAoB,EACpBD,YAAa,EACbG,eAAgB,EAChBsB,sBAAsB,GAQxBC,GAAA,WAyBE,SAAAA,EACYC,EAEAhlD,EACAz4B,GAJZ,IAAA0C,EAAAxH,KACYA,KAAAuiF,0BAAAA,EAEAviF,KAAAu9B,cAAAA,EACAv9B,KAAA8E,OAAAA,EAjBZ9E,KAAA2K,UAAYvK,EAAAA,UAMJJ,KAAAuqC,kBAAmB,EAc3BvqC,KAAAwiF,SAAsCxiF,KAAKyiF,QAAQ92E,KACjDG,EAAAA,KAAI,SAAC1K,GAAM,OAACoG,EAAK5B,OAASxE,KAC1Bib,EAAAA,WAAU,SAACzW,GAAW,OAAA4B,EAAK+6E,0BAA0BtB,WAAWr7E,OAsKpE,OAlMEpG,OAAAiC,eAAI6gF,EAAApiF,UAAA,YAAS,KAAb,SAAciC,GACRA,GACFnC,KAAKg+D,OAAO77D,oCAgChB3C,OAAAiC,eAAY6gF,EAAApiF,UAAA,UAAO,KAAnB,WACE,OAAIF,KAAKu9B,cAC6Bv9B,KAAKu9B,cAAc/qB,MAAM7G,KAG3D+U,EAAAA,KAAI,SAACtf,GACH,OAAAf,EAAAA,EAAA,GACKe,GAAC,CACJu/E,gBAC6B,SAAtBv/E,EAAEu/E,kBAAoD,IAAtBv/E,EAAEu/E,gBACzC0B,qBACkC,SAA3BjhF,EAAEihF,uBACoB,IAA3BjhF,EAAEihF,qBACJxB,mBACgC,SAAzBz/E,EAAEy/E,qBACkB,IAAzBz/E,EAAEy/E,yBAKHxlE,EAAAA,GAAG+mE,qCAOdE,EAAApiF,UAAA89D,OAAA,SAAOh+C,GACLhgB,KAAKuiF,0BAA0BvkB,OAAOh+C,EAAOhgB,KAAK4F,QAElD5F,KAAKwJ,QAMP84E,EAAApiF,UAAAsJ,KAAA,WACExJ,KAAKuiF,0BAA0Bf,gBAAgB,uBAAuB,IAMxEc,EAAApiF,UAAAiK,MAAA,SAAMmV,EAAgBkgB,GAAtB,IAAAh4B,EAAAxH,KAEEilB,YAAW,aACHzd,EAAK+iC,mBAAqB/iC,EAAKk7E,sBAAyBljD,IAC5Dh4B,EAAKm7E,cAAcrjE,OAKfgjE,EAAApiF,UAAAyiF,cAAV,SAAwBrjE,GACtBtf,KAAKuiF,0BAA0Bf,gBAC7B,uBACA,GAEEliE,GAASA,EAAMre,QACHqe,EAAMre,OAAQmrC,QAKxBk2C,EAAApiF,UAAAwiF,mBAAR,WACE,OACE1iF,KAAK4iF,oBAAoB58E,SAAShG,KAAK6iF,sBACvC7iF,KAAK8E,OAAOwB,SAASq5E,cAAc,gCACjC3/E,KAAK6iF,qBAQXP,EAAApiF,UAAA4iF,YAAA,SAAYxjE,GACNtf,KAAKuiF,0BAA0Bb,aAAa,yBAC9C1hF,KAAKmK,MAAMmV,GACXA,EAAMC,mBAKF+iE,EAAApiF,UAAA0iF,kBAAR,WACE,OAAOjjF,MAAMwQ,KACXnQ,KAAK8E,OAAOwB,SAAS2Z,iBAAiB,qCAKlCqiE,EAAApiF,UAAA2iF,kBAAR,WACE,OAAoB7iF,KAAK8E,OAAOwB,SAASgd,eAGnCg/D,EAAApiF,UAAA6iF,gBAAR,WACE,OAAO/iF,KAAK4iF,oBAAoB9kE,QAAQ9d,KAAK6iF,sBAI/CP,EAAApiF,UAAA8iF,mBAAA,SAAmB1jE,GACjBA,EAAMC,iBACA,IAAAxT,EAAA1J,EAAA,qDAACk8C,EAAAxyC,EAAA,GAASk3E,EAAAl3E,EAAA,GAKZwyC,EAAQ39C,SACNqiF,EAAe,EACjB1kC,EAAQA,EAAQ39C,OAAS,GAAGge,QAE5B2/B,EAAQ0kC,EAAe,GAAGrkE,UAMhC0jE,EAAApiF,UAAAgjF,eAAA,SAAe5jE,GACbA,EAAMC,iBACA,IAAAxT,EAAA1J,EAAA,qDAACk8C,EAAAxyC,EAAA,GAASk3E,EAAAl3E,EAAA,GAKZwyC,EAAQ39C,SACNqiF,GAAgB1kC,EAAQ39C,OAAS,EACnC29C,EAAQ,GAAG3/B,QAEX2/B,EAAQ0kC,EAAe,GAAGrkE,UAUhC0jE,EAAApiF,UAAAijF,mBAAA,SAAmB7jE,EAAgBU,GAC5BA,GAAiC,IAAxBA,EAAMkN,OAAOtsB,SAG3BZ,KAAKmK,MAAMmV,GACXtf,KAAKuiF,0BAA0B/L,iBAAiBx2D,KAMlDsiE,EAAApiF,UAAAmsC,aAAA,WACErsC,KAAKuqC,kBAAmB,GAMnB+3C,EAAApiF,UAAA8e,MAAP,SAAaoB,GACXpgB,KAAKqsC,eACLjsB,EAAGje,MAAQ,GACXnC,KAAKuiF,0BAA0BvB,yDA5KMR,UAEZztE,EAAgB/R,WAAA,CAAA,CAAA0D,KADxCuN,EAAAA,kBAEiBpL,EAAAA,aAvBpB9F,EAAA,CADCoH,EAAAA,MAAM,4CALIm6E,EAAkBvhF,EAAA,CAL9BqH,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,s/EACAye,gBAAiBC,EAAAA,wBAAwBC,SA6BtCvlB,EAAA,EAAAuQ,EAAAA,aA3BQqwE,GAAb,iBCzBA,SAAAc,KAUA,OATEA,EAAAljF,UAAA0qB,UAAA,SAAUg1B,EAAcx3B,GACtB,OAAKA,EAGEw3B,EAAKmS,QACV3pC,EAAM8E,OACN,2BAA2B9E,EAAM8E,OAAM,WAJhC0yB,GAHAwjC,EAAariF,EAAA,CADzBmqB,EAAAA,KAAK,CAAEC,KAAM,iBACDi4D,oBCiCb,SAAAC,KAA8B,OAAjBA,EAAetiF,EAAA,CAtB3ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAF,GACAvrB,EACA0rB,EAAAA,UACA9lB,EAAAA,YAEFvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbi0E,mBAAoB,CAClBh0E,UAAWg0E,QAKnB75E,aAAc,CAAC65E,GAAoBc,IACnC10E,gBAAiB,CAAC4zE,IAClBr5E,QAAS,CAACq5E,OAECe,oBCXX,SAAAC,EACY1hD,EACAmF,GADA/mC,KAAA4hC,gBAAAA,EACA5hC,KAAA+mC,iBAAAA,EANZ/mC,KAAA+hC,kBAAuCC,EAAAA,kBAAkBG,SAmB3D,OAVEmhD,EAAApjF,UAAA8K,SAAA,WACEhL,KAAK2sE,OAAS3sE,KAAK4hC,gBAAgBH,kBACnCzhC,KAAK4nC,iBAAmB5nC,KAAK+mC,iBAAiBjF,mBAC5C9hC,KAAK+hC,oBAITuhD,EAAApjF,UAAAiN,YAAA,WACEnN,KAAK4hC,gBAAgB2hD,8DAZMtsE,EAAAA,uBACCyqB,MAPnB4hD,EAA+BviF,EAAA,CAL3CqH,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAA,qfACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bq8D,oBCMX,SAAAE,EACY5hD,EACFlsB,GADE1V,KAAA4hC,gBAAAA,EACF5hC,KAAA0V,YAAAA,EAsEZ,OAnEE8tE,EAAAtjF,UAAA8K,SAAA,WACEhL,KAAK2sE,OAAS3sE,KAAK4hC,gBAAgBH,mBAGrC+hD,EAAAtjF,UAAAiN,YAAA,WACEnN,KAAK4hC,gBAAgB2hD,qBAGvBC,EAAAtjF,UAAAw/C,sBAAA,SAAsB/E,GACpB,OAAO36C,KAAK0V,YAAY0rC,UAAU,sBAAsBz1C,KACtD0F,EAAAA,QAAO,WAAM,OAAAxG,QAAQ8vC,MACrBj6B,EAAAA,KAAI,SAACyjC,GAAc,MAAA,CACjB9B,MAAO8B,EACPxE,SAAahF,EAAgBoC,UAAS,IAAIpC,EAAgBqC,SAC1D4C,KAAM,CACJjF,EAAgBsC,MAChBtC,EAAgBuC,MACbvC,EAAgBwC,KAAI,KAAKxC,EAAgB2C,QAAQ3e,QAAO,KAAKgc,EAAgB4C,WAChF5C,EAAgBkF,aAMxB2jC,EAAAtjF,UAAAujF,2BAAA,SAA2BzvC,GACzB,OAAOh0C,KAAK0V,YAAY0rC,UAAU,mCAAmCz1C,KACnE0F,EAAAA,QAAO,WAAM,OAAAxG,QAAQmpC,MACrBtzB,EAAAA,KAAI,SAACyjC,GAAc,MAAA,CACjB9B,MAAO8B,EACPxE,SAAU3L,EAAa7oB,KACvBy0B,KAAM,CAAC5L,EAAa1Q,mBAK1BkgD,EAAAtjF,UAAAuuE,6BAAA,SAA6BpuB,GAC3B,OAAOrgD,KAAK0V,YAAY0rC,UAAU,sBAAsBz1C,KACtD0F,EAAAA,QAAO,WAAM,OAAAxG,QAAQw1C,MACrB3/B,EAAAA,KAAI,SAACyjC,GAAc,MAAA,CACjB9B,MAAO8B,EACPxE,SAAaU,EAAetD,UAAS,IAAIsD,EAAerD,SACxD4C,KAAM,CACJS,EAAepD,MACfoD,EAAenD,MACZmD,EAAelD,KAAI,KAAKkD,EAAe/C,QAAQ3e,QAAO,KAAK0hB,EAAe9C,WAC7E8C,EAAeR,aAMvB2jC,EAAAtjF,UAAAwjF,0BAAA,SAA0BviC,GACxB,OAAOz1C,EAAAA,cAAc,CACnB1L,KAAK0V,YAAY0rC,UAAU,uBAC3BphD,KAAK0V,YAAY0rC,UAAU,sBAAuB,CAChD7B,MAAO10C,QAAQs2C,GAAWA,EAAQxE,YAAc,GAChDoC,KAAMl0C,QAAQs2C,GAAWA,EAAQvE,WAAa,OAE/CjxC,KACD0F,EAAAA,QAAO,WAAM,OAAAxG,QAAQs2C,MACrBzgC,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAACo4C,EAAAn4C,EAAA,GAAWq1C,EAAAr1C,EAAA,GAAiB,MAAA,CAChCq2C,MAAO8B,EACPxE,SAAUwB,EAAQ1E,kBAClBmD,KAAM,CAACuB,EAAQzE,WAAY2E,kDAnEJpqC,EAAAA,uBACNM,EAAAA,sBALZisE,EAAkCziF,EAAA,CAL9CqH,EAAAA,UAAU,CACTC,SAAU,iCACVC,SAAA,wpCACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bu8D,oBCFX,SAAAG,EAAsB/hD,GAAA5hC,KAAA4hC,gBAAAA,EAHtB5hC,KAAA4jF,iBAAkB,EAiBpB,OAZED,EAAAzjF,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAK2sE,OAAS3sE,KAAK4hC,gBAAgBH,kBAAkB91B,KACnDG,EAAAA,KAAI,SAAC82B,GACHp7B,EAAKo8E,gBAAkBhhD,EAAMihD,cAC7Br8E,EAAKs8E,UAAYlhD,EAAMmI,UAK7B44C,EAAAzjF,UAAAiN,YAAA,WACEnN,KAAK4hC,gBAAgB2hD,8DAZgBtsE,EAAAA,mBAN5B0sE,EAAyC5iF,EAAA,CALrDqH,EAAAA,UAAU,CACTC,SAAU,0CACVC,SAAA,uyBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B08D,oBCEX,SAAAI,EAAsBniD,GAAA5hC,KAAA4hC,gBAAAA,EASxB,OAPEmiD,EAAA7jF,UAAA8K,SAAA,WACEhL,KAAK2sE,OAAS3sE,KAAK4hC,gBAAgBH,mBAGrCsiD,EAAA7jF,UAAAiN,YAAA,WACEnN,KAAK4hC,gBAAgB2hD,8DAPgBtsE,EAAAA,mBAH5B8sE,EAAgChjF,EAAA,CAL5CqH,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,wQACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B88D,oBCiBX,SAAAC,EACYroE,EACAnB,EACAF,EACA+Q,GAHArrB,KAAA2b,YAAAA,EACA3b,KAAAwa,eAAAA,EACAxa,KAAAsa,YAAAA,EACAta,KAAAqrB,GAAAA,EApBZrrB,KAAAikF,kBAA+BjkF,KAAKqrB,GAAGvM,MACrC,CACElC,SAAU,CACR,GACA,CAAC6O,EAAAA,WAAWC,SAAUuY,GAAqBK,oBAE7C4/C,aAAc,CAAC,GAAIz4D,EAAAA,WAAWC,WAEhC,CACEu9C,WAAYhlC,GAAqBU,mBAC/B,WACA,kBAqCR,OAzBEq/C,EAAA9jF,UAAAoqE,OAAA,WAAA,IAAA9iE,EAAAxH,KACMA,KAAKikF,kBAAkBr4D,OACzB5rB,KAAK2b,YAAYwoE,cACfnkF,KAAK+qC,KACL/qC,KAAKikF,kBAAkB9hF,MAAMya,UAE1B5c,KAAKgsB,eACRhsB,KAAKgsB,aAAehsB,KAAKsa,YACtBI,eACAjO,WAAU,SAACkO,GACNA,EAAM2B,cACR9U,EAAKgT,eAAeQ,GAAG,CAAEC,QAAS,cAK1Cjb,KAAKikF,kBAAkBp4D,oBAI3Bm4D,EAAA9jF,UAAAiN,YAAA,WACMnN,KAAKgsB,cACPhsB,KAAKgsB,aAAa5e,wDA5BG+K,EAAAA,mBACGJ,EAAAA,sBACHhB,EAAAA,mBACT+U,EAAAA,eAxBP/qB,EAAA,CAARoH,EAAAA,oCACQpH,EAAA,CAARoH,EAAAA,qCAFU67E,EAA0BjjF,EAAA,CAJtCqH,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,oqDAEW07E,oBCEX,SAAAI,EACUxiD,EACAmX,EACA0iB,GAFAz7D,KAAA4hC,gBAAAA,EACA5hC,KAAA+4C,OAAAA,EACA/4C,KAAAy7D,oBAAAA,SAGV2oB,EAAAlkF,UAAA8uC,YAAA,WAAA,IAAAxnC,EAAAxH,KACE,OAAOA,KAAK4hC,gBAAgBH,kBAAkB91B,KAC5C+U,EAAAA,KAAI,SAAC49C,GACH,SAAIA,GAAqD,IAArC9+D,OAAOs3C,KAAKwnB,GAAc19D,SAGrC4G,EAAKuxC,OAAOG,SAAS1xC,EAAKi0D,oBAAoBhpD,IAAI,yDAXtCwE,EAAAA,uBACTmiC,EAAAA,cACamjB,EAAAA,oNAJpB6nB,EAAsBrjF,EAAA,CAHlCiG,EAAAA,WAAW,CACVC,WAAY,UAEDm9E,MCWPC,GAA8B,CAClCf,GACAE,GACAG,GACAI,GACAC,IAyCFM,GAAA,WAAA,SAAAA,KAAsC,OAAzBA,EAAuBvjF,EAAA,CAtCnCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAmlC,GACAhf,GACAyiC,GACA9nB,GACAt7B,EAAAA,WACA+mB,EAAAA,oBACA9mB,EAAAA,qBACAiyB,IAEFz3B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbk2E,uCAAwC,CACtCj2E,UAAWq1E,GACX9zE,OAAQ,CAACu0E,KAEXd,gCAAiC,CAC/Bh1E,UAAWg1E,GACXzzE,OAAQ,CAACu0E,KAEXL,iCAAkC,CAChCz1E,UAAWy1E,GACXl0E,OAAQ,CAACu0E,KAEXZ,mCAAoC,CAClCl1E,UAAWk1E,GACX3zE,OAAQ,CAACu0E,SAKjB37E,aAAY/F,EAAM2hF,IAClBp7E,QAAOvG,EAAM2hF,IACb31E,gBAAehM,EAAM2hF,OAEVC,GAAb,iBCpDE,SAAAE,EACYn+C,EACAo+C,EACAhpB,GAFAz7D,KAAAqmC,eAAAA,EACArmC,KAAAykF,iBAAAA,EACAzkF,KAAAy7D,oBAAAA,SAMZ+oB,EAAAtkF,UAAAwkF,YAAA,SAAY9yD,GAAZ,IAAApqB,EAAAxH,KACE,OAAOA,KAAKqmC,eAAe5zB,IAAImf,GAAMjmB,KACnC0F,EAAAA,OAAOxG,SACP6V,EAAAA,KAAI,SAAC7K,GAAY,OAAArO,EAAKm9E,eAAe9uE,QAIzC2uE,EAAAtkF,UAAA0kF,qBAAA,SACEhzD,EACAizD,EACAC,EACAC,GAJF,IAAAv9E,EAAAxH,KAME,OAAOA,KAAKykF,iBAAiBhyE,IAAImf,EAAMizD,GAAel5E,KACpD0F,EAAAA,OAAOxG,SACP6V,EAAAA,KAAI,SAACskE,GACH,OAAAA,EAAKtkE,KAAI,SAACukE,GACR,OAAAz9E,EAAKm9E,eAAeM,EAAIhkF,OAAQ6jF,EAAcC,WAS9CP,EAAAtkF,UAAAykF,eAAR,SACEO,EACAJ,EACAC,QADA,IAAAD,IAAAA,GAAA,QACA,IAAAC,IAAAA,GAAA,GAEA,IAAM7qD,EAA4B,GAiBlC,OAhBI4qD,IACF5qD,EAAKmoB,MAAQ6iC,EAAO/5D,MAElB45D,GAAwBG,EAAO/jB,OAAS+jB,EAAO/jB,MAAM9wB,iBACvDnW,EAAKinC,MAAQ+jB,EAAO/jB,MAAM9wB,gBAExB60C,EAAOlkB,QAAUkkB,EAAOlkB,OAAOC,UACjC/mC,EAAK3H,MAAQ,CACXR,UAAWmzD,EAAOlkB,OAAOC,QACzBjvC,OAAQ,YAGZkI,EAAKk/B,MAAQp5D,KAAKy7D,oBAAoB7wC,UAAU,CAC9C3P,QAAS,UACT6N,OAAQo8D,IAEHhrD,4CAxDmBxiB,EAAAA,sBACEG,EAAAA,+BACG0kD,EAAAA,oOAJtBioB,EAAsBzjF,EAAA,CAHlCiG,EAAAA,WAAW,CACVC,WAAY,UAEDu9E,oBC2BX,SAAAW,EACY5nD,EACA8I,GAFZ,IAAA7+B,EAAAxH,KACYA,KAAAu9B,cAAAA,EACAv9B,KAAAqmC,eAAAA,EA3BOrmC,KAAAolF,cAAgB7+C,EAAAA,aAAajjC,KAExCtD,KAAAmjE,eAAoCnjE,KAAKu9B,cAAc/qB,MAAM7G,KACnE0F,EAAAA,OAAOxG,UAMT7K,KAAA+7E,OAA6B/7E,KAAKmjE,eAAex3D,KAC/C+U,EAAAA,KAAI,SAAC8d,GAAS,OAAAA,EAAK6jB,UAQrBriD,KAAAsjE,OAA4CtjE,KAAKmjE,eAAex3D,KAC9D+U,EAAAA,KAAI,SAAC8d,GAAS,OAAAA,EAAK6mD,aAAan4D,OAAOnlB,MAAM,QAC7C2Y,EAAAA,KAAI,SAAC8iD,GACH,OAAAA,EAAM9iD,KAAI,SAACkR,GAAS,OAAApqB,EAAK6+B,eAAe5zB,IAAImf,EAAMpqB,EAAK49E,sBAQ7D,gDAH6BryE,SACC2E,EAAAA,kBA5BjBytE,EAAwBpkF,EAAA,CALpCqH,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAA,ghBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bk+D,oBCSb,SAAAG,KAAoC,OAAvBA,EAAqBvkF,EAAA,CAfjCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcorB,GAAgBD,GAAaE,EAAAA,aAAcC,EAAAA,WACnErrB,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb82E,yBAA0B,CACxB72E,UAAW62E,QAKnB18E,aAAc,CAAC08E,IACfz2E,gBAAiB,CAACy2E,IAClBl8E,QAAS,CAACk8E,OAECG,oBC2BX,SAAAC,EACYj3E,EACAmoB,EACAguD,GAHZ,IAAAj9E,EAAAxH,KACYA,KAAAsO,UAAAA,EACAtO,KAAAy2B,QAAAA,EACAz2B,KAAAykF,iBAAAA,EA5BZzkF,KAAA+7E,OAAS/7E,KAAKsO,UAAUkE,MAAM7G,KAAK+U,EAAAA,KAAI,SAACphB,GAAM,OAAAA,EAAE+iD,UAExCriD,KAAAwlF,oBAEJxlF,KAAKy2B,QAAQgQ,aAAa96B,KAC5B0F,EAAAA,OAAOxG,SACP6V,EAAAA,KAAI,SAAC9gB,GAAe,OAAAA,EAAEgyB,QACtB/lB,EAAAA,uBACAC,EAAAA,KAAI,WAAM,OAAAtE,EAAKi9E,iBAAiBgB,sBAQlCzlF,KAAAsjE,OAA4C53D,EAAAA,cAAc,CACxD1L,KAAKwlF,oBACLxlF,KAAKsO,UAAUkE,QACd7G,KACD0Q,EAAAA,WAAU,SAACtQ,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC6lB,EAAA5lB,EAAA,GAAMwyB,EAAAxyB,EAAA,GAChB,OAAAxE,EAAKo9E,qBAAqBhzD,EAAM4M,EAAKknD,2BAmB3C,OATUH,EAAArlF,UAAA0kF,qBAAR,SACEhzD,EACAizD,GAEA,OAAO7kF,KAAKykF,iBAAiBhyE,IAAImf,EAAMizD,GAAel5E,KACpD0F,EAAAA,OAAOxG,SACP6V,EAAAA,KAAI,SAACskE,GAA6B,OAAAA,EAAKtkE,KAAI,SAACukE,GAAQ,OAAA5pE,EAAAA,GAAG4pE,EAAIhkF,yDAXxC8R,SACFqzB,UACSvuB,EAAAA,2BAhCnB0tE,EAA0BxkF,EAAA,CALtCqH,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,2fACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bs+D,oBCAb,SAAAI,KAAsC,OAAzBA,EAAuB5kF,EAAA,CAfnCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcorB,GAAgBD,GAAaE,EAAAA,aAAcC,EAAAA,WACnErrB,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbk3E,2BAA4B,CAC1Bj3E,UAAWi3E,QAKnB98E,aAAc,CAAC88E,IACf72E,gBAAiB,CAAC62E,IAClBt8E,QAAS,CAACs8E,OAECI,MCrBAC,GAAkC,CAC7CllD,KAAM,CACJmlD,eAAgB,CACd7sE,QAAQ,EACR8sE,aAAc,EACdC,gBAAgB,mBCyBpB,SAAAC,EAAoB99C,GAApB,IAAA1gC,EAAAxH,KAAoBA,KAAAkoC,sBAAAA,EApBZloC,KAAAimF,mBAAqB,IAAIrgE,EAAAA,gBAAgB,MAEzC5lB,KAAAywC,SAEJzwC,KAAKkoC,sBAAsBzB,aAAa96B,KAC1C0F,EAAAA,OAAOxG,SACPgB,EAAAA,uBACAC,EAAAA,KAAI,SAAClM,GACH,OAAA4H,EAAKy+E,mBAAmB/jF,KAAKtC,EAAEohE,OAASphE,EAAEohE,OAAOC,QAAU,QAI/DjhE,KAAAkmF,QAA6BlmF,KAAKywC,SAAS9kC,KACzC+U,EAAAA,KAAI,SAAC9gB,GAAe,OAAA4H,EAAK2+E,aAAavmF,OAGxCI,KAAAomF,WAAa16E,EAAAA,cAAc,CAAC1L,KAAKywC,SAAUzwC,KAAKimF,qBAAqBt6E,KACnE+U,EAAAA,KAAI,SAAC3U,GAAkB,OAAlB1J,EAAA0J,EAAA,GAAG,OAyDZ,OApDEi6E,EAAA9lF,UAAAmmF,UAAA,SAAUnsD,GACRl6B,KAAKimF,mBAAmB/jF,KAAKg4B,IAG/B8rD,EAAA9lF,UAAAkjB,SAAA,SAASkjE,GACP,OAAOtmF,KAAKimF,mBAAmBt6E,KAC7B0F,EAAAA,OAAOxG,SACP6V,EAAAA,KAAI,SAACqR,GACH,OACEA,EAAUw0D,MACVx0D,EAAUw0D,KAAK3hF,KACf0hF,EAAUC,MACVD,EAAUC,KAAK3hF,KACfmtB,EAAUw0D,KAAK3hF,MAAQ0hF,EAAUC,KAAK3hF,SAO9CohF,EAAA9lF,UAAAk+B,UAAA,SAAUooD,GACR,OAAOxmF,KAAKimF,mBAAmBt6E,KAC7B0F,EAAAA,OAAOxG,SACP6V,EAAAA,KAAI,SAACqR,GACH,IAAM0E,EAAU+vD,EAAO3gF,MACrB,SAACtF,GACC,OAAAA,EAAEgyB,OACFR,EAAUw0D,MACVhmF,EAAEgyB,MAAMR,WACRxxB,EAAEgyB,MAAMR,UAAUw0D,MAClBhmF,EAAEgyB,MAAMR,UAAUw0D,KAAK3hF,MAAQmtB,EAAUw0D,KAAK3hF,OAElD,OAAO4hF,EAAO1oE,QAAQ2Y,QASpBuvD,EAAA9lF,UAAAimF,aAAR,SAAqBtwE,GACnB,OACGA,EAAQmrD,SACRnrD,EAAQmrD,OAAOylB,SAChB5wE,EAAQmrD,OAAOylB,QAAQ7lF,OAAS,EAEzB,GAGMiV,EAAQmrD,OAAOylB,QAAS/lE,KAAI,SAACtf,GAAM,OAAAia,EAAAA,GAAG,CAAE0W,UAAW3wB,iDApDzBglC,MArBhC4/C,EAAsBjlF,EAAA,CALlCqH,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,ooBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B++D,oBCmBb,SAAAU,KAAkC,OAArBA,EAAmB3lF,EAAA,CArB/ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAF,GACAo4B,GACAn4B,IAEFnrB,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb23E,uBAAwB,CACtB13E,UAAW03E,QAKnBv9E,aAAc,CAACu9E,IACft3E,gBAAiB,CAACs3E,IAClB/8E,QAAS,CAAC+8E,OAECU,oBCXX,SAAAC,EACYz+C,EACFo/B,EACExiE,GAFA9E,KAAAkoC,sBAAAA,EACFloC,KAAAsnE,mBAAAA,EACEtnE,KAAA8E,OAAAA,EAPZ9E,KAAA4mF,oBAAsB,IAAIhhE,EAAAA,iBAAyB,GAEnD5lB,KAAAywC,SAAgCzwC,KAAKkoC,sBAAsBzB,aAsE7D,OA9DEkgD,EAAAzmF,UAAA2mF,sBAAA,WACE7mF,KAAK4mF,oBAAoB1kF,OAAOlC,KAAK8mF,wBAIvCH,EAAAzmF,UAAA6mF,YAAA,WAAA,IAAAv/E,EAAAxH,KAEEA,KAAKsnE,mBACFlmB,UAAU,qDACV30C,WAAU,SAACu6E,GACV,IAAMC,EAAgBz/E,EAAK0/E,mBACrBC,EAAa3/E,EAAK4/E,cAAcJ,EAAiBC,GACjDI,EAAmB7/E,EAAKs/E,sBAC1BK,GAAcE,IAChB7/E,EAAK8/E,mBAAmBH,GACxBliE,YACE,WAAM,OAAAoiE,EAAiBE,eAAe,CAAEC,SAAU,aAClD,OAILp6E,eAKGu5E,EAAAzmF,UAAA4mF,oBAAR,WACE,OAAO9mF,KAAK8E,OAAOwB,SAASq5E,cAAc,uBAIpCgH,EAAAzmF,UAAAgnF,iBAAR,WACE,OAAOlnF,KAAK8E,OAAOwB,SAASq5E,cAAc,+BAIpCgH,EAAAzmF,UAAAonF,mBAAR,SAA2BplE,GAEtBA,EAAIy/D,UAAUj0D,SAAS,YACxBxL,EAAIy/D,UAAUj0D,SAAS,YAEvBxL,EAAIulE,SAKAd,EAAAzmF,UAAAknF,cAAR,SAAsBjwD,EAAe8vD,WACnC,GAAIA,EAAe,CAGjB,IAAMS,EAA6CT,EAAc1gF,qBAC/D,cAIF,IAA4B,IAAAyF,EAAAnK,EAAAlC,MAAMwQ,KAAKu3E,IAAYlkD,EAAAx3B,EAAA9J,QAAAshC,EAAAphC,KAAAohC,EAAAx3B,EAAA9J,OAAE,CAAhD,IAAMylF,EAAankD,EAAArhC,MACtB,GAAIwlF,EAAcr0B,UAAUttD,SAASmxB,GACnC,OAAOwwD,gJA9DoBvhD,UACL7uB,EAAAA,0BACV1Q,EAAAA,aART8/E,EAAqB5lF,EAAA,CALjCqH,EAAAA,UAAU,CACTC,SAAU,mBACVC,SAAA,utBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B0/D,oBCOb,SAAAiB,KAAiC,OAApBA,EAAkB7mF,EAAA,CAf9ByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcwF,EAAAA,WAAYwxB,IACpC/2B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbs4E,sBAAuB,CACrBr4E,UAAWq4E,QAKnBl+E,aAAc,CAACk+E,IACf19E,QAAS,CAAC09E,IACVj4E,gBAAiB,CAACi4E,OAEPiB,oBCqBX,SAAAC,EACYC,EACA5xE,EACA0jB,EACAmuD,EACAn2B,EACA7Y,GANZ,IAAAvxC,EAAAxH,KACYA,KAAA8nF,qBAAAA,EACA9nF,KAAAkW,QAAAA,EACAlW,KAAA45B,eAAAA,EACA55B,KAAA+nF,gBAAAA,EACA/nF,KAAA4xD,gBAAAA,EACA5xD,KAAA+4C,OAAAA,EAZF/4C,KAAAgoF,gBAAkB,GAIThoF,KAAAioF,wBAA0B,4BAWrCjoF,KAAAkoF,eAEJloF,KAAK8nF,qBACN7G,aACAt1E,KAAK0F,EAAAA,QAAO,SAAC82E,GAAiB,OAAA3oF,OAAOs3C,KAAKqxC,GAAcvnF,OAAS,MAE5DZ,KAAAooF,iBAEJ18E,EAAAA,cAAc,CAChB1L,KAAKkW,QAAQ6qB,iBAAiBp1B,KAC5BE,EAAAA,sBAAqB,SAAC+6B,EAAGyhD,GAGvB,OAAOzhD,EAAE3F,MAAMr8B,MAAQyjF,EAAEpnD,MAAMr8B,QAInC5E,KAAK4xD,gBAAgBxzB,YACrBp+B,KAAK+nF,gBAAgB3pD,cACpBzyB,KACD28E,EAAAA,MAAM,EAAG,SACTx8E,EAAAA,KAAI,SAACm1B,GACH,IAAMsnD,EAAW/gF,EAAKghF,qBACpBvnD,EAAMnY,OACNmY,EAAM5G,aAER7yB,EAAKw2D,OAAOuqB,OAaPvoF,KAAAyoF,OAAwC/8E,EAAAA,cAAc,CAC7D1L,KAAKkoF,eACLloF,KAAKooF,mBACJz8E,KAAK28E,EAAAA,MAAM,GAAIhnD,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,YAEzDqmD,EAAA3nF,UAAAwoF,mBAAA,WACE1oF,KAAK8nF,qBAAqB9G,gBAGpB6G,EAAA3nF,UAAAsoF,qBAAR,SACEG,EACAtuD,GAEA,MAAO,CACLra,MAAOqa,EAAYra,OAAShgB,KAAK4oF,wBAAwBD,GACzDv7D,SAAUiN,EAAYjN,UAAYptB,KAAKgoF,gBACvChuD,YAAaK,EAAYL,YACzBgB,SAAUX,EAAYW,WAIlB6sD,EAAA3nF,UAAA0oF,wBAAR,SAAgC78E,OAC9B88E,EAAA98E,EAAA88E,UACA1qB,EAAApyD,EAAAoyD,aACAn+C,EAAAjU,EAAAiU,MAEA,OAAIA,IAGAm+C,EACKn+D,KAAKioF,wBAA0B9pB,EAEpC0qB,EACK7oF,KAAKioF,wBAA0BY,OADxC,IAKMhB,EAAA3nF,UAAA89D,OAAR,SAAeuqB,GACb,IAAMvoE,EAAQuoE,EAASvoE,MACjB8oE,EAAe9oF,KAAK+oF,gBAAgBR,GAE1CvoF,KAAK8nF,qBAAqB9pB,OAAOh+C,EAAO8oE,IAGlCjB,EAAA3nF,UAAA6oF,gBAAR,SAAwBR,GACtB,IAAMxoC,EAAuB,CAC3B/lB,YAAauuD,EAASvuD,YACtB5M,SAAUm7D,EAASn7D,SACnB4N,SAAUutD,EAASvtD,UAMrB,OAFAx7B,OAAOs3C,KAAKiJ,GAAQn4C,SAAQ,SAAC1G,GAAQ,OAAC6+C,EAAO7+C,WAAe6+C,EAAO7+C,MAE5D6+C,GAGT8nC,EAAA3nF,UAAA8oF,SAAA,SAAShpE,GACPhgB,KAAKipF,eAAe,CAAEjpE,MAAKA,EAAEga,iBAAarlB,KAG5CkzE,EAAA3nF,UAAAgpF,SAAA,SAASC,GACPnpF,KAAKipF,eAAe,CAAEjvD,YAAamvD,KAMrCtB,EAAA3nF,UAAAkpF,aAAA,SAAaD,GAAb,IAAA3hF,EAAAxH,KACEA,KAAKkW,QACF6qB,iBACAt0B,WAAU,SAAC2sD,GACV,IAAMiwB,EAAgB7hF,EAAKghF,qBACzBpvB,EAAMn4B,MAAMnY,OACZswC,EAAMn4B,MAAM5G,aAERkuD,EAAQloF,EAAAA,EAAA,GACTgpF,GAAa,CAChBrvD,YAAamvD,IAEf3hF,EAAKw2D,OAAOuqB,MAEbn7E,eAGLy6E,EAAA3nF,UAAAsR,KAAA,SAAKwpB,GACHh7B,KAAKipF,eAAe,CAAEjuD,SAAQA,KAGxB6sD,EAAA3nF,UAAA+oF,eAAR,SAAuB5uD,GACrBr6B,KAAK+4C,OAAOuwC,SAAS,GAAI,CACvBjvD,YAAWA,EACXkvD,oBAAqB,QACrBC,WAAYxpF,KAAK45B,2DA5IajiB,EAAAA,4BACbI,EAAAA,sBACO4iB,EAAAA,sBACC3iB,EAAAA,uBACAC,EAAAA,uBACTmhC,EAAAA,ySAdTyuC,EAA2B9mF,EAAA,CADvCiG,EAAAA,WAAW,CAAEC,WAAY,UACb4gF,O3FzBDnf,GAAAA,EAAAA,YAAAA,EAAAA,UAAS,KACnB,KAAA,OACAA,GAAA,KAAA,OAQF,I4FnBY+gB,G5FmBZC,GAAA,WAAA,SAAAA,IACE1pF,KAAA2K,UAAYvK,EAAAA,UAIZJ,KAAA2pF,WAAa,IAAItoE,EAAAA,aAwBnB,OAtBE7hB,OAAAiC,eAAIioF,EAAAxpF,UAAA,cAAW,KAAf,WAEE,MAAO,cADkBF,KAAK4pF,SAAS5rE,+CAQzCxe,OAAAiC,eAAIioF,EAAAxpF,UAAA,WAAQ,KAAZ,WACE,MAAkB,SAAdF,KAAK86C,KACA96C,KAAK2K,UAAUtH,KACC,SAAdrD,KAAK86C,KACP96C,KAAK2K,UAAUrH,UADjB,mCAKTomF,EAAAxpF,UAAAq7C,WAAA,WACE,IAAMsuC,EACJ7pF,KAAK86C,OAAS4tB,EAAAA,UAAUohB,KAAOphB,EAAAA,UAAUqhB,KAAOrhB,EAAAA,UAAUohB,KAC5D9pF,KAAK2pF,WAAWroE,KAAKuoE,IAxBvB9oF,EAAA,CADCoH,EAAAA,oCAGDpH,EAAA,CADCwgB,EAAAA,2CAJUmoE,EAAoB3oF,EAAA,CALhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,kTACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9ByiE,GAAb,iB6FKE,SAAAM,EACU16B,EACA26B,EACDC,GAFClqF,KAAAsvD,kBAAAA,EACAtvD,KAAAiqF,4BAAAA,EACDjqF,KAAAkqF,aAAAA,EAbDlqF,KAAAgsB,aAAe,IAAIvhB,EAAAA,aAI3BzK,KAAAyoF,OAAwCzoF,KAAKiqF,4BAC1CxB,OAEHzoF,KAAAmqF,UAAY,IAAIvkE,EAAAA,gBAA2B8iD,EAAAA,UAAUohB,MACrD9pF,KAAA0oE,UAAYA,EAAAA,UAqCd,OA7BEshB,EAAA9pF,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKoqF,iBAAmBpqF,KAAKkqF,aAAaxpD,KAAKmlD,eAAe7sE,OAE9DhZ,KAAKiqF,4BAA4BvB,qBAEjC1oF,KAAKgsB,aAAavgB,IAChBzL,KAAKsvD,kBAAkBE,cACpB7jD,KAAKC,EAAAA,KAAK,IACVa,WAAU,SAACnE,GACVd,EAAK2iF,UAAUjoF,KACA,4BAAboG,EACIogE,EAAAA,UAAUohB,KACVphB,EAAAA,UAAUqhB,WAMxBC,EAAA9pF,UAAA66B,SAAA,SAASC,GACPh7B,KAAKiqF,4BAA4Bz4E,KAAKwpB,IAGxCgvD,EAAA9pF,UAAAmqF,YAAA,SAAYvvC,GACV96C,KAAKmqF,UAAUjoF,KAAK44C,IAGtBkvC,EAAA9pF,UAAAiN,YAAA,WACEnN,KAAKgsB,aAAa5e,wDAhCSwgD,UACUi6B,UAChBlnD,MAdZqpD,EAAoBjpF,EAAA,CAJhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,8pIAEW0hF,oBCsCX,SAAAM,EACUL,EACAhF,GADAjlF,KAAAiqF,4BAAAA,EACAjqF,KAAAilF,IAAAA,EAzCFjlF,KAAAgsB,aAAe,IAAIvhB,EAAAA,aAgC3BzK,KAAA0oE,UAAYA,EAAAA,UACZ1oE,KAAAuqF,gBAAiB,EACjBvqF,KAAAwqF,WAAY,EACZxqF,KAAAyqF,eAAgB,EAChBzqF,KAAA0qF,YAAa,EACb1qF,KAAAivC,SAAU,EAkFZ,OApHEzvC,OAAAiC,eAAI6oF,EAAApqF,UAAA,YAAS,KAAb,SAAcyqF,GACZ3qF,KAAK4qF,2BAA2BD,oCAKlCnrF,OAAAiC,eAAI6oF,EAAApqF,UAAA,WAAQ,KAAZ,SAAa2qF,GACX7qF,KAAK8qF,yBAAyBD,oCAKhCrrF,OAAAiC,eAAI6oF,EAAApqF,UAAA,cAAW,KAAf,SAAgB6qF,GACd/qF,KAAK+qF,cAAgBA,EAGjB/qF,KAAK4pF,SACP5pF,KAAKgrF,4BAILhrF,KAAK4pF,SAAWmB,mCAoBpBT,EAAApqF,UAAA+qF,WAAA,SAAW9B,GACTnpF,KAAKuqF,gBAAiB,EACtBvqF,KAAKilF,IAAIj7D,eACThqB,KAAKiqF,4BAA4Bb,aAAaD,IAGhDmB,EAAApqF,UAAAgrF,aAAA,SAAa/B,GACXnpF,KAAKyqF,eAAgB,EACrBzqF,KAAKirF,WAAW9B,IAGlBmB,EAAApqF,UAAAirF,YAAA,WACEx6D,OAAOy6D,OAAO,EAAG,IAGXd,EAAApqF,UAAA0qF,2BAAR,SAAmCV,GACjC,IAAMmB,EAAWnB,EAAaxpD,KAAKmlD,eAAeE,eAC5CuF,EAAqBpB,EAAaxpD,KAAKmlD,eAAeC,aAI5D9lF,KAAK8lF,aAAeuF,EAAW,EAAIC,GAG7BhB,EAAApqF,UAAA4qF,yBAAR,SAAiCD,GAC3B7qF,KAAKuqF,eACPvqF,KAAKurF,MAAKlrF,EAAAA,EAAA,GACLwqF,GAAU,CACbtc,SAAUvuE,KAAKurF,MAAMhd,SAAS5rE,OAAOkoF,EAAWtc,aAGlDvuE,KAAKurF,MAAQV,EACb7qF,KAAK4gF,YAAc5gF,KAAK8lF,cAE1B9lF,KAAKwrF,gBACLxrF,KAAKilF,IAAIj7D,gBAGHsgE,EAAApqF,UAAA8qF,0BAAR,WACEhrF,KAAKmrF,cACLnrF,KAAKwqF,WAAY,EACjBxqF,KAAKiqF,4BAA4Bb,aAAa,IAIxCkB,EAAApqF,UAAAsrF,cAAR,WACExrF,KAAKivC,SAAWjvC,KAAKurF,MAAMhd,UAA2C,IAA/BvuE,KAAKurF,MAAMhd,SAAS3tE,OAE3DZ,KAAK0qF,WACH1qF,KAAKurF,MAAM71D,WAAWsE,cACtBh6B,KAAKurF,MAAM71D,WAAWqE,WAAa,EAErC/5B,KAAKyqF,cACHzqF,KAAK8lF,cACiB,IAAtB9lF,KAAK8lF,cACL9lF,KAAKurF,MAAMhd,SAAS3tE,QAAUZ,KAAK4gF,YAGjC5gF,KAAKyqF,gBACPzqF,KAAK4gF,YAAc5gF,KAAKurF,MAAMhd,SAAS3tE,OAASZ,KAAK8lF,cAKnD9lF,KAAK4pF,WAAa5pF,KAAK+qF,gBACzB/qF,KAAK4pF,SAAW5pF,KAAK+qF,eAGvB/qF,KAAKwqF,WAAY,EACjBxqF,KAAKuqF,gBAAiB,GAGxBD,EAAApqF,UAAAiN,YAAA,WACEnN,KAAKgsB,aAAa5e,wDA7EmBy6E,UACxBn9D,EAAAA,qBAtCf3pB,EAAA,CADCoH,EAAAA,MAAM,+CAOPpH,EAAA,CADCoH,EAAAA,MAAM,uCAOPpH,EAAA,CADCoH,EAAAA,MAAM,kDAfImiF,EAAsBvpF,EAAA,CAJlCqH,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,mqFAEWgiF,oBCsBX,SAAAmB,EACUnhF,EACAsvB,EACAqwD,GAFAjqF,KAAAsK,aAAAA,EACAtK,KAAA45B,eAAAA,EACA55B,KAAAiqF,4BAAAA,EAbVjqF,KAAA2K,UAAYvK,EAAAA,UAMJJ,KAAA0rF,gBAAkB,IAAI57E,IAS5B9P,KAAK2rF,mBAAqB,IAAI9sE,IAC9B7e,KAAK4rF,WAAa,IAAIC,EAAAA,qBA2E1B,OAxEEJ,EAAAvrF,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAK8rF,IAAM9rF,KAAK45B,eAAe9Q,OAAOrc,WAAU,SAACqc,GAC/CthB,EAAKukF,qBAAuBjjE,EAAOq1C,cAAgBr1C,EAAO+/D,aAG5D7oF,KAAKgsF,cAAgBhsF,KAAKiqF,4BAA4BxB,OAAO98E,KAC3DG,EAAAA,KAAI,SAACq8E,GACCA,EAAa8D,QACf9D,EAAa8D,OAAOrkF,SAAQ,SAACwY,GAC3B5Y,EAAKmkF,mBAAmB5sE,IAAIqB,EAAG+K,MAAM,UAM7CnrB,KAAKksF,eAAiBlsF,KAAKgsF,cAAcrgF,KACvC+U,EAAAA,KAAI,SAACynE,GACH,OAAOA,EAAa8D,OAChB9D,EAAa8D,OAAO56E,QAAO,SAAC86E,GAAU,OAAAA,EAAMC,WAC5C,QAKVX,EAAAvrF,UAAAmsF,gBAAA,SAAgB5iF,GACdzJ,KAAKsK,aAAad,KAAKC,EAAS,CAAE6iF,eAAgB,uBAGpDb,EAAAvrF,UAAAqsF,YAAA,SAAYvsE,GACVhgB,KAAKiqF,4BAA4BjB,SAC/BhpF,KAAK4rF,WAAWY,YAAYxsE,KAIhCyrE,EAAAvrF,UAAAusF,SAAA,SAASC,GACP1sF,KAAK2sF,yBAAyBD,GAAW,IAG3CjB,EAAAvrF,UAAA0sF,SAAA,SAASF,GACP1sF,KAAK2sF,yBAAyBD,GAAW,IAGnCjB,EAAAvrF,UAAAysF,yBAAR,SAAiCD,EAAmBG,GAClD7sF,KAAK2rF,mBAAmB5sE,IAAI2tE,EAAWG,IAGzCpB,EAAAvrF,UAAA4sF,iBAAA,SAAiBJ,GACf,OAAO1sF,KAAK0rF,gBAAgB95E,IAAI86E,IAGlCjB,EAAAvrF,UAAA6sF,YAAA,SAAYL,GACN1sF,KAAK0rF,gBAAgB95E,IAAI86E,GAC3B1sF,KAAK0rF,gBAAgBzsE,OAAOytE,GAE5B1sF,KAAK0rF,gBAAgBjgF,IAAIihF,IAI7BjB,EAAAvrF,UAAA8sF,sBAAA,SAAsBb,GACpB,OAAOA,EAAMc,OAAOhiE,MAClB,EACAjrB,KAAK2rF,mBAAmBl5E,IAAI05E,EAAMhhE,MAC9BghE,EAAMc,OAAOrsF,OACburF,EAAMe,gBAIdzB,EAAAvrF,UAAAiN,YAAA,WACMnN,KAAK8rF,KACP9rF,KAAK8rF,IAAI1+E,wDA7EW/D,SACEsxB,EAAAA,sBACaktD,MAhB5B4D,EAA+B1qF,EAAA,CAL3CqH,EAAAA,UAAU,CACTC,SAAU,8BACVC,SAAA,6hNACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BwkE,oBCbb,SAAA0B,KAEA,OADWpsF,EAAA,CAARoH,EAAAA,uCADUglF,EAAwBpsF,EAAA,CALpCqH,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,srCACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BkmE,oBCAb,SAAAC,KAEA,OADWrsF,EAAA,CAARoH,EAAAA,uCADUilF,EAAwBrsF,EAAA,CALpCqH,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,skDACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BmmE,oBCKX,SAAAC,EAAoBnlD,GAAAloC,KAAAkoC,sBAAAA,EAEpBloC,KAAAstF,SAAyB,GACzBttF,KAAAutF,YAAcC,EAAAA,YAgBhB,OAbEH,EAAAntF,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKywC,SAAWzwC,KAAKkoC,sBAAsBzB,aAAa96B,KACtD0F,EAAAA,QAAO,SAACwE,GAAY,SAAGA,IAAWA,EAAQ43E,gBAC1C5hF,EAAAA,uBACAC,EAAAA,KAAI,SAAC+J,GACHA,EAAQ43E,YAAY7lF,SAAQ,SAAC8lF,GACvBA,GAAUA,EAAOH,cACnB/lF,EAAK8lF,SAASI,EAAOH,aAAeG,oDAbHtnD,MADhCinD,EAAwBtsF,EAAA,CALpCqH,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAA,mqBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BomE,oBCQX,SAAAM,EACU/nF,EACAygC,EACA7rB,GAFAxa,KAAA4F,OAAAA,EACA5F,KAAAqmC,eAAAA,EACArmC,KAAAwa,eAAAA,EAGVxa,KAAA4tF,iBAAmBC,EAAAA,iBAsCrB,OAjCEF,EAAAztF,UAAA4tF,sBAAA,SAAsBC,GACpB,IAAMpoC,EAAMooC,EAAWloF,MAAK,SAAC4iE,GAAM,OAAAA,EAAEulB,YAAcH,EAAAA,iBAAiBI,SACpE,OAAOtoC,EAAMA,EAAIxjD,MAAQ,IAG3BwrF,EAAAztF,UAAAguF,uBAAA,SACEC,GAEA,IAAMH,EAAYG,EAAwBtoF,MAAK,SAACq0B,GAAS,OAAAA,EAAKo4B,SAC9D,OAAO07B,EACH,GAAGhuF,KAAK4F,OAAOotB,QAAQE,IAAID,QAAU+6D,EAAU17B,MAAM1tD,IACrD,IAGN+oF,EAAAztF,UAAAkuF,YAAA,SAAYx8D,GAAZ,IAAApqB,EAAAxH,KAiBE,OAhBI4xB,GACF5xB,KAAKqmC,eACF5zB,IAAImf,EAAM2U,EAAAA,aAAajjC,MACvBqI,KAGC0F,EAAAA,OAAOxG,SACPe,EAAAA,KAAK,IAENa,WAAU,SAACoJ,GACVrO,EAAKgT,eAAeQ,GAAG,CACrBC,QAAS,UACT6N,OAAQjT,OAIT,+CAzCSsd,EAAAA,iBACQzb,EAAAA,sBACAK,EAAAA,kBAM1BhX,EAAA,CADCoH,EAAAA,wCATUwlF,EAA6B5sF,EAAA,CALzCqH,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,+zBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B0mE,oBCNb,SAAAU,KAAyC,OAA5BA,EAA0BttF,EAAA,CANtCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAcC,EAAAA,UAAW9lB,EAAAA,YACjD1F,aAAc,CAACklF,IACfj/E,gBAAiB,CAACi/E,IAClB1kF,QAAS,CAAC0kF,OAECU,oBCMX,SAAAC,EACUjoD,EACA7rB,GADAxa,KAAAqmC,eAAAA,EACArmC,KAAAwa,eAAAA,EAgCZ,OAvBE8zE,EAAApuF,UAAAquF,WAAA,SAAW38D,GAAX,IAAApqB,EAAAxH,KAiBE,OAhBI4xB,GACF5xB,KAAKqmC,eACF5zB,IAAImf,EAAM2U,EAAAA,aAAajjC,MACvBqI,KAGC0F,EAAAA,OAAOxG,SACPe,EAAAA,KAAK,IAENa,WAAU,SAACoJ,GACVrO,EAAKgT,eAAeQ,GAAG,CACrBC,QAAS,UACT6N,OAAQjT,OAIT,MAETy4E,EAAApuF,UAAA4tF,sBAAA,SAAsBC,GACpB,IAAMpoC,EAAMooC,EAAWloF,MAAK,SAAC4iE,GAAM,OAAAA,EAAEulB,YAAcH,EAAAA,iBAAiBW,QACpE,OAAO7oC,EAAMA,EAAIxjD,MAAQ,6CA/BDuV,EAAAA,sBACAK,EAAAA,kBAI1BhX,EAAA,CADCoH,EAAAA,uCAIDpH,EAAA,CADCoH,EAAAA,wCATUmmF,EAA4BvtF,EAAA,CALxCqH,EAAAA,UAAU,CACTC,SAAU,2BACVC,SAAA,6qBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BqnE,oBCLb,SAAAG,KAAwC,OAA3BA,EAAyB1tF,EAAA,CANrCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAcC,EAAAA,UAAW9lB,EAAAA,YACjD1F,aAAc,CAAC6lF,IACf5/E,gBAAiB,CAAC4/E,IAClBrlF,QAAS,CAACqlF,OAECG,oBCGX,SAAAC,EAAoBl0E,GAAAxa,KAAAwa,eAAAA,EAqBtB,OAbEk0E,EAAAxuF,UAAAyuF,YAAA,SAAY/8D,EAAczG,GAOxB,OANIyG,GACF5xB,KAAKwa,eAAeQ,GAAG,CACrBC,QAAS,UACT6N,OAAQ,CAAE8I,KAAIA,EAAEzG,KAAIA,KAGjB,MAETujE,EAAAxuF,UAAA4tF,sBAAA,SAAsBC,GACpB,IAAMpoC,EAAMooC,EAAWloF,MAAK,SAAC4iE,GAAM,OAAAA,EAAEulB,YAAcH,EAAAA,iBAAiBe,SACpE,OAAOjpC,EAAMA,EAAIxjD,MAAQ,6CAnBS4V,EAAAA,kBAGpChX,EAAA,CADCoH,EAAAA,uCAIDpH,EAAA,CADCoH,EAAAA,wCANUumF,EAA6B3tF,EAAA,CALzCqH,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,ygBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BynE,oBCFb,SAAAG,KAAyC,OAA5BA,EAA0B9tF,EAAA,CANtCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAcC,EAAAA,UAAW9lB,EAAAA,YACjD1F,aAAc,CAACimF,IACfhgF,gBAAiB,CAACggF,IAClBzlF,QAAS,CAACylF,OAECG,oBCSX,SAAAC,EAAoBlpF,GAAA5F,KAAA4F,OAAAA,EAKpB5F,KAAA+uF,aAA0C,GAkC5C,OAhCED,EAAA5uF,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKstF,SAAS1lF,SAAQ,SAAConF,GACrBxnF,EAAKunF,aAAaC,EAAQp9D,MAAQpqB,EAAKynF,eACrCD,EAAQb,6BAKdW,EAAA5uF,UAAAguF,uBAAA,SACEC,GAEA,IAAM7H,EAAY6H,EAAwBtoF,MACxC,SAACq0B,GAAS,OAAAA,EAAK8zD,YAAcH,EAAAA,iBAAiBqB,aAEhD,OAAO5I,EACH,GAAGtmF,KAAK4F,OAAOotB,QAAQE,IAAID,QAAUqzD,EAAUh0B,MAAM1tD,IACrD,IAGEkqF,EAAA5uF,UAAA+uF,eAAR,SACEd,GAEA,IAAMgB,EAAiBhB,EAAwBtoF,MAC7C,SAACq0B,GAAS,OAAAA,EAAK8zD,YAAcH,EAAAA,iBAAiBuB,mBAE1CC,EAAWF,EACbhB,EAAwBtoF,MACtB,SAACq0B,GAAS,OAAAA,EAAK8zD,YAAcmB,EAAehtF,SAE9C,KACJ,OAAOktF,EAAWA,EAASltF,MAAQ,6CArCTgxB,EAAAA,aAG5BpyB,EAAA,CADCoH,EAAAA,wCAHU2mF,EAA0B/tF,EAAA,CANtCqH,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,6PAEAye,gBAAiBC,EAAAA,wBAAwBC,gHAE9B6nE,oBCRb,SAAAQ,KAAsC,OAAzBA,EAAuBvuF,EAAA,CANnCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAcC,EAAAA,UAAW9lB,EAAAA,YACjD1F,aAAc,CAACqmF,IACfpgF,gBAAiB,CAACogF,IAClB7lF,QAAS,CAAC6lF,OAECQ,oBCIX,SAAAC,EACUlpD,EACA7rB,GADAxa,KAAAqmC,eAAAA,EACArmC,KAAAwa,eAAAA,SAGV+0E,EAAArvF,UAAA8uC,YAAA,WAAA,IAAAxnC,EAAAxH,KACE,OAAOA,KAAKwa,eAAeumB,iBAAiBp1B,KAC1C+U,EAAAA,KAAI,SAACugB,GAAU,OAAAA,EAAMuuD,UAAU1mE,OAAO6d,eACtCtqB,EAAAA,WAAU,SAACsqB,GAET,OAAKA,EAIEn/B,EAAK6+B,eAAe5zB,IAAIk0B,EAAaJ,EAAAA,aAAakpD,UAAU9jF,KACjE0F,EAAAA,OAAOxG,SACP6V,EAAAA,KAAI,SAAC7K,GACH,GAAKA,EAAQ65E,YAeX,OAAO,EAdP,IAAMV,EAAUxnF,EAAKmoF,YAAY95E,EAAQ+5E,gBAYzC,OATApoF,EAAK6+B,eACF5zB,IAAIu8E,EAAQp9D,KAAM2U,EAAAA,aAAajjC,MAC/BqI,KAAK0F,EAAAA,OAAOxG,SAAUe,EAAAA,KAAK,IAC3Ba,WAAU,SAACojF,GACVroF,EAAKgT,eAAeQ,GAAG,CACrBC,QAAS,UACT6N,OAAQ+mE,QAGP,MAnBJx0E,EAAAA,IAAG,QA6BlBk0E,EAAArvF,UAAAyvF,YAAA,SAAYrC,GACV,IAAM/uC,EAA2B+uC,EAASj8E,QAAO,SAAC29E,GAChD,SAAOA,EAAQtmD,QAASsmD,EAAQtmD,MAAME,aAAaomD,KAErD,OAAQzwC,EAAQ39C,QAAU0sF,EAAS1sF,OAAS0sF,EAAS,GAAK/uC,EAAQ,6CA3C1C7mC,EAAAA,sBACAK,EAAAA,iLAHfw3E,EAAmBxuF,EAAA,CAH/BiG,EAAAA,WAAW,CACVC,WAAY,UAEDsoF,oBC2Bb,SAAAO,KAAoC,OAAvBA,EAAqB/uF,EAAA,CAzBjCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAC,EAAAA,UACA9lB,EAAAA,WACAkgF,GACAI,GACAI,GACAS,IAEF1mF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb0hF,gCAAiC,CAC/BzhF,UAAW++E,GACXx9E,OAAQ,CAAC0/E,SAKjB9mF,aAAc,CAAC4kF,IACf3+E,gBAAiB,CAAC2+E,IAClBpkF,QAAS,CAAC6lF,OAECgB,oBC4Cb,SAAAE,KAAgC,OAAnBA,EAAiBjvF,EAAA,CAvD7ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAqrB,EAAAA,aACAF,GACAka,GACA/Y,GACAgG,GACAhH,EAAAA,UACA9lB,EAAAA,WACAwxB,GACAp3B,EACA8yB,GACA40D,EAAAA,qBACA3vD,GACAwvD,GACA1hF,EAAAA,sBAEFxF,UAAW,CACTC,EAAAA,qBAAiC+8E,IACjC/8E,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb6hF,wBAAyB,CACvB5hF,UAAW07E,IAEbmG,qBAAsB,CACpB7hF,UAAW07E,IAEboG,2BAA4B,CAC1B9hF,UAAW07E,IAEbqG,2BAA4B,CAC1B/hF,UAAWm9E,QAKnBhjF,aAAc,CACZuhF,GACAyB,GACA2B,GACAD,GACAzD,GACAY,IAEFrhF,QAAS,CACP+gF,GACAyB,GACA2B,GACAD,GACAzD,GACAY,IAEF57E,gBAAiB,CAACs7E,GAAsByB,OAE7BuE,OjBtFDvG,GAAAA,EAAAA,uBAAAA,EAAAA,qBAAoB,KAC9B,MAAA,YACAA,GAAA,MAAA,YACAA,GAAA,MAAA,YACAA,GAAA,QAAA,gCkBYA,SAAA6G,EAAsBpoD,GAAAloC,KAAAkoC,sBAAAA,EAJtBloC,KAAAuwF,QAAU9G,EAAAA,qBAEVzpF,KAAAywC,SAAgCzwC,KAAKkoC,sBAAsBzB,aAG7D,gDAD+CL,MALlCkqD,EAAuBvvF,EAAA,CALnCqH,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,yxBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BqpE,oBCUb,SAAAE,KAAmC,OAAtBA,EAAoBzvF,EAAA,CAfhCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcujD,GAAc/9C,EAAAA,YACtCvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbiiF,wBAAyB,CACvBhiF,UAAWgiF,QAKnB7nF,aAAc,CAAC6nF,IACf5hF,gBAAiB,CAAC4hF,IAClBrnF,QAAS,CAACqnF,OAECE,oBCNX,SAAAC,EAAsBvoD,GAAAloC,KAAAkoC,sBAAAA,EAJtBloC,KAAAywC,SAAgCzwC,KAAKkoC,sBAAsBzB,WACzDF,EAAAA,aAAamqD,YAIjB,gDAD+CtqD,MALlCqqD,EAA0B1vF,EAAA,CALtCqH,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,2lBACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9BwpE,oBCWb,SAAAE,KAAsC,OAAzBA,EAAuB5vF,EAAA,CAfnCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcwF,EAAAA,YACxBvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbuiF,yBAA0B,CACxBtiF,UAAWmiF,QAKnBhoF,aAAc,CAACgoF,IACf/hF,gBAAiB,CAAC+hF,IAClBxnF,QAAS,CAACwnF,OAECE,oBCRX,SAAAE,EAAsB3oD,GAAAloC,KAAAkoC,sBAAAA,EAKxB,OAHE2oD,EAAA3wF,UAAA8K,SAAA,WACEhL,KAAKywC,SAAWzwC,KAAKkoC,sBAAsBzB,uDAHAL,MAHlCyqD,EAA0B9vF,EAAA,CALtCqH,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,4IACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B4pE,oBCWb,SAAAC,KAAsC,OAAzBA,EAAuB/vF,EAAA,CAfnCyH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,cACVC,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbwiF,2BAA4B,CAC1BviF,UAAWuiF,QAKnBpoF,aAAc,CAACooF,IACfniF,gBAAiB,CAACmiF,IAClB5nF,QAAS,CAAC4nF,OAECC,oBC+BX,SAAAC,EACYtvB,EACAv5B,EACF7c,EACE8c,GAJZ,IAAA3gC,EAAAxH,KACYA,KAAAyhE,cAAAA,EACAzhE,KAAAkoC,sBAAAA,EACFloC,KAAAqrB,GAAAA,EACErrB,KAAAmoC,GAAAA,EA1BZnoC,KAAAgxF,iBAAkB,EAGlBhxF,KAAAixF,oBAAsB,EAItBjxF,KAAAywC,SAAgCzwC,KAAKkoC,sBAAsBzB,aAE3DzmC,KAAAkxF,SAAiClxF,KAAKywC,SAAS9kC,KAC7C0F,EAAAA,QAAO,SAACzR,GAAM,QAAEA,KAChB8gB,EAAAA,KAAI,SAAC9gB,GAAM,OAAAA,EAAEgyB,QACb/lB,EAAAA,uBACAwQ,EAAAA,WAAU,SAACsqB,GACT,OAAAn/B,EAAKi6D,cAAcC,iBAAiB/6B,MAEtC76B,EAAAA,KAAI,WACFtE,EAAK2pF,kBACL3pF,EAAK4pF,aAAe5pF,EAAKypF,wBAyE/B,OA9DEF,EAAA7wF,UAAAmxF,oBAAA,WACErxF,KAAKgxF,iBAAkB,EAEvBhxF,KAAKmoC,GAAGmpD,gBAEJtxF,KAAKuxF,YAAcvxF,KAAKuxF,WAAWvpF,eACrChI,KAAKuxF,WAAWvpF,cAAc4W,SAIlCmyE,EAAA7wF,UAAAsxF,kBAAA,WACExxF,KAAKgxF,iBAAkB,EACvBhxF,KAAKmxF,kBAELnxF,KAAKmoC,GAAGmpD,gBAEJtxF,KAAKyxF,mBAAqBzxF,KAAKyxF,kBAAkBzpF,eACnDhI,KAAKyxF,kBAAkBzpF,cAAc4W,SAIzCmyE,EAAA7wF,UAAAwxF,UAAA,SAAUnyD,GACRv/B,KAAK2xF,WAAW/kE,SAAS2S,OAAOhS,SAASgS,IAG3CwxD,EAAA7wF,UAAA0xF,aAAA,SAAa/7E,GACP7V,KAAK2xF,WAAW/lE,MAClB5rB,KAAK6xF,UAAUh8E,GAEf7V,KAAK2xF,WAAW9lE,oBAIpBklE,EAAA7wF,UAAA2xF,UAAA,SAAUh8E,GACR,IAAMi8E,EAAqB9xF,KAAK2xF,WAAW/kE,SACrCk1C,EAAiB,CACrBe,SAAUivB,EAAmBzvC,MAAMlgD,MACnCkgE,QAASyvB,EAAmBzvB,QAAQlgE,MACpCo9B,OAAQuyD,EAAmBvyD,OAAOp9B,MAClC4vF,MAAOD,EAAmBE,aAAa7vF,OAGzCnC,KAAKyhE,cAAch2D,IAAIoK,EAAQ+b,KAAMkwC,GAErC9hE,KAAKgxF,iBAAkB,EACvBhxF,KAAKmxF,kBAELnxF,KAAKmoC,GAAGmpD,gBAEJtxF,KAAKyxF,mBAAqBzxF,KAAKyxF,kBAAkBzpF,eACnDhI,KAAKyxF,kBAAkBzpF,cAAc4W,SAIjCmyE,EAAA7wF,UAAAixF,gBAAR,WACEnxF,KAAK2xF,WAAa3xF,KAAKqrB,GAAGvM,MAAM,CAC9BujC,MAAO,CAAC,GAAI52B,EAAAA,WAAWC,UACvB22C,QAAS,CAAC,GAAI52C,EAAAA,WAAWC,UACzB6T,OAAQ,CAAC,KAAM0E,GAAqBQ,iBACpCutD,aAAc,+CAjESp6E,EAAAA,4BACQwuB,UACrBta,EAAAA,mBACEpB,EAAAA,qBA9B4B3pB,EAAA,CAA3C8sB,EAAAA,UAAU,aAAc,CAAEokE,QAAQ,sCAEnClxF,EAAA,CADC8sB,EAAAA,UAAU,oBAAqB,CAAEokE,QAAQ,6CAF/BlB,EAAuBhwF,EAAA,CALnCqH,EAAAA,UAAU,CACTC,SAAU,qBACVC,SAAA,07IACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9B8pE,oBCKb,SAAAmB,KAAmC,OAAtBA,EAAoBnxF,EAAA,CAtBhCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAusB,EAAAA,oBACAiG,EAAAA,YACAhtB,EAAAA,WACAwxB,GACAU,IAEFz3B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb8jF,2BAA4B,CAC1B7jF,UAAWyiF,QAKnBtoF,aAAc,CAACsoF,IACfriF,gBAAiB,CAACqiF,IAClB9nF,QAAS,CAAC8nF,OAECmB,oBClBb,SAAAE,KAAgC,OAAnBA,EAAiBrxF,EAAA,CAP7ByH,EAAAA,SAAS,CACRE,QAAS,CACPioF,GACAG,GACAoB,OAGSE,oBCCX,SAAAC,EACU/nF,EACAgoF,GADAtyF,KAAAsK,aAAAA,EACAtK,KAAAsyF,iBAAAA,EAJVtyF,KAAAuyF,aAAyC,GAsB3C,OAfEF,EAAAnyF,UAAAiK,MAAA,WACEnK,KAAKsK,aAAaR,sBAGpBuoF,EAAAnyF,UAAAiN,YAAA,WAAA,IAAA3F,EAAAxH,KACMA,KAAKwyF,mBACPxyF,KAAKwyF,kBACF/lF,WAAU,SAAC8+B,GACNA,GACF/jC,EAAK8qF,iBAAiBG,2BAGzBrlF,wDAhBiB/D,SACIoP,EAAAA,wBANjB45E,EAAgCtxF,EAAA,CAJ5CqH,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,mxFAEW+pF,oBCgCX,SAAAK,EACUp4E,EACA4tB,EACArsB,EACAyrD,EACAgrB,EACAhoF,EACAqoF,GANA3yF,KAAAsa,YAAAA,EACAta,KAAAkoC,sBAAAA,EACAloC,KAAA6b,qBAAAA,EACA7b,KAAAsnE,mBAAAA,EACAtnE,KAAAsyF,iBAAAA,EACAtyF,KAAAsK,aAAAA,EACAtK,KAAA2yF,wBAAAA,EAdV3yF,KAAA4yF,WAAY,EAEJ5yF,KAAAuyF,aAAyC,GAGzCvyF,KAAAwK,cAAgB,IAAIC,EAAAA,aAiI9B,OArHEioF,EAAAxyF,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAK6yF,YAAcnnF,EAAAA,cAAc,CAC/B1L,KAAKkoC,sBAAsBzB,aAAa96B,KAAK0F,EAAAA,OAAOxG,UACpD7K,KAAKsa,YAAY+P,iBAChB1e,KACDG,EAAAA,KAAI,SAACC,OAAAC,EAAA3J,EAAA0J,EAAA,GAAC8J,EAAA7J,EAAA,GAAS2Q,EAAA3Q,EAAA,GACbxE,EAAKm/B,YAAc9wB,EAAQ+b,KACvBjV,IAAWmuB,EAAAA,wBACbtjC,EAAKorF,WAAY,EACjBprF,EAAKmrF,wBAAwBhZ,kBAC7BnyE,EAAK8qF,iBAAiB7W,qBACpB,KACA,KACA,KACA5lE,EAAQ+b,KACRkhE,EAAAA,iBAAiBC,mBAIvBryE,EAAAA,KACE,SAAC3U,OAAC8J,EAADxT,EAAA0J,EAAA,GAAC,GACA,QAAE8J,EAAQ6yB,OAA4C,eAAnC7yB,EAAQ6yB,MAAMC,qBAIvC3oC,KAAKgzF,qBAAuBhzF,KAAKsyF,iBAC9BW,sBACAtnF,KACC+U,EAAAA,KACE,SAACm6D,GAAc,QAAEA,EAAUt8B,SAAwC,IAA7Bs8B,EAAUt8B,QAAQ39C,WAG9DZ,KAAKwyF,kBAAoBxyF,KAAKsyF,iBAAiBY,+BAC/ClzF,KAAKmzF,yBAA2BnzF,KAAKsyF,iBAAiBpX,iCACtDl7E,KAAKozF,cAAgBpzF,KAAK2yF,wBACvBU,wBACA1nF,KACCG,EAAAA,KAAI,SAACwnF,GAAU,OAAC9rF,EAAK+qF,aAAee,KACpC5yE,EAAAA,KAAI,SAAC4yE,GAAU,OAAAA,EAAM1yF,OAAS,MAGlCZ,KAAKwK,cAAciB,IACjBzL,KAAKsyF,iBAAiBiB,6BAA6B9mF,WAAU,SAAChK,GACxDA,GACF+E,EAAKgsF,4BAIXxzF,KAAKwK,cAAciB,IACjBzL,KAAKsyF,iBACFmB,iCACAhnF,WAAU,SAAC8+B,GACNA,GACF/jC,EAAKksF,iCAMfhB,EAAAxyF,UAAAuM,UAAA,WACEzM,KAAKiO,aACLjO,KAAKsyF,iBAAiBqB,mBACpB3zF,KAAK2mC,YACLmsD,EAAAA,iBAAiBC,gBAIrBL,EAAAxyF,UAAAkN,YAAA,WACEpN,KAAKsyF,iBAAiB/W,qBACpB,CACE1lE,QAAS,CACP+b,KAAM5xB,KAAK2mC,aAEb60C,qBAAsB,CACpB,CACEoY,aAAcd,EAAAA,iBAAiBC,kBAIrC,IAIIL,EAAAxyF,UAAAwzF,0BAAR,WAAA,IAAAlsF,EAAAxH,KACEA,KAAKwK,cAAciB,IACjBzL,KAAKsnE,mBACFlmB,UAAU,wCACVz1C,KAAKg+C,EAAAA,SACLl9C,WAAU,SAACmzC,GACV,OAAAp4C,EAAKqU,qBAAqBpQ,IAAIm0C,EAAMpjC,EAAAA,kBAAkBq3E,mBAG5D7zF,KAAKsyF,iBAAiB3W,4BAGhB+W,EAAAxyF,UAAAszF,sBAAR,WACExzF,KAAKsK,aAAaR,qBAClB9J,KAAKsyF,iBAAiBG,yBAGhBC,EAAAxyF,UAAA+N,WAAR,WACE,IAAMi7B,EAAgBlpC,KAAKsK,aAAad,KACtC6oF,GACA,CACEzkF,UAAU,EACVC,KAAM,OAERu7B,kBACFF,EAAcspD,kBAAoBxyF,KAAKwyF,kBACvCtpD,EAAcqpD,aAAevyF,KAAKuyF,cAGpCG,EAAAxyF,UAAAiN,YAAA,WACEnN,KAAKwK,cAAc4C,cACnBpN,KAAKsyF,iBAAiB5W,wBACtB17E,KAAK2yF,wBAAwBmB,6DA5HR/8E,EAAAA,mBACUqvB,UACD9uB,EAAAA,4BACFC,EAAAA,0BACFkB,EAAAA,4BACJpP,SACWmP,EAAAA,qCAnBxBk6E,EAA0B3xF,EAAA,CALtCqH,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,kvEACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9ByrE,oBCEb,SAAAqB,KAAsC,OAAzBA,EAAuBhzF,EAAA,CAlBnCyH,EAAAA,SAAS,CACRC,aAAc,CAACiqF,GAA4BL,IAC3C3pF,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAc7lB,EAAAA,WAAYktB,GAAepH,EAAAA,WACjErrB,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbqkF,2BAA4B,CAC1BpkF,UAAWokF,QAKnBhkF,gBAAiB,CACfgkF,GACAL,IAEFppF,QAAS,CAACypF,GAA4BL,OAE3B0B,MCtBbC,GAAA,WAKE,SAAAA,EAAoBC,GAAAj0F,KAAAi0F,iBAAAA,EAFpBj0F,KAAAk0F,YAAsB,KA0CxB,OAtCEF,EAAA9zF,UAAAwzB,YAAA,SAAY83B,GACV,GAAIA,EAAQ52C,UAAY5U,KAAK4U,SAAU,CACrC,IAAMu/E,EAAcn0F,KAAKo0F,iBACzBp0F,KAAKk0F,YAAc,GAEnB,IAAK,IAAIzzF,EAAI,EAAGA,EAlBG,EAkBmBA,IAAK,CACzC,IAAMgiE,EAAO,IAAIzjB,KAAKm1C,EAAYE,WAClC5xB,EAAK6xB,QAAQ7xB,EAAKG,UAAYniE,GAC9BT,KAAKk0F,YAAY1xF,KAAKigE,MAS5BuxB,EAAA9zF,UAAAq0F,oBAAA,SAAoB9xB,GAClB,OAAOziE,KAAKi0F,iBAAiBM,oBAAoBv0F,KAAK4U,SAAU6tD,IAOlEuxB,EAAA9zF,UAAAs0F,oBAAA,SAAoB/xB,GAClB,OAAOziE,KAAKi0F,iBAAiBO,oBAAoBx0F,KAAK4U,SAAU6tD,IAM1DuxB,EAAA9zF,UAAAk0F,eAAR,WACE,IAAMK,EAAc,IAAIz1C,KAGxB,OAFAy1C,EAAYH,QAAQG,EAAY7xB,UAAY6xB,EAAYC,UAEjDD,4CAtC6BE,EAAAA,oBAHtC5zF,EAAA,CADCoH,EAAAA,wCADU6rF,EAAiBjzF,EAAA,CAJ7BqH,EAAAA,UAAU,CACTC,SAAU,cACVC,SAAA,ukBAEW0rF,GAAb,iBCOE,SAAAY,EACUC,EACAz7B,GADAp5D,KAAA60F,mBAAAA,EACA70F,KAAAo5D,MAAAA,EAqBZ,OAlBEw7B,EAAA10F,UAAA8K,SAAA,WACEhL,KAAK0gD,WAAa1gD,KAAK60F,mBAAmBC,0BAC1C90F,KAAK+0F,WAAa/0F,KAAK60F,mBAAmBG,2BAC1Ch1F,KAAKi1F,gBAAkB,GAEnBj1F,KAAKo5D,MAAM9+B,SAASxR,OAAOw0B,SAC7Bt9C,KAAK60F,mBAAmBK,iBACtB,GACA,CACE9nE,UAAW,QAEbzY,EACA3U,KAAKo5D,MAAM9+B,SAASxR,OAAOw0B,UAKjCs3C,EAAA10F,UAAAiN,YAAA,sDArB8BgoF,EAAAA,0BACbx6D,EAAAA,kBATNi6D,EAAwB7zF,EAAA,CAJpCqH,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,6iBAEWssF,oBCHb,SAAAQ,KAAyC,OAA5BA,EAA0Br0F,EAAA,CAJtCqH,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,4FAEW8sF,MCDbC,GAAA,WAIE,SAAAA,EAAsBpB,GAAAj0F,KAAAi0F,iBAAAA,EAYxB,OAVEoB,EAAAn1F,UAAAo1F,cAAA,SAAc1gF,GAIZ,MAHuB,oDACN5U,KAAKi0F,iBAAiBsB,iBAAiB3gF,GAErB,IADjB5U,KAAKi0F,iBAAiBuB,kBAAkB5gF,IAI5DygF,EAAAn1F,UAAAu1F,yBAAA,SAAyBC,GACvB,OAAOA,EAAarkF,OAAOxG,SAAS8V,KAAK,gDAVHg0E,EAAAA,oBAFxC5zF,EAAA,CADCoH,EAAAA,wCADUktF,EAA0Bt0F,EAAA,CADtCqT,EAAAA,aACYihF,GAAb,kBCgBE,SAAAM,EACY1B,EACA76B,EACA5+C,GAHZ,IAAAhT,EAKE2B,EAAAtI,KAAAb,KAAMi0F,IAAiBj0F,YAJbwH,EAAAysF,iBAAAA,EACAzsF,EAAA4xD,MAAAA,EACA5xD,EAAAgT,eAAAA,EAbZhT,EAAAouF,cAAwB,KAQxBpuF,EAAAquF,eAAuC,IAAIx0E,EAAAA,eAmC7C,OA7CkDvhB,EAAA61F,EAAAxsF,GAoBhDwsF,EAAAz1F,UAAA41F,qBAAA,WAC6B,OAAvB91F,KAAK41F,eACP51F,KAAK61F,eAAev0E,KAAKthB,KAAK41F,gBAIlCD,EAAAz1F,UAAA61F,UAAA,SAAUnhF,GACR5U,KAAKwa,eAAeQ,GAAG,CAAChb,KAAKg2F,gBAAgBphF,MAG/C+gF,EAAAz1F,UAAA81F,gBAAA,SAAgBphF,GAOd,MAAO,iBANc5U,KAAKo5D,MAAM9+B,SAASxR,OAAOw0B,QAC5C,WAAWt9C,KAAKo5D,MAAM9+B,SAASxR,OAAOw0B,QAAO,IAC7C,KACgBt9C,KAAKo5D,MAAM9+B,SAASxR,OAAOs0B,OAC3C,UAAUp9C,KAAKo5D,MAAM9+B,SAASxR,OAAOs0B,OAAM,IAC3C,IACgDxoC,EAASuW,MAG/DwqE,EAAAz1F,UAAA+1F,MAAA,SAAM32E,GACc,UAAdA,EAAMpe,KACRlB,KAAK81F,iEA7BqBnB,EAAAA,wBACXh6D,EAAAA,sBACS5iB,EAAAA,kBAb5BhX,EAAA,CADCoH,EAAAA,6CAGDpH,EAAA,CADCoH,EAAAA,8CAGDpH,EAAA,CADCoH,EAAAA,+CAGDpH,EAAA,CADCoH,EAAAA,6CAGDpH,EAAA,CADCwgB,EAAAA,+CATUo0E,EAA4B50F,EAAA,CAJxCqH,EAAAA,UAAU,CACTC,SAAU,4BACVC,SAAA,oyCAEWqtF,IAAqCN,kBCehD,SAAAa,EAAoBC,GAAAn2F,KAAAm2F,yBAAAA,EAFpBn2F,KAAAo2F,kBAA0C,IAAI/0E,EAAAA,aAgChD,OA5BE60E,EAAAh2F,UAAAwzB,YAAA,SAAY83B,GACNA,EAAQ6qC,WAAar2F,KAAKq2F,WAC5Br2F,KAAKs2F,aASTJ,EAAAh2F,UAAAq2F,UAAA,SAAUC,EAAkBC,GAC1Bz2F,KAAKm2F,yBAAyBI,UAAUC,EAAUC,IAGpDP,EAAAh2F,UAAAo2F,UAAA,WAAA,IAAA9uF,EAAAxH,KACEA,KAAKm2F,yBAAyBG,UAC5Bt2F,KAAK02F,WAAW1uF,cAChBhI,KAAKq2F,WACL,SAAC52B,GACCj4D,EAAKmvF,2BAA2Bl3B,OAK9By2B,EAAAh2F,UAAAy2F,2BAAR,SAAmCl3B,GACjCz/D,KAAKo2F,kBAAkB90E,KAAKm+C,6CA5BgBm3B,EAAAA,4BAN9C71F,EAAA,CADC8sB,EAAAA,UAAU,aAAc,CAAEokE,QAAQ,sCAGnClxF,EAAA,CADCoH,EAAAA,yCAGDpH,EAAA,CADCwgB,EAAAA,kDALU20E,EAAuBn1F,EAAA,CAJnCqH,EAAAA,UAAU,CACTC,SAAU,sBACVC,SAAA,oDAEW4tF,oBCLX,SAAAW,KAmBF,OAjBEA,EAAA32F,UAAA42F,kBAAA,WACE,GAAI92F,KAAK01B,WAAWs6C,aAAehwE,KAAK01B,WAAWtI,SAAU,CAC3D,IAAM2pE,EACJ/2F,KAAK01B,WAAWsE,YAAch6B,KAAK01B,WAAWtI,SAAW,EAEvD4pE,GACDh3F,KAAK01B,WAAWsE,YAAc,GAAKh6B,KAAK01B,WAAWtI,SAMtD,OAJI4pE,EAAiBh3F,KAAK01B,WAAWs6C,eACnCgnB,EAAiBh3F,KAAK01B,WAAWs6C,cAGzB+mB,EAAS,MAAMC,EAEzB,MAAO,OAAOh3F,KAAK01B,WAAWs6C,cAlBlCjvE,EAAA,CADCoH,EAAAA,0CADU0uF,EAAqC91F,EAAA,CAJjDqH,EAAAA,UAAU,CACTC,SAAU,qCACVC,SAAA,4LAEWuuF,oBCiBX,SAAAI,EACUhD,EACkB3tF,GADlBtG,KAAAi0F,iBAAAA,EACkBj0F,KAAAsG,SAAAA,EAJ5BtG,KAAA2K,UAAYvK,EAAAA,UAMVJ,KAAKk3F,sBAAuB,EAiChC,OA9BED,EAAA/2F,UAAAi3F,wBAAA,SAAwBh0E,EAAevO,GACrC5U,KAAKo3F,iBAAiBxiF,GACtB5U,KAAKq3F,mBAAqBl0E,EAC1BnjB,KAAKs3F,cAAgB1iF,EACrB5U,KAAKu3F,SAAShB,UACZv2F,KAAKi0F,iBAAiBsB,iBAAiBv1F,KAAKq2F,UAAUmB,OAAOr0E,IAC7DnjB,KAAKi0F,iBAAiBuB,kBAAkBx1F,KAAKq2F,UAAUmB,OAAOr0E,MAIlE8zE,EAAA/2F,UAAAu3F,oBAAA,SAAoBt0E,GAClBnjB,KAAKq3F,mBAAqBl0E,EACJnjB,KAAKsG,SAASmtD,eAAe,QAAUtwC,GAC/CokE,eAAe,CAC3BC,SAAU,SACV9oE,MAAO,YAIXu4E,EAAA/2F,UAAAk3F,iBAAA,SAAiBxiF,GACf5U,KAAKk3F,sBAAuB,EAC5Bl3F,KAAK03F,aAAe9iF,GAGtBqiF,EAAA/2F,UAAAy3F,iBAAA,WACE33F,KAAKk3F,sBAAuB,EAC5Bl3F,KAAKq3F,wBAAqB1iF,EAC1B3U,KAAKs3F,mBAAgB3iF,EACrB3U,KAAKu3F,SAASjB,sDAlCY3B,EAAAA,iDACzBhkF,EAAAA,OAAMC,KAAA,CAACsJ,EAAAA,eAdVnZ,EAAA,CADCoH,EAAAA,yCAGDpH,EAAA,CADCoH,EAAAA,6CAGDpH,EAAA,CADC8sB,EAAAA,UAAU,4CALAopE,EAAwBl2F,EAAA,CAJpCqH,EAAAA,UAAU,CACTC,SAAU,uBACVC,SAAA,gpJAkBG5G,EAAA,EAAAiP,EAAAA,OAAOuJ,EAAAA,YAhBC+8E,oBCiBX,SAAAW,EACU/C,EACAz7B,GADAp5D,KAAA60F,mBAAAA,EACA70F,KAAAo5D,MAAAA,EAPVp5D,KAAA63F,YAAsB,KACtB73F,KAAA8oF,aAA6B,CAC3B9uD,YAAa,GAgEjB,OAxDE49D,EAAA13F,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKgsB,aAAehsB,KAAKo5D,MAAM/+B,YAAY5tB,WAAU,SAACqc,GACpD,OAAAthB,EAAKs0B,WAAWhT,OAIpB8uE,EAAA13F,UAAAiN,YAAA,WACMnN,KAAKgsB,cACPhsB,KAAKgsB,aAAa5e,eAItBwqF,EAAA13F,UAAAgpF,SAAA,SAASC,GACPnpF,KAAK8oF,aAAYzoF,EAAAA,EAAA,GAAQL,KAAK8oF,cAAY,CAAE9uD,YAAamvD,IACzDnpF,KAAK60F,mBAAmBK,iBACtBl1F,KAAK83F,YAAYC,UACjB/3F,KAAK8oF,aACL9oF,KAAKg4F,YACLh4F,KAAK63F,YACL73F,KAAKi4F,gBAIDL,EAAA13F,UAAA47B,WAAR,SAAmBhT,GACjB9oB,KAAK83F,YAAc93F,KAAKk4F,gBAAgBpvE,GACxC9oB,KAAKi4F,iBAAgBnvE,IAAUA,EAAOmvE,eACtCj4F,KAAK8oF,aAAYzoF,EAAAA,EAAA,GAAQL,KAAK8oF,cAAY,CAAE9uD,YAAa,IACzDh6B,KAAK60F,mBAAmBK,iBACtBl1F,KAAK83F,YAAYC,UACjB/3F,KAAK8oF,aACL9oF,KAAKg4F,YACLh4F,KAAK63F,YACL73F,KAAKi4F,eAGPj4F,KAAK0gD,WAAa1gD,KAAK60F,mBAAmBsD,mBAC1Cn4F,KAAK+0F,WAAa/0F,KAAK60F,mBAAmBuD,yBAGpCR,EAAA13F,UAAAg4F,gBAAR,SAAwB79D,GAGtB,IAAIy9D,EAYJ,OATEA,EADEz9D,EAAYra,MACA,CAAE+3E,UAAW19D,EAAYra,OAEzB,CAAE+3E,UAAW,KAGjBE,cACmB,MAA7B59D,EAAY49D,eACgC,SAA5C59D,EAAY49D,cAAcI,cAErBP,4CA1DqB3C,EAAAA,0BACbx6D,EAAAA,kBAfNi9D,EAAgC72F,EAAA,CAJ5CqH,EAAAA,UAAU,CACTC,SAAU,gCACVC,SAAA,o0BAEWsvF,oBCDX,SAAAU,EAAoB99E,GAAAxa,KAAAwa,eAAAA,EAHpBxa,KAAAu4F,UAAyB,IAAI1wD,EAAAA,YAC7B7nC,KAAA2K,UAAYvK,EAAAA,UAqBd,OAjBEk4F,EAAAp4F,UAAAs4F,WAAA,SAAW3hD,GACT72C,KAAKwa,eAAeQ,GAAG,CAAC,qBAAsB,CAAEgF,MAAO62B,KAGzDyhD,EAAAp4F,UAAAu4F,oBAAA,WACEz4F,KAAKwa,eAAeQ,GAAG,CAAC,qBAAsB,CAAEi9E,eAAe,KAGjEK,EAAAp4F,UAAA+1F,MAAA,SAAM32E,GAEFtf,KAAKu4F,UAAUp2F,OACfnC,KAAKu4F,UAAUp2F,MAAMvB,QACP,UAAd0e,EAAMpe,KAENlB,KAAKw4F,WAAWx4F,KAAKu4F,UAAUp2F,iDAhBC4V,EAAAA,kBAJzBugF,EAA0Bv3F,EAAA,CAJtCqH,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,26CAEWgwF,qBCGX,SAAAI,EAAsBzE,GAAtB,IAAAzsF,EACE2B,EAAAtI,KAAAb,KAAMi0F,IAAiBj0F,YADHwH,EAAAysF,iBAAAA,IAGxB,OAP0Dn0F,EAAA44F,EAAAvvF,4CAIhBwrF,EAAAA,oBAH/B5zF,EAAA,CAARoH,EAAAA,wCACQpH,EAAA,CAARoH,EAAAA,0CAFUuwF,EAAoC33F,EAAA,CAJhDqH,EAAAA,UAAU,CACTC,SAAU,oCACVC,SAAA,0qEAEWowF,IAA6CrD,kBCIxD,SAAAsD,EAAoB9D,GAAA70F,KAAA60F,mBAAAA,EAOtB,OALE8D,EAAAz4F,UAAA8K,SAAA,WACEhL,KAAK60F,mBAAmB+D,gBACxB54F,KAAK+0F,WAAa/0F,KAAK60F,mBAAmBG,2BAC1Ch1F,KAAK0gD,WAAa1gD,KAAK60F,mBAAmBC,oEALJK,EAAAA,sBAJ7BwD,EAA+B53F,EAAA,CAJ3CqH,EAAAA,UAAU,CACTC,SAAU,+BACVC,SAAA,s5CAEWqwF,oBCFb,SAAAE,KAAmC,OAAtBA,EAAoB93F,EAAA,CAJhCqH,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,sLAEWuwF,oBCgBX,SAAAC,EACUjE,EACAz7B,EACA5+C,GAFAxa,KAAA60F,mBAAAA,EACA70F,KAAAo5D,MAAAA,EACAp5D,KAAAwa,eAAAA,EARVxa,KAAA2K,UAAYvK,EAAAA,UA4Bd,OAjBE04F,EAAA54F,UAAA8K,SAAA,WACOhL,KAAK4U,WACR5U,KAAK+4F,oBACL/4F,KAAKg5F,UAAYh5F,KAAK60F,mBAAmBuD,wBACzCp4F,KAAK0gD,WAAa1gD,KAAK60F,mBAAmBsD,qBAI9CW,EAAA54F,UAAA64F,kBAAA,WACE/4F,KAAK60F,mBAAmBoE,cAAcj5F,KAAKo5D,MAAM9+B,SAASxR,OAAO6+B,QAGnEmxC,EAAA54F,UAAAm8C,OAAA,WACEr8C,KAAKwa,eAAeQ,GAAG,CACrB,wBAAwBhb,KAAKo5D,MAAM9+B,SAASxR,OAAOw0B,oDAnBzB63C,EAAAA,0BACbx6D,EAAAA,sBACS5iB,EAAAA,kBANjBhX,EAAA,CAARoH,EAAAA,wCACQpH,EAAA,CAARoH,EAAAA,0CANU2wF,EAAyB/3F,EAAA,CAJrCqH,EAAAA,UAAU,CACTC,SAAU,wBACVC,SAAA,kxBAEWwwF,oBC2Gb,SAAAI,KAAgC,OAAnBA,EAAiBn4F,EAAA,CA3F7ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAusB,EAAAA,oBACAlB,EAAAA,aACAiH,GACAk+D,EAAAA,gBACA99D,GACApH,EAAAA,UACAmlE,EAAAA,sBACAjrF,EAAAA,WACA5F,GAEFK,UAAW,CACTC,EAAAA,qBAA+C,CAC7CwF,cAAe,CACbwqF,qBAAsB,CACpBvqF,UAAWuqF,GACXpoF,YAAa,CACX,CACEkJ,KAAM,OACNrL,UAAWspF,IAEb,CACEj+E,KAAM,WACNrL,UAAWqqF,IAEb,CACEh/E,KAAM,mBACNrL,UAAWsmF,IAEb,CACEj7E,KAAM,kCACNrL,UAAWsmF,IAEb,CACEj7E,KAAM,yCACNrL,UAAWwqF,IAEb,CACEn/E,KAAM,0BACNrL,UAAWwqF,OAKnB3qC,YAAa,CACXkrC,wBAAyB,CACvB5pD,MAAO,CAAC,gBAAiB,oBAKjChnC,aAAc,CACZ6vF,GACArB,GACAf,GACAP,GACAgD,GACA/D,GACA8D,GACA1E,GACAoB,GACAwC,GACAiB,GACAhC,GACAiC,IAEF7vF,QAAS,CACP+qF,GACA6E,GACAjE,GACAQ,GACAO,GACAO,GACAW,GACAyB,GACAV,GACAX,GACAyB,GACAC,GACAG,IAEFpqF,gBAAiB,CACfmqF,GACAjB,GACAe,GACA/D,GACAkE,OAGSI,oBChGX,SAAAI,EACYlvD,EACAuK,EACA9S,GAFA7hC,KAAAoqC,YAAAA,EACApqC,KAAA20C,oBAAAA,EACA30C,KAAA6hC,kBAAAA,EAjBZ7hC,KAAAu5F,kBAA+Bv5F,KAAKoqC,YAAYtrB,MAC9C,CACEqlB,MAAO,CAAC,GAAI,CAAC1Y,EAAAA,WAAWC,SAAUuY,GAAqBC,iBACvDc,kBAAmB,CAAC,GAAI,CAACvZ,EAAAA,WAAWC,YAEtC,CACEu9C,WAAYhlC,GAAqBc,gBAC/B,QACA,uBAkCR,OAtBEu0D,EAAAp5F,UAAAyrB,SAAA,WAAA,IAAAnkB,EAAAxH,KACE,GAAIA,KAAKu5F,kBAAkB3tE,MAAO,CAChC,IAAMuY,EAAQnkC,KAAKu5F,kBAAkB9mF,IAAI,SAAStQ,MAClDnC,KAAK6hC,kBAAkB23D,SAASr1D,GAE3BnkC,KAAK8rF,MACR9rF,KAAK8rF,IAAM9rF,KAAK6hC,kBAAkBgT,kBAAkBpoC,WAAU,WACxDjF,EAAKq6B,kBAAkBiT,eACzBttC,EAAKmtC,oBAAoB8kD,oBAK/Bz5F,KAAKu5F,kBAAkB1tE,oBAI3BytE,EAAAp5F,UAAAiN,YAAA,WACMnN,KAAK8rF,KACP9rF,KAAK8rF,IAAI1+E,wDAxBY0e,EAAAA,mBACQmpB,EAAAA,2BACFj+B,EAAAA,qBAlBpBsiF,EAAsBv4F,EAAA,CAJlCqH,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,owCAEWgxF,oBCsBb,SAAAI,KAAkC,OAArBA,EAAmB34F,EAAA,CAxB/ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAwF,EAAAA,WACAgtB,EAAAA,YACAjG,EAAAA,oBACAiG,EAAAA,YACAjG,EAAAA,oBACAmL,IAEFz3B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbsrF,4BAA6B,CAC3BrrF,UAAWgrF,GACXzpF,OAAQ,CAACo3C,SAKjBx+C,aAAc,CAAC6wF,IACfrwF,QAAS,CAACqwF,IACV5qF,gBAAiB,CAAC4qF,OAEPI,oBCTX,SAAAE,EACY3kF,EACA4G,EACAwP,EACAspB,EACA7vC,EACA80B,EACAgb,GANA50C,KAAAiV,KAAAA,EACAjV,KAAA6b,qBAAAA,EACA7b,KAAAqrB,GAAAA,EACArrB,KAAA20C,oBAAAA,EACA30C,KAAA8E,OAAAA,EACA9E,KAAA45B,eAAAA,EACA55B,KAAA40C,sBAAAA,EATZ50C,KAAA65F,cAAe,EA6DjB,OAjDED,EAAA15F,UAAA8K,SAAA,yBACQ65D,EAA8C,QAApC74D,EAA2B,QAA3BD,EAAG/L,KAAK8E,OAAO2sB,oBAAY,IAAA1lB,OAAA,EAAAA,EAAE+4D,eAAO,IAAA94D,OAAA,EAAAA,EAAEi1B,MAChD64D,EAAiBj1B,MAAAA,OAAU,EAAVA,EAAqB,OAE5C7kE,KAAK+5F,UAAY/5F,KAAKqrB,GAAGvM,MAAM,CAC7BnC,OAAQ,EACNm9E,MAAAA,OAAc,EAAdA,EAAgBl5F,QAASk5F,EAAiB,GAC1C,CAACruE,EAAAA,WAAWC,SAAUuY,GAAqBC,iBAE7CtnB,SAAU,CAAC,GAAI6O,EAAAA,WAAWC,YAGxB1rB,KAAK40C,sBAAsBP,oBAC7Br0C,KAAK65F,aAAyD,QAA7CG,EAAgC,QAAhCt2D,EAAsB,QAAtBF,EAAGxjC,KAAK45B,sBAAc,IAAA4J,OAAA,EAAAA,EAAElJ,gBAAQ,IAAAoJ,OAAA,EAAAA,EAAErJ,mBAAW,IAAA2/D,OAAA,EAAAA,EACpD,SAKdJ,EAAA15F,UAAA+iD,WAAA,WACMjjD,KAAK+5F,UAAUnuE,MACjB5rB,KAAKi6F,YAELj6F,KAAK+5F,UAAUluE,oBAInB+tE,EAAA15F,UAAAiN,YAAA,WACMnN,KAAK8rF,KACP9rF,KAAK8rF,IAAI1+E,eAIHwsF,EAAA15F,UAAA+5F,UAAV,WAAA,IAAAzyF,EAAAxH,KACQ+L,EAAA/L,KAAA+5F,UAAAntE,SAAEjQ,EAAA5Q,EAAA4Q,OAAQC,EAAA7Q,EAAA6Q,SAChB5c,KAAKiV,KAAKilF,UACRv9E,EAAOxa,MAAM6b,cACbpB,EAASza,OAGNnC,KAAK8rF,MACR9rF,KAAK8rF,IAAM9rF,KAAKiV,KAAKyF,eAAejO,WAAU,SAAC+xB,GACzCA,GAAQA,EAAKliB,eACf9U,EAAKqU,qBAAqB3C,OAAOsD,EAAAA,kBAAkBC,gBACnDjV,EAAKmtC,oBAAoB8kD,0DArDf1iF,EAAAA,mBACgBO,EAAAA,4BAClBwU,EAAAA,mBACiBmpB,EAAAA,2BACbpuC,EAAAA,iBACQ8zB,EAAAA,sBACO8X,MAZxBmnD,EAAkB74F,EAAA,CAJ9BqH,EAAAA,UAAU,CACTC,SAAU,gBACVC,SAAA,u5DAEWsxF,oBCoBb,SAAAO,KAA8B,OAAjBA,EAAep5F,EAAA,CAxB3ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACAwyB,EAAAA,YACAjG,EAAAA,oBACAlB,EAAAA,aACAC,EAAAA,UACA9lB,EAAAA,WACAkyB,IAEFz3B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb+rF,gCAAiC,CAC/B9rF,UAAWsrF,GACX/pF,OAAQ,CAACu4D,EAAAA,mBAKjB3/D,aAAc,CAACmxF,IACf3wF,QAAS,CAAC2wF,IACVlrF,gBAAiB,CAACkrF,OAEPO,oBC1BX,SAAAE,EAAoBplF,EAA2B0G,GAA3B3b,KAAAiV,KAAAA,EAA2BjV,KAAA2b,YAAAA,EAajD,OAXE0+E,EAAAn6F,UAAA8K,SAAA,WAAA,IAAAxD,EAAAxH,KACEA,KAAKg2E,MAAQh2E,KAAKiV,KAAKw5B,iBAAiB9iC,KACtC0Q,EAAAA,WAAU,SAACoyB,GACT,OAAIA,EACKjnC,EAAKmU,YAAYlJ,MAEjB4I,EAAAA,QAAG1G,iDARQoC,EAAAA,mBAAkCoB,EAAAA,eAHjDkiF,EAAct5F,EAAA,CAJ1BqH,EAAAA,UAAU,CACTC,SAAU,WACVC,SAAA,iaAEW+xF,oBCkBb,SAAAC,KAA0B,OAAbA,EAAWv5F,EAAA,CAfvByH,EAAAA,SAAS,CACRE,QAAS,CAACC,EAAAA,aAAcqrB,EAAAA,aAAcC,EAAAA,UAAW05B,GAAgBx/C,EAAAA,YACjEvF,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbgsF,eAAgB,CACd/rF,UAAW+rF,QAKnB5xF,aAAc,CAAC4xF,IACf3rF,gBAAiB,CAAC2rF,IAClBpxF,QAAS,CAACoxF,OAECC,MCJbC,GAAA,WACE,SAAAA,EACYtlF,EACAK,EACAY,EACAulD,EACA++B,GAJAx6F,KAAAiV,KAAAA,EACAjV,KAAAsV,IAAAA,EACAtV,KAAAkW,QAAAA,EACAlW,KAAAy7D,oBAAAA,EACAz7D,KAAAw6F,gBAAAA,SAGZD,EAAAr6F,UAAA8uC,YAAA,WAAA,IAAAxnC,EAAAxH,KAGE,OAFAA,KAAK+a,SAEE/a,KAAKsV,IACTmlF,QAAQ,CACPjuF,GAAIxM,KAAKy7D,oBAAoBhpD,IAAI,UACjC/N,KAAMy2D,EAAAA,SAASC,eAEhBzvD,KACCG,EAAAA,KAAI,SAAC2uF,GACEA,GACHjzF,EAAKiyF,gBAaLc,EAAAr6F,UAAAu5F,SAAV,WACE,IAAMx+E,EAAUjb,KAAKw6F,gBAAgBE,cAAgB,QAAU,OAC/D16F,KAAKkW,QAAQ8E,GAAG,CAAEC,QAAOA,KAQjBs/E,EAAAr6F,UAAA6a,OAAV,WACE/a,KAAKiV,KAAK8F,mDA1CMhE,EAAAA,mBACDrE,EAAAA,kBACIqF,EAAAA,sBACYwkD,EAAAA,2BACJo+B,EAAAA,+RANlBJ,EAAWx5F,EAAA,CAHvBiG,EAAAA,WAAW,CACVC,WAAY,UAEDszF,GAAb,MCPc,CAAEt/E,QAAS,UAKzB2/E,GAAA,WAAA,SAAAA,KAA2B,OAAdA,EAAY75F,EAAA,CAbxByH,EAAAA,SAAS,CACRE,QAAS,CACPonD,GACA97B,EAAAA,aAAak3C,SAAS,CACpB,CACEvxD,KAAM,KACNq1B,YAAa,CAACurD,IACdjsF,UAAW+gD,GACX7wB,KAAIq8D,UAKCD,GAAb,iBC0CE,SAAAE,EACYn/E,EACAE,EACAwP,EACA0tB,EACAxuC,EACAurD,GALA91D,KAAA2b,YAAAA,EACA3b,KAAA6b,qBAAAA,EACA7b,KAAAqrB,GAAAA,EACArrB,KAAA+4C,OAAAA,EACA/4C,KAAAuK,yBAAAA,EACAvK,KAAA81D,wBAAAA,EAtCJ91D,KAAAgsB,aAAe,IAAIvhB,EAAAA,aAO3BzK,KAAA+6F,aAA0B/6F,KAAKqrB,GAAGvM,MAChC,CACEimC,UAAW,CAAC,IACZhI,UAAW,CAAC,GAAItxB,EAAAA,WAAWC,UAC3BsxB,SAAU,CAAC,GAAIvxB,EAAAA,WAAWC,UAC1ByY,MAAO,CAAC,GAAI,CAAC1Y,EAAAA,WAAWC,SAAUuY,GAAqBC,iBACvDtnB,SAAU,CACR,GACA,CAAC6O,EAAAA,WAAWC,SAAUuY,GAAqBK,oBAE7C4/C,aAAc,CAAC,GAAIz4D,EAAAA,WAAWC,UAC9BsvE,WAAY,IAAInzD,EAAAA,YAAY,CAC1B1lC,OAAO,EACP2Z,SAAU9b,KAAKi7F,sBAEjBC,mBAAoB,EAAC,EAAOzvE,EAAAA,WAAWu3B,eAEzC,CACEimB,WAAYhlC,GAAqBU,mBAC/B,WACA,kBAyJR,OA3IEm2D,EAAA56F,UAAA8K,SAAA,WAAA,MAAAxD,EAAAxH,KACEA,KAAKilD,QAAUjlD,KAAK2b,YAAYupC,YAAYv5C,KAC1CG,EAAAA,KAAI,SAACq5C,GACgC,IAA/B3lD,OAAOs3C,KAAKqO,GAAQvkD,QACtB4G,EAAKmU,YAAYypC,gBAGrB1kC,EAAAA,KAAI,SAACykC,GACH,OAAOA,EAAO3zC,KAAKs0B,QAIvB9lC,KAAKqL,SAAWrL,KAAK2b,YAAYw/E,+BACjCn7F,KAAKo7F,0BAGLp7F,KAAKgsB,aAAavgB,IAChBzL,KAAK6b,qBACFpJ,MACA9G,KAAK0F,EAAAA,QAAO,SAACgqF,GAAa,QAAE77F,OAAOs3C,KAAKukD,GAAUz6F,WAClD6L,WAAU,SAAC6uF,GACV,IAAMD,EACJC,GACAA,EAAsB9+E,EAAAA,kBAAkBC,gBAGxC4+E,GACAA,EAAS1zE,MAAK,SAAC45D,GAAY,MAAY,4BAAZA,OAE3B/5E,EAAKqU,qBAAqB3C,OAAOsD,EAAAA,kBAAkBC,gBACnDjV,EAAKqU,qBAAqBpQ,IACxB,CAAEvK,IAAK,0BACPsb,EAAAA,kBAAkBC,qBAMpB,IAAA8+E,GAAA,QAAAxvF,EAAA/L,KAAA81D,+BAAA,IAAA/pD,OAAA,EAAAA,EAAAjB,mBAAAywF,gBAERv7F,KAAKw7F,kBAAoB9vF,EAAAA,cAAc,CACrC1L,KAAKuK,yBAAyBkxF,WAAWF,GACzCv7F,KAAKuK,yBAAyBmxF,YAAYH,KACzC5vF,KACD+U,EAAAA,KAAI,SAAC3U,OAAAC,EAAA3J,EAAA0J,EAAA,GAACI,EAAAH,EAAA,GAAS1D,EAAA0D,EAAA,GACb,MAAO,CACLG,QAAOA,EACP7D,SAAUA,EAAWA,EAASg7B,YAAc,QAKlDtjC,KAAKgsB,aAAavgB,IAChBzL,KAAK+6F,aAAatoF,IAAI,cAAcoa,aAAapgB,WAAU,WACzDjF,EAAKm0F,8BAKXb,EAAA56F,UAAA+iD,WAAA,WACMjjD,KAAK+6F,aAAanvE,MACpB5rB,KAAK47F,eAEL57F,KAAK+6F,aAAalvE,oBAItBivE,EAAA56F,UAAA07F,aAAA,WACE57F,KAAK2b,YAAYqvC,SACfhrD,KAAK67F,4BAA4B77F,KAAK+6F,aAAa54F,SAIvD24F,EAAA56F,UAAAslD,cAAA,SAAcnD,GACZriD,KAAK+6F,aAAuB,SAAEh2C,UAAUx3B,SAAS80B,EAAMzwB,OAGzDkpE,EAAA56F,UAAA27F,4BAAA,SAA4BC,GAClB,IAAA/+C,EAAA++C,EAAA/+C,UAAWC,EAAA8+C,EAAA9+C,SAAU7Y,EAAA23D,EAAA33D,MAAOvnB,EAAAk/E,EAAAl/E,SAAUmoC,EAAA+2C,EAAA/2C,UAE9C,MAAO,CACLhI,UAASA,EACTC,SAAQA,EACR1qC,IAAK6xB,EAAMnmB,cACXpB,SAAQA,EACRmoC,UAASA,IAIb+1C,EAAA56F,UAAAmM,eAAA,SAAeF,GACb,OAAOnM,KAAKuK,yBAAyB8B,eAAeF,IAG9C2uF,EAAA56F,UAAA+6F,kBAAR,iBACQjvF,EAAA,QAAAD,EAAA/L,KAAA81D,+BAAA,IAAA/pD,OAAA,EAAAA,EAAAjB,kBACJF,EAAAoB,EAAApB,iBACA2wF,EAAAvvF,EAAAuvF,gBAGF,SAAI3wF,IAAoB2wF,IACf3wF,EAAiB5E,SAASu1F,IAM7BT,EAAA56F,UAAA67F,sBAAR,SAA8BxwD,GACxBA,IACFvrC,KAAK+4C,OAAO/9B,GAAG,SACfhb,KAAK6b,qBAAqBpQ,IACxB,CAAEvK,IAAK,gCACPsb,EAAAA,kBAAkBm0C,yBAKxBmqC,EAAA56F,UAAAy7F,uBAAA,WACU,IAAAJ,EAAAv7F,KAAA81D,wBAAAhrD,kBAAAywF,gBAEJ1wF,QAAQ7K,KAAK+6F,aAAatoF,IAAI,cAActQ,OAC9CnC,KAAKuK,yBAAyBsC,YAAY0uF,GAE1Cv7F,KAAKuK,yBAAyBgC,gBAAgBgvF,IAI1CT,EAAA56F,UAAAk7F,wBAAR,WAAA,IAAA5zF,EAAAxH,KACEA,KAAK2b,YAAYqgF,gCACjBh8F,KAAKgsB,aAAavgB,IAChBzL,KAAK2b,YAAYsgF,+BAA+BxvF,WAAU,SAAC8+B,GACzD/jC,EAAKu0F,sBAAsBxwD,QAKjCuvD,EAAA56F,UAAAiN,YAAA,WACEnN,KAAKgsB,aAAa5e,cAClBpN,KAAK2b,YAAYqgF,0EAjJM7jF,EAAAA,mBACSb,EAAAA,4BAClBwU,EAAAA,mBACI/T,EAAAA,sBACkBzK,EAAAA,gCACDD,EAAAA,2BAzC1BytF,EAAiB/5F,EAAA,CAJ7BqH,EAAAA,UAAU,CACTC,SAAU,cACVC,SAAA,6mMAEWwyF,oBCYb,SAAAoB,KAAsC,OAAzBA,EAAuBn7F,EAAA,CAzBnCyH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA2xF,GACAplE,EAAAA,oBACAlB,EAAAA,aACAC,EAAAA,UACA9lB,EAAAA,WACAktB,GACAgF,IAEFz3B,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACb8tF,0BAA2B,CACzB7tF,UAAWwsF,GACXjrF,OAAQ,CAACu4D,EAAAA,mBAKjB3/D,aAAc,CAACqyF,IACf7xF,QAAS,CAAC6xF,IACVpsF,gBAAiB,CAACosF,OAEPoB,oBChBb,SAAAE,KAAkC,OAArBA,EAAmBr7F,EAAA,CAb/ByH,EAAAA,SAAS,CACRE,QAAS,CACPC,EAAAA,aACA2xF,GACAH,GACAS,GACAlB,GACAxkE,EAAAA,oBACAlB,EAAAA,aACAC,EAAAA,UACAioE,OAGSE,oBCVb,SAAAC,IAEEr8F,KAAAwzB,WAAY,EAIZxzB,KAAAkZ,OAAS,IAAImI,EAAAA,aAKf,OAHEg7E,EAAAn8F,UAAAotC,YAAA,SAAYpT,GACVl6B,KAAKkZ,OAAOoI,KAAK4Y,IAPnBn5B,EAAA,CADCoH,EAAAA,yCAEQpH,EAAA,CAARoH,EAAAA,yCAGDpH,EAAA,CADCwgB,EAAAA,uCALU86E,EAAqBt7F,EAAA,CALjCqH,EAAAA,UAAU,CACTC,SAAU,oBACVC,SAAA,iuFACAye,gBAAiBC,EAAAA,wBAAwBC,UAE9Bo1E,oBCFX,SAAAC,EAAsB9rD,GAAAxwC,KAAAwwC,gBAAAA,EAHtBxwC,KAAAu8F,UAA8Bv8F,KAAKwwC,gBAAgBG,cACnD3wC,KAAAqL,SAAgCrL,KAAKwwC,gBAAgBO,qBAOvD,OAHEurD,EAAAp8F,UAAAotC,YAAA,SAAYpT,GACVl6B,KAAKwwC,gBAAgBlD,YAAYpT,6CAHI+W,EAAAA,mBAJ5BqrD,EAAiBv7F,EAAA,CAJ7BqH,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,olCAEWg0F,oBCoCb,SAAAE,KAA6B,OAAhBA,EAAcz7F,EAAA,CAzB1ByH,EAAAA,SAAS,CACRE,QAAS,CACPslC,GACArlC,EAAAA,aACAwF,EAAAA,WACA2lB,GACAE,EAAAA,aACA2L,GACA1L,EAAAA,UACAgB,IAEFrsB,UAAW,CACTC,EAAAA,qBAAgC,CAC9BwF,cAAe,CACbiuF,kBAAmB,CACjBhuF,UAAWguF,GACXzsF,OAAQ,CAACyoD,EAAAA,gBAKjB7vD,aAAc,CAAC6zF,GAAmBD,IAClC3tF,gBAAiB,CAAC4tF,IAClBrzF,QAAS,CAACqzF,GAAmBD,OAElBG,oBCiEb,SAAAC,KAA2B,OAAdA,EAAY17F,EAAA,CApDxByH,EAAAA,SAAS,CACRE,QAAS,CACPwF,EACAg4B,GACA6iB,GACAob,GACAH,GACAJ,GACAyc,GACAD,GACAG,GACAlE,GACAgH,GACAtkD,GACA/B,GACAmqC,GACAsJ,GACAlF,GACAkB,GACAqG,GACAX,GACA6d,GACAoC,GACA9M,GACAK,GACA1W,GACAwE,GACAoB,GACAa,GACAU,GACA/d,GACAyP,GACAr2B,GACA4zB,GACAif,GACA4U,GACAxS,GACA8J,GACAV,GACAlI,GACA5gC,GACAmhB,GACA4L,GACAtQ,GACA24B,GACAjjB,GACAqjB,GACAniB,GACAuB,GACAmY,OAGS0I,MC1Eb,IAAaC,GAA8B,IAAI3sD,EAAAA,eAE7C,8BAA+B,CAC/B9oC,WAAY,OACZuN,QAAS,WACP,OA9BFgJ,EA+BIm/E,EAAAA,OAAOC,EAAAA,mBA9BXC,EA+BIF,EAAAA,OAAOG,EAAAA,qBA7BK,SAAC1jC,GACf,IAAM2jC,EAAiBF,EAAsBzjC,GACvC4jC,EAAmB79B,GAAoB,CAC3CC,OAAQ,IACRC,UAAW,gBAEb,OAAO7hD,EAAQy/E,YAAY,CAACF,EAAgBC,SAT9Cx/E,EACAq/E,QCGY,CAAE5hF,QAAS,WAgBzBiiF,GAAA,WAAA,SAAAA,KAAuC,OAA1BA,EAAwBn8F,EAAA,CAvBpCyH,EAAAA,SAAS,CACRE,QAAS,CACPsrB,EAAAA,aAAak3C,SAAS,CACpB,CACEvxD,KAAM,KACNq1B,YAAa,CAACwtB,IACdluD,UAAW+gD,GACX7wB,KAAI2+D,OAIVv0F,UAAW,CACTC,EAAAA,qBAAoC,CAClCqN,QAAS,CACP1G,OAAQ,CACNqG,QAAS,CACPunF,SAAU,CAACV,aAOVQ,GAAb,GCKA,IAAaG,GAA8B,IAAIttD,EAAAA,eAE7C,8BAA+B,CAC/B9oC,WAAY,OACZuN,QAAS,WACP,OA9BFgJ,EA+BIm/E,EAAAA,OAAOC,EAAAA,mBA9BXC,EA+BIF,EAAAA,OAAOG,EAAAA,qBA7BK,SAAC1jC,GACf,IAAM2jC,EAAiBF,EAAsBzjC,GACvCkkC,EAAmBn+B,GAAoB,CAC3CC,OAAQ,IACRC,UAAW,iBAEb,OAAO7hD,EAAQy/E,YAAY,CAACF,EAAgBO,SAT9C9/E,EACAq/E,QCEY,CAAE3hC,UAAW,SAAUjgD,QAAS,UAAUsiF,GAM1C,CAAEtiF,QAAS,SAASuiF,GAQpB,CAAEviF,QAAS,YAgBzBwiF,GAAA,WAAA,SAAAA,KAAuC,OAA1BA,EAAwB18F,EAAA,CArCpCyH,EAAAA,SAAS,CACRE,QAAS,CACPsrB,EAAAA,aAAak3C,SAAS,CACpB,CACEvxD,KAAM,KACNq1B,YAAa,CAACwtB,IACdluD,UAAW+gD,GACX7wB,KAAIk/D,IAEN,CACE/jF,KAAM,KACNq1B,YAAa,CAACwtB,IACdluD,UAAW+gD,GACX7wB,KAAI++D,IAEN,CAGE5jF,KAAM,KACNq1B,YAAa,CAACwtB,IACdluD,UAAW+gD,GACX7wB,KAAIg/D,OAIV50F,UAAW,CACTC,EAAAA,qBAAoC,CAClCqN,QAAS,CACP1G,OAAQ,CACNyuD,SAAU,CACRm/B,SAAU,CAACC,aAOVI,GAAb,GCzCaE,GAAgC,CAK3CxvC,YAAa,CACX3L,OAAQ,CACN/xB,GAAI,CACFgf,MAAO,CACL,cACA,YACA,WACA,YACA,YACA,WACA,kBAGJA,MAAO,CAAC,YAAa,WAAY,YAAa,aAEhDktC,WAAY,CACVlsD,GAAI,CAAEgf,MAAO,IACbA,MAAO,CAAC,YAAa,gBAAiB,cAAe,cAEvDmuD,OAAQ,CACNnuD,MAAO,CAAC,WAEVouD,qBAAsB,CACpBvvC,SAAU,YACV7e,MAAO,CACL,WACA,YACA,YACA,YACA,WACA,WACA,aAIJquD,qBAAsB,CACpBruD,MAAO,CAAC,YAAa,cAEvBsuD,qBAAsB,CACpBzvC,SAAU,WACV7e,MAAO,CAAC,WAAY,WAAY,aAElCuuD,wBAAyB,CACvBvuD,MAAO,CAAC,yBAA0B,oBAEpCwuD,wBAAyB,CACvBxuD,MAAO,CAAC,yBAA0B,oBAEpCyuD,8BAA+B,CAC7BzuD,MAAO,CACL,WACA,yBACA,wBACA,aAGJ0uD,8BAA+B,CAC7B1uD,MAAO,CACL,WACA,yBACA,wBACA,aAGJ2uD,2BAA4B,CAC1B3tE,GAAI,CACF69B,SAAU,aAGZA,SAAU,UAEV7e,MAAO,CACL,UACA,YACA,eACA,OACA,2BAGJ4uD,iBAAkB,CAChB5uD,MAAO,CAAC,aAAc,yBAA0B,2BAElD6uD,oBAAqB,CACnB7uD,MAAO,CAAC,cAAe,gBAEzB8uD,kBAAmB,CACjB9uD,MAAO,CAAC,kBAAmB,qBAE7B+uD,kBAAmB,CACjB/uD,MAAO,CAAC,aAAc,gBAAiB,kBAEzCgvD,8BAA+B,CAC7BhvD,MAAO,CAAC,cAAe,gBAEzBivD,qCAAsC,CACpCjvD,MAAO,CAAC,aAAc,cAAe,cAAe,kBAEtDkvD,0BAA2B,CACzBlvD,MAAO,CAAC,uBCvGDmvD,GAET,CACF/1C,uBAAwB,CACtB6b,SAAU,yBACVhxD,SAAU,0BAEZ2mF,eAAgB,CACd31B,SAAU,iBACVhxD,SAAU,iBACVpB,IAAK,mBAIIusF,GAA8C,CACzDC,UAAW,CACTC,aAAc,CAAC,2BAEjBC,UAAW,CACTD,aAAc,CAAC,6BCfHE,KACd,MAAO,CACLC,aAAc,CACZ9xC,WAAU/sD,EAAA,GACLu+F,IAELnvD,MAAKpvC,EAAA,GACAw+F,IAELnoE,MAAO,uBCgCb,SAAAyoE,KAAyC,OAA5BA,EAA0Bp+F,EAAA,CAxBtCyH,EAAAA,SAAS,CACRE,QAAS,CACP02F,EAAAA,YAAY7+D,UACZ8+D,EAAAA,WAAW9+D,UACXg4B,EAAAA,wBAAwBh4B,UACxB2nB,EAAAA,aAAa3nB,UACb++D,EAAAA,wBAAwB/+D,UACxBg/D,EAAAA,sBAAsBh/D,UACtBy+B,GAAcz+B,UACdpyB,EAAAA,WAAWoyB,UACXi/D,EAAAA,UAAUj/D,UACVk/D,EAAAA,oBAAoBl/D,UACpBm/D,EAAAA,cAAcn/D,UACdmR,EAAAA,WAAWnR,UACXo/D,EAAAA,eAAep/D,UACfq/D,EAAAA,WAAWr/D,UACXs/D,EAAAA,cAAct/D,UACdD,GAAiBC,UACjBnyB,EAAAA,qBAAqBmyB,QAAQ,OAC7BksB,IAEFxjD,QAAS,CAACwjD,IACV7jD,UAASlG,EAAMo9F,EAAAA,gCAEJX,oBCCb,SAAAY,WASA,SATaA,EACJA,EAAA53C,WAAP,SACEviD,GAEA,MAAO,CACL46B,SAAUw/D,EACVp3F,UAAW,CAAC4jD,EAAAA,cAAc5mD,MANnBm6F,EAAgBC,EAAAj/F,EAAA,CA7B5ByH,EAAAA,SAAS,CACRE,QAAS,CACPsrB,EAAAA,aAAauM,QAAQ,GAAI,CACvB0/D,0BAA2B,UAC3BC,gBAAiB,YAGnBC,EAAAA,YAAY5/D,QAAQ,IACpB6/D,EAAAA,cAAc7/D,QAAQ,IAItB2F,GAEAi5D,GACAlmC,GACAj6B,EAAAA,kBAAkBuB,UAElB8/D,EAAAA,gBAAgB9/D,UAChB+/D,EAAAA,sBAAsB//D,UAGtBggE,EAAAA,UAAUhgE,UACV28D,GACAO,GACA+C,EAAAA,qBAAqBjgE,WAEvBt3B,QAAS,CAACgwD,GAAYkmC,OAEXY,oBCjBb,SAAAU,WASA,SATaA,EACJA,EAAAt4C,WAAP,SACEviD,GAEA,MAAO,CACL46B,SAAUkgE,EACV93F,UAAW,CAAC4jD,EAAAA,cAAc5mD,MANnB66F,EAAmBC,EAAA3/F,EAAA,CAnB/ByH,EAAAA,SAAS,CACRE,QAAS,CACPq3F,GAGAtD,IAEF7zF,UAAW,CACTC,EAAAA,qBAAqB,CACnBmnD,IAAK,CACHC,SAAS,EACTC,iBAAiB,KAGrBrnD,EAAAA,qBAAqB80F,IACrBgD,EAAAA,4BAA4B1B,KAE9Bh2F,QAAS,CAAC82F,OAECU,+B1RzBwB,6wRACF,2tCzGNT","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(fontawesomeIconConfig),\n    { provide: IconConfig, useExisting: Config },\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsComponentMapping, CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  private missingComponents: string[] = [];\n\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  public getComponentMapping(componentType: string): CmsComponentMapping {\n    const componentConfig = this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  isComponentEnabled(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getComponentMapping(componentType)?.disableSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    return this.getComponentMapping(componentType)?.childRoutes ?? [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    return this.getComponentMapping(componentType)?.guards ?? [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    return this.getComponentMapping(componentType)?.i18nKeys ?? [];\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Handler, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Handler {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const matchedHandlers = (this.handlers ?? []).filter((handler) =>\n      handler.hasMatch(componentMapping)\n    );\n    if (matchedHandlers.length > 1) {\n      matchedHandlers.sort(\n        (a, b) =>\n          (a.getPriority ? a.getPriority() : 0) -\n          (b.getPriority ? b.getPriority() : 0)\n      );\n    }\n    if (isDevMode() && matchedHandlers.length === 0) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n    return matchedHandlers[matchedHandlers.length - 1];\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsMappingService } from '../../../services/cms-mapping.service';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsMapping: CmsMappingService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsMapping.getComponentMapping(type)?.providers ?? [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsMappingService } from '../../services/cms-mapping.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsMappingService: CmsMappingService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService,\n    protected cmsService: CmsService // TODO: remove, move smartedit detection responsibility to different layer/service\n  ) {}\n\n  ngOnInit() {\n    if (\n      this.cmsMappingService.isComponentEnabled(\n        this.cxComponentWrapper.flexType\n      )\n    ) {\n      this.launchComponent();\n    }\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsMappingService.getComponentMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n      });\n  }\n\n  private decorate(elementRef: ElementRef) {\n    if (this.cmsService.isLaunchInSmartEdit()) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.cxComponentWrapper.properties,\n        elementRef.nativeElement,\n        this.renderer\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      componentMapping.component.prototype\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import {\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ComponentHandler } from './component-handler';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CxApiService } from '../services/cx-api.service';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n/**\n * Component handler responsible for launching cms web components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebComponentHandler implements ComponentHandler {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'string' &&\n      componentMapping.component.includes('#')\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef }> {\n    return new Observable<{ elementRef: ElementRef }>((subscriber) => {\n      let webElement;\n      let active = true;\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const renderer = injector.get(Renderer2);\n\n      const disposeFunc = () => {\n        active = false;\n        if (webElement) {\n          webElement.remove();\n        }\n      };\n\n      this.initWebComponent(componentMapping.component, renderer).then(\n        (elementName) => {\n          if (elementName) {\n            webElement = renderer.createElement(elementName);\n\n            const cmsComponentData = injector.get(CmsComponentData, null);\n\n            webElement.cxApi = {\n              ...injector.get(CxApiService),\n              cmsComponentData,\n            };\n\n            renderer.appendChild(\n              viewContainerRef.element.nativeElement.parentElement,\n              webElement\n            );\n\n            subscriber.next({ elementRef: new ElementRef(webElement) });\n\n            if (!active) {\n              disposeFunc();\n            }\n          }\n        }\n      );\n\n      return disposeFunc;\n    });\n  }\n\n  private initWebComponent(\n    component: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const [path, selector] = component.split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { WebComponentHandler } from './handlers/web-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: WebComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistance key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistance\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked')\n  isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      super.handleFocus(event as KeyboardEvent);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elmenents,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport abstract class LaunchConfig {\n  launch?: {\n    [key: string]: LaunchOptions;\n  };\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Optional elements for other configurations\n   */\n  options?: {\n    /**\n     * Dialog type is used to apply CSS classes\n     */\n    dialogType?: DIALOG_TYPE;\n  };\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { AsmMainUiComponent } from '../../../cms-components/asm/asm-main-ui/asm-main-ui.component';\nimport { SkipLinkComponent } from '../../a11y/skip-link/component/skip-link.component';\nimport { LaunchConfig } from './launch-config';\n\nexport const DEFAULT_LAUNCH_CONFIG: LaunchConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n    SKIP_LINKS: {\n      outlet: 'cx-storefront',\n      component: SkipLinkComponent,\n    },\n  },\n};\n","import { ViewContainerRef } from '@angular/core';\nimport { LaunchDialog, LaunchOptions, LAUNCH_CALLER } from '../config';\n\nexport abstract class LaunchRenderStrategy {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER;\n    element?: any;\n  }> = [];\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ): void;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract match(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(caller: LAUNCH_CALLER, config: LaunchDialog): boolean {\n    return this.renderedCallers.some((el) => el.caller === caller)\n      ? !!config.multi\n      : true;\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER, _config?: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n  }\n}\n","import { Inject, Injectable, ViewContainerRef } from '@angular/core';\nimport {\n  LaunchConfig,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  // Keep a list of rendered elements\n  protected renderedCallers: LAUNCH_CALLER[] = [];\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected launchConfig: LaunchConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(caller: LAUNCH_CALLER, vcr?: ViewContainerRef): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.render(config, caller, vcr);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER): LaunchOptions {\n    return this.launchConfig?.launch[caller];\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return this.renderStrategies.find((strategy) => strategy.match(config));\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media && media[this.getHighestAvailableFormat(media)]) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach((format) => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap((value) =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(() =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter((loaded) => loaded),\n      switchMap(() => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap((dataLoaded) => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: ` <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container> `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { FormErrorsModule } from '../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  FeatureConfigService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected featureConfig: FeatureConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    private authService: AuthService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn ? cartLoaded && sflLoaded : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart]) => {\n          if (cart.totalItems) {\n            return slots.filter((slot) => slot !== 'EmptyCartMiddleContent');\n          } else if (selectiveCart.totalItems) {\n            return slots.filter(\n              (slot) =>\n                slot !== 'EmptyCartMiddleContent' &&\n                slot !== 'CenterRightContentSlot'\n            );\n          } else {\n            return slots.filter(\n              (slot) =>\n                slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoaderState,\n  UserPaymentService,\n  Region,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.paymentForm.get('cardType.code').setValue(card.code);\n  }\n\n  monthSelected(month: string): void {\n    this.paymentForm.get('expiryMonth').setValue(month);\n  }\n\n  yearSelected(year: number): void {\n    this.paymentForm.get('expiryYear').setValue(year);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddressForm\n      .get('region.isocodeShort')\n      .setValue(region.isocodeShort);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          (paymentInfo) => paymentInfo && !!Object.keys(paymentInfo).length\n        )\n      )\n      .subscribe((paymentInfo) => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach((key) => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some((error) => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.addressForm['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    const selectedSub = this.selectedAddress$.subscribe((selected) => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  Config,\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected componentFactoryResolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER,\n    vcr: ViewContainerRef\n  ) {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      vcr.createComponent(template);\n      this.renderedCallers.push({ caller, element: vcr.element });\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  match(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new Map<string, OutletDirective>();\n\n  render(outlet: string): void {\n    if (this.outletRefs.size !== 0) {\n      this.outletRefs.get(outlet).render();\n    }\n  }\n\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.set(cxOutlet, context);\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService?: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n    this.outletRendererService.register(this.cxOutlet, this);\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach((obj) => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n    this.renderedTemplate.push(tmplOrFactory);\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super();\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ) {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n\n      const element = vcr?.element;\n      this.renderedCallers.push({ caller, element });\n    }\n  }\n\n  match(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected routingService: RoutingService) {\n    super();\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER) {\n    this.routingService.go(config);\n  }\n\n  match(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideConfig } from '@spartacus/core';\nimport { DEFAULT_LAUNCH_CONFIG } from './config/default-launch-config';\nimport { LaunchConfig } from './config/launch-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [\n        provideConfig(DEFAULT_LAUNCH_CONFIG),\n        { provide: LaunchConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    tap((slot) => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map((slot) => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig,\n    protected cdRef?: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe((components) => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n    this.cdRef?.markForCheck();\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Config,\n  isFeatureEnabled,\n  ProtectedRoutesGuard,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    @Inject(Config) protected config: any\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService\n                  .getPage(pageContext, this.shouldReloadCmsData())\n                  .pipe(\n                    first(),\n                    switchMap((pageData) =>\n                      pageData\n                        ? this.service.canActivatePage(\n                            pageContext,\n                            pageData,\n                            route,\n                            state\n                          )\n                        : this.service.canActivateNotFoundPage(\n                            pageContext,\n                            route,\n                            state\n                          )\n                    )\n                  )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReloadCmsData(): boolean {\n    return !isFeatureEnabled(this.config, 'cmsPageLoadOnce');\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap((data) =>\n      combineLatest(\n        data.components.split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach((key) => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => Boolean(order)),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe((params) => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap((searchResult) => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach((el) => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map((searchResult) => {\n        return searchResult.facets\n          ? searchResult.facets.filter((facet) => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet: Facet): Facet[] {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : facet.topValueCount\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService, RoutingService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(\n    protected storeDataService: StoreDataService,\n    protected route: ActivatedRoute,\n    protected routingService: RoutingService\n  ) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}