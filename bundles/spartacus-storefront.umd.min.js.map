{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","HEART","EMPTY_HEART","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","map","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","changeDetection","ChangeDetectionStrategy","OnPush","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","subscription","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","increment","preventDefault","stopPropagation","onBlur","focus","onFocus","setFocus","registerOnTouched","fn","registerOnChange","updatedQuantity","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","ViewChild","static","OnlyNumberDirective","hostElement","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","Directive","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","get","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","BehaviorSubject","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","load","filter","switchMap","qsi","isDataLoaded","dataLoaded","API","unload","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","cmsComponents","component","entryComponents","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","item","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","ViewConfigModule","forRoot","ngModule","provideConfig","view","ViewConfig","AutoFocusDirective","ngAfterViewInit","AutoFocusDirectiveModule","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","OrderDetailsService","userOrderService","routingService","orderCode$","getRouterState","routingData","state","params","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","RoutingService","PromotionService","cartService","orderDetailsService","checkoutService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entries","entryNumber","CartService","CheckoutService","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","FeaturesConfigModule","deferLoading","DeferLoadingStrategy","INSTANT","CmsMappingService","platformId","isComponentEnabled","flexType","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","componentType","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsConfig","Inject","PLATFORM_ID","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","canActivate","isCanActivate","isObservable","obj","then","Promise","resolve","wrapIntoObservable","first","Error","skipWhile","endWith","CmsI18nService","translation","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationService","TranslationChunkService","PAGE_LAYOUT_HANDLER","InjectionToken","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","section","page$","breakpoint$","pageTemplate","slots","resolveSlots","result","handle","a","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","keys","slot","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","join","cacheKey","warn","CmsService","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","name","styleClass","slots$","pageFoldSlot$","templateName","cls","currentClass","removeClass","addClass","CmsRoutesService","router","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","path","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","Router","CmsPageGuard","cmsService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","withLatestFrom","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","SemanticPathService","ProtectedRoutesGuard","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","OutletPosition","store","stacked","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","element","intersects","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletDirective","vcr","deferLoaderService","initializeOutlet","cxOutletDefer","render","changes","cxOutlet","getHostElement","renderOutlet","isArray","tmplOrFactory","ComponentFactory","createComponent","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","parentElement","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","split","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","DOCUMENT","CxApiService","auth","cartData","checkout","checkoutDelivery","checkoutPayment","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","CartDataService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","ComponentWrapperDirective","componentMapper","dynamicAttributeService","shouldRenderComponent","cxComponentWrapper","launchWebComponent","launchComponent","cmpRef","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","SkipLinkService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","existing","getSkipLinkIndexInArray","i18nKey","scrollToTarget","blur","SkipLinkScrollPosition","inline","scrollIntoView","findIndex","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","observeOn","asyncScheduler","tabNext","isElement","nextSibling","tabPrev","previousSibling","defaultSkipLinkConfig","SkipLinkDirective","elRef","cxSkipLink","SkipLinkModule","APP_INITIALIZER","useFactory","skipLinkFactory","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","title","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","JsonLdScriptFactory","rendererFactory","sanitizer","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","DomSanitizer","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","stock","stockLevelStatus","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","Date","datePublished","getFullYear","getMonth","getDate","headline","reviewRating","toString","CurrentProductService","productService","features","DEFAULT_PRODUCT_SCOPE","isLevel","ProductScope","DETAILS","getProduct","scopes","productCode","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","AsmComponentService","authService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","encapsulation","ViewEncapsulation","None","AsmEnablerService","isUiAdded","isEnabled","addUi","isLaunched","isUsedBefore","setItem","getItem","Location","AsmLoaderModule","asmFactory","asmEnablerService","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","seconds","slice","Pipe","CSAgentLoginFormComponent","fb","submitClicked","csAgentTokenLoading","submitEvent","group","Validators","required","onSubmit","controls","isNotValid","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","host","(document:click)","AsmService","AsmModule","AsmCoreModule","AddedToCartDialogComponent","promotionService","quantity","modalIsOpen","entry$","setControl","createEntryFormGroup","markAsPristine","orderPromotions$","dismissModal","removeEntry","updateEntry","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","setStockInfo","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","isReadOnly","vouchers","sort","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponCode","submitDisabled$","valid","getAddVoucherResultLoading","btnEnabled","addVoucherIsLoading","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","filteredCoupons","applyVoucher","addVoucher","applyCustomerCoupon","filterValue","toLowerCase","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","potentialProductPromotions","_items","every","consignmentEntry","orderEntry","isSaveForLaterEnabled","getPotentialProductPromotionsForItem","_e","_f","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","updateItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","isUserLoggedIn","cartLoaded","sflLoaded","getAllPromotionsForCart","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","isEmpty","totalItems","CartPageLayoutHandler","getCart","selectiveCart","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","ActiveCartService","SaveForLaterModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","steps","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","snapshot","stepRoute","getRouteConfig","paths","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","year","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","img","actions","header","goNext","goPrevious","paymentMethodSelected","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","tab","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","CANCEL","RETURN","ValidateQuantity","q","OrderAmendService","getAmendedEntries","getForm","getFormControl","getOrder","buildForm","FormGroup","addControl","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","round","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","AmendOrderType","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","getControl","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","ɵ0$1","CancelOrderConfirmationModule","forChild","CancelOrderComponent","ɵ0$2","CancelOrderModule","OrderCancellationModule","OrderReturnService","returnRequestService","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ɵ0$3","ReturnOrderConfirmationModule","ReturnOrderComponent","ɵ0$4","ReturnOrderModule","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderDetailActionsComponent","OrderConsignedEntriesComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","ɵ0$6","OrderHistoryModule","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","returnCode","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","queryParams","isPasswordReset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","count","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","ɵ0$8","MyCouponsModule","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","child","loadNavigationItems","node","populateLink","itemType","linkName","getLink","categoryCode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","c","avoidReopen","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","current","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","active","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","isActive","thumbnail","zoom","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","behavior","click","h3Elements","h3Element","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","Grid","List","ProductViewComponent","modeChange","viewMode","newMode","ViewModes","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","property","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","ɵ0$9","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$a","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$b","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","couponClaim","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                consent.consentState == null ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media && media[this.getHighestAvailableFormat(media)]) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach(format => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return this.min !== undefined && incomingValue < this.min\n      ? this.min\n      : this.max !== undefined && incomingValue > this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    if (value) {\n      value = value.replace(/[^0-9]+/g, '');\n      this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n    }\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderEntry,\n  PromotionResult,\n  CartService,\n  Cart,\n  Order,\n  CheckoutService,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected cartService: CartService,\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.cartService\n      .getActive()\n      .pipe(map(cart => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map(order => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.cartService\n          .getActive()\n          .pipe(\n            map(cart =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map(order =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map(breakpoint => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap(templateName =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, (T)[]>();\n  private templatesRefsBefore = new Map<string, (T)[]>();\n  private templatesRefsAfter = new Map<string, (T)[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  private store(store: Map<string, (T)[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned obervable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first(v => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable(observer => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver(entries => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options?: IntersectionOptions) {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evalutes whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>,\n    // tslint:disable-next-line: unified-signatures\n    intersectionService: DeferLoaderService\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, intersectionService?: IntersectionService) instead\n   */\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>\n  );\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService?: DeferLoaderService\n  ) {}\n\n  private initializeOutlet(): void {\n    this.vcr.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.render();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.initializeOutlet();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.render();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private render() {\n    this.renderOutlet(OutletPosition.BEFORE);\n    this.renderOutlet(OutletPosition.REPLACE);\n    this.renderOutlet(OutletPosition.AFTER);\n  }\n\n  private renderOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach(obj => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n  UserNotificationPreferenceService,\n  UserInterestsService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe(components => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n  SkipLink,\n  SkipLinkConfig,\n  SkipLinkScrollPosition,\n} from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(protected config: SkipLinkConfig) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target: target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key: key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      skipLink => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter(skipLink => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(\n    target: HTMLElement,\n    position: SkipLinkScrollPosition,\n    event: MouseEvent\n  ): void {\n    target = <HTMLElement>target.parentNode;\n    (<HTMLElement>event.target).blur();\n    const options: ScrollIntoViewOptions =\n      position === SkipLinkScrollPosition.AFTER ? { inline: 'end' } : {};\n\n    target.scrollIntoView(options);\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      skipLink => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          skipLink => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable, asyncScheduler } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\nimport { observeOn } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService\n    .getSkipLinks()\n    .pipe(observeOn(asyncScheduler)); // delay view's update to avoid ExpressionChangedAfterItHasBeenCheckedError\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink, event: MouseEvent): void {\n    this.skipLinkService.scrollToTarget(\n      skipLink.target,\n      skipLink.position,\n      event\n    );\n  }\n\n  /**\n   * Hides the skip link by removing the focus.\n   */\n  blur(event: MouseEvent): void {\n    (<HTMLElement>event.target).blur();\n  }\n\n  tabNext(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).nextSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).nextSibling).focus();\n    }\n  }\n  tabPrev(event: MouseEvent): void {\n    if (this.isElement((<HTMLElement>event.target).previousSibling)) {\n      (<HTMLElement>(<HTMLElement>event.target).previousSibling).focus();\n    }\n  }\n\n  private isElement(element: Node): boolean {\n    return !!element && element instanceof HTMLElement;\n  }\n}\n","import { SkipLinkConfig, SkipLinkScrollPosition } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'SiteContext',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'BottomHeaderSlot',\n      position: SkipLinkScrollPosition.AFTER,\n      i18nKey: 'skipLink.labels.main',\n    },\n    {\n      key: 'ProductLeftRefinements',\n      i18nKey: 'skipLink.labels.productFacets',\n    },\n    { key: 'ProductListSlot', i18nKey: 'skipLink.labels.productList' },\n    { key: 'Footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, Input, OnDestroy, OnInit, ElementRef } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input()\n  cxSkipLink: string;\n\n  constructor(\n    private elRef: ElementRef<HTMLElement>,\n    private skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\nimport { SkipLinkModule } from '../../../layout/a11y/skip-link/skip-link.module';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule, SkipLinkModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    routingService: RoutingService,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(routingService: RoutingService, productService: ProductService);\n\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.DETAILS : '';\n\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) =>\n        this.productService.get(\n          productCode,\n          // TODO deprecated since 1.4 - should be replaced with 'scopes || this.DEFAULT_PRODUCT_SCOPE'\n          this.features && this.features.isLevel('1.4')\n            ? scopes || this.DEFAULT_PRODUCT_SCOPE\n            : undefined\n          // deprecated END\n        )\n      )\n    );\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Location } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { OutletPosition, OutletService } from '../../../cms-structure/index';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\nimport { AsmMainUiComponent } from '../asm-main-ui/asm-main-ui.component';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  /** indicates whether the ASM UI has been added already */\n  private isUiAdded = false;\n\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletService: OutletService<ComponentFactory<any>>\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  private isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  private isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  private isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  private addUi(): void {\n    if (this.isUiAdded) {\n      return;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      AsmMainUiComponent\n    );\n    this.outletService.add('cx-storefront', factory, OutletPosition.BEFORE);\n    this.isUiAdded = true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/index';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList', { static: false }) resultList: ElementRef;\n  @ViewChild('searchTerm', { static: false }) searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  OrderEntry,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    modalService: ModalService,\n    cartService: CartService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(\n    modalService: ModalService,\n    cartService: CartService,\n    fb: FormBuilder\n  );\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder,\n    protected promotionService?: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n          if (!this.modalIsOpen) {\n            this.modalIsOpen = true;\n          }\n        }\n      })\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  CartVoucherService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  CustomerCouponService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  submitDisabled$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n  filteredCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    cartService: CartService,\n    authService: AuthService,\n    cartVoucherService: CartVoucherService,\n    formBuilder: FormBuilder,\n    customerCouponService: CustomerCouponService,\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add customerCouponService,featureConfig for customer coupon feature.\n   * Remove issue: #5971\n   */\n  constructor(\n    cartService: CartService,\n    authService: AuthService,\n    cartVoucherService: CartVoucherService,\n    formBuilder: FormBuilder\n  );\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder,\n    protected customerCouponService?: CustomerCouponService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.cartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.cartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.submitDisabled$ = combineLatest([\n      this.cartIsLoading$,\n      this.form.valueChanges.pipe(\n        startWith(true),\n        map(() => this.form.valid)\n      ),\n      this.cartVoucherService.getAddVoucherResultLoading(),\n    ]).pipe(\n      map(\n        ([cartIsLoading, btnEnabled, addVoucherIsLoading]) =>\n          cartIsLoading || !btnEnabled || addVoucherIsLoading\n      )\n    );\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe(error => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach(appliedVoucher => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          coupon => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n    this.filteredCoupons = this.applicableCoupons;\n  }\n\n  applyVoucher(): void {\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  filter(query: string): void {\n    const filterValue = query.toLowerCase();\n\n    this.filteredCoupons = this.applicableCoupons.filter(\n      coupon => coupon.couponId.toLowerCase().indexOf(filterValue) > -1\n    );\n  }\n\n  open(): void {\n    this.filteredCoupons = this.applicableCoupons;\n    if (this.applicableCoupons.length > 0) {\n      this.couponBoxIsActive = true;\n    }\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  CartService,\n  PromotionResult,\n  PromotionLocation,\n  SelectiveCartService,\n  FeatureConfigService,\n  ConsignmentEntry,\n} from '@spartacus/core';\nimport {\n  Item,\n  CartItemComponentOptions,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input()\n  set items(_items) {\n    if (_items.every(item => item.hasOwnProperty('orderEntry'))) {\n      this._items = _items.map(consignmentEntry => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = _items;\n      this.items.forEach(item => {\n        const { code } = item.product;\n        if (!this.form.controls[code]) {\n          this.form.setControl(code, this.createEntryFormGroup(item));\n        } else {\n          const entryForm = this.form.controls[code] as FormGroup;\n          entryForm.controls.quantity.setValue(item.quantity);\n        }\n      });\n    }\n  }\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  private _items: Item[] = [];\n\n  get items(): Item[] {\n    return this._items;\n  }\n\n  constructor(\n    cartService: CartService,\n    fb: FormBuilder,\n    selectiveCartService: SelectiveCartService,\n    featureConfig: FeatureConfigService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Add selectiveCartService authService routingService and featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(cartService: CartService, fb: FormBuilder);\n\n  constructor(\n    protected cartService: CartService,\n    protected fb: FormBuilder,\n    protected selectiveCartService?: SelectiveCartService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  // TODO remove for 2.0 - left to keep backward compatibility\n  ngOnInit(): void {}\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.cartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    //don't show promotions in saveforlater\n    if (this.options.isSaveForLater) {\n      return entryPromotions;\n    }\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { PromotionResult, PromotionLocation } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Input()\n  options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n  @Input()\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input()\n  potentialProductPromotions: any[];\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    promotionService: PromotionService,\n    // tslint:disable-next-line:unified-signatures\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(promotionService: PromotionService);\n\n  constructor(\n    protected promotionService: PromotionService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  Cart,\n  CartService,\n  FeatureConfigService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    cartService: CartService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService,\n    selectiveCartService: SelectiveCartService,\n    authService: AuthService,\n    routingService: RoutingService,\n    featureConfig: FeatureConfigService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    protected cartService: CartService,\n    protected promotionService?: PromotionService,\n    protected selectiveCartService?: SelectiveCartService,\n    private authService?: AuthService,\n    private routingService?: RoutingService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n\n    /**\n     * TODO Remove the check for promotion service\n     * Issue: GH-5670\n     */\n    if (this.promotionService) {\n      this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n    }\n\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n\n    if (this.isSaveForLaterEnabled()) {\n      this.cartLoaded$ = combineLatest([\n        this.cartService.getLoaded(),\n        this.selectiveCartService.getLoaded(),\n        this.authService.isUserLoggedIn(),\n      ]).pipe(\n        tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n        map(([cartLoaded, sflLoaded, loggedIn]) =>\n          loggedIn ? cartLoaded && sflLoaded : cartLoaded\n        )\n      );\n    }\n    //TODO remove for #5958\n    else {\n      this.cartLoaded$ = this.cartService.getLoaded();\n    }\n    //TODO  remove for #5958 end\n    if (this.promotionService) {\n      this.orderPromotions$ = this.promotionService.getOrderPromotions(\n        this.promotionLocation\n      );\n    }\n  }\n\n  //TODO remove feature flag for #5958\n  isSaveForLaterEnabled(): boolean {\n    if (this.featureConfig) {\n      return this.featureConfig.isEnabled('saveForLater');\n    }\n    return false;\n  }\n  //TODO remove feature flag for #5958 end\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.cartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.cartService.getActive(),\n      this.cartService.getLoaded(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CartService,\n  SelectiveCartService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    cartService: CartService,\n    selectiveCartService: SelectiveCartService,\n    featureConfig: FeatureConfigService\n  );\n  /**\n   * @deprecated Since 1.5\n   * Add selectiveCartService and featureConfig for save for later.\n   * Remove issue: #5958\n   */\n  constructor(cartService: CartService);\n\n  constructor(\n    private cartService: CartService,\n    private selectiveCartService?: SelectiveCartService,\n    private featureConfig?: FeatureConfigService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      if (this.featureConfig && this.featureConfig.isEnabled('saveForLater')) {\n        return combineLatest([\n          slots$,\n          this.cartService.getActive(),\n          this.selectiveCartService.getCart(),\n        ]).pipe(\n          map(([slots, cart, selectiveCart]) => {\n            if (cart.totalItems) {\n              return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n            } else if (selectiveCart.totalItems) {\n              return slots.filter(\n                slot =>\n                  slot !== 'EmptyCartMiddleContent' &&\n                  slot !== 'CenterRightContentSlot'\n              );\n            } else {\n              return slots.filter(\n                slot =>\n                  slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n              );\n            }\n          })\n        );\n      }\n      //TODO remove old code for #5958\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n      ////TODO remove old code for #5958\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter(product => Boolean(product)),\n    tap(product => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter(wishlist => Boolean(wishlist)),\n    map(wishList => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find(entry => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n    I18nModule,\n    IconModule,\n    RouterModule,\n    UrlModule,\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  SelectiveCartService,\n  Cart,\n  OrderEntry,\n  ActiveCartService,\n  CmsParagraphComponent,\n  CmsService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map(cart => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.getLoaded(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  FeaturesConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n    I18nModule,\n    CartSharedModule,\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  LoaderState,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<LoaderState<void>>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService, // tslint:disable-line\n    promotionService: PromotionService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\n@NgModule({\n  imports: [OutletRefModule],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/index';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletModule, OutletRefModule } from '../../cms-structure/index';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach(comp => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach(key => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap(form => {\n        return this.getEntries().pipe(\n          map(entries =>\n            entries.filter(entry => this.getFormControl(form, entry).value > 0)\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap(order => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach(entry => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach(entry =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => Boolean(order)),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter(order => !!order.entries),\n      map(order =>\n        order.entries.filter(\n          entry => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter(entryNumber => <number>entries[entryNumber] > 0)\n      .map(\n        entryNumber =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first(r => !!r))\n      .subscribe(returnRequest => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map(form => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap(form => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    orderDetailsService: OrderDetailsService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(orderDetailsService: OrderDetailsService);\n\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(consignment =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map(order => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            consignment => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  /**\n   * @deprecated\n   * NOTE: This function will be removed in version 2.0\n   */\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { Component, Input } from '@angular/core';\nimport { Consignment, Order, OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/index';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map(order => order.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap(returnRequest => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      success => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map(returnRequests => returnRequests.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { map } from 'rxjs/operators';\nimport { combineLatest } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Observable, combineLatest, Subscription } from 'rxjs';\nimport {\n  CustomerCouponService,\n  CustomerCouponSearchResult,\n  PaginationModel,\n} from '@spartacus/core';\nimport { tap, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          coupons =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe(error => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe(k => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe(success => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  I18nModule,\n  ConfigModule,\n  CmsConfig,\n  AuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap(preferences => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach(p => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [\n    CommonModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          interests =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map(interest => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map(result => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n  AuthGuard,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach(child =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map(child => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    checkoutService: CheckoutService,\n    // tslint:disable-next-line:unified-signatures\n    promotionService: PromotionService\n  );\n\n  /**\n   * @deprecated Since 1.5\n   * Use promotionService instead of the promotion inputs.\n   * Remove issue: #5670\n   */\n  constructor(checkoutService: CheckoutService);\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService?: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  FeatureConfigService,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ProductScope.LIST : '';\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes =>\n      codes.map(code => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService,\n    // tslint:disable-next-line: unified-signatures\n    features?: FeatureConfigService\n  );\n\n  /**\n   * @deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<model>,\n    productService: ProductService\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  /**\n   * @deprecated since version 1.5\n   * This variable will no longer be in use. Use thumbs$ observable instead.\n   * TODO(issue:#6166).\n   */\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    // TODO: deprecated, remove the below tap (issue:#6166)\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter(product => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap(product => {\n        product.baseOptions.forEach(option => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find(item => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find(q => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach(variant => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      item => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          item => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.nextState.params.productCode),\n      filter(Boolean),\n      switchMap((productCode: string) =>\n        this.productService.get(productCode, ProductScope.VARIANTS)\n      ),\n      filter(Boolean),\n      map((product: Product) => {\n        if (!product.purchasable) {\n          const variant = this.findVariant(product.variantOptions);\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          this.productService\n            .get(variant.code, ProductScope.LIST)\n            .pipe(\n              filter(Boolean),\n              take(1)\n            )\n            .subscribe((_product: Product) => {\n              this.routingService.go({\n                cxRoute: 'product',\n                params: _product,\n              });\n            });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter(variant => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  UrlModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  FeaturesConfigModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  // TODO deprecated since 1.4, remove\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    map(p => p.code),\n    distinctUntilChanged(),\n    switchMap(productCode => this.reviewService.getByProductCode(productCode)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe(success => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(interests => !!interests.results && interests.results.length === 1)\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap(prefs => (this.enabledPrefs = prefs)),\n        map(prefs => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe(error => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe(success => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe(text =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    I18nModule,\n    SpinnerModule,\n    UrlModule,\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template ? template.description : '',\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n  MyCouponsModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductGridSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      md: {\n        pageFold: 'UpSelling',\n      },\n      xs: {\n        pageFold: 'Summary',\n      },\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}