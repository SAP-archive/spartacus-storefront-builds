{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/components/form-components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/form-components/form-components.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","Injectable","args","providedIn","NgbModal","CurrentProductService","routingService","productService","getProduct","_this","getRouterState","pipe","map","state","params","filter","Boolean","switchMap","productCode","get","RoutingService","ProductService","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","staticStyleClasses","undefined","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","AddedToCartDialogComponent","modalService","cartService","fb","iconTypes","ICON_TYPE","quantity","firstUpdate","form","group","ngOnInit","entry$","tap","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","showItemIncrLabel","dismissModal","removeEntry","item","updateEntry","_a","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","static","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","subscribe","stock","stockLevelStatus","stockLevel","maxQuantity","markForCheck","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","size","componentInstance","cart$","getActive","loaded$","getLoaded","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getSize","itemWidth","fromEvent","nativeWindow","clientWidth","startWith","debounceTime","totalWidth","Math","round","distinctUntilChanged","CarouselComponent","el","service","minItemPixelSize","hideIndicators","indicatorIcon","previousIcon","nextIcon","activeSlide","_items","select","size$","slide","onOpen","groupIndex","itemIndex","items","xs","sm","md","lg","xl","LayoutConfig","ServerConfig","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","breakpoint","breakpoints","window","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","MediaService","breakpointService","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","altText","mediaFormats","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","OnlyNumberDirective","renderer","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","preventDefault","onKeyUp","onKeyDown","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","setProperty","keyCode","String","fromCharCode","Renderer2","HostListener","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","input","handlers","ArrowDown","decrement","ArrowUp","increment","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","FormComponentsModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","floor","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","GlobalMessageModule","forRoot","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","tslib_1.__values","items_1_1","getOptionLabel","getActiveItem","getLabel","setActive","take","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","cmsComponents","CMSSiteContextComponent","component","useClass","deps","SiteContextModule","entryComponents","StarRatingComponent","change","initialRate","setRate","rating","force","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","invalid","touched","dirty","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","forEach","getPotentialProductPromotionsForItem","entryPromotions","_c","_d","promotion","description","consumedEntries","_e","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","_b","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialOrderPromotions","appliedOrderPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","skipWhile","isEmpty","go","cxRoute","CartPageLayoutHandler","handle","slots$","pageTemplate","section","combineLatest","slots","totalItems","slot","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartModule","PAGE_LAYOUT_HANDLER","InjectionToken","CartComponentModule","CheckoutConfigService","checkoutConfig","routingConfigService","steps","checkout","getCheckoutStep","currentStepType","getCheckoutStepIndex","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","routeName","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","id","name","CheckoutStepType","CheckoutGuard","router","parseUrl","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","AuthGuard","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","ShippingAddressSetGuard","checkoutDetailsService","checkoutConfigService","serverConfig","checkoutStep","production","console","warn","deliveryAddress","keys","DeliveryModeComponent","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","changedOption","supportedDeliveryModes$","getSupportedDeliveryModes","selectedDeliveryMode$","getSelectedDeliveryMode","loadSupportedDeliveryModes","deliveryMode","currentDeliveryModeId","changeMode","setDeliveryMode","deliveryModeSub","back","ngOnDestroy","unsubscribe","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","countrySelected","country","billingAddress","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","userPaymentService","months","years","sameAsShippingAddress","goBack","closeForm","addPaymentInfo","payment","defaultPayment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","add","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","address","getAddressCardContent","region","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","UserPaymentService","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","isLoading$","getPaymentMethodsLoading","loadPaymentMethods","existingPaymentMethods$","getPaymentMethods","getPaymentDetailsSub","paymentInfo","field","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","title","img","getCardIcon","actions","header","paymentMethodSelected","showNewPaymentForm","hideNewPaymentForm","newPayment","addNewPaymentMethod","getDeliveryAddressSub","createPaymentDetails","setPaymentDetails","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","UserService","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","userAddressService","deliveryAddress$","paymentDetails$","deliveryMode$","selected","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","UserAddressService","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","userService","selectedCountry$","BehaviorSubject","showCancelBtn","submitAddress","backToAddress","defaultAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","regions$","getRegions","regions","regionControl","errors","some","subject","addressData","patchValue","regionSelected","titleSelected","toggleDefaultAddress","AddressFormModule","ShippingAddressComponent","newAddressFormManuallyOpened","cards","selectedAddress$","goTo","getAddressesLoading","existingAddresses$","getAddresses","cards$","asObservable","addresses","textDefaultShippingAddress","textShipToThisAddress","loadDetails","loadAddresses","setAddressSub","setAddress","goNext","selectedAddressSub","addressSelected","addAddress","newAddress","createAndSetAddress","setDeliveryAddress","addNewAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","OutletDirective","vcr","_context","nodes","renderTemplate","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","ViewContainerRef","OutletModule","CustomFormValidators","emailDomainValidator","control","match","InvalidEmail","emailValidator","passwordValidator","InvalidPassword","LoginFormComponent","auth","authRedirectService","userId","password","login","authorize","sub","getUserToken","access_token","redirect","AuthService","AuthRedirectService","LoginFormModule","UserModule","ReturningCustomerLoginComponent","NotAuthGuard","LoginComponent","user$","token","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","componentType","Promise","resolve","split","path","script","setAttribute","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","CmsConfig","Inject","DOCUMENT","PLATFORM_ID","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","cmpRef","createComponent","getInjectorForComponent","detectChanges","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cxApi","CxApiService","getCmsDataForComponent","element","parentElement","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","removeChild","CmsService","DynamicAttributeService","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","LoginModule","LogoutGuard","cms","routing","semanticPathService","logout","hasPage","PageType","CONTENT_PAGE","SemanticPathService","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","breakpoint$","resolveSlots","getSlotConfig","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","layoutSlots","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","cls","currentClass","removeClass","PageLayoutModule","ɵ0","LogoutModule","forChild","RegisterComponent","userRegistrationForm","email","passwordconf","newsletter","termsandconditions","requiredTrue","validator","matchPassword","submit","userRegisterFormData","register","subscription","globalMessageEntities","message","ac","NotEqual","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","obj","wrapIntoObservable","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","componentRoutes","updateRouting","navigateByUrl","newRoute","children","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","getNextPageContext","withLatestFrom","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","hasNotFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","useFactory","APP_INITIALIZER","cmsRoute","addCmsRoute","ɵ0$1","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","htmlLangProvider","setHtmlLangAttribute","LanguageService","languageService","lang","documentElement","initSeoService","SeoModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenu","MainModule","layoutModules","LayoutModule","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tab","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","authService","translationService","Subscription","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","success","onSuccess","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentChanged","consentGiven","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","onConsentChange","given","ConsentManagementComponent","userConsentService","subscriptions","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","getConsents","templateList","consentsExists","loadConsents","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","giveConsent","version","withdrawConsent","UserConsentService","ConsentManagementModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","UserOrderService","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","moduleComponents","OrderDetailsModule","ɵ0$2","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","sort","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","userServiceSub","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","queryParams","isPasswordReset","reset","resetPassword","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","isNotValid","onSubmit","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitClicked","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","user","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","breadcrumbs","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","itemSuperType","itemId","processChildren","rootUid","loadNavigationItems","node","child","addLinkToNode","createChildren","itemType","linkName","getLink","categoryCode","transform","childNode","CategoryNavigationComponent","node$","NavigationUIComponent","flyout","isOpen","openNodes","NavigationEnd","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","getDepth","depth","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","query","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","className","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","trim","Pipe","SearchBoxModule","ProductModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationThankYouMessageComponent","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationTotalsComponent","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","source","price","images","PRIMARY","ProductReferenceService","ProductCarouselComponent","items$","productCodes","codes","products$","ProductCarouselModule","ProductReferencesComponent","current","productCode$","productReferenceTypes","JSON","parse","displayProductTitles","ProductReferencesModule","ProductIntroComponent","reviewsTabAvailable","product$","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","querySelector","click","h3Elements","h3Element","innerHTML","ProductIntroModule","Grid","List","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","ViewModes","ProductListComponent","productSearchService","searchConfig","gridMode$","createOptionsByUrlParams","brandCode","newConfig","itemPerPage","updateParams$","model$","searchResult","viewPage","pageNumber","setGridMode","ProductSearchService","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","facets","facet","visible","activeFacetValueCode","searchResult$","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","CmsModule","ProductAttributesComponent","ProductReviewsComponent","reviewService","isWritingReview","initialMaxListItems","reviews$","getByProductCode","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","review","headline","comment","alias","reviewerName","ProductReviewService","ProductReviewsModule","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductSpecsTabComponent","ProductReviewsTabComponent","ProductImagesComponent","mainMediaContainer","thumbs$","createCarouselItems","mainImage$","getThumbs","getMain","openImage","thumbs","zoom","GALLERY","ProductImagesModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$3","ɵ1","ProductDetailsPageModule","matcher","ɵ0$4","ɵ1$1","pageLabel","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","forgotPassword","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","brand","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","provideConfigFromMetaTags","StorefrontModule","ngModule","provideConfig","SmartEditModule","PersonalizationModule","OccModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n\n  quantity = 0;\n  firstUpdate = true;\n  showItemIncrLabel: boolean;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n\n          // Announce in header if Add To Cart button has incremented product\n          this.showItemIncrLabel = this.firstUpdate && entry.quantity > 1;\n          // Any updates after the first will be flagged as false\n          this.firstUpdate = false;\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit {\n  @Input() productCode: string;\n\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.hasStock = true;\n    } else {\n      this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe(product => {\n          this.productCode = product.code;\n\n          if (\n            product.stock &&\n            product.stock.stockLevelStatus !== 'outOfStock' &&\n            product.stock.stockLevel > 0\n          ) {\n            this.maxQuantity = product.stock.stockLevel;\n            this.hasStock = true;\n          } else {\n            this.hasStock = false;\n          }\n\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    this.openModal();\n    this.cartService.addEntry(this.productCode, this.quantity);\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss'],\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items shown in the carousel is calculated dividing\n   * the host element width with the minimum item width.\n   */\n  getSize(nativeElement: HTMLElement, itemWidth: number) {\n    return fromEvent(this.winRef.nativeWindow, 'resize').pipe(\n      map(_ => (nativeElement as HTMLElement).clientWidth),\n      startWith((nativeElement as HTMLElement).clientWidth),\n      debounceTime(100),\n      map((totalWidth: any) => {\n        return Math.round(totalWidth / itemWidth);\n      }),\n      distinctUntilChanged()\n    );\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselItem } from './carousel.model';\nimport { CarouselService } from './carousel.service';\n\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n})\nexport class CarouselComponent implements OnInit {\n  @Input() title: string;\n\n  private _items: CarouselItem[];\n  @Input('items')\n  set items(value: CarouselItem[]) {\n    this._items = value;\n    this.select();\n  }\n  get items(): CarouselItem[] {\n    return this._items;\n  }\n\n  /** Indicates the current active item in carousel (if any)  */\n  @Input() activeItem: number;\n\n  /**\n   * Specifies the min pixel used per product. This value is used\n   * to calculate the amount of items we can fit into the available with\n   * of the host element. The number of items is not related the breakpoints,\n   * which means that a carousel can be placed in different layouts,\n   * regardless of the overall size.\n   */\n  @Input() minItemPixelSize = 300;\n\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  @Output() open = new EventEmitter<CarouselItem>();\n\n  /**\n   * The group with items which is currently active.\n   */\n  activeSlide = 0;\n\n  /**\n   * The number of items that should be rendered in the carousel.\n   */\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    this.size$ = this.service\n      .getSize(this.el.nativeElement, this.minItemPixelSize)\n      .pipe(tap(() => this.select()));\n  }\n\n  select(slide = 0) {\n    this.activeSlide = slide;\n  }\n\n  onOpen(groupIndex: number, itemIndex: number): void {\n    this.select(groupIndex);\n    this.open.emit(this.items[groupIndex + itemIndex]);\n  }\n}\n","import { ServerConfig } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig extends ServerConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    if (e.key) {\n      return e.key;\n    } else {\n      // for old browsers\n      if (e.keyCode && String.fromCharCode) {\n        switch (e.keyCode) {\n          case 8:\n            return 'Backspace';\n          case 9:\n            return 'Tab';\n          case 27:\n            return 'Escape';\n          case 37:\n            return 'ArrowLeft';\n          case 39:\n            return 'ArrowRight';\n          default:\n            return String.fromCharCode(e.keyCode);\n        }\n      }\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.inputValue.valueChanges.pipe(debounceTime(300)).subscribe(value => {\n      if (value) {\n        this.manualChange(Number(value));\n      }\n    });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { OnlyNumberDirective } from '../../directives/only-number/only-number.directive';\nimport { ItemCounterComponent } from './item-counter/item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent, OnlyNumberDirective],\n  exports: [ItemCounterComponent],\n})\nexport class FormComponentsModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n  styleUrls: ['./global-message.component.scss'],\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { GlobalMessageModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    IconModule,\n    I18nModule,\n    GlobalMessageModule.forRoot(),\n  ],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"LANGUAGE\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"CURRENCY\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map(ctx => this.getInjectedService(ctx)),\n      filter(Boolean)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(map(data => data.context));\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.el.nativeElement.style.setProperty(\n        '--star-fill',\n        value || this.initialRate\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Checks is the `formControlName` field valid in the provided `form`.\n   *\n   * If it's NOT valid, the method returns `true`.\n   *\n   * @param form a form whose field to check\n   * @param formControlName a field name\n   * @param submitted is the form submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    return (\n      form.get(formControlName).invalid &&\n      (submitted ||\n        (form.get(formControlName).touched && form.get(formControlName).dirty))\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { FormComponentsModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    FormComponentsModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { FormComponentsModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    FormComponentsModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\nimport { CartService, Cart, OrderEntry } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): Cart[] {\n    const potentialPromotions = cart.potentialOrderPromotions || [];\n    const appliedPromotions = cart.appliedOrderPromotions || [];\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { skipWhile, map, switchMap } from 'rxjs/operators';\n\nimport { CartService, RoutingService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getLoaded().pipe(\n      skipWhile(loaded => !loaded),\n      switchMap(() => this.cartService.getActive()),\n      map(cart => {\n        if (this.cartService.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n}\n","import { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest(slots$, this.cartService.getActive()).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService\n    .getActive()\n    .pipe(map(cart => cart.deliveryItemsQuantity || 0));\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CartModule,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\n\n@NgModule({\n  imports: [\n    CartModule,\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n  ],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n  ],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useClass: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    steps: Array<CheckoutStep>;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { CheckoutConfig } from './config/checkout-config';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutStep, CheckoutStepType } from './model/checkout-step.model';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable()\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute) {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  private getStepUrlFromActivatedRoute(activatedRoute: ActivatedRoute) {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string) {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutConfig } from './checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\n\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { Observable, of } from 'rxjs';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.config.checkout.steps[0].routeName\n        ).paths[0]\n      )\n    );\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AuthGuard, CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  PaymentDetails,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n  filter,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => cartData.code),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ServerConfig, Address, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.SHIPPING_ADDRESS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\nimport {\n  DeliveryMode,\n  CheckoutDeliveryService,\n  RoutingService,\n} from '@spartacus/core';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  changedOption: boolean;\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.changedOption = false;\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n    this.selectedDeliveryMode$ = this.checkoutDeliveryService.getSelectedDeliveryMode();\n\n    this.checkoutDeliveryService.loadSupportedDeliveryModes();\n\n    this.selectedDeliveryMode$\n      .pipe(\n        map((deliveryMode: DeliveryMode) =>\n          deliveryMode && deliveryMode.code ? deliveryMode.code : null\n        )\n      )\n      .subscribe(code => {\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          this.currentDeliveryModeId = code;\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.changedOption = true;\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    if (this.changedOption) {\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n\n    this.deliveryModeSub = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .subscribe(data => {\n        if (data && data.code === this.currentDeliveryModeId) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n      });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [AuthGuard, CartNotEmptyGuard, ShippingAddressSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { ServerConfig, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.DELIVERY_MODE\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Country } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent {\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutPaymentService,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  addPaymentInfo = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    country: this.fb.group({\n      isocode: ['', Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest(this.countries$, this.shippingAddress$).pipe(\n      map(([countries, address]) => {\n        return !!countries.filter(\n          (country: Country): boolean =>\n            country.isocode === address.country.isocode\n        ).length;\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.addPaymentInfo.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n\n  private getPaymentDetailsSub: Subscription;\n  private getDeliveryAddressSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          paymentInfo => paymentInfo && Object.keys(paymentInfo).length !== 0\n        )\n      )\n      .subscribe(paymentInfo => {\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.globalMessageService.add(\n                {\n                  key: 'paymentMethods.invalidField',\n                  params: { field: paymentInfo[key] },\n                },\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          const card: Card = {\n            title: payment.defaultPayment ? textDefaultPaymentMethod : '',\n            textBold: payment.accountHolderName,\n            text: [payment.cardNumber, textExpires],\n            img: this.getCardIcon(payment.cardType.code),\n            actions: [{ name: textUseThisPayment, event: 'send' }],\n          };\n          if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n            card.header = textSelected;\n          }\n          return card;\n        }\n      )\n    );\n  }\n\n  paymentMethodSelected(paymentDetails: PaymentDetails) {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  next(): void {\n    this.addPaymentInfo({\n      payment: this.selectedPayment,\n      newPayment: false,\n    });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  addNewPaymentMethod({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress: Address;\n  }): void {\n    this.getDeliveryAddressSub = this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        billingAddress = address;\n      });\n    this.addPaymentInfo({\n      payment: paymentDetails,\n      billingAddress,\n      newPayment: true,\n    });\n  }\n\n  addPaymentInfo({\n    newPayment,\n    payment,\n    billingAddress,\n  }: {\n    newPayment: boolean;\n    payment: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    payment.billingAddress = billingAddress\n      ? billingAddress\n      : this.deliveryAddress;\n\n    if (newPayment) {\n      this.checkoutPaymentService.createPaymentDetails(payment);\n      this.checkoutService.clearCheckoutStep(3);\n    }\n\n    // if the selected payment is the same as the cart's one\n    if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n      this.checkoutPaymentService.setPaymentDetails(payment);\n      this.checkoutService.clearCheckoutStep(3);\n    }\n\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .subscribe(data => {\n        if (data.accountHolderName && data.cardNumber) {\n          this.routingService.go(this.checkoutStepUrlNext);\n\n          return;\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n    if (this.getDeliveryAddressSub) {\n      this.getDeliveryAddressSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CheckoutModule,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ServerConfig, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.PAYMENT_DETAILS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\n\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    this.checkoutDeliveryService.verifyAddress(this.address.value);\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent],\n})\nexport class AddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../checkout-config.service';\nimport { CheckoutStepType } from '../../model/checkout-step.model';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  cards: Card[] = [];\n  isLoading$: Observable<boolean>;\n  selectedAddress: Address;\n  goTo: CheckoutStepType;\n  setAddress: Address;\n  setAddressSub: Subscription;\n  selectedAddressSub: Subscription;\n  selectedAddress$: BehaviorSubject<Address> = new BehaviorSubject<Address>(\n    null\n  );\n  cards$: Observable<CardWithAddress[]>;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.cards$ = combineLatest(\n      this.existingAddresses$,\n      this.selectedAddress$.asObservable(),\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected')\n    ).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    this.cartService.loadDetails();\n    this.userAddressService.loadAddresses();\n\n    this.setAddressSub = this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        this.setAddress = address;\n        this.selectedAddress$.next(address);\n        if (this.goTo) {\n          this.goNext();\n          this.goTo = null;\n        }\n      });\n    this.selectedAddressSub = this.selectedAddress$.subscribe(address => {\n      this.selectedAddress = address;\n    });\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n    const card: Card = {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n\n    this.cards.push(card);\n\n    return card;\n  }\n\n  addressSelected(address: Address): void {\n    this.selectedAddress$.next(address);\n  }\n\n  next(): void {\n    this.addAddress({ address: this.selectedAddress, newAddress: false });\n  }\n\n  addAddress({\n    newAddress,\n    address,\n  }: {\n    newAddress: boolean;\n    address: Address;\n  }): void {\n    if (newAddress) {\n      this.checkoutDeliveryService.createAndSetAddress(address);\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      return;\n    }\n    if (\n      this.setAddress &&\n      this.selectedAddress &&\n      this.setAddress.id === this.selectedAddress.id\n    ) {\n      this.goNext();\n    } else {\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      this.checkoutDeliveryService.setDeliveryAddress(address);\n    }\n  }\n\n  addNewAddress(address: Address): void {\n    this.addAddress({ address, newAddress: true });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goBack: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goBack) {\n      this.back();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutModule } from '@spartacus/core';\nimport { CartComponentModule } from '../cart/cart.module';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartComponentModule,\n    CheckoutModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n  // @todo: should we keep below provider here?\n  providers: [CheckoutConfigService],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: any;\n  @Input()\n  set cxOutletContext(value: any) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this._context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(\n      // Email Standard RFC 5322:\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ // tslint:disable-line\n    )\n      ? null\n      : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(\n      '^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_+{};:.,]).{6,}$'\n    )\n      ? null\n      : { InvalidPassword: true };\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n  }\n\n  login(): void {\n    this.auth.authorize(\n      this.form.controls.userId.value,\n      this.form.controls.password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import {\n  Injectable,\n  ComponentFactoryResolver,\n  Inject,\n  Renderer2,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        script = renderer.createElement('script');\n        this.loadedWebComponents[path] = script;\n        script.setAttribute('src', path);\n        renderer.appendChild(this.document.body, script);\n\n        if (isPlatformBrowser(this.platform)) {\n          script.onload = () => {\n            script.onload = null;\n          };\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  CxApiService,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private cd: ChangeDetectorRef,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      this.cd.detectChanges();\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: this.getCmsDataForComponent(),\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.renderer.removeChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PAGE_LAYOUT_HANDLER, PageLayoutHandler } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest(this.page$, this.breakpointService.breakpoint$).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged()\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      return config.slots;\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(Boolean));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (this.config.production) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  Title,\n  UserSignUp,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  subscription: Subscription;\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: [false],\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private auth: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n  }\n\n  submit(): void {\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      titleCode,\n    } = this.userRegistrationForm.value;\n    const userRegisterFormData: UserSignUp = {\n      firstName,\n      lastName,\n      uid: email,\n      password,\n      titleCode,\n    };\n    this.userService.register(userRegisterFormData);\n\n    if (!this.subscription) {\n      this.subscription = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.globalMessageService\n      .get()\n      .pipe(filter(data => Object.keys(data).length > 0))\n      .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n        if (\n          globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR].some(\n            message => message === 'This field is required.'\n          )\n        ) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.globalMessageService.add(\n            { key: 'register.titleRequired' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  private matchPassword(ac: AbstractControl): { NotEqual: boolean } {\n    if (ac.get('password').value !== ac.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule, UserModule } from '@spartacus/core';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(pageContext: PageContext, routes: Route[]): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageContext.id.startsWith('/') &&\n      pageContext.id.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageContext.id.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: pageContext,\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  PageContext,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\n\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    private routingService: RoutingService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.hasPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([hasPage, pageContext]) =>\n        hasPage\n          ? this.resolveCmsPageLogic(pageContext, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageContext.id)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.hasPage(notFoundCmsPageContext).pipe(\n      switchMap(hasNotFoundPage => {\n        if (hasNotFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() => this.resolveCmsPageLogic(pageContext, route, state))\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { ServerConfig } from '@spartacus/core';\n\nexport abstract class PWAModuleConfig extends ServerConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { PWAModuleConfig } from '../pwa.module-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (pwaConfig.production && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Title, Meta, MetaDefinition } from '@angular/platform-browser';\nimport { PageMetaService, PageMeta, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { SeoMetaService } from './seo-meta.service';\nimport { htmlLangProvider } from './html-lang-provider';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { UserComponentModule } from '../../cms-components/user/index';\nimport { SeoModule } from '../../cms-structure/index';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/index';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/index';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    UserComponentModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/index';\nimport { LayoutConfig } from './config/layout-config';\nimport { MainModule } from './main/main.module';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [MainModule, ...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [MainModule, ...layoutModules],\n})\nexport class LayoutModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport { Address, UserAddressService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(private userAddressService: UserAddressService) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Address, UserAddressService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(private userAddressService: UserAddressService) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  styleUrls: ['./close-account-modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  consentGiven = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentChanged.emit({\n      given: !this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, skipWhile, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest(\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      map(\n        ([consentLoading, giveConsentLoading, withdrawConsentLoading]) =>\n          consentLoading || giveConsentLoading || withdrawConsentLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      tap(templateList => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      })\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${\n              address.postalCode\n            }`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n              billingAddress.postalCode\n            }`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n    }),\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userOrderService\n      .getOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((orders: OrderHistoryList) => {\n          if (orders.pagination) {\n            this.sortType = orders.pagination.sort;\n          }\n        })\n      );\n\n    this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit, OnDestroy {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  userServiceSub: Subscription;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  ngOnDestroy(): void {\n    if (this.userServiceSub) {\n      this.userServiceSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n  styleUrls: ['./update-email-form.component.scss'],\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n  styleUrls: ['./update-email.component.scss'],\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n  styleUrls: ['./update-password-form.component.scss'],\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n  styleUrls: ['./update-profile-form.component.scss'],\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest(\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home')\n    ).pipe(\n      map(([meta, textHome]) =>\n        meta.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(Boolean),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    node.title = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node.children = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n\n      node.url = this.getLink(item);\n\n      // if \"NEWWINDOW\", target is true\n      node.target = item.target;\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n\n  constructor(private router: Router, private renderer: Renderer2) {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => this.clear());\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (this.openNodes.includes(<HTMLElement>event.currentTarget)) {\n      this.openNodes = this.openNodes.filter(n => n !== event.currentTarget);\n      this.renderer.removeClass(<HTMLElement>event.currentTarget, 'is-open');\n    } else {\n      this.openNodes.push(<HTMLElement>event.currentTarget);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  data$ = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n    GenericLinkModule,\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config)\n    ).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config)\n    ).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a singe product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  ProductModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ProductModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${\n            deliveryAddress.postalCode\n          }`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n            billingAddress.postalCode\n          }`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CheckoutModule,\n  I18nModule,\n  ConfigModule,\n  CmsConfig,\n  AuthGuard,\n} from '@spartacus/core';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { OrderConfirmationGuard } from './guards/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    CheckoutModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CarouselItem } from '../../../shared/components/carousel/carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<CarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<CarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map(refs =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): CarouselItem {\n    const item: CarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsProductCarouselComponent } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CarouselItem } from '../../../../shared/components/carousel/carousel.model';\nimport { ProductCarouselService } from '../product-carousel.service';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  title$: Observable<string> = this.component.data$.pipe(\n    map(data => data.title)\n  );\n\n  items$: Observable<CarouselItem[]> = this.component.data$.pipe(\n    filter(Boolean),\n    map(data => data.productCodes.split(' ')),\n    map(codes => codes.map(code => this.service.loadProduct(code))),\n    switchMap((products$: Observable<CarouselItem>[]) =>\n      combineLatest(products$)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductCarouselComponent>,\n    protected service: ProductCarouselService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsProductReferencesComponent } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\nimport { ProductCarouselService } from '../product-carousel.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  items$ = combineLatest([this.productCode$, this.component.data$]).pipe(\n    switchMap(([code, data]) =>\n      this.service.getProductReferences(\n        code,\n        data.productReferenceTypes,\n        Boolean(JSON.parse(data.displayProductTitles)),\n        Boolean(JSON.parse(data.displayProductPrices))\n      )\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected service: ProductCarouselService,\n    protected current: CurrentProductService\n  ) {}\n\n  get productCode$(): Observable<string> {\n    return this.current.getProduct().pipe(\n      filter(Boolean),\n      map(p => p.code)\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('CMSTabParagraphContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  ProductSearchPage,\n  ProductSearchService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit {\n  query: string;\n  categoryCode: string;\n  brandCode: string;\n  itemPerPage: number;\n\n  model$: Observable<ProductSearchPage>;\n  searchConfig: SearchConfig = {};\n  options: SearchConfig;\n  updateParams$: Observable<Params>;\n  gridMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    private activatedRoute: ActivatedRoute,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  update(): void {\n    const { queryParams } = this.activatedRoute.snapshot;\n    this.options = this.createOptionsByUrlParams();\n\n    if (this.categoryCode && this.categoryCode !== queryParams.categoryCode) {\n      this.query = ':relevance:category:' + this.categoryCode;\n    }\n    if (this.brandCode && this.brandCode !== queryParams.brandCode) {\n      this.query = ':relevance:brand:' + this.brandCode;\n    }\n    if (!this.query && queryParams.query) {\n      this.query = queryParams.query;\n    }\n    this.search(this.query, this.options);\n  }\n\n  createOptionsByUrlParams(): SearchConfig {\n    const { queryParams } = this.activatedRoute.snapshot;\n    const newConfig = {\n      ...queryParams,\n    };\n    delete newConfig.query;\n    const options = {\n      ...this.searchConfig,\n      ...newConfig,\n      pageSize: this.itemPerPage || 10,\n    };\n    if (this.categoryCode) {\n      options.categoryCode = this.categoryCode;\n    }\n    if (this.brandCode) {\n      options.brandCode = this.brandCode;\n    }\n\n    return options;\n  }\n\n  ngOnInit(): void {\n    this.updateParams$ = this.activatedRoute.params.pipe(\n      tap(params => {\n        this.categoryCode = params.categoryCode;\n        this.brandCode = params.brandCode;\n        this.query = params.query;\n        this.update();\n      })\n    );\n\n    this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n      this.gridMode$.next(\n        template === 'ProductGridPageTemplate' ? ViewModes.Grid : ViewModes.List\n      );\n    });\n\n    // clean previous search result\n    this.productSearchService.clearResults();\n\n    this.model$ = this.productSearchService.getResults().pipe(\n      tap(searchResult => {\n        if (Object.keys(searchResult).length === 0) {\n          this.search(this.query, this.options);\n        }\n      }),\n      filter(searchResult => Object.keys(searchResult).length > 0)\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    const { queryParams } = this.activatedRoute.snapshot;\n    this.search(queryParams.query, { currentPage: pageNumber });\n  }\n\n  sortList(sortCode: string): void {\n    const { queryParams } = this.activatedRoute.snapshot;\n    this.search(queryParams.query, { sortCode: sortCode });\n  }\n\n  setGridMode(mode: ViewModes): void {\n    this.gridMode$.next(mode);\n  }\n\n  protected search(query: string, options?: SearchConfig): void {\n    if (this.query) {\n      if (options) {\n        // Overide default options\n        this.searchConfig = {\n          ...this.searchConfig,\n          ...options,\n        };\n      }\n\n      this.productSearchService.search(query, this.searchConfig);\n    }\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  Facet,\n  ProductSearchPage,\n  ProductSearchService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  updateParams$: Observable<Params>;\n\n  get visibleFacets(): Facet[] {\n    if (!this.searchResult.facets) {\n      return [];\n    }\n    return this.searchResult.facets.filter(facet => facet.visible);\n  }\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productSearchService: ProductSearchService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.updateParams$ = this.activatedRoute.params.pipe(\n      tap(params => {\n        this.activeFacetValueCode = params.categoryCode || params.brandCode;\n      })\n    );\n\n    this.searchResult$ = this.productSearchService.getResults().pipe(\n      tap(searchResult => {\n        this.searchResult = searchResult;\n        if (this.searchResult.facets) {\n          this.searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      }),\n      filter(searchResult => Object.keys(searchResult).length > 0)\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productSearchService.search(this.queryCodec.decodeValue(query));\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  FormComponentsModule,\n  ListNavigationModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    FormComponentsModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  CmsModule,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CmsModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(Boolean),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule } from '@spartacus/core';\nimport {\n  FormComponentsModule,\n  StarRatingModule,\n} from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    FormComponentsModule,\n    I18nModule,\n    StarRatingModule,\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsModule,\n  ConfigModule,\n  I18nModule,\n  ProductService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CartSharedModule } from '../../cart/index';\n// guards\nimport { ProductAttributesComponent } from './product-attributes/product-attributes.component';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsComponent } from './product-reviews/product-reviews.component';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\nimport { ProductDetailsTabComponent } from './product-details-tab/product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    CmsModule,\n    OutletModule,\n    ProductReviewsModule,\n    ProductDetailsTabModule,\n    PageComponentModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent, ProductReviewsComponent],\n  entryComponents: [ProductAttributesComponent],\n  providers: [ProductService, WindowRef, RoutingService],\n})\nexport class ProductTabsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CarouselItem } from '../../../shared/components/carousel/index';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  private thumbs$: Observable<CarouselItem[]> = this.product$.pipe(\n    map(product => this.createCarouselItems(product))\n  );\n\n  private mainImage$ = combineLatest([\n    this.product$,\n    this.mainMediaContainer,\n  ]).pipe(map(([_, container]) => container));\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  getThumbs(): Observable<CarouselItem[]> {\n    return this.thumbs$;\n  }\n\n  getMain(): Observable<any> {\n    return this.mainImage$;\n  }\n\n  openImage(item: CarouselItem): void {\n    this.mainMediaContainer.next(item.media.container);\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: CarouselItem[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createCarouselItems(product: Product): CarouselItem[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return null;\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => {\n      return {\n        media: {\n          container: c,\n          format: 'thumbnail',\n        },\n      };\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\n\n@NgModule({\n  imports: [\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    // TODO:#2811 - uncomment to enable\n    // StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  UrlSegment,\n  UrlMatchResult,\n  Route,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName [ / ** ]'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'TopHeaderSlot',\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'] },\n  logout: { paths: ['logout'] },\n  register: { paths: ['login/register'] },\n  forgotPassword: { paths: ['login/forgot-password'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { NgModule } from '@angular/core';\nimport {\n  ConfigModule,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [\n    CoreRoutingModule,\n    ConfigModule.withConfig(defaultRoutingConfig),\n    CmsRouteModule,\n  ],\n})\nexport class RoutingModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  AuthModule,\n  ConfigModule,\n  I18nModule,\n  provideConfigFromMetaTags,\n  SiteContextModule,\n  StateModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\n\n@NgModule({\n  imports: [\n    StateModule,\n    AuthModule.forRoot(),\n    ConfigModule.forRoot(),\n    RoutingModule,\n    I18nModule.forRoot(),\n\n    SiteContextModule.forRoot(),\n\n    LayoutModule,\n  ],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    StorefrontFoundationModule,\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitely\n    OccModule,\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n  ],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [LayoutModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}