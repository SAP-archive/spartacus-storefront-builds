{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-components.service.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/web-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/lazy-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/launch-dialog/config/default-launch-config.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","IconResourceType","IconConfig","Injectable","providedIn","useExisting","Config","SkipLinkScrollPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","DomSanitizer","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","pop","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","CmsComponentsService","platformId","missingComponents","determineMappings","componentTypes","of","getMapping","componentType","componentConfig","console","warn","shouldRender","isPlatformServer","disableSSR","getDeferLoadingStrategy","getChildRoutes","routes","componentTypes_1","componentTypes_1_1","_c","childRoutes","getGuards","guards","Set","componentTypes_2","componentTypes_2_1","guard","from","getI18nKeys","i18nKeys","componentTypes_3","componentTypes_3_1","CmsConfig","Inject","args","PLATFORM_ID","CmsInjectorService","cmsComponentsService","injector","getCmsData","uid","parentInjector","data$","get","CmsService","getComponentData","getInjector","configProviders","Injector","provide","CmsComponentData","useValue","parent","ComponentHandler","ComponentHandlerService","handlers","invalidMappings","resolve","componentMapping","handler","resolveApplicable","isDevMode","has","getLauncher","viewContainerRef","elementInjector","launcher","Optional","ComponentWrapperDirective","vcr","dynamicAttributeService","componentHandler","cmsInjector","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","addDynamicAttributes","componentData","ViewContainerRef","DynamicAttributeService","Directive","DefaultComponentHandler","hasMatch","getPriority","Observable","subscriber","factory","getComponentFactory","createComponent","undefined","location","destroy","ComponentFactoryResolver","resolveComponentFactory","CxApiService","auth","cart","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","ActiveCartService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","WebComponentHandler","platform","loadedWebComponents","webElement","active","disposeFunc","remove","initWebComponent","then","elementName","cmsComponentData","cxApi","element","parentElement","Promise","path","script","setAttribute","body","isPlatformBrowser","onload","chainedOnload_1","DOCUMENT","LazyComponentHandler","defaultHandler","isNotClass","symbol","signature","toString","substr","replace","startsWith","switchMap","PageComponentModule","multi","AsmComponentService","authService","asmAuthService","routingService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","globalMessageService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","GlobalMessageType","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","HostBinding","encapsulation","ViewEncapsulation","None","BaseFocusService","PersistFocusService","focus","Map","group","set","clear","delete","getPersistenceGroup","getAttribute","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","querySelectorAll","findFirstFocusable","autofocus","el","isHidden","findFocusable","locked","invisible","suffix","map","join","filter","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","event","preventScroll","preventDefault","stopPropagation","focusOnDoubleEscape","AutoFocusService","hasPersistedFocus","getPersisted","focussed","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","tagName","TrapFocusService","hasFocusableChildren","moveFocus","focusable","v","getTrapStart","trap","getTrapEnd","LockFocusService","KeyboardFocusService","SkipLinkConfig","DIALOG_TYPE","LAUNCH_CALLER","SkipLinkService","keyboardFocusService","skipLinks$","BehaviorSubject","getSkipLinks","found","skipLinks","skipLink","existing","splice","getSkipLinkIndexInArray","i18nKey","position","scrollToTarget","HTMLElement","firstFocusable","hasTabindex","hasAttribute","removeAttribute","previous","this_1","SkipLinkComponent","skipLinkService","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_LAUNCH_CONFIG","launch","ASM","outlet","SKIP_LINKS","LaunchConfig","LaunchRenderStrategy","renderedCallers","caller","some","_config","LaunchDialogService","renderStrategies","launchConfig","findConfiguration","getStrategy","render","AsmEnablerService","launchDialogService","load","isEnabled","addUi","isLaunched","isUsedBefore","setItem","params","getItem","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","deps","asmEnablerService","BREAKPOINT","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","markForCheck","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","floor","seconds","slice","Pipe","name","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","EventEmitter","csAgentLoginForm","Validators","required","onSubmit","valid","emit","markAllAsTouched","FormBuilder","Output","CustomerEmulationComponent","subscription","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","controls","valueChanges","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","PaginationItemType","PaginationNavigationPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","indexOf","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","code","sort","a","width","_reversedFormats","sortedFormats","reverse","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","container","handleMissing","loadHandler","errorHandler","MediaModule","forRoot","ngModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","step","allowZero","readonly","handleClick","input","control","markAsDirty","decrement","getControl","_control$","startWith","getValidCount","emitEvent","max","HostListener","ItemCounterModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","PaginationConfig","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","_","number","label","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","BEFORE","AFTER","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","MediaConfig","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsConfig","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","fromEvent","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data","nativeName","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","FormErrorsComponent","_control","errors$","statusChanges","errors","entries","invalid","dirty","touched","FormErrorsModule","ViewConfig","ViewConfigModule","ViewConfigModule_1","view","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entryNumber","CustomFormValidators","emailValidator","email","match","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","CheckoutStepType","DeliveryModePreferences","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","isStable","BaseFocusDirective","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","toLowerCase","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","BlockFocusDirective","block","PersistFocusDirective","handleFocus","attr","ngAfterViewInit","isPersisted","EscapeFocusDirective","esc","AutoFocusDirective","shouldAutofocus","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","isLocked","lockFocus","addTabindexToChildren","shouldUnlockAfterAutofocus","setTimeout","FocusDirective","directives","KeyboardFocusModule","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","selectiveCartEnabled","cartLoaded$","getLoaded","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","getLoading","slots","selectiveCart","loadingCart","exclude","arr","arg","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","cmsService","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","OutletPosition","CheckoutConfig","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","catch","verifyAddress","countrySelected","regionSelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","translate","payment","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","textExpires","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","field","cardLabels","selected","title","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","getCardContent","addAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","templateOrFactory","REPLACE","store","stacked","templateRef","removeValueOrAll","newValue","val","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","componentFactoryResolver","outletService","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","InlineRenderStrategy","inline","OutletRefDirective","tpl","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","first","observer","intersectOptions","rootMargin","getRootMargin","thresholds","threshold","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletRendererService","outletRefs","register","cxOutlet","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","cxOutletDefer","build","changes","hostElement","getHostElement","buildOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","parentNode","OutletModule","OutletRenderStrategy","RoutingRenderStrategy","_caller","LaunchDialogModule","LaunchDialogModule_1","provideConfig","LayoutModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","slot","components","pendingComponentCount","class","lastPosition","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","slotData","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","y","typeCode","select","tabNum","history","activeTab","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","continue","amendOrderForm","forwardRoute","AmendOrderActionsModule","ValidateQuantityToCancel","values","cxNoSelectedItemToCancel","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","features","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","observeOn","asyncScheduler","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","querySelector","closest","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","updateState","increaseVisibleValues","decreaseVisibleValues","topValueCount","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","_isDialog","expandFacetGroup","isCollapsed","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","q","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","radius","parseParameters","googleMaps","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderConfig","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","sub","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","routeState","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [provideDefaultConfig(fontawesomeIconConfig)],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  CmsComponentMapping,\n  CmsConfig,\n  DeferLoadingStrategy,\n} from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentsService {\n  private missingComponents: string[] = [];\n\n  constructor(\n    protected config: CmsConfig,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Should be called to make sure all component mappings are determined,\n   * especially lazy loaded ones.\n   *\n   * It's recommended way to make sure all other methods of CmsComponentService\n   * will be able to work synchronously for asked component types and avoid risk\n   * of potential errors that could be thrown otherwise.\n   */\n  determineMappings(componentTypes: string[]): Observable<string[]> {\n    return of(componentTypes);\n  }\n\n  /**\n   * Return collection of component mapping configuration for specified list of\n   * component types.\n   *\n   * If component mapping can't be determined synchronously, for example, lazy\n   * loaded one, it will throw an error.\n   *\n   * To make sure component mapping is available, determineMappings()\n   * should be called and completed first.\n   */\n  getMapping(componentType: string): CmsComponentMapping {\n    const componentConfig = this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  /**\n   * Checks, if component should be rendered as some components\n   * could be disabled for server side renderings\n   */\n  shouldRender(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getMapping(componentType)?.disableSSR);\n  }\n\n  /**\n   * Return DeferLoadingStrategy for component type.\n   */\n  getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    return this.config.cmsComponents?.[componentType]?.deferLoading;\n  }\n\n  /**\n   * Get cms driven child routes for components\n   */\n  getChildRoutes(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        routes.push(...(this.getMapping(componentType)?.childRoutes ?? []));\n      }\n    }\n    return routes;\n  }\n\n  /**\n   * Get cms driven guards for components\n   */\n  getGuards(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getMapping(componentType)?.guards?.forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  /**\n   * Get i18n keys associated with components\n   */\n  getI18nKeys(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        this.getMapping(componentType)?.i18nKeys?.forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsComponentsService } from '../../../services/cms-components.service';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsComponentsService.getMapping(type)?.providers ?? [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Applicable {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import {\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsComponentsService } from '../../services/cms-components.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService\n  ) {}\n\n  ngOnInit() {\n    this.cmsComponentsService\n      .determineMappings([this.cxComponentWrapper.flexType])\n      .subscribe(() => {\n        if (\n          this.cmsComponentsService.shouldRender(\n            this.cxComponentWrapper.flexType\n          )\n        ) {\n          this.launchComponent();\n        }\n      });\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsComponentsService.getMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n      });\n  }\n\n  private decorate(elementRef: ElementRef): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      elementRef.nativeElement,\n      this.renderer,\n      { componentData: this.cxComponentWrapper }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return typeof componentMapping.component === 'function';\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import {\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ComponentHandler } from './component-handler';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CxApiService } from '../services/cx-api.service';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n/**\n * Component handler responsible for launching cms web components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebComponentHandler implements ComponentHandler {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'string' &&\n      componentMapping.component.includes('#')\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef }> {\n    return new Observable<{ elementRef: ElementRef }>((subscriber) => {\n      let webElement;\n      let active = true;\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const renderer = injector.get(Renderer2);\n\n      const disposeFunc = () => {\n        active = false;\n        if (webElement) {\n          webElement.remove();\n        }\n      };\n\n      this.initWebComponent(componentMapping.component, renderer).then(\n        (elementName) => {\n          if (elementName) {\n            webElement = renderer.createElement(elementName);\n\n            const cmsComponentData = injector.get(CmsComponentData, null);\n\n            webElement.cxApi = {\n              ...injector.get(CxApiService),\n              cmsComponentData,\n            };\n\n            renderer.appendChild(\n              viewContainerRef.element.nativeElement.parentElement,\n              webElement\n            );\n\n            subscriber.next({ elementRef: new ElementRef(webElement) });\n\n            if (!active) {\n              disposeFunc();\n            }\n          }\n        }\n      );\n\n      return disposeFunc;\n    });\n  }\n\n  private initWebComponent(\n    component: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const [path, selector] = component.split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { DefaultComponentHandler } from './default-component.handler';\nimport { switchMap } from 'rxjs/operators';\nimport { ComponentHandler } from './component-handler';\n\n/**\n * Lazy component handler used for launching lazy loaded cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LazyComponentHandler implements ComponentHandler {\n  constructor(protected defaultHandler: DefaultComponentHandler) {}\n\n  /**\n   * We want to mach dynamic import signature () => import('')\n   */\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      this.isNotClass(componentMapping.component)\n    );\n  }\n\n  private isNotClass(symbol: any): boolean {\n    const signature = symbol.toString().substr(0, 20).replace(' ', '');\n    return signature.startsWith('function()') || signature.startsWith('()=>');\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return from(componentMapping.component()).pipe(\n      switchMap((component) =>\n        this.defaultHandler.launcher(\n          { ...componentMapping, component },\n          viewContainerRef,\n          elementInjector\n        )\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { WebComponentHandler } from './handlers/web-component.handler';\nimport { LazyComponentHandler } from './handlers/lazy-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: LazyComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: WebComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistance\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LaunchConfig {\n  launch?: {\n    [key: string]: LaunchOptions;\n  };\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Optional elements for other configurations\n   */\n  options?: {\n    /**\n     * Dialog type is used to apply CSS classes\n     */\n    dialogType?: DIALOG_TYPE;\n  };\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { AsmMainUiComponent } from '../../../cms-components/asm/asm-main-ui/asm-main-ui.component';\nimport { SkipLinkComponent } from '../../a11y/skip-link/component/skip-link.component';\nimport { LaunchConfig } from './launch-config';\n\nexport const DEFAULT_LAUNCH_CONFIG: LaunchConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n    SKIP_LINKS: {\n      outlet: 'cx-storefront',\n      component: SkipLinkComponent,\n    },\n  },\n};\n","import { ViewContainerRef } from '@angular/core';\nimport { LAUNCH_CALLER, LaunchDialog, LaunchOptions } from '../config';\nimport { Applicable } from '@spartacus/core';\n\nexport abstract class LaunchRenderStrategy implements Applicable {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER;\n    element?: any;\n  }> = [];\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ): void;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(caller: LAUNCH_CALLER, config: LaunchDialog): boolean {\n    return this.renderedCallers.some((el) => el.caller === caller)\n      ? !!config.multi\n      : true;\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER, _config?: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n  }\n}\n","import { Inject, Injectable, ViewContainerRef } from '@angular/core';\nimport {\n  LAUNCH_CALLER,\n  LaunchConfig,\n  LaunchOptions,\n} from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\nimport { resolveApplicable } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  // Keep a list of rendered elements\n  protected renderedCallers: LAUNCH_CALLER[] = [];\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected launchConfig: LaunchConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(caller: LAUNCH_CALLER, vcr?: ViewContainerRef): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.render(config, caller, vcr);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER): LaunchOptions {\n    return this.launchConfig?.launch[caller];\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveApplicable(this.renderStrategies, [config]);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import { DeferLoadingStrategy, Config } from '@spartacus/core';\nimport { Injectable } from '@angular/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media?.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap((value) =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { MediaFormatSize } from './media.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(() =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter((loaded) => loaded),\n      switchMap(() => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap((dataLoaded) => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: ` <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container> `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => (ctx ? this.getInjectedService(ctx) : undefined)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data?.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { FormErrorsModule } from '../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistance key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      super.handleFocus(event as KeyboardEvent);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elmenents,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n\n    this.cart$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getActiveCartId(),\n      this.customerCouponService.getCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      ),\n    ]).pipe(\n      tap(\n        ([cart, activeCardId, customerCoupons]: [\n          Cart,\n          string,\n          CustomerCouponSearchResult\n        ]) => {\n          this.cartId = activeCardId;\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n        }\n      ),\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n    );\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n  selectiveCartEnabled: boolean;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.selectiveCartEnabled = this.selectiveCartService.isEnabled();\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartEnabled\n        ? this.selectiveCartService.getLoaded()\n        : of(false),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn && this.selectiveCartEnabled\n          ? cartLoaded && sflLoaded\n          : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, Cart, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.isEnabled()\n          ? this.selectiveCartService.getCart()\n          : of({} as Cart),\n        this.activeCartService.getLoading(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart, loadingCart]) => {\n          const exclude = (arr, args) =>\n            arr.filter((item) => args.every((arg) => arg !== item));\n          return Object.keys(cart).length === 0 && loadingCart\n            ? exclude(slots, [\n                'TopContent',\n                'CenterRightContentSlot',\n                'EmptyCartMiddleContent',\n              ])\n            : cart.totalItems\n            ? exclude(slots, ['EmptyCartMiddleContent'])\n            : selectiveCart.totalItems\n            ? exclude(slots, [\n                'EmptyCartMiddleContent',\n                'CenterRightContentSlot',\n              ])\n            : exclude(slots, ['TopContent', 'CenterRightContentSlot']);\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { SaveForLaterComponent } from './save-for-later.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.paymentForm.get('cardType.code').setValue(card.code);\n  }\n\n  monthSelected(month: string): void {\n    this.paymentForm.get('expiryMonth').setValue(month);\n  }\n\n  yearSelected(year: number): void {\n    this.paymentForm.get('expiryYear').setValue(year);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddressForm\n      .get('region.isocodeShort')\n      .setValue(region.isocodeShort);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n  protected checkoutStepUrlNext: string;\n  protected checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.routingService.go(this.checkoutStepUrlNext);\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some((error) => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.addressForm['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    const selectedSub = this.selectedAddress$.subscribe((selected) => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected componentFactoryResolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER,\n    vcr: ViewContainerRef\n  ) {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      vcr.createComponent(template);\n      this.renderedCallers.push({ caller, element: vcr.element });\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, thresholds: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new Map<string, OutletDirective>();\n\n  render(outlet: string): void {\n    if (this.outletRefs.size !== 0) {\n      this.outletRefs.get(outlet).render();\n    }\n  }\n\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.set(cxOutlet, context);\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService?: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n    this.outletRendererService.register(this.cxOutlet, this);\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach((obj) => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n    this.renderedTemplate.push(tmplOrFactory);\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent nodes of the given element.\n   *\n   * We avoid traversing the parent _elements_, as this is blocking\n   * ie11 implementations. One of the spare exclusions we make to not\n   * supporting ie11.\n   *\n   * @param element\n   */\n  private getHostElement(element: Node): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentNode);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super();\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ) {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n\n      const element = vcr?.element;\n      this.renderedCallers.push({ caller, element });\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected routingService: RoutingService) {\n    super();\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfig } from '@spartacus/core';\nimport { DEFAULT_LAUNCH_CONFIG } from './config/default-launch-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [provideConfig(DEFAULT_LAUNCH_CONFIG)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nimport { CmsComponentsService } from '../../services/cms-components.service';\n\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position represents the unique key for a page slot on a single page, but can\n   * be reused cross pages.\n   *\n   * The position is used to find the CMS components for the page slot. It is also\n   * added as an additional CSS class so that layoutt can be applied.\n   */\n  @Input() set position(value: string) {\n    this.position$.next(value);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  /**\n   * Maintains css classes introduced by the host and adds additional classes.\n   */\n  @Input() @HostBinding() class: string;\n\n  /**\n   * Indicates that the page slot is the last page slot above the fold.\n   */\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  /**\n   * Indicates that the components of the page slot haven't been loaded as long\n   * as the isPending state is true.\n   */\n  @HostBinding('class.cx-pending') isPending = true;\n\n  /**\n   * Indicates that the page slot doesn't contain any components. This is no\n   * longer used in spartacus, but kept for backwards compatibility.\n   */\n  @HostBinding('class.has-components') @Input() hasComponents = false;\n\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  components: ContentSlotComponentData[];\n\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    distinctUntilChanged(this.isDistinct)\n  );\n\n  /** Observes the components for the given page slot. */\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\n    map((slot) => slot?.components ?? [])\n  );\n\n  protected subscription: Subscription = new Subscription();\n\n  /** Keeps track of the pending components that must be loaded for the page slot */\n  private pendingComponentCount = 0;\n\n  /** Tracks the last used position, in case the page slot is used dynamically */\n  private lastPosition: string;\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\n        this.components = value?.components || [];\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  protected decorate(slot: ContentSlotData): void {\n    let cls = this.class || '';\n\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\n      cls = cls.replace(this.lastPosition, '');\n    }\n    if (this.position$.value) {\n      cls += ` ${this.position$.value}`;\n      this.lastPosition = this.position$.value;\n    }\n\n    // host bindings\n    this.pending = slot?.components?.length || 0;\n    this.hasComponents = slot?.components?.length > 0;\n    if (cls && cls !== this.class) {\n      this.class = cls;\n    }\n\n    this.addSmartEditSlotClass(slot);\n  }\n\n  /**\n   * Sets the pending count for the page slot components. Once all pending components are\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\n   */\n  protected set pending(count: number) {\n    this.pendingComponentCount = count;\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  protected get pending(): number {\n    return this.pendingComponentCount;\n  }\n\n  /*\n   * Is triggered when a component is added to the view. This is used to\n   * update the pending count\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pending--;\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether the component should be\n   * rendered instantly or whether it should be deferred.\n   */\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(\n      componentType\n    );\n    return { deferLoading };\n  }\n\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\n    return (\n      current.components &&\n      old.components?.length === current.components.length &&\n      !old.components.find(\n        (el, index) => el.uid !== current.components[index].uid\n      )\n    );\n  }\n\n  private addSmartEditSlotClass(slot: ContentSlotData): void {\n    if (slot) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.elementRef.nativeElement,\n        this.renderer,\n        { slotData: slot }\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsComponentsService.getGuards(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected translation: TranslationService,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsComponentsService.getI18nKeys(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsComponentsService } from './cms-components.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(\n    private router: Router,\n    private cmsComponentsService: CmsComponentsService\n  ) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsComponentsService.getChildRoutes(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\nimport { CmsComponentsService } from '../services';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    protected cmsService: CmsService,\n    protected cmsRoutes: CmsRoutesService,\n    protected cmsI18n: CmsI18nService,\n    protected cmsGuards: CmsGuardsService,\n    protected cmsComponentsService: CmsComponentsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsComponentsService.determineMappings(componentTypes)\n      ),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    protected cmsService: CmsService,\n    protected winRef: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilChanged((x, y) => x?.components === y?.components),\n    switchMap((data) =>\n      combineLatest(\n        (data?.components ?? '').split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab) {\n                return undefined;\n              }\n\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    this.activeTabNum =\n      this.winRef.nativeWindow.history?.state?.activeTab ?? this.activeTabNum;\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() amendOrderForm: FormGroup;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n\n  constructor(protected routingService: RoutingService) {}\n\n  continue(event: Event): void {\n    if (this.amendOrderForm.valid) {\n      this.routingService.go({\n        cxRoute: this.forwardRoute,\n        params: { code: this.orderCode },\n      });\n    } else {\n      this.amendOrderForm.markAllAsTouched();\n      event.stopPropagation();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantityToCancel(control: FormControl) {\n  if (!control.value) {\n    return null;\n  }\n  const quantity = Object.values(control.value).reduce(\n    (acc: number, val: number) => acc + val,\n    0\n  );\n  return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup(\n      {},\n      { validators: [ValidateQuantityToCancel] }\n    );\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  ItemCounterModule,\n  MediaModule,\n} from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup) {\n    if (form.valid) {\n      this.orderAmendService.save();\n    } else {\n      form.markAllAsTouched();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order?.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\nimport { FormErrorsModule } from '../../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return data\n          ? {\n              title: data.name,\n              children: [nav],\n            }\n          : undefined;\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    const wrapper = <HTMLElement>node.querySelector('.wrapper');\n    const body = <HTMLElement>node.closest('body');\n    if (wrapper) {\n      this.renderer.removeStyle(wrapper, 'margin-left');\n      if (\n        wrapper.offsetLeft + wrapper.offsetWidth >\n        body.offsetLeft + body.offsetWidth\n      ) {\n        this.renderer.setStyle(\n          wrapper,\n          'margin-left',\n          `${node.offsetWidth - wrapper.offsetWidth}px`\n        );\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c?.displayProducts === 'true' || c?.displayProducts === true,\n            displayProductImages:\n              <any>c?.displayProductImages === 'true' ||\n              c?.displayProductImages === true,\n            displaySuggestions:\n              <any>c?.displaySuggestions === 'true' ||\n              c?.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d?.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data?.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      breadcrumb.facetValueCode === params.categoryCode\n    );\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: facet.topValueCount || 0,\n          maxVisible: facet.topValueCount || 0,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string) {\n    return { query: new HttpUrlEncodingCodec().decodeValue(query) };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given facet when there are no\n   * facets available. This is a great experience for the keyboard user, who keep the\n   * focus on the activated facet all the time.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return !facetList.facets?.length ? facet.facetValueName : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  private _isDialog: boolean;\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input()\n  set isDialog(value: boolean) {\n    this._isDialog = value;\n    if (value) {\n      this.renderer.addClass(document.body, 'modal-open');\n    }\n  }\n\n  get isDialog(): boolean {\n    return this._isDialog;\n  }\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  @HostListener('click') handleClick() {\n    this.close();\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef,\n    protected renderer: Renderer2\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.renderer.removeClass(document.body, 'modal-open');\n    this.closeList.emit(event);\n  }\n\n  block(event?: MouseEvent) {\n    event.stopPropagation();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n  StoreFinderConfig,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n  radius: number;\n  searchQuery: StoreFinderSearchQuery;\n  geolocation: GeoPoint;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    protected config: StoreFinderConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.radius = this.config.googleMaps.radius;\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}