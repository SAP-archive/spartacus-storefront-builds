{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/page/component/component-mapper.service.ts","ng://@spartacus/storefront/cms-structure/page/component/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/cancel-or-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/cancel-or-return-items/cancel-or-return-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/cancel-or-return-items/cancel-or-return-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/guards/cancel-or-return-request-input.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/cancellations-returns/cancel-or-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","r","ar","error","__spread","concat","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","CLOSE","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","EXPAND","COLLAPSE","RESET","CIRCLE","HEART","EMPTY_HEART","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","Injectable","args","providedIn","WindowRef","IconConfig","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","undefined","staticStyleClasses","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","ICON_TYPE","requiredConsents","isLevel13","isFeatureLevel","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","_this","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","forEach","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","tslib_1.__values","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","CardComponent","deleteCard","EventEmitter","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","emit","delete","setDefault","send","edit","Output","CardModule","I18nModule","CarouselService","getItemsPerSlide","itemWidth","resize$","map","clientWidth","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","Math","floor","CarouselComponent","el","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","isDevMode","size$","console","changeDetection","ChangeDetectionStrategy","OnPush","xs","sm","md","lg","xl","DEFAULT_BREAKPOINTS","BREAKPOINT","BreakpointService","getSize","breakpoint","breakpoints","window","fromEvent","debounceTime","startWith","target","event","getBreakpoint","innerWidth","of","windowWidth","getClosest","reverse","br","nativeWindow","LayoutConfig","MediaService","breakpointService","code","threshold","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","getImageUrl","getHighestAvailableFormat","mediaFormat_1","mediaFormats","altText","reduce","set","startsWith","getBaseUrl","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","handleMissing","loadHandler","errorHandler","MediaModule","CarouselModule","RouterModule","UrlModule","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","renderer","async","cartIsLoading","isValueChangeable","update","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","subscription","valueChanges","manualChange","Number","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","setProperty","input","onKeyDown","handlers","ArrowDown","decrement","ArrowUp","increment","preventDefault","stopPropagation","onBlur","focus","onFocus","setFocus","registerOnTouched","fn","registerOnChange","updatedQuantity","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Renderer2","ViewChild","static","OnlyNumberDirective","hostElement","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","onKeyUp","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","Directive","HostListener","OnlyNumberDirectiveModule","ItemCounterModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","GenericLinkModule","PaginationComponent","hideOnSinglePage","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","showPagination","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","get","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","BehaviorSubject","isQualtricsConfigured","initialize","setup","qualtricsScript","defer","idScript","qualtrics","projectId","load","filter","switchMap","qsi","isDataLoaded","dataLoaded","API","unload","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","cmsComponents","component","entryComponents","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","item","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","CMSSiteContextComponent","useClass","deps","SiteContextModule","StarRatingComponent","change","initialRate","setRate","rating","force","setAttribute","style","saveRate","StarRatingModule","ViewConfigModule","forRoot","ngModule","provideConfig","view","ViewConfig","AutoFocusDirective","ngAfterViewInit","AutoFocusDirectiveModule","FormUtils","isNotValidField","form","formControlName","submitted","control","invalid","touched","dirty","CustomFormValidators","emailDomainValidator","match","InvalidEmail","emailValidator","EMAIL_PATTERN","passwordValidator","PASSWORD_PATTERN","InvalidPassword","matchPassword","NotEqual","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","FeaturesConfigModule","deferLoading","DeferLoadingStrategy","INSTANT","CmsMappingService","platformId","isComponentEnabled","flexType","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","componentType","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsConfig","Inject","PLATFORM_ID","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","state","canActivateObservables","guardClass","canActivate","isCanActivate","isObservable","obj","then","Promise","resolve","wrapIntoObservable","first","Error","skipWhile","endWith","CmsI18nService","translation","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationService","TranslationChunkService","PAGE_LAYOUT_HANDLER","InjectionToken","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","section","page$","breakpoint$","pageTemplate","slots","resolveSlots","result","_c","_d","handle","a","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","keys","slot","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","join","cacheKey","warn","CmsService","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","name","styleClass","slots$","pageFoldSlot$","templateName","cls","currentClass","removeClass","addClass","CmsRoutesService","router","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","path","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","children","resetConfig","Router","CmsPageGuard","routingService","cmsService","cmsRoutes","cmsI18n","cmsGuards","semanticPathService","protectedRoutesGuard","getCmsPage","getNextPageContext","getPage","withLatestFrom","pageData","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","RoutingService","SemanticPathService","ProtectedRoutesGuard","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","Map","templatesRefsBefore","templatesRefsAfter","outlet","templateOrFactory","position","OutletPosition","store","stacked","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","element","intersects","Observable","observer","rootMargin","getRootMargin","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletDirective","vcr","deferLoaderService","cxOutletDefer","render","getHostElement","renderOutlet","cxOutlet","isArray","tmplOrFactory","ComponentFactory","createComponent","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","parentElement","ViewContainerRef","OutletModule","ComponentMapperService","componentFactoryResolver","platform","missingComponents","loadedWebComponents","getComponent","typeCode","componentConfig","getComponentFactoryByCode","factory","resolveComponentFactory","isWebComponent","initWebComponent","split","script","isPlatformBrowser","onload","chainedOnload_1","ComponentFactoryResolver","DOCUMENT","CxApiService","auth","cart","cartData","checkout","checkoutDelivery","checkoutPayment","pageMeta","featureConfig","globalMessage","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","ngZone","AuthService","CartService","CartDataService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","NgZone","ComponentWrapperDirective","componentMapper","dynamicAttributeService","shouldRenderComponent","cxComponentWrapper","launchWebComponent","launchComponent","cmpRef","getInjectorForComponent","isLaunchInSmartEdit","addSmartEditContract","location","_arguments","generator","elementName","webElement","cmsComponentData","getCmsDataForComponent","cxApi","P","reject","fulfilled","rejected","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","DynamicAttributeService","PageComponentModule","PageSlotComponent","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","PageSlotModule","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","register","SwRegistrationOptions","useFactory","APP_INITIALIZER","cmsRoute","addCmsRoute","ɵ0","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","title","description","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","JsonLdScriptFactory","rendererFactory","sanitizer","build","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","DomSanitizer","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","bypassSecurityTrustHtml","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","brand","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","stock","stockLevelStatus","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","Date","datePublished","getFullYear","getMonth","getDate","headline","reviewRating","toString","CurrentProductService","productService","features","PRODUCT_SCOPE","isLevel","getProduct","getRouterState","params","productCode","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","AsmComponentService","authService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","encapsulation","ViewEncapsulation","None","AsmEnablerService","isUiAdded","isEnabled","addUi","isLaunched","isUsedBefore","setItem","getItem","Location","AsmLoaderModule","asmFactory","asmEnablerService","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","seconds","slice","Pipe","CSAgentLoginFormComponent","fb","submitClicked","csAgentTokenLoading","submitEvent","group","Validators","required","onSubmit","controls","isNotValid","FormBuilder","CustomerEmulationComponent","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","query","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","host","(document:click)","AsmService","AsmModule","AsmCoreModule","AddedToCartDialogComponent","cartService","modalIsOpen","quantity","entry$","setControl","createEntryFormGroup","markAsPristine","dismissModal","removeEntry","updateEntry","entryNumber","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","setStockInfo","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","getLoaded","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","isReadOnly","vouchers","sort","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","cartId","OCC_USER_ID_ANONYMOUS","guid","cartIsLoading$","resetAddVoucherProcessingState","couponCode","submitDisabled$","valid","getAddVoucherResultLoading","btnEnabled","addVoucherIsLoading","getAddVoucherResultSuccess","success","onSuccess","reset","applyVoucher","addVoucher","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","potentialProductPromotions","_items","getPotentialProductPromotionsForItem","entryPromotions","promotion","consumedEntries","_e","e_2","_f","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","CartItemComponent","compact","isProductOutOfStock","updateItem","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","appliedProductPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","isEmpty","totalItems","CartPageLayoutHandler","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","isUserLoggedIn","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","CartComponentModule","CartModule","FREE","LEAST_EXPENSIVE","MOST_EXPENSIVE","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","steps","routeName","CheckoutStepType","express","defaultDeliveryMode","DeliveryModePreferences","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","leastExpensiveFound","deliveryMode","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","snapshot","stepRoute","getRouteConfig","paths","findIndex","CheckoutConfig","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutService","checkoutDeliveryService","checkoutPaymentService","cartId$","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","BillingAddressFormComponent","selectedCountry$","regions$","country","getRegions","regions","regionControl","billingAddress","countrySelected","regionSelected","region","isocodeShort","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","goBack","closeForm","payment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","year","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","paymentDetails","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","getCardIcon","msg","field","cardLabels","img","actions","header","goNext","goPrevious","paymentMethodSelected","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","errors","some","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","cards","goTo","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","tempAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","addressSelected","addNewAddress","setAddressSub","selectedAddressSub","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","layoutModules","LayoutModule","ConsentManagementFormComponent","consentGiven","isAnonymousConsentsEnabled","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","isFeatureEnabled","ANONYMOUS_CONSENTS_FEATURE","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","navigateSubscription","val","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","tab","select","tabNum","routeState","history","getTitleParams","changes","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","featureConfigService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","onError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","OrderDetailsService","userOrderService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentStatus","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","forChild","ɵ0$1","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","ɵ0$2","OrderHistoryModule","AccountOrderHistoryComponent","OrderReturnRequestListComponent","returnRequestService","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","OrderReturnRequestService","ReturnRequestListModule","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getOrderReturnRequest","getReturnRequestLoading","routingState","returnRequest","returnCode","rma","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","status","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$3","OrderCancelOrReturnService","_cancelOrReturnRequestInputs","keepRequestInputs","current","nextState","isConfirmationPath","isCancelOrReturnPath","getCancelOrderLoading","getCancelOrderSuccess","getReturnRequestSuccess","cancelConfirm","getPath","returnConfirm","orderCancel","orderReturn","values","clearCancelOrReturnRequestInputs","getCancelledOrReturnedPrice","qty","getEntryCancelledOrReturnedQty","returnedItemsPriceData","basePrice","round","formatCurrency","getCurrencySymbol","goToOrderCancelOrReturn","backToOrder","isEntryCancelledOrReturned","cancelOrder","cancellationRequestEntryInputs","cancelOrReturnRequestInputs","resetCancelOrderProcessState","returnOrder","createOrderReturnRequest","returnRequestEntryInputs","returnSuccess","CancelOrReturnItemsComponent","cancelOrReturnService","confirmRequest","confirm","disableConfirmBtn","entryInput","array","inputsControl","disableEnableConfirm","setAll","at","cancellableQuantity","returnableQuantity","confirmEntryInputs","inputs","updateQty","getItemPrice","CancelOrReturnItemsModule","ReturnOrderComponent","returnableEntries$","returnableEntries","confirmReturn","entryInputs","ɵ0$4","ReturnOrderModule","ReturnOrderConfirmationComponent","isReturning$","returnedEntries$","returnedEntries","isReturnSuccess$","submit","CancelOrReturnRequestInputGuard","urlSegments","seg","ɵ0$5","ReturnOrderConfirmationModule","CancelOrderComponent","cancellableEntries$","cancellableEntries","confirmCancel","ɵ0$6","CancelOrderModule","CancelOrderConfirmationComponent","cancelledEntries$","cancelledEntries","ɵ0$7","CancelOrderConfirmationModule","OrderCancelOrReturnModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","validator","queryParams","isPasswordReset","resetPassword","ac","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","email","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","sortMapping","byNameAsc","byNameDesc","sortOptions","interests$","getAndLoadProductInterests","interests","count","totalCount","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","sortLabels","removeInterest","relation","removeProdutInterest","productInterestEntry","sortChange","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","child","loadNavigationItems","node","populateLink","itemType","linkName","getLink","categoryCode","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getDepth","depth","relatedTarget","ownerDocument","activeElement","matches","wrapper","querySelector","navBar","removeStyle","offsetLeft","offsetWidth","setStyle","navs","tagName","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","search","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","active","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","thumbs","isThumbsEmpty","mainImage$","openImage","isActive","thumbnail","zoom","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","setTimeout","scrollIntoView","behavior","click","h3Elements","h3Element","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_CATEGORY","RELEVANCE_BRAND","searchResults$","searchResult","searchByRouting$","x","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","Grid","List","ProductViewComponent","modeChange","viewMode","toLowerCase","newMode","ViewModes","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","isSamePage","model","setConditions","facetCode","facetValueCode","removeQuery","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","queryCodec","HttpUrlEncodingCodec","sub","activeFacetValueCode","searchResult$","facets","visibleFacets$","facet","visible","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","ProductGridItemComponent","ProductListItemComponent","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","InfiniteScrollModule","INTRO","PRICE","SHARE","SUMMARY","ProductSummaryComponent","outlets","ProductDetailOutlets","ProductSummaryModule","ProductAttributesComponent","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","alias","reviewerName","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","viewStore","prepareRouteUrl","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","markerIndex","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","block","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","onKey","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","emailConfirmation","emailsMatch","isEmailConfirmInvalid","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefillForm","login","authorize","markAsTouched","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","ɵ0$8","LogoutModule","RegisterComponent","isNewRegisterFlowEnabled","isAnonymousConsentEnabled","userRegistrationForm","newsletter","isConsentRequired","termsandconditions","requiredTrue","getRegisterUserResultLoading","registerUserProcessInit","getRegisterUserResultSuccess","collectDataFromRegisterForm","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","formData","onRegisterUserSuccess","resetRegisterUserProcessState","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","elements","predicate","findLastIndex","isMarkerLastSegment","paramIndex","posParams","consumed","ɵ0$9","ɵ1$1","ProductDetailsPageModule","matcher","ɵ0$a","ɵ1$2","ɵ2","ɵ3","ProductListingPageModule","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","pages","defaultStorefrontRoutesConfig","home","notFound","protected","forgotPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","category","paramsMapping","termsAndConditions","orderReturnConfirmation","orderCancelConfirmation","returnRequestDetails","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","scrollPositionRestoration","anchorScrolling","StoreModule","runtimeChecks","strictStateImmutability","strictStateSerializability","strictActionImmutability","strictActionSerializability","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","withConfigFactory","LANGUAGE","CURRENCY"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  isFeatureLevel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.config, '1.3');\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach(template => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                consent.consentState == null ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(_ => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map(totalWidth => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected breakpointService: BreakpointService\n  ) {}\n\n  private get mediaFormats(): MediaFormats[] {\n    return [\n      {\n        code: 'mobile',\n        threshold: this.breakpointService.getSize(BREAKPOINT.xs),\n      },\n      {\n        code: 'tablet',\n        threshold: this.breakpointService.getSize(BREAKPOINT.sm),\n      },\n      {\n        code: 'desktop',\n        threshold: this.breakpointService.getSize(BREAKPOINT.md),\n      },\n      {\n        code: 'widescreen',\n        threshold: this.breakpointService.getSize(BREAKPOINT.lg),\n      },\n    ];\n  }\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else if (media) {\n      return this.getImageUrl(media[this.getHighestAvailableFormat(media)].url);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * returns highest resolution format name from media formats\n   */\n  private getHighestAvailableFormat(media): string {\n    if (media) {\n      let mediaFormat: MediaFormats;\n\n      this.mediaFormats.forEach(format => {\n        if (\n          !mediaFormat ||\n          (mediaFormat.threshold < format.threshold && media[format.code])\n        ) {\n          mediaFormat = format;\n        }\n      });\n\n      return mediaFormat.code;\n    }\n\n    return null;\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges, OnDestroy {\n  @ViewChild('itemCounterInput', { static: false })\n  public input: ElementRef;\n  @ViewChild('incrementBtn', { static: false })\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn', { static: false })\n  public decrementBtn: ElementRef;\n\n  @Input()\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  subscription: Subscription;\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.subscription = this.inputValue.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe(value => {\n        if (value) {\n          this.manualChange(Number(value));\n        }\n      });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return this.min !== undefined && incomingValue < this.min\n      ? this.min\n      : this.max !== undefined && incomingValue > this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    if (value) {\n      value = value.replace(/[^0-9]+/g, '');\n      this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n    }\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    return e.key;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OnlyNumberDirective } from './only-number.directive';\n\n@NgModule({\n  declarations: [OnlyNumberDirective],\n  exports: [OnlyNumberDirective],\n})\nexport class OnlyNumberDirectiveModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ItemCounterComponent } from './item-counter.component';\nimport { OnlyNumberDirectiveModule } from '../../directives/only-number/only-number.directive.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    OnlyNumberDirectiveModule,\n  ],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Input() hideOnSinglePage = false;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n\n  showPagination() {\n    return !(this.hideOnSinglePage && this.pagination.totalPages <= 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(_ =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter(loaded => loaded),\n      switchMap(_ => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap(dataLoaded => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: `\n    <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container>\n  `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    ConfigModule.withConfig(defaultQualtricsConfig),\n  ],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter(s => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map(data => data.context),\n        map(ctx => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(el: ElementRef, renderer: Renderer2); // tslint:disable-line\n  /**\n   * @deprecated since version 1.0.2\n   *  Use constructor(el: ElementRef, renderer: Renderer2) instead\n   *\n   *  TODO(issue:#3803) deprecated since 1.0.2\n   */\n  constructor(el: ElementRef);\n  constructor(protected el: ElementRef, protected renderer?: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      // TODO(issue:#3803) deprecated since 1.0.2\n      if (this.renderer) {\n        this.renderer.setAttribute(\n          this.el.nativeElement,\n          'style',\n          `--star-fill:${value || this.initialRate};`\n        );\n      } else {\n        this.el.nativeElement.style.setProperty(\n          '--star-fill',\n          value || this.initialRate\n        );\n      }\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { FormGroup, AbstractControl } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Validates a field of the given form group\n   *\n   * If the field is NOT valid (or invalid), the method returns `true`.\n   *\n   * @param form Form with fields to check\n   * @param formControlName Name of the form field to check\n   * @param submitted Has the form been submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    const control: AbstractControl = form.get(formControlName);\n    return control.invalid && (submitted || (control.touched && control.dirty));\n  }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(EMAIL_PATTERN) ? null : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(PASSWORD_PATTERN) ? null : { InvalidPassword: true };\n  }\n\n  static matchPassword(control: AbstractControl): { NotEqual: boolean } {\n    if (control.get('password').value !== control.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  ConfigModule,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map(breakpoint => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter(slot => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(page => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section => (section ? of(section) : this.templateName$)),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap(templateName =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  ProtectedRoutesGuard,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService,\n    protectedRoutesGuard: ProtectedRoutesGuard // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since version 1.2.0\n   * Use constructor with more dependencies and make them all required.\n   *\n   * TODO(issue:4646) deprecated since version 1.2.0\n   */\n  constructor(\n    routingService: RoutingService,\n    cmsService: CmsService,\n    cmsRoutes: CmsRoutesService,\n    cmsI18n: CmsI18nService,\n    cmsGuards: CmsGuardsService,\n    semanticPathService: SemanticPathService\n  );\n  constructor(\n    // expose as `protected` only services from public API:\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutesGuard?: ProtectedRoutesGuard\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:4646) Expect that `ProtectedRoutesGuard` dependency is required (remove `if` logic)\n     */\n    return this.protectedRoutesGuard\n      ? this.protectedRoutesGuard\n          .canActivate(route)\n          .pipe(\n            switchMap(result =>\n              result ? this.getCmsPage(route, state) : of(result)\n            )\n          )\n      : this.getCmsPage(route, state);\n  }\n\n  private getCmsPage(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.getPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([pageData, pageContext]) =>\n        pageData\n          ? this.resolveCmsPageLogic(pageContext, pageData, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageLabel)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap(notFoundPage => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.resolveCmsPageLogic(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, (T)[]>();\n  private templatesRefsBefore = new Map<string, (T)[]>();\n  private templatesRefsAfter = new Map<string, (T)[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  private store(store: Map<string, (T)[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned obervable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first(v => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable(observer => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin };\n      const intersectionObserver = new IntersectionObserver(entries => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options?: IntersectionOptions) {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evalutes whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit, OnDestroy {\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>,\n    // tslint:disable-next-line: unified-signatures\n    intersectionService: DeferLoaderService\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(vcr: ViewContainerRef, templateRef: TemplateRef<any>, outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>, intersectionService?: IntersectionService) instead\n   */\n  constructor(\n    vcr: ViewContainerRef,\n    templateRef: TemplateRef<any>,\n    outletService: OutletService<TemplateRef<any> | ComponentFactory<any>>\n  );\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService?: DeferLoaderService\n  ) {}\n\n  ngOnInit(): void {\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.render();\n    }\n  }\n\n  private deferLoading() {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Allthough the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.render();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private render() {\n    this.renderOutlet(OutletPosition.BEFORE);\n    this.renderOutlet(OutletPosition.REPLACE);\n    this.renderOutlet(OutletPosition.AFTER);\n  }\n\n  private renderOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach(obj => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ComponentMapperService {\n  missingComponents: string[] = [];\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  constructor(\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected config: CmsConfig,\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  /**\n   * @desc\n   * returns a web component for the CMS typecode.\n   *\n   * The mapping of CMS components to web componetns requires a mapping.\n   * This is configurable when the module is loaded.\n   *\n   * For example:\n   *\n   *  {\n   *      'CMSLinkComponent': 'LinkComponent',\n   *      'SimpleResponsiveBannerComponent': 'SimpleResponsiveBannerComponent',\n   *      [etc.]\n   *  }\n   *\n   * The type codes are dynamic since they depend on the implementation.\n   * Customer will add, extend or ingore standard components.\n   *\n   * @param typeCode the component type\n   */\n  protected getComponent(typeCode: string): any {\n    const componentConfig = this.config.cmsComponents[typeCode];\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(typeCode)) {\n        this.missingComponents.push(typeCode);\n        console.warn(\n          `No component implementation found for the CMS component type '${typeCode}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n    return componentConfig ? componentConfig.component : null;\n  }\n\n  getComponentFactoryByCode(typeCode: string): any {\n    const component = this.getComponent(typeCode);\n    if (!component) {\n      return null;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      component\n    );\n\n    if (!factory) {\n      console.warn(\n        `No component factory found for the CMS component type '${typeCode}'.\\n`,\n        `Make sure you add a component to the 'entryComponents' array in the NgModule.`\n      );\n      return null;\n    }\n    return factory;\n  }\n\n  isWebComponent(typeCode: string): boolean {\n    const component = this.getComponent(typeCode);\n    return typeof component === 'string' && (component || '').includes('#');\n  }\n\n  initWebComponent(\n    componentType: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise(resolve => {\n      const [path, selector] = this.getComponent(componentType).split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  CartDataService,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n  UserNotificationPreferenceService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: CartService,\n    @Optional() public cartData: CartDataService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\nimport { ComponentMapperService } from './component-mapper.service';\nimport { CxApiService } from './cx-api.service';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      const cmsComponentData = this.getCmsDataForComponent();\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: cmsComponentData, // TODO: remove / deprecated since 1.0.x\n        cmsComponentData,\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.webElement);\n      }\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.webElement.remove();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  // need to have this host binding at the top as it will override the entire class\n  @HostBinding('class') @Input() set position(position: string) {\n    this.position$.next(position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe(components => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(this.builders.map(builder => builder.build())).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map(review => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter(rev => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter(rev => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${date.getMonth() +\n        1}-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  FeatureConfigService,\n  Product,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? ['details'] : '';\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(Boolean),\n      switchMap((productCode: string) =>\n        this.productService.get(productCode, this.PRODUCT_SCOPE)\n      )\n    );\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, startWith, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      startWith(null as Product),\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map(builder => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe(token => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap(userToken =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap(token => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe(customerSupportAgentToken =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Location } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { OutletPosition, OutletService } from '../../../cms-structure/index';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\nimport { AsmMainUiComponent } from '../asm-main-ui/asm-main-ui.component';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  /** indicates whether the ASM UI has been added already */\n  private isUiAdded = false;\n\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletService: OutletService<ComponentFactory<any>>\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  private isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  private isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  private isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  private addUi(): void {\n    if (this.isUiAdded) {\n      return;\n    }\n    const factory = this.componentFactoryResolver.resolveComponentFactory(\n      AsmMainUiComponent\n    );\n    this.outletService.add('cx-storefront', factory, OutletPosition.BEFORE);\n    this.isUiAdded = true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/index';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe(isNavigating => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(_ => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  form: FormGroup;\n  private submitClicked = false;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submitEvent.emit({\n      userId: this.form.controls.userId.value,\n      password: this.form.controls.password.value,\n    });\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe(user => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList', { static: false }) resultList: ElementRef;\n  @ViewChild('searchTerm', { static: false }) searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      searchTerm: [''],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.form.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe(searchTermValue => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.form.controls.searchTerm.setValue(this.selectedCustomer.name);\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  modalIsOpen = false;\n\n  quantity = 0;\n\n  @ViewChild('dialog', { static: false, read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n          if (!this.modalIsOpen) {\n            this.modalIsOpen = true;\n          }\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  constructor(\n    cartService: CartService,\n    modalService: ModalService,\n    currentProductService: CurrentProductService,\n    cd: ChangeDetectorRef\n  );\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.cartService\n      .getEntry(this.productCode)\n      .subscribe(entry => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.cartService.addEntry(this.productCode, this.quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Cart,\n  CartService,\n  CartVoucherService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  form: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  submitDisabled$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n\n  private subscription = new Subscription();\n\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private cartVoucherService: CartVoucherService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = combineLatest([\n      this.cartService.getActive(),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(\n        ([cart, userId]: [Cart, string]) =>\n          (this.cartId =\n            userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n      ),\n      map(([cart]: [Cart, string]) => cart)\n    );\n\n    this.cartIsLoading$ = this.cartService\n      .getLoaded()\n      .pipe(map(loaded => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.form = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    this.submitDisabled$ = combineLatest([\n      this.cartIsLoading$,\n      this.form.valueChanges.pipe(\n        startWith(true),\n        map(() => this.form.valid)\n      ),\n      this.cartVoucherService.getAddVoucherResultLoading(),\n    ]).pipe(\n      map(\n        ([cartIsLoading, btnEnabled, addVoucherIsLoading]) =>\n          cartIsLoading || !btnEnabled || addVoucherIsLoading\n      )\n    );\n\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe(success => {\n          this.onSuccess(success);\n        })\n    );\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.form.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  applyVoucher(): void {\n    this.cartVoucherService.addVoucher(this.form.value.couponCode, this.cartId);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  set items(_items) {\n    this._items = _items;\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  private _items: Item[] = [];\n\n  get items(): Item[] {\n    return this._items;\n  }\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  // TODO remove for 2.0 - left to keep backward compatibility\n  ngOnInit(): void {}\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): any[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n    potentialPromotions.push(...(cart.potentialProductPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n    appliedPromotions.push(...(cart.appliedProductPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Cart, CartService, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.cartService.getActive(),\n      this.cartService.getLoaded(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(private cartService: CartService) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([slots$, this.cartService.getActive()]).pipe(\n        map(([slots, cart]) => {\n          if (cart.totalItems) {\n            return slots.filter(slot => slot !== 'EmptyCartMiddleContent');\n          } else {\n            return slots.filter(\n              slot => slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map(cart => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter(product => Boolean(product)),\n    tap(product => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter(wishlist => Boolean(wishlist)),\n    map(wishList => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find(entry => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n    I18nModule,\n    IconModule,\n    RouterModule,\n    UrlModule,\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\n\n@NgModule({\n  imports: [NgbModule, CartDetailsModule, CartTotalsModule, CartSharedModule],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          deliveryMode => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          deliveryMode => deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  CartService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private cartService: CartService,\n    private checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.cartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.cartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutPaymentService: CheckoutPaymentService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.cartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  LoaderState,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [Address[], boolean, LoaderState<void>]) =>\n          addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find(address => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter((setDeliveryAddressProcessState: LoaderState<void>) => {\n                return (\n                  (setDeliveryAddressProcessState.success ||\n                    setDeliveryAddressProcessState.error) &&\n                  !setDeliveryAddressProcessState.loading\n                );\n              }),\n              switchMap((setDeliveryAddressProcessState: LoaderState<void>) => {\n                if (setDeliveryAddressProcessState.success) {\n                  return this.checkoutDetailsService.getDeliveryAddress();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [PaymentDetails[], boolean, LoaderState<void>]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find(address => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter((setPaymentDetailsProcessState: LoaderState<void>) => {\n                return (\n                  (setPaymentDetailsProcessState.success ||\n                    setPaymentDetailsProcessState.error) &&\n                  !setPaymentDetailsProcessState.loading\n                );\n              }),\n              switchMap((setPaymentDetailsProcessState: LoaderState<void>) => {\n                if (setPaymentDetailsProcessState.success) {\n                  return this.checkoutDetailsService.getPaymentDetails();\n                }\n                return of(false);\n              }),\n              map(data => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [boolean, DeliveryMode[], LoaderState<void>, LoaderState<void>]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  LoaderState<void>,\n                  LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map(data => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService,\n    checkoutConfigService: CheckoutConfigService,\n    expressCheckoutService: ExpressCheckoutService,\n    cartService: CartService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(router: Router,\n   *  config: CheckoutConfig - @deprecated since 2.x,\n   *  routingConfigService: RoutingConfigService,\n   *  checkoutConfigService: CheckoutConfigService,\n   *  expressCheckoutService: ExpressCheckoutService\n   *  cartService: CartService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(\n    router: Router,\n    config: CheckoutConfig,\n    routingConfigService: RoutingConfigService\n  );\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService,\n    protected checkoutConfigService?: CheckoutConfigService,\n    protected expressCheckoutService?: ExpressCheckoutService,\n    protected cartService?: CartService\n  ) {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (this.checkoutConfigService) {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.checkoutConfigService.getFirstCheckoutStepRoute()\n          ).paths[0]\n        )\n      );\n    } else {\n      this.firstStep$ = of(\n        this.router.parseUrl(\n          this.routingConfigService.getRouteConfig(\n            this.config.checkout.steps[0].routeName\n          ).paths[0]\n        )\n      );\n    }\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.checkoutConfigService &&\n      this.expressCheckoutService &&\n      this.cartService\n    ) {\n      if (\n        this.checkoutConfigService.isExpressCheckout() &&\n        !this.cartService.isGuestCart()\n      ) {\n        return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n          switchMap((expressCheckoutPossible: boolean) => {\n            return expressCheckoutPossible\n              ? of(\n                  this.router.parseUrl(\n                    this.routingConfigService.getRouteConfig(\n                      this.checkoutConfigService.getCheckoutStepRoute(\n                        CheckoutStepType.REVIEW_ORDER\n                      )\n                    ).paths[0]\n                  )\n                )\n              : this.firstStep$;\n          })\n        );\n      }\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region, UserAddressService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent implements OnInit {\n  regions$: Observable<Region[]>;\n\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  constructor(protected userAddressService: UserAddressService) {}\n\n  ngOnInit() {\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.billingAddress.get('region.isocodeShort');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddress['controls'].region['controls'].isocodeShort.setValue(\n      region.isocodeShort\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address !== undefined &&\n          address.country !== undefined &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.setPaymentDetails.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n  CartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService,\n    cartService: CartService // tslint:disable-line\n  );\n  /**\n   * @deprecated since 1.x\n   * NOTE: check issue:#1181 for more info\n   *\n   * TODO(issue:#1181) Deprecated since 1.x\n   */\n  constructor(\n    userPaymentService: UserPaymentService,\n    checkoutService: CheckoutService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    globalMessageService: GlobalMessageService,\n    routingService: RoutingService,\n    checkoutConfigService: CheckoutConfigService,\n    activatedRoute: ActivatedRoute,\n    translation: TranslationService\n  );\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected cartService?: CartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.cartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(paymentInfo => paymentInfo && !!Object.keys(paymentInfo).length)\n      )\n      .subscribe(paymentInfo => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use selectPaymentMethod() instead.\n   * TODO(issue:#4992) deprecated since 1.3\n   */\n  paymentMethodSelected(paymentDetails: PaymentDetails): void {\n    this.selectPaymentMethod(paymentDetails);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  Cart,\n  CartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/index';\nimport { CheckoutStepType } from '../../model/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService,\n    checkoutConfigService: CheckoutConfigService // tslint:disable-line\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * NOTE: check issue:#4121 for more info\n   *\n   * TODO(issue:#4121) Deprecated since 1.1.0\n   */\n\n  constructor(\n    checkoutDeliveryService: CheckoutDeliveryService,\n    checkoutPaymentService: CheckoutPaymentService,\n    userAddressService: UserAddressService,\n    cartService: CartService,\n    translation: TranslationService\n  );\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    // TODO(issue:#4121) Deprecated since 1.1.0\n    if (this.checkoutConfigService) {\n      const step = this.checkoutConfigService.getCheckoutStep(stepType);\n\n      return step && step.routeName;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    FeaturesConfigModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userAddressService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.address.controls['region'].value.isocode) {\n      this.regionsSub = this.regions$.pipe(take(1)).subscribe(regions => {\n        const obj = regions.find(\n          region =>\n            region.isocode === this.address.controls['region'].value.isocode\n        );\n        Object.assign(this.address.value.region, {\n          isocodeShort: obj.isocodeShort,\n        });\n      });\n    }\n\n    if (this.address.dirty) {\n      this.checkoutDeliveryService.verifyAddress(this.address.value);\n    } else {\n      // address form value not changed\n      // ignore duplicate address\n      this.submitAddress.emit(undefined);\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepType } from '../..';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use cards$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  cards: Card[] = [];\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  goTo: CheckoutStepType = null;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddress: Address;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Avoid using it.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  setAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddressSub: Subscription;\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getNextCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n    this.activatedRoute\n  );\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use CheckoutConfigService.getPreviousCheckoutStepUrl(this.activatedRoute) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  checkoutStepUrlPrevious = 'cart';\n\n  isGuestCheckout = false;\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectedAddress$ observable instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  selectedAddress: Address;\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected ||\n              Object.keys(selected).length === 0 ||\n              !this.selectedAddress)\n          ) {\n            const defaultAddress = addresses.find(\n              address => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.cartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.selectedAddress = address;\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addAddress(address: { newAddress: boolean; address: Address } | any);\n  addAddress(\n    address: Address | { newAddress: boolean; address: Address }\n  ): void {\n    // TODO(issue:#3921) deprecated since 1.3 - Remove temp address\n    const tempAddress: Address = address['address']\n      ? address['address']\n      : address;\n\n    const selectedSub = this.selectedAddress$.subscribe(selected => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    // TODO(issue:#3921) deprecated since 1.3 - Remove this condition\n    if (address['address'] || address['newAddress']) {\n      address['newAddress']\n        ? this.checkoutDeliveryService.createAndSetAddress(tempAddress)\n        : this.selectAddress(tempAddress);\n    } else {\n      // TODO(issue:#3921) deprecated since 1.3 - Use instead of condition\n      this.existingAddresses$.pipe(take(1)).subscribe(addresses => {\n        addresses.includes(tempAddress)\n          ? this.selectAddress(tempAddress)\n          : this.checkoutDeliveryService.createAndSetAddress(tempAddress);\n      });\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This variable will no longer be in use. Use selectAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addressSelected(address: Address): void {\n    this.selectAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goPrevious() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  back(): void {\n    this.goPrevious();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use goNext() instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  next(): void {\n    this.goNext();\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Use addAddress(address: Address) instead.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  addNewAddress(address: Address): void {\n    this.addAddress(address);\n  }\n\n  /**\n   * @deprecated since version 1.3\n   * This method will no longer be in use. Remove.\n   * TODO(issue:#3921) deprecated since 1.3\n   */\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { AuthService, CartService, RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    private routingService: RoutingService,\n    private authService: AuthService,\n    private cartService: CartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.cartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\n\nconst layoutModules = [OutletRefModule];\n\n@NgModule({\n  imports: [...layoutModules],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [...layoutModules],\n})\nexport class LayoutModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  isAnonymousConsentsEnabled = false;\n\n  @Input()\n  consent: AnonymousConsent;\n\n  // TODO(issue:4989) Anonymous consents - remove\n  @Input()\n  isLevel13 = false;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.isAnonymousConsentsEnabled && this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.isAnonymousConsentsEnabled\n      ? this.requiredConsents.includes(templateId)\n      : false;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  isFeatureEnabled,\n  isFeatureLevel,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  isAnonymousConsentsEnabled = isFeatureEnabled(\n    this.anonymousConsentsConfig,\n    ANONYMOUS_CONSENTS_FEATURE\n  );\n\n  // TODO(issue:4989) Anonymous consents - remove\n  isLevel13 = isFeatureLevel(this.anonymousConsentsConfig, '1.3');\n\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService,\n    anonymousConsentsConfig: AnonymousConsentsConfig,\n    anonymousConsentsService: AnonymousConsentsService,\n    authService: AuthService\n  );\n\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   ```ts\n   constructor(\n     userConsentService: UserConsentService,\n     globalMessageService: GlobalMessageService,\n     anonymousConsentsConfig : AnonymousConsentsConfig,\n     anonymousConsentsService : AnonymousConsentsService,\n     authService: AuthService,\n   ) \n   ```\n   */\n  constructor(\n    userConsentService: UserConsentService,\n    globalMessageService: GlobalMessageService\n  );\n  constructor(\n    private userConsentService: UserConsentService,\n    private globalMessageService: GlobalMessageService,\n    private anonymousConsentsConfig?: AnonymousConsentsConfig,\n    private anonymousConsentsService?: AnonymousConsentsService,\n    private authService?: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (!this.isAnonymousConsentsEnabled) {\n          return templateList;\n        }\n\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map(template => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach(template => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap(_timesLoaded => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter(loading => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap(i => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter(timesLoaded => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    if (!this.isAnonymousConsentsEnabled) {\n      return false;\n    }\n\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/index';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/index';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletModule, OutletRefModule } from '../../cms-structure/index';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map(data => data.banners.trim().split(' ')),\n    map(codes => codes.map(code => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n    PageComponentModule,\n    CarouselModule,\n    MediaModule,\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map(tab => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach(comp => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  FeatureConfigService,\n  UserAddressService,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(\n    userAddressService: UserAddressService,\n    checkoutDeliveryService: CheckoutDeliveryService,\n    featureConfigService: FeatureConfigService\n  );\n  /**\n   * @deprecated since version 1.2\n   *  Use constructor(userAddressService: UserAddressService,\n   *  checkoutDeliveryService: CheckoutDeliveryService\n   *  featureConfigService: FeatureConfigService) instead\n   *\n   *  TODO(issue:#4309) Deprecated since 1.2.0\n   */\n  constructor(userAddressService: UserAddressService);\n  constructor(\n    private userAddressService: UserAddressService,\n    protected checkoutDeliveryService?: CheckoutDeliveryService,\n    private featureConfigService?: FeatureConfigService\n  ) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    /**\n     * TODO(issue:#4309) Deprecated since 1.2.0\n     */\n    if (\n      this.featureConfigService &&\n      this.featureConfigService.isLevel('1.2') &&\n      this.checkoutDeliveryService\n    ) {\n      this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserAddressService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe(error => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: 'guest/order/:orderCode',\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    SpinnerModule,\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map(order => order.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map(returnRequests => returnRequests.pagination.totalResults),\n    filter(totalResults => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap(returnRequest => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      success => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Injectable } from '@angular/core';\nimport { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport {\n  CancelOrReturnRequestEntryInput,\n  OrderEntry,\n  LanguageService,\n  Price,\n  RoutingService,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserOrderService,\n  OrderReturnRequestService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderCancelOrReturnService {\n  private _cancelOrReturnRequestInputs: CancelOrReturnRequestEntryInput[] = [];\n  private lang = 'en';\n  private keepRequestInputs = false;\n\n  get isCancelling$(): Observable<boolean> {\n    return this.userOrderService.getCancelOrderLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.userOrderService.getCancelOrderSuccess();\n  }\n\n  get isReturning$(): Observable<boolean> {\n    return this.returnRequestService.getReturnRequestLoading();\n  }\n\n  get isReturnSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getReturnRequestSuccess();\n  }\n\n  constructor(\n    protected languageService: LanguageService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService,\n    protected userOrderService: UserOrderService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected semanticPathService: SemanticPathService\n  ) {\n    this.languageService.getActive().subscribe(value => (this.lang = value));\n\n    this.routing.getRouterState().subscribe(state => {\n      const current = state.state;\n      const next = state.nextState;\n      if (\n        next &&\n        next.params['orderCode'] &&\n        current &&\n        current.params['orderCode']\n      ) {\n        const orderCode = next.params['orderCode'];\n        if (\n          this.isConfirmationPath(current.url, orderCode) &&\n          this.isCancelOrReturnPath(next.url, orderCode)\n        ) {\n          this.keepRequestInputs = true;\n        }\n      }\n    });\n  }\n\n  private isConfirmationPath(url, orderCode): boolean {\n    const cancelConfirm = this.getPath('orderCancelConfirmation', orderCode);\n    const returnConfirm = this.getPath('orderReturnConfirmation', orderCode);\n\n    return url.endsWith(cancelConfirm) || url.endsWith(returnConfirm);\n  }\n\n  private isCancelOrReturnPath(url, orderCode): boolean {\n    const orderCancel = this.getPath('orderCancel', orderCode);\n    const orderReturn = this.getPath('orderReturn', orderCode);\n\n    return url.endsWith(orderCancel) || url.endsWith(orderReturn);\n  }\n\n  private getPath(routeName: string, orderCode: string): string {\n    return this.semanticPathService\n      .transform({\n        cxRoute: routeName,\n        params: { code: orderCode },\n      })\n      .join('/')\n      .slice(1);\n  }\n\n  get cancelOrReturnRequestInputs(): CancelOrReturnRequestEntryInput[] {\n    return this._cancelOrReturnRequestInputs;\n  }\n\n  set cancelOrReturnRequestInputs(values: CancelOrReturnRequestEntryInput[]) {\n    this._cancelOrReturnRequestInputs = values;\n  }\n\n  clearCancelOrReturnRequestInputs() {\n    if (!this.keepRequestInputs) {\n      this._cancelOrReturnRequestInputs = [];\n    } else {\n      this.keepRequestInputs = false;\n    }\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getCancelledOrReturnedPrice(entry: OrderEntry): Price {\n    const qty = this.getEntryCancelledOrReturnedQty(entry);\n\n    const returnedItemsPriceData = Object.assign({}, entry.basePrice);\n\n    returnedItemsPriceData.value =\n      Math.round(entry.basePrice.value * qty * 100) / 100;\n\n    returnedItemsPriceData.formattedValue = formatCurrency(\n      returnedItemsPriceData.value,\n      this.lang,\n      getCurrencySymbol(returnedItemsPriceData.currencyIso, 'narrow'),\n      returnedItemsPriceData.currencyIso\n    );\n\n    return returnedItemsPriceData;\n  }\n\n  goToOrderCancelOrReturn(cxRoute: string, orderCode: string): void {\n    this.routing.go({\n      cxRoute: cxRoute,\n      params: { code: orderCode },\n    });\n  }\n\n  backToOrder(orderCode: string): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: { code: orderCode },\n    });\n  }\n\n  isEntryCancelledOrReturned(entry: OrderEntry): boolean {\n    for (const input of this._cancelOrReturnRequestInputs) {\n      if (input.orderEntryNumber === entry.entryNumber) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getEntryCancelledOrReturnedQty(entry: OrderEntry): number {\n    for (const input of this._cancelOrReturnRequestInputs) {\n      if (input.orderEntryNumber === entry.entryNumber) {\n        return input.quantity;\n      }\n    }\n    return 0;\n  }\n\n  cancelOrder(orderCode: string): void {\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: this.cancelOrReturnRequestInputs,\n    });\n  }\n\n  cancelSuccess(orderCode: string): void {\n    this.clearCancelOrReturnRequestInputs();\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  returnOrder(orderCode: string): void {\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: this.cancelOrReturnRequestInputs,\n    });\n  }\n\n  returnSuccess(): void {\n    this.clearCancelOrReturnRequestInputs();\n\n    let rma: string;\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(take(1))\n      .subscribe(returnRequest => (rma = returnRequest.rma));\n\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.returnSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'returnRequestDetails',\n      params: { rma },\n    });\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnInit,\n  EventEmitter,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray } from '@angular/forms';\nimport {\n  OrderEntry,\n  CancelOrReturnRequestEntryInput,\n  Price,\n} from '@spartacus/core';\nimport { OrderCancelOrReturnService } from '../cancel-or-return.service';\n\n@Component({\n  selector: 'cx-cancel-or-return-items',\n  templateUrl: './cancel-or-return-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent implements OnInit {\n  @Input() entries: OrderEntry[];\n  @Input() confirmRequest = false;\n  @Input() cancelOrder = true;\n  @Input() orderCode: string;\n\n  @Output() confirm = new EventEmitter<CancelOrReturnRequestEntryInput[]>();\n\n  form: FormGroup;\n  inputsControl: FormArray;\n  disableConfirmBtn = true;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cancelOrReturnService: OrderCancelOrReturnService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      entryInput: this.formBuilder.array([]),\n    });\n\n    this.inputsControl = this.form.get('entryInput') as FormArray;\n\n    this.entries.forEach(entry => {\n      this.inputsControl.push(\n        this.formBuilder.group({\n          orderEntryNumber: entry.entryNumber,\n          quantity: this.cancelOrReturnService.getEntryCancelledOrReturnedQty(\n            entry\n          ),\n        })\n      );\n    });\n\n    this.disableEnableConfirm();\n  }\n\n  setAll(): void {\n    for (let i = 0; i < this.entries.length; i++) {\n      this.inputsControl.at(i).setValue({\n        orderEntryNumber: this.entries[i].entryNumber,\n        quantity: this.cancelOrder\n          ? this.entries[i].cancellableQuantity\n          : this.entries[i].returnableQuantity,\n      });\n    }\n    this.disableEnableConfirm();\n  }\n\n  confirmEntryInputs(): void {\n    const inputs: CancelOrReturnRequestEntryInput[] = [];\n    for (const input of this.form.value.entryInput) {\n      if (input.quantity > 0) {\n        inputs.push(input);\n      }\n    }\n    this.confirm.emit(inputs);\n  }\n\n  updateQty(): void {\n    this.disableEnableConfirm();\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.cancelOrReturnService.getCancelledOrReturnedPrice(entry);\n  }\n\n  back(): void {\n    this.cancelOrReturnService.backToOrder(this.orderCode);\n  }\n\n  protected disableEnableConfirm(): void {\n    for (const input of this.form.value.entryInput) {\n      if (input.quantity > 0) {\n        this.disableConfirmBtn = false;\n        return;\n      }\n    }\n    this.disableConfirmBtn = true;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { I18nModule } from '@spartacus/core';\n\nimport { MediaModule, ItemCounterModule } from '../../../../../shared/index';\n\nimport { CancelOrReturnItemsComponent } from './cancel-or-return-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class CancelOrReturnItemsModule {}\n","import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap, filter, map } from 'rxjs/operators';\nimport { OrderEntry, CancelOrReturnRequestEntryInput } from '@spartacus/core';\nimport { OrderCancelOrReturnService } from '../cancel-or-return.service';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent implements OnInit {\n  constructor(\n    protected cancelOrReturnService: OrderCancelOrReturnService,\n    protected orderDetailsService: OrderDetailsService\n  ) {}\n\n  orderCode: string;\n\n  returnableEntries$: Observable<\n    OrderEntry[]\n  > = this.orderDetailsService.getOrderDetails().pipe(\n    filter(order => Boolean(order.entries)),\n    tap(order => (this.orderCode = order.code)),\n    map(order => {\n      const returnableEntries = [];\n      order.entries.forEach(entry => {\n        if (entry.entryNumber !== -1 && entry.returnableQuantity > 0) {\n          returnableEntries.push(entry);\n        }\n      });\n      return returnableEntries;\n    })\n  );\n\n  ngOnInit(): void {\n    this.cancelOrReturnService.clearCancelOrReturnRequestInputs();\n  }\n\n  confirmReturn(entryInputs: CancelOrReturnRequestEntryInput[]): void {\n    this.cancelOrReturnService.cancelOrReturnRequestInputs = entryInputs;\n    this.cancelOrReturnService.goToOrderCancelOrReturn(\n      'orderReturnConfirmation',\n      this.orderCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageLayoutComponent } from '../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CmsPageGuard } from '../../../../../cms-structure/guards/cms-page.guard';\nimport { CancelOrReturnItemsModule } from '../cancel-or-return-items/cancel-or-return-items.module';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          pageLabel: '/my-account/order/return',\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CancelOrReturnItemsModule,\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap, filter, map } from 'rxjs/operators';\nimport { OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { OrderCancelOrReturnService } from '../cancel-or-return.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent implements OnInit, OnDestroy {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected cancelOrReturnService: OrderCancelOrReturnService\n  ) {}\n\n  orderCode: string;\n  isReturning$ = this.cancelOrReturnService.isReturning$;\n  subscription: Subscription;\n\n  returnedEntries$: Observable<\n    OrderEntry[]\n  > = this.orderDetailsService.getOrderDetails().pipe(\n    filter(order => Boolean(order.entries)),\n    tap(order => (this.orderCode = order.code)),\n    map(order => {\n      const returnedEntries = [];\n      order.entries.forEach(entry => {\n        if (this.cancelOrReturnService.isEntryCancelledOrReturned(entry)) {\n          returnedEntries.push(entry);\n        }\n      });\n      return returnedEntries;\n    })\n  );\n\n  ngOnInit(): void {\n    this.cancelOrReturnService.clearReturnRequest();\n    this.subscription = this.cancelOrReturnService.isReturnSuccess$.subscribe(\n      success => {\n        if (success) {\n          this.cancelOrReturnService.returnSuccess();\n        }\n      }\n    );\n  }\n\n  submit(): void {\n    this.cancelOrReturnService.returnOrder(this.orderCode);\n  }\n\n  back(): void {\n    this.cancelOrReturnService.goToOrderCancelOrReturn(\n      'orderReturn',\n      this.orderCode\n    );\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  Router,\n  UrlTree,\n  ActivatedRouteSnapshot,\n} from '@angular/router';\nimport { OrderCancelOrReturnService } from '../cancel-or-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CancelOrReturnRequestInputGuard implements CanActivate {\n  constructor(\n    private cancelOrReturnService: OrderCancelOrReturnService,\n    private router: Router\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean | UrlTree {\n    if (this.cancelOrReturnService.cancelOrReturnRequestInputs.length > 0) {\n      return true;\n    } else {\n      const urlSegments: string[] = route.url.map(seg => seg.path);\n      urlSegments.pop();\n      return this.router.parseUrl(urlSegments.join('/'));\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { PageLayoutComponent } from '../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CmsPageGuard } from '../../../../../cms-structure/guards/cms-page.guard';\nimport { CancelOrReturnItemsModule } from '../cancel-or-return-items/cancel-or-return-items.module';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\nimport { CancelOrReturnRequestInputGuard } from '../guards/cancel-or-return-request-input.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          pageLabel: '/my-account/order/return/confirmation',\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, CancelOrReturnRequestInputGuard],\n        },\n      },\n    }),\n    CancelOrReturnItemsModule,\n    I18nModule,\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap, filter, map } from 'rxjs/operators';\nimport { OrderEntry, CancelOrReturnRequestEntryInput } from '@spartacus/core';\nimport { OrderCancelOrReturnService } from '../cancel-or-return.service';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent implements OnInit {\n  constructor(\n    protected cancelOrReturnService: OrderCancelOrReturnService,\n    protected orderDetailsService: OrderDetailsService\n  ) {}\n\n  orderCode: string;\n\n  cancellableEntries$: Observable<\n    OrderEntry[]\n  > = this.orderDetailsService.getOrderDetails().pipe(\n    filter(order => Boolean(order.entries)),\n    tap(order => (this.orderCode = order.code)),\n    map(order => {\n      const cancellableEntries = [];\n      order.entries.forEach(entry => {\n        if (entry.entryNumber !== -1 && entry.cancellableQuantity > 0) {\n          cancellableEntries.push(entry);\n        }\n      });\n      return cancellableEntries;\n    })\n  );\n\n  ngOnInit(): void {\n    this.cancelOrReturnService.clearCancelOrReturnRequestInputs();\n  }\n\n  confirmCancel(entryInputs: CancelOrReturnRequestEntryInput[]): void {\n    this.cancelOrReturnService.cancelOrReturnRequestInputs = entryInputs;\n    this.cancelOrReturnService.goToOrderCancelOrReturn(\n      'orderCancelConfirmation',\n      this.orderCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, ConfigModule } from '@spartacus/core';\nimport { PageLayoutComponent } from '../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CmsPageGuard } from '../../../../../cms-structure/guards/cms-page.guard';\nimport { CancelOrReturnItemsModule } from '../cancel-or-return-items/cancel-or-return-items.module';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          pageLabel: '/my-account/order/cancel',\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CancelOrReturnItemsModule,\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap, filter, map } from 'rxjs/operators';\nimport { OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { OrderCancelOrReturnService } from '../cancel-or-return.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent implements OnInit, OnDestroy {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected cancelOrReturnService: OrderCancelOrReturnService\n  ) {}\n\n  orderCode: string;\n  isCancelling$ = this.cancelOrReturnService.isCancelling$;\n  subscription: Subscription;\n\n  cancelledEntries$: Observable<\n    OrderEntry[]\n  > = this.orderDetailsService.getOrderDetails().pipe(\n    filter(order => Boolean(order.entries)),\n    tap(order => (this.orderCode = order.code)),\n    map(order => {\n      const cancelledEntries = [];\n      order.entries.forEach(entry => {\n        if (this.cancelOrReturnService.isEntryCancelledOrReturned(entry)) {\n          cancelledEntries.push(entry);\n        }\n      });\n      return cancelledEntries;\n    })\n  );\n\n  ngOnInit(): void {\n    this.subscription = this.cancelOrReturnService.isCancelSuccess$.subscribe(\n      success => {\n        if (success) {\n          this.cancelOrReturnService.cancelSuccess(this.orderCode);\n        }\n      }\n    );\n  }\n\n  submit(): void {\n    this.cancelOrReturnService.cancelOrder(this.orderCode);\n  }\n\n  back(): void {\n    this.cancelOrReturnService.goToOrderCancelOrReturn(\n      'orderCancel',\n      this.orderCode\n    );\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { PageLayoutComponent } from '../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CmsPageGuard } from '../../../../../cms-structure/guards/cms-page.guard';\nimport { CancelOrReturnItemsModule } from '../cancel-or-return-items/cancel-or-return-items.module';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\nimport { CancelOrReturnRequestInputGuard } from '../guards/cancel-or-return-request-input.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          pageLabel: '/my-account/order/cancel/confirmation',\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, CancelOrReturnRequestInputGuard],\n        },\n      },\n    }),\n    CancelOrReturnItemsModule,\n    I18nModule,\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { OrderCancelOrReturnService } from './cancel-or-return.service';\n\n@NgModule({\n  imports: [\n    CancelOrderModule,\n    CancelOrderConfirmationModule,\n    ReturnOrderModule,\n    ReturnOrderConfirmationModule,\n  ],\n  providers: [OrderCancelOrReturnService],\n})\nexport class OrderCancelOrReturnModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { OrderCancelOrReturnModule } from './cancellations-returns/cancel-or-return.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancelOrReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap(preferences => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach(p => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [\n    CommonModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          interests =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map(interest => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map(result => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, 'details');\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n  AuthGuard,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta && meta.breadcrumbs\n          ? meta.breadcrumbs\n          : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter(data => !!data),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach(child =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map(child => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter(event => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      this.openNodes = this.openNodes.filter(n => n !== node);\n      this.renderer.removeClass(node, 'is-open');\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter(node => node.tagName === 'NAV')\n      .forEach(nav => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  ANONYMOUS_CONSENTS_FEATURE,\n  CmsNavigationComponent,\n  isFeatureEnabled,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map(d => d.styleClass)\n  );\n\n  // in order to preserve the backwards compatibility, this should render only if anonymous consents feature is disabled\n  data$ = this.componentData.data$.pipe(\n    filter(\n      _ =>\n        !isFeatureEnabled(\n          this.anonymousConsentsConfig,\n          ANONYMOUS_CONSENTS_FEATURE\n        )\n    )\n  );\n\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService,\n    // tslint:disable-next-line: unified-signatures\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n  /**\n   * @deprecated since version 1.3\n   * Instead, use:\n   * \n    ```ts\n      constructor(\n      componentData: CmsComponentData<CmsNavigationComponent>,\n      service: NavigationService,\n      anonymousConsentsConfig: AnonymousConsentsConfig\n    )\n    ```\n   */\n  constructor(\n    componentData: CmsComponentData<CmsNavigationComponent>,\n    service: NavigationService\n  );\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(_ => Boolean(deliveryAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(_ => Boolean(deliveryMode)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(_ => Boolean(billingAddress)),\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(_ => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap(order => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    this.userService.registerGuest(\n      this.guid,\n      this.guestRegisterForm.value.password\n    );\n    if (!this.subscription) {\n      this.subscription = this.authService.getUserToken().subscribe(token => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    I18nModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map(product => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map(ref =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  FeatureConfigService,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE =\n    this.features && this.features.isLevel('1.4') ? 'list' : '';\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map(data => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map(data => data.productCodes.trim().split(' ')),\n    map(codes =>\n      codes.map(code => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService,\n    protected features?: FeatureConfigService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map(d => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map(ref => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CarouselModule,\n    MediaModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  isThumbsEmpty: boolean;\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map(product => this.createThumbs(product)),\n    tap(thumbs => {\n      this.isThumbsEmpty = thumbs.length === 0;\n    })\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          t =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map(c => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n    CarouselModule,\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_CATEGORY = ':relevance:category:';\n  protected readonly RELEVANCE_BRAND = ':relevance:brand:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter(searchResult => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(\n    pluck(0),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_CATEGORY + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_BRAND + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach(key => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe(route => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Subscription, Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\nimport { ViewConfig } from '../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService,\n    // tslint:disable-next-line: unified-signatures\n    scrollConfig: ViewConfig\n  );\n\n  /**\n   * @deprecated since version 1.x\n   *  Use constructor(pageLayoutService: PageLayoutService,\n   *  productListComponentService: ProductListComponentService,\n   *  ref: ChangeDetectorRef,\n   *  scrollConfig: ViewConfig) instead\n   */\n  constructor(\n    pageLayoutService: PageLayoutService,\n    productListComponentService: ProductListComponentService\n  );\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig?: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n        this.viewMode$.next(\n          template === 'ProductGridPageTemplate'\n            ? ViewModes.Grid\n            : ViewModes.List\n        );\n      })\n    );\n  }\n\n  viewPage(pageNumber: number): void {\n    this.productListComponentService.viewPage(pageNumber);\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.isSamePage(inputModel)) {\n      return;\n    }\n\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  /**\n   * @deprecated at release 2.0.\n   * If the new list is the same and it is not intended to reset the list then return true\n   * Return false otherwise.\n   */\n  private isSamePage(inputModel: ProductSearchPage): boolean {\n    if (\n      !this.resetList &&\n      this.model &&\n      this.model.breadcrumbs &&\n      inputModel.breadcrumbs &&\n      this.model.breadcrumbs.length > 0 &&\n      inputModel.breadcrumbs.length > 0\n    ) {\n      if (this.model.breadcrumbs.length === inputModel.breadcrumbs.length) {\n        for (let i = 0; i < this.model.breadcrumbs.length; i++) {\n          if (\n            this.model.breadcrumbs[i].facetCode ===\n              inputModel.breadcrumbs[i].facetCode &&\n            this.model.breadcrumbs[i].facetValueCode ===\n              inputModel.breadcrumbs[i].facetValueCode &&\n            this.model.breadcrumbs[i].removeQuery.query.value ===\n              inputModel.breadcrumbs[i].removeQuery.query.value &&\n            this.model.pagination.currentPage ===\n              inputModel.pagination.currentPage\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Facet, ProductSearchPage } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\nimport { ProductListComponentService } from '../container/product-list-component.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit, OnDestroy {\n  private sub: Subscription;\n\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  protected queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  visibleFacets$: Observable<Facet[]>;\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productListComponentService: ProductListComponentService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.sub = this.activatedRoute.params.subscribe(params => {\n      this.activeFacetValueCode = params.categoryCode || params.brandCode;\n    });\n\n    this.searchResult$ = this.productListComponentService.model$.pipe(\n      tap(searchResult => {\n        if (searchResult.facets) {\n          searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      })\n    );\n\n    this.visibleFacets$ = this.searchResult$.pipe(\n      map(searchResult => {\n        return searchResult.facets\n          ? searchResult.facets.filter(facet => facet.visible)\n          : [];\n      })\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productListComponentService.setQuery(\n      this.queryCodec.decodeValue(query)\n    );\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<ViewConfig>defaultScrollConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OutletModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ConfigModule, CmsConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(p => !!p),\n    map(p => p.code),\n    distinctUntilChanged(),\n    switchMap(productCode => this.reviewService.getByProductCode(productCode)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ConfigModule, CmsConfig, I18nModule } from '@spartacus/core';\nimport { StarRatingModule } from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe(success => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(interests => !!interests.results && interests.results.length === 1)\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap(prefs => (this.enabledPrefs = prefs)),\n        map(prefs => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe(error => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe(success => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe(text =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n    RouterModule,\n    I18nModule,\n    SpinnerModule,\n    UrlModule,\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { RoutingService, StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      markerIndex => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap', { static: false })\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe(params =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n    ConfigModule.withConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { AuthRedirectService, CartService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { FormUtils } from '../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  form: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    { validator: this.emailsMatch }\n  );\n\n  sub: Subscription;\n\n  private submitClicked = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cartService: CartService,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isEmailConfirmInvalid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('emailConfirmation').touched &&\n          this.form.get('emailConfirmation').dirty))\n    );\n  }\n\n  onSubmit() {\n    this.submitClicked = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const email = this.form.value.email;\n    this.cartService.addEmail(email);\n\n    if (!this.sub) {\n      this.sub = this.cartService.getAssignedUser().subscribe(_ => {\n        if (this.cartService.isGuestCart()) {\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private emailsMatch(abstractControl: AbstractControl): { NotEqual: boolean } {\n    return abstractControl.get('email').value !==\n      abstractControl.get('emailConfirmation').value\n      ? { NotEqual: true }\n      : null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService,\n    winRef: WindowRef, // tslint:disable-line,\n    activatedRoute: ActivatedRoute,\n    checkoutConfigService: CheckoutConfigService\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   * Use constructor(\n   * auth: AuthService,\n   * globalMessageService: GlobalMessageService,\n   * fb: FormBuilder,\n   * authRedirectService: AuthRedirectService,\n   *  winRef: WindowRef,\n   * activatedRoute: ActivatedRoute,\n   * checkoutConfigService: CheckoutConfigService) instead\n   *\n   * TODO(issue:#4055) Deprecated since 1.1.0\n   */\n  constructor(\n    auth: AuthService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    authRedirectService: AuthRedirectService\n  );\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService,\n    private winRef?: WindowRef,\n    private activatedRoute?: ActivatedRoute,\n    private checkoutConfigService?: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n\n    if (\n      this.checkoutConfigService &&\n      this.checkoutConfigService.isGuestCheckout()\n    ) {\n      this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n    }\n\n    // TODO(issue:#4055) Deprecated since 1.1.0\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['newUid'] && routeState['newUid'].length) {\n        this.prefillForm('userId', routeState['newUid']);\n      }\n    }\n  }\n\n  login(): void {\n    const { userId, password } = this.form.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  private prefillForm(field: string, value: string): void {\n    this.form.patchValue({\n      [field]: value,\n    });\n\n    this.form.get(field).markAsTouched(); // this action will check field validity on load\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap(isUserLoggedIn => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n  ProtectedRoutesService,\n  FeatureConfigService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  /**\n   * @deprecated since 1.4\n   * Check #5666 for more info\n   *\n   * TODO(issue:5666) Deprecated since 1.4\n   */\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes?: ProtectedRoutesService,\n    protected featureConfig?: FeatureConfigService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  protected redirect(): void {\n    // TODO(issue:5666) Deprecated since 1.4\n    const cxRoute: string =\n      this.featureConfig.isLevel('1.4') &&\n      this.protectedRoutes &&\n      this.protectedRoutes.shouldProtect\n        ? 'login'\n        : 'home';\n\n    this.routing.go({ cxRoute });\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ANONYMOUS_CONSENTS_FEATURE,\n  AuthRedirectService,\n  AuthService,\n  ConsentTemplate,\n  FeatureConfigService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles } from '../../../shared/utils/forms/title-utils';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  // TODO(issue:4237) Register flow\n  isNewRegisterFlowEnabled: boolean =\n    this.featureConfig && this.featureConfig.isLevel('1.1');\n\n  isAnonymousConsentEnabled =\n    this.featureConfig &&\n    this.featureConfig.isEnabled(ANONYMOUS_CONSENTS_FEATURE);\n\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isAnonymousConsentEnabled\n          ? this.isConsentRequired()\n          : false,\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: CustomFormValidators.matchPassword }\n  );\n\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder,\n    // tslint:disable-next-line:unified-signatures\n    router: RoutingService,\n    featureConfig: FeatureConfigService,\n    anonymousConsentsService: AnonymousConsentsService,\n    anonymousConsentsConfig: AnonymousConsentsConfig\n  );\n\n  /**\n   * @deprecated since 1.1.0\n   *\n   * Use constructor(\n   * protected auth: AuthService,\n   * protected authRedirectService: AuthRedirectService,\n   * protected userService: UserService,\n   * protected globalMessageService: GlobalMessageService,\n   * protected fb: FormBuilder,\n   * protected router?: RoutingService,\n   * protected featureConfig?: FeatureConfigService,\n   * protected anonymousConsentsService?: AnonymousConsentsService,\n   * protected anonymousConsentsConfig?: AnonymousConsentsConfig) instead\n   *\n   * TODO(issue:4237) Register flow\n   * TODO(issue:4989) Anonymous consents\n   */\n  constructor(\n    auth: AuthService,\n    authRedirectService: AuthRedirectService,\n    userService: UserService,\n    globalMessageService: GlobalMessageService,\n    fb: FormBuilder\n  );\n  constructor(\n    protected auth: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router?: RoutingService,\n    protected featureConfig?: FeatureConfigService,\n    protected anonymousConsentsService?: AnonymousConsentsService,\n    protected anonymousConsentsConfig?: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO(issue:4237) Register flow\n    if (this.isNewRegisterFlowEnabled) {\n      this.loading$ = this.userService.getRegisterUserResultLoading();\n      this.registerUserProcessInit();\n    } else {\n      if (this.auth && this.authRedirectService) {\n        this.subscription.add(\n          this.userService\n            .getRegisterUserResultSuccess()\n            .subscribe((success: boolean) => {\n              if (success) {\n                const { uid, password } = this.collectDataFromRegisterForm(\n                  this.userRegistrationForm.value\n                );\n                this.auth.authorize(uid, password);\n              }\n            })\n        );\n        this.subscription.add(\n          this.auth.getUserToken().subscribe(data => {\n            if (data && data.access_token) {\n              this.globalMessageService.remove(\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n              this.authRedirectService.redirect();\n            }\n          })\n        );\n      }\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter(messages => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some(message => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    if (\n      this.isAnonymousConsentEnabled &&\n      Boolean(this.anonymousConsentsConfig) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent)\n    ) {\n      this.anonymousConsent$ = combineLatest([\n        this.anonymousConsentsService.getConsent(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n        this.anonymousConsentsService.getTemplate(\n          this.anonymousConsentsConfig.anonymousConsents.registerConsent\n        ),\n      ]).pipe(\n        map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n          return {\n            consent,\n            template: template.description,\n          };\n        })\n      );\n\n      this.subscription.add(\n        this.userRegistrationForm\n          .get('newsletter')\n          .valueChanges.subscribe(_ => {\n            this.toggleAnonymousConsent();\n          })\n      );\n    }\n  }\n\n  submit(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.userRegistrationForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.userRegistrationForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    if (\n      Boolean(this.anonymousConsentsService) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.registerConsent) &&\n      Boolean(this.anonymousConsentsConfig.anonymousConsents.requiredConsents)\n    ) {\n      return this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (this.router && success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    if (Boolean(this.userRegistrationForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    } else {\n      this.anonymousConsentsService.withdrawConsent(\n        this.anonymousConsentsConfig.anonymousConsents.registerConsent\n      );\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe(success => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    SpinnerModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderCancelOrReturnModule,\n  ReturnRequestListModule,\n  ReturnRequestDetailModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancelOrReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import {\n  Route,\n  UrlMatchResult,\n  UrlSegment,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'p',\n            paramName: 'productCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      md: {\n        pageFold: 'UpSelling',\n      },\n      xs: {\n        pageFold: 'Summary',\n      },\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderReturn: {\n    paths: ['my-account/order/:orderCode/return'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/:orderCode/return/confirmation'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/:orderCode/cancel'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/:orderCode/cancel/confirmation'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('1.0'),\n    LayoutModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot(\n      {},\n      {\n        runtimeChecks: {\n          strictStateImmutability: true,\n          strictStateSerializability: true,\n          strictActionImmutability: true,\n          strictActionSerializability: true,\n        },\n      }\n    ),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ConfigModule, provideConfig } from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig } from './config/b2c-layout-config';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule.withConfig(<StorefrontConfig>{\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n\n    ConfigModule.withConfig(b2cLayoutConfig),\n    ConfigModule.withConfigFactory(defaultCmsContentConfig),\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n"]}