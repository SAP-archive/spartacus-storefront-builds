{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-components.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/web-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/lazy-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/launch-dialog/config/default-launch-config.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","IconResourceType","IconConfig","Injectable","providedIn","useExisting","Config","SkipLinkScrollPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","DomSanitizer","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","pop","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","CmsComponentsService","platformId","missingComponents","determineMappings","componentTypes","of","getMapping","componentType","componentConfig","console","warn","shouldRender","isPlatformServer","disableSSR","getDeferLoadingStrategy","getChildRoutes","routes","componentTypes_1","componentTypes_1_1","_c","childRoutes","getGuards","guards","Set","componentTypes_2","componentTypes_2_1","guard","from","getI18nKeys","i18nKeys","componentTypes_3","componentTypes_3_1","CmsConfig","Inject","args","PLATFORM_ID","ComponentHandler","ComponentHandlerService","handlers","invalidMappings","resolve","componentMapping","handler","resolveApplicable","isDevMode","has","getLauncher","viewContainerRef","elementInjector","launcher","Optional","CmsInjectorService","cmsComponentsService","injector","getCmsData","uid","parentInjector","data$","get","CmsService","getComponentData","getInjector","configProviders","Injector","provide","CmsComponentData","useValue","parent","ComponentWrapperDirective","vcr","dynamicAttributeService","componentHandler","cmsInjector","cmsService","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","isLaunchInSmartEdit","addDynamicAttributes","properties","ViewContainerRef","DynamicAttributeService","Directive","DefaultComponentHandler","hasMatch","getPriority","Observable","subscriber","factory","getComponentFactory","createComponent","undefined","location","destroy","ComponentFactoryResolver","resolveComponentFactory","CxApiService","auth","cart","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","ActiveCartService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","WebComponentHandler","platform","loadedWebComponents","webElement","active","disposeFunc","remove","initWebComponent","then","elementName","cmsComponentData","cxApi","element","parentElement","Promise","path","script","setAttribute","body","isPlatformBrowser","onload","chainedOnload_1","DOCUMENT","LazyComponentHandler","defaultHandler","isNotClass","symbol","signature","toString","substr","replace","startsWith","switchMap","PageComponentModule","multi","AsmComponentService","authService","asmAuthService","routingService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","globalMessageService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","GlobalMessageType","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","HostBinding","encapsulation","ViewEncapsulation","None","BaseFocusService","PersistFocusService","focus","Map","group","set","clear","delete","getPersistenceGroup","getAttribute","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","querySelectorAll","findFirstFocusable","autofocus","el","isHidden","findFocusable","locked","invisible","suffix","map","join","filter","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","event","preventScroll","preventDefault","stopPropagation","focusOnDoubleEscape","AutoFocusService","hasPersistedFocus","getPersisted","focussed","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","tagName","TrapFocusService","hasFocusableChildren","moveFocus","focusable","v","getTrapStart","trap","getTrapEnd","LockFocusService","KeyboardFocusService","SkipLinkConfig","DIALOG_TYPE","LAUNCH_CALLER","SkipLinkService","keyboardFocusService","skipLinks$","BehaviorSubject","getSkipLinks","found","skipLinks","skipLink","existing","splice","getSkipLinkIndexInArray","i18nKey","position","scrollToTarget","HTMLElement","firstFocusable","hasTabindex","hasAttribute","removeAttribute","previous","this_1","SkipLinkComponent","skipLinkService","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_LAUNCH_CONFIG","launch","ASM","outlet","SKIP_LINKS","LaunchConfig","LaunchRenderStrategy","renderedCallers","caller","some","_config","LaunchDialogService","renderStrategies","launchConfig","findConfiguration","getStrategy","render","AsmEnablerService","launchDialogService","load","isEnabled","addUi","isLaunched","isUsedBefore","setItem","params","getItem","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","deps","asmEnablerService","BREAKPOINT","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","markForCheck","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","floor","seconds","slice","Pipe","name","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","EventEmitter","csAgentLoginForm","Validators","required","onSubmit","valid","emit","markAllAsTouched","FormBuilder","Output","CustomerEmulationComponent","subscription","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","controls","valueChanges","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","PaginationItemType","PaginationNavigationPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","indexOf","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","code","sort","a","width","_reversedFormats","sortedFormats","reverse","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","container","handleMissing","loadHandler","errorHandler","MediaModule","forRoot","ngModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","step","allowZero","readonly","handleClick","input","control","markAsDirty","decrement","getControl","_control$","startWith","getValidCount","emitEvent","max","HostListener","ItemCounterModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","PaginationConfig","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","_","number","label","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","BEFORE","AFTER","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","MediaConfig","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsConfig","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","fromEvent","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data","nativeName","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","FormErrorsComponent","_control","errors$","statusChanges","errors","entries","invalid","dirty","touched","FormErrorsModule","ViewConfig","ViewConfigModule","ViewConfigModule_1","view","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entryNumber","CustomFormValidators","emailValidator","email","match","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","CheckoutStepType","DeliveryModePreferences","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","isStable","BaseFocusDirective","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","toLowerCase","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","BlockFocusDirective","block","PersistFocusDirective","handleFocus","attr","ngAfterViewInit","isPersisted","EscapeFocusDirective","esc","AutoFocusDirective","shouldAutofocus","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","isLocked","lockFocus","addTabindexToChildren","shouldUnlockAfterAutofocus","setTimeout","FocusDirective","directives","KeyboardFocusModule","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","getLoaded","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","getLoading","slots","selectiveCart","loadingCart","exclude","arr","arg","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","features","CartComponentModule","CartModule","OutletPosition","CheckoutConfig","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","catch","verifyAddress","countrySelected","regionSelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","translate","payment","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","textExpires","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","field","cardLabels","selected","title","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","getCardContent","addAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","templateOrFactory","REPLACE","store","stacked","templateRef","removeValueOrAll","newValue","val","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","componentFactoryResolver","outletService","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","InlineRenderStrategy","inline","OutletRefDirective","tpl","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","first","observer","intersectOptions","rootMargin","getRootMargin","thresholds","threshold","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletRendererService","outletRefs","register","cxOutlet","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","cxOutletDefer","build","changes","hostElement","getHostElement","buildOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","parentNode","OutletModule","OutletRenderStrategy","RoutingRenderStrategy","_caller","LaunchDialogModule","LaunchDialogModule_1","provideConfig","LayoutModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","slot","components","pendingComponentCount","class","lastPosition","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","typeCode","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","observeOn","asyncScheduler","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","querySelector","closest","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","y","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","updateState","increaseVisibleValues","values","decreaseVisibleValues","topValueCount","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","_isDialog","expandFacetGroup","isCollapsed","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","radius","parseParameters","googleMaps","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderConfig","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","sub","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [provideDefaultConfig(fontawesomeIconConfig)],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport {\n  CmsComponentMapping,\n  CmsConfig,\n  DeferLoadingStrategy,\n} from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentsService {\n  private missingComponents: string[] = [];\n\n  constructor(\n    protected config: CmsConfig,\n    @Inject(PLATFORM_ID) protected platformId: Object\n  ) {}\n\n  /**\n   * Should be called to make sure all component mappings are determined,\n   * especially lazy loaded ones.\n   *\n   * It's recommended way to make sure all other methods of CmsComponentService\n   * will be able to work synchronously for asked component types and avoid risk\n   * of potential errors that could be thrown otherwise.\n   */\n  determineMappings(componentTypes: string[]): Observable<string[]> {\n    return of(componentTypes);\n  }\n\n  /**\n   * Return collection of component mapping configuration for specified list of\n   * component types.\n   *\n   * If component mapping can't be determined synchronously, for example, lazy\n   * loaded one, it will throw an error.\n   *\n   * To make sure component mapping is available, determineMappings()\n   * should be called and completed first.\n   */\n  getMapping(componentType: string): CmsComponentMapping {\n    const componentConfig = this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  /**\n   * Checks, if component should be rendered as some components\n   * could be disabled for server side renderings\n   */\n  shouldRender(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getMapping(componentType)?.disableSSR);\n  }\n\n  /**\n   * Return DeferLoadingStrategy for component type.\n   */\n  getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    return this.config.cmsComponents?.[componentType]?.deferLoading;\n  }\n\n  /**\n   * Get cms driven child routes for components\n   */\n  getChildRoutes(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        routes.push(...(this.getMapping(componentType)?.childRoutes ?? []));\n      }\n    }\n    return routes;\n  }\n\n  /**\n   * Get cms driven guards for components\n   */\n  getGuards(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getMapping(componentType)?.guards?.forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  /**\n   * Get i18n keys associated with components\n   */\n  getI18nKeys(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        this.getMapping(componentType)?.i18nKeys?.forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Applicable {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsComponentsService } from '../../../services/cms-components.service';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsComponentsService.getMapping(type)?.providers ?? [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsComponentsService } from '../../services/cms-components.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService,\n    protected cmsService: CmsService // TODO: remove, move smartedit detection responsibility to different layer/service\n  ) {}\n\n  ngOnInit() {\n    this.cmsComponentsService\n      .determineMappings([this.cxComponentWrapper.flexType])\n      .subscribe(() => {\n        if (\n          this.cmsComponentsService.shouldRender(\n            this.cxComponentWrapper.flexType\n          )\n        ) {\n          this.launchComponent();\n        }\n      });\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsComponentsService.getMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n      });\n  }\n\n  private decorate(elementRef: ElementRef) {\n    if (this.cmsService.isLaunchInSmartEdit()) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.cxComponentWrapper.properties,\n        elementRef.nativeElement,\n        this.renderer\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return typeof componentMapping.component === 'function';\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import {\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ComponentHandler } from './component-handler';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CxApiService } from '../services/cx-api.service';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n/**\n * Component handler responsible for launching cms web components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebComponentHandler implements ComponentHandler {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'string' &&\n      componentMapping.component.includes('#')\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef }> {\n    return new Observable<{ elementRef: ElementRef }>((subscriber) => {\n      let webElement;\n      let active = true;\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const renderer = injector.get(Renderer2);\n\n      const disposeFunc = () => {\n        active = false;\n        if (webElement) {\n          webElement.remove();\n        }\n      };\n\n      this.initWebComponent(componentMapping.component, renderer).then(\n        (elementName) => {\n          if (elementName) {\n            webElement = renderer.createElement(elementName);\n\n            const cmsComponentData = injector.get(CmsComponentData, null);\n\n            webElement.cxApi = {\n              ...injector.get(CxApiService),\n              cmsComponentData,\n            };\n\n            renderer.appendChild(\n              viewContainerRef.element.nativeElement.parentElement,\n              webElement\n            );\n\n            subscriber.next({ elementRef: new ElementRef(webElement) });\n\n            if (!active) {\n              disposeFunc();\n            }\n          }\n        }\n      );\n\n      return disposeFunc;\n    });\n  }\n\n  private initWebComponent(\n    component: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const [path, selector] = component.split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { DefaultComponentHandler } from './default-component.handler';\nimport { switchMap } from 'rxjs/operators';\nimport { ComponentHandler } from './component-handler';\n\n/**\n * Lazy component handler used for launching lazy loaded cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LazyComponentHandler implements ComponentHandler {\n  constructor(protected defaultHandler: DefaultComponentHandler) {}\n\n  /**\n   * We want to mach dynamic import signature () => import('')\n   */\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      this.isNotClass(componentMapping.component)\n    );\n  }\n\n  private isNotClass(symbol: any): boolean {\n    const signature = symbol.toString().substr(0, 20).replace(' ', '');\n    return signature.startsWith('function()') || signature.startsWith('()=>');\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return from(componentMapping.component()).pipe(\n      switchMap((component) =>\n        this.defaultHandler.launcher(\n          { ...componentMapping, component },\n          viewContainerRef,\n          elementInjector\n        )\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { WebComponentHandler } from './handlers/web-component.handler';\nimport { LazyComponentHandler } from './handlers/lazy-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: LazyComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: WebComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistance\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LaunchConfig {\n  launch?: {\n    [key: string]: LaunchOptions;\n  };\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Optional elements for other configurations\n   */\n  options?: {\n    /**\n     * Dialog type is used to apply CSS classes\n     */\n    dialogType?: DIALOG_TYPE;\n  };\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { AsmMainUiComponent } from '../../../cms-components/asm/asm-main-ui/asm-main-ui.component';\nimport { SkipLinkComponent } from '../../a11y/skip-link/component/skip-link.component';\nimport { LaunchConfig } from './launch-config';\n\nexport const DEFAULT_LAUNCH_CONFIG: LaunchConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n    SKIP_LINKS: {\n      outlet: 'cx-storefront',\n      component: SkipLinkComponent,\n    },\n  },\n};\n","import { ViewContainerRef } from '@angular/core';\nimport { LAUNCH_CALLER, LaunchDialog, LaunchOptions } from '../config';\nimport { Applicable } from '@spartacus/core';\n\nexport abstract class LaunchRenderStrategy implements Applicable {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER;\n    element?: any;\n  }> = [];\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ): void;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(caller: LAUNCH_CALLER, config: LaunchDialog): boolean {\n    return this.renderedCallers.some((el) => el.caller === caller)\n      ? !!config.multi\n      : true;\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER, _config?: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n  }\n}\n","import { Inject, Injectable, ViewContainerRef } from '@angular/core';\nimport {\n  LAUNCH_CALLER,\n  LaunchConfig,\n  LaunchOptions,\n} from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\nimport { resolveApplicable } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  // Keep a list of rendered elements\n  protected renderedCallers: LAUNCH_CALLER[] = [];\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected launchConfig: LaunchConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(caller: LAUNCH_CALLER, vcr?: ViewContainerRef): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.render(config, caller, vcr);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER): LaunchOptions {\n    return this.launchConfig?.launch[caller];\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveApplicable(this.renderStrategies, [config]);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import { DeferLoadingStrategy, Config } from '@spartacus/core';\nimport { Injectable } from '@angular/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media?.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap((value) =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { MediaFormatSize } from './media.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(() =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter((loaded) => loaded),\n      switchMap(() => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap((dataLoaded) => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: ` <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container> `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { FormErrorsModule } from '../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistance key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      super.handleFocus(event as KeyboardEvent);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elmenents,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n\n    this.cart$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getActiveCartId(),\n      this.customerCouponService.getCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      ),\n    ]).pipe(\n      tap(\n        ([cart, activeCardId, customerCoupons]: [\n          Cart,\n          string,\n          CustomerCouponSearchResult\n        ]) => {\n          this.cartId = activeCardId;\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n        }\n      ),\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n    );\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    private authService: AuthService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn ? cartLoaded && sflLoaded : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n        this.activeCartService.getLoading(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart, loadingCart]) => {\n          const exclude = (arr, args) =>\n            arr.filter((item) => args.every((arg) => arg !== item));\n          return Object.keys(cart).length === 0 && loadingCart\n            ? exclude(slots, [\n                'TopContent',\n                'CenterRightContentSlot',\n                'EmptyCartMiddleContent',\n              ])\n            : cart.totalItems\n            ? exclude(slots, ['EmptyCartMiddleContent'])\n            : selectiveCart.totalItems\n            ? exclude(slots, [\n                'EmptyCartMiddleContent',\n                'CenterRightContentSlot',\n              ])\n            : exclude(slots, ['TopContent', 'CenterRightContentSlot']);\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.paymentForm.get('cardType.code').setValue(card.code);\n  }\n\n  monthSelected(month: string): void {\n    this.paymentForm.get('expiryMonth').setValue(month);\n  }\n\n  yearSelected(year: number): void {\n    this.paymentForm.get('expiryYear').setValue(year);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddressForm\n      .get('region.isocodeShort')\n      .setValue(region.isocodeShort);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n  protected checkoutStepUrlNext: string;\n  protected checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.routingService.go(this.checkoutStepUrlNext);\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some((error) => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.addressForm['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    const selectedSub = this.selectedAddress$.subscribe((selected) => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected componentFactoryResolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER,\n    vcr: ViewContainerRef\n  ) {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      vcr.createComponent(template);\n      this.renderedCallers.push({ caller, element: vcr.element });\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, thresholds: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new Map<string, OutletDirective>();\n\n  render(outlet: string): void {\n    if (this.outletRefs.size !== 0) {\n      this.outletRefs.get(outlet).render();\n    }\n  }\n\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.set(cxOutlet, context);\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService?: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n    this.outletRendererService.register(this.cxOutlet, this);\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach((obj) => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n    this.renderedTemplate.push(tmplOrFactory);\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent nodes of the given element.\n   *\n   * We avoid traversing the parent _elements_, as this is blocking\n   * ie11 implementations. One of the spare exclusions we make to not\n   * supporting ie11.\n   *\n   * @param element\n   */\n  private getHostElement(element: Node): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentNode);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super();\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ) {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n\n      const element = vcr?.element;\n      this.renderedCallers.push({ caller, element });\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected routingService: RoutingService) {\n    super();\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideConfig } from '@spartacus/core';\nimport { DEFAULT_LAUNCH_CONFIG } from './config/default-launch-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [provideConfig(DEFAULT_LAUNCH_CONFIG)],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nimport { CmsComponentsService } from '../../services/cms-components.service';\n\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position represents the unique key for a page slot on a single page, but can\n   * be reused cross pages.\n   *\n   * The position is used to find the CMS components for the page slot. It is also\n   * added as an additional CSS class so that layoutt can be applied.\n   */\n  @Input() set position(value: string) {\n    this.position$.next(value);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  /**\n   * Maintains css classes introduced by the host and adds additional classes.\n   */\n  @Input() @HostBinding() class: string;\n\n  /**\n   * Indicates that the page slot is the last page slot above the fold.\n   */\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  /**\n   * Indicates that the components of the page slot haven't been loaded as long\n   * as the isPending state is true.\n   */\n  @HostBinding('class.cx-pending') isPending = true;\n\n  /**\n   * Indicates that the page slot doesn't contain any components. This is no\n   * longer used in spartacus, but kept for backwards compatibility.\n   */\n  @HostBinding('class.has-components') @Input() hasComponents = false;\n\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  components: ContentSlotComponentData[];\n\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    distinctUntilChanged(this.isDistinct)\n  );\n\n  /** Observes the components for the given page slot. */\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\n    map((slot) => slot?.components ?? [])\n  );\n\n  protected subscription: Subscription = new Subscription();\n\n  /** Keeps track of the pending components that must be loaded for the page slot */\n  private pendingComponentCount = 0;\n\n  /** Tracks the last used position, in case the page slot is used dynamically */\n  private lastPosition: string;\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\n        this.components = value?.components || [];\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  protected decorate(slot: ContentSlotData): void {\n    let cls = this.class || '';\n\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\n      cls = cls.replace(this.lastPosition, '');\n    }\n    if (this.position$.value) {\n      cls += ` ${this.position$.value}`;\n      this.lastPosition = this.position$.value;\n    }\n\n    // host bindings\n    this.pending = slot?.components?.length || 0;\n    this.hasComponents = slot?.components?.length > 0;\n    if (cls && cls !== this.class) {\n      this.class = cls;\n    }\n\n    this.addSmartEditSlotClass(slot);\n  }\n\n  /**\n   * Sets the pending count for the page slot components. Once all pending components are\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\n   */\n  protected set pending(count: number) {\n    this.pendingComponentCount = count;\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  protected get pending(): number {\n    return this.pendingComponentCount;\n  }\n\n  /*\n   * Is triggered when a component is added to the view. This is used to\n   * update the pending count\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pending--;\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether the component should be\n   * rendered instantly or whether it should be deferred.\n   */\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(\n      componentType\n    );\n    return { deferLoading };\n  }\n\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\n    return (\n      current.components &&\n      old.components?.length === current.components.length &&\n      !old.components.find(\n        (el, index) => el.uid !== current.components[index].uid\n      )\n    );\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        slot.properties,\n        this.elementRef.nativeElement,\n        this.renderer\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsComponentsService.getGuards(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected translation: TranslationService,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsComponentsService.getI18nKeys(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsComponentsService } from './cms-components.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(\n    private router: Router,\n    private cmsComponentsService: CmsComponentsService\n  ) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsComponentsService.getChildRoutes(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\nimport { CmsComponentsService } from '../services';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    protected cmsService: CmsService,\n    protected cmsRoutes: CmsRoutesService,\n    protected cmsI18n: CmsI18nService,\n    protected cmsGuards: CmsGuardsService,\n    protected cmsComponentsService: CmsComponentsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsComponentsService.determineMappings(componentTypes)\n      ),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap((data) =>\n      combineLatest(\n        data.components.split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach((key) => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => Boolean(order)),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    const wrapper = <HTMLElement>node.querySelector('.wrapper');\n    const body = <HTMLElement>node.closest('body');\n    if (wrapper) {\n      this.renderer.removeStyle(wrapper, 'margin-left');\n      if (\n        wrapper.offsetLeft + wrapper.offsetWidth >\n        body.offsetLeft + body.offsetWidth\n      ) {\n        this.renderer.setStyle(\n          wrapper,\n          'margin-left',\n          `${node.offsetWidth - wrapper.offsetWidth}px`\n        );\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      breadcrumb.facetValueCode === params.categoryCode\n    );\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: facet.topValueCount || 0,\n          maxVisible: facet.topValueCount || 0,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string) {\n    return { query: new HttpUrlEncodingCodec().decodeValue(query) };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given facet when there are no\n   * facets available. This is a great experience for the keyboard user, who keep the\n   * focus on the activated facet all the time.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return !facetList.facets?.length ? facet.facetValueName : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  private _isDialog: boolean;\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input()\n  set isDialog(value: boolean) {\n    this._isDialog = value;\n    if (value) {\n      this.renderer.addClass(document.body, 'modal-open');\n    }\n  }\n\n  get isDialog(): boolean {\n    return this._isDialog;\n  }\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  @HostListener('click') handleClick() {\n    this.close();\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef,\n    protected renderer: Renderer2\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.renderer.removeClass(document.body, 'modal-open');\n    this.closeList.emit(event);\n  }\n\n  block(event?: MouseEvent) {\n    event.stopPropagation();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n  StoreFinderConfig,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n  radius: number;\n  searchQuery: StoreFinderSearchQuery;\n  geolocation: GeoPoint;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    protected config: StoreFinderConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.radius = this.config.googleMaps.radius;\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}