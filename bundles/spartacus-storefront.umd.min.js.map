{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cx-api.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/web-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/launch-dialog/config/default-launch-config.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents/anonymous-consents.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ICON_TYPE","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","IconResourceType","SkipLinkScrollPosition","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","type","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getStyleClasses","iconType","resourceType","config","find","res","types","includes","svgResource","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","IconConfig","DomSanitizer","Injectable","providedIn","IconComponent","iconLoader","elementRef","renderer","setIcon","addStyleClasses","_this","addClass","host","styleClasses","forEach","cls","removeClass","split","nativeElement","ElementRef","Renderer2","Input","Component","selector","template","IconModule","NgModule","declarations","imports","CommonModule","providers","provideDefaultConfig","provide","useExisting","Config","exports","ModalRef","_super","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","pop","closeActiveModal","close","NgbModal","AnonymousConsentDialogComponent","modalService","anonymousConsentsService","subscriptions","Subscription","showLegalDescription","iconTypes","requiredConsents","Boolean","anonymousConsents","showLegalDescriptionInDialog","ngOnInit","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","closeModal","rejectAll","add","combineLatest","pipe","take","distinctUntilChanged","tap","_a","_b","templates","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","subscribe","allowAll","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","ngOnDestroy","unsubscribe","AnonymousConsentsConfig","AnonymousConsentsService","AnonymousConsentManagementBannerComponent","bannerVisible$","isBannerVisible","viewDetails","hideBanner","centered","size","giveAllConsents","toggleBannerDismissed","AnonymousConsentOpenDialogComponent","openDialog","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","cmsComponents","component","deferLoading","DeferLoadingStrategy","INSTANT","entryComponents","CmsMappingService","platformId","missingComponents","getComponentMapping","componentType","componentConfig","console","warn","isComponentEnabled","isPlatformServer","disableSSR","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","getRoutesForComponent","getGuardsForComponents","guards","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","childRoutes","CmsConfig","Inject","args","PLATFORM_ID","ComponentHandler","ComponentHandlerService","handlers","invalidMappings","resolve","componentMapping","handler","resolveHandler","isDevMode","has","getLauncher","viewContainerRef","elementInjector","launcher","Optional","CmsInjectorService","cmsMapping","injector","getCmsData","uid","parentInjector","data$","get","CmsService","getComponentData","getInjector","configProviders","Injector","CmsComponentData","useValue","parent","ComponentWrapperDirective","vcr","cmsMappingService","dynamicAttributeService","componentHandler","cmsInjector","cmsService","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","isLaunchInSmartEdit","addDynamicAttributes","properties","ViewContainerRef","DynamicAttributeService","Directive","DefaultComponentHandler","hasMatch","getPriority","Observable","subscriber","factory","getComponentFactory","createComponent","undefined","location","destroy","ComponentFactoryResolver","resolveComponentFactory","CxApiService","auth","cart","checkout","checkoutDelivery","checkoutPayment","cms","pageMeta","featureConfig","globalMessage","translation","kyma","occEndpoints","product","productSearch","productReview","productReference","searchbox","routing","currency","language","baseSite","user","userAddress","userConsent","userOrder","userPayment","userNotificationPreferenceService","userInterestsService","selectiveCartService","ngZone","AuthService","ActiveCartService","CheckoutService","CheckoutDeliveryService","CheckoutPaymentService","PageMetaService","FeatureConfigService","GlobalMessageService","TranslationService","KymaService","OccEndpointsService","ProductService","ProductSearchService","ProductReviewService","ProductReferenceService","SearchboxService","RoutingService","CurrencyService","LanguageService","BaseSiteService","UserService","UserAddressService","UserConsentService","UserOrderService","UserPaymentService","UserNotificationPreferenceService","UserInterestsService","SelectiveCartService","NgZone","WebComponentHandler","platform","loadedWebComponents","webElement","active","disposeFunc","remove","initWebComponent","then","elementName","cmsComponentData","cxApi","element","parentElement","Promise","path","script","setAttribute","body","isPlatformBrowser","onload","chainedOnload_1","DOCUMENT","PageComponentModule","multi","AsmComponentService","authService","asmAuthService","routingService","logoutCustomerSupportAgentAndCustomer","getUserToken","token","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","go","cxRoute","isCustomerEmulationSessionInProgress","mergeMap","userToken","of","unload","localStorage","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","globalMessageService","disabled","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","switchMap","access_token","handleCustomerSessionStartRedirection","GlobalMessageType","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","password","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","HostBinding","encapsulation","ViewEncapsulation","None","BaseFocusService","PersistFocusService","focus","Map","group","set","clear","delete","getPersistenceGroup","getAttribute","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","querySelectorAll","findFirstFocusable","autofocus","el","isHidden","findFocusable","locked","invisible","suffix","map","join","filter","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","event","preventScroll","preventDefault","stopPropagation","focusOnDoubleEscape","AutoFocusService","hasPersistedFocus","getPersisted","focussed","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","tagName","TrapFocusService","hasFocusableChildren","moveFocus","focusable","v","getTrapStart","trap","getTrapEnd","LockFocusService","KeyboardFocusService","DIALOG_TYPE","LAUNCH_CALLER","SkipLinkService","keyboardFocusService","skipLinks$","BehaviorSubject","getSkipLinks","found","skipLinks","skipLink","existing","splice","getSkipLinkIndexInArray","i18nKey","position","scrollToTarget","HTMLElement","firstFocusable","hasTabindex","hasAttribute","removeAttribute","previous","this_1","SkipLinkConfig","SkipLinkComponent","skipLinkService","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_LAUNCH_CONFIG","launch","ASM","outlet","SKIP_LINKS","LaunchRenderStrategy","renderedCallers","shouldRender","caller","some","_config","LaunchDialogService","renderStrategies","launchConfig","findConfiguration","getStrategy","render","LaunchConfig","AsmEnablerService","launchDialogService","load","isEnabled","addUi","isLaunched","isUsedBefore","setItem","params","getItem","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","deps","asmEnablerService","BREAKPOINT","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","markForCheck","resetOnNavigate","resetOnCustomerSessionChange","isNavigating","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","ChangeDetectorRef","FormatTimerPipe","transform","totalSeconds","minutes","floor","seconds","slice","Pipe","name","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","EventEmitter","csAgentLoginForm","Validators","required","onSubmit","valid","emit","markAllAsTouched","FormBuilder","Output","CustomerEmulationComponent","subscription","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","asmService","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","controls","valueChanges","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","setValue","onDocumentClick","resultList","contains","closeResults","AsmService","ViewChild","(document:click)","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","CarouselComponent","service","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","PaginationItemType","PaginationNavigationPosition","LayoutConfig","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","indexOf","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","code","sort","a","width","_reversedFormats","sortedFormats","reverse","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","ngOnChanges","container","handleMissing","loadHandler","errorHandler","MediaConfig","MediaModule","forRoot","ngModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","ItemCounterComponent","min","step","allowZero","readonly","handleClick","input","control","markAsDirty","decrement","getControl","_control$","startWith","getValidCount","emitEvent","max","HostListener","ItemCounterModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","test","GenericLinkModule","defaultPaginationConfig","pagination","addStart","addEnd","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","_","number","label","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","BEFORE","AFTER","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationConfig","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","queryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","FormsModule","SpinnerComponent","SpinnerModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsLoaderService","qualtricsLoaded$","isQualtricsConfigured","initialize","setup","fromEvent","qualtricsScript","defer","idScript","qualtrics","projectId","qsi","isDataLoaded","dataLoaded","API","run","QualtricsConfig","QualtricsComponent","qualtricsLoader","qualtricsEnabled$","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","getItems","context","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data","nativeName","symbol","isocode","ContextServiceMap","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","StarRatingComponent","change","initialRate","setRate","rating","force","saveRate","setRateOnEvent","StarRatingModule","FormErrorsComponent","_control","errors$","statusChanges","errors","entries","invalid","dirty","touched","FormErrorsModule","ViewConfigModule","ViewConfigModule_1","view","ViewConfig","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","entry","consumedEntryNumber","orderEntryNumber","entryNumber","CustomFormValidators","emailValidator","email","match","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","DeliveryModePreferences","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","AddedToCartDialogComponent","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","componentInstance","cart$","loaded$","isStable","BaseFocusDirective","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","toLowerCase","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","BlockFocusDirective","block","PersistFocusDirective","handleFocus","attr","ngAfterViewInit","isPersisted","EscapeFocusDirective","esc","AutoFocusDirective","shouldAutofocus","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","isLocked","lockFocus","addTabindexToChildren","shouldUnlockAfterAutofocus","setTimeout","toString","FocusDirective","directives","KeyboardFocusModule","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","isLevel","getCustomerCoupons","customerCoupons","cartId","OCC_USER_ID_ANONYMOUS","guid","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","success","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","cartLoaded$","getLoaded","isUserLoggedIn","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","slots","selectiveCart","slot","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","features","CartComponentModule","CartModule","CheckoutStepType","CheckoutConfig","OutletPosition","defaultCheckoutConfig","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","skipWhile","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","loading","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","CheckoutGuard","router","expressCheckoutService","firstStep$","parseUrl","expressCheckoutPossible","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","withLatestFrom","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","result","catch","verifyAddress","countrySelected","regionSelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","newPaymentFormManuallyOpened","allowRouting","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","getPaymentDetailsSub","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","selectedPayment","getCardContent","payment","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","createCard","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","isNewPayment","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","msg","field","cardLabels","title","img","actions","header","goNext","goPrevious","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","selected","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","titleSelected","toggleDefaultAddress","regionsSub","obj","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","cards$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","addAddress","selectedSub","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","templateOrFactory","REPLACE","store","stacked","templateRef","removeValueOrAll","newValue","val","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","componentFactoryResolver","outletService","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","InlineRenderStrategy","inline","OutletRefDirective","tpl","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","IntersectionService","isIntersected","intersects","first","observer","intersectOptions","rootMargin","getRootMargin","thresholds","threshold","intersectionObserver","IntersectionObserver","observe","disconnect","flatMap","isIntersecting","layoutConfig","deferredLoading","intersectionMargin","DeferLoaderService","intersectionService","globalLoadStrategy","strategy","shouldLoadInstantly","elementLoadingStrategy","DEFER","OutletRendererService","outletRefs","register","cxOutlet","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","cxOutletDefer","build","changes","hostElement","getHostElement","buildOutlet","isArray","tmplOrFactory","ComponentFactory","createEmbeddedView","$implicit","cxOutletContext","OutletModule","OutletRenderStrategy","RoutingRenderStrategy","_caller","LaunchDialogModule","LaunchDialogModule_1","provideConfig","LayoutModule","PageSlotComponent","cdRef","isPending","hasComponents","isPageFold","position$","slot$","getContentSlot","addSmartEditSlotClass","components$","components","pendingComponentCount","isLoaded","loadState","getComponentDeferOptions","getDeferLoadingStrategy","addSmartEditContract","PageSlotModule","PageLayoutService","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageLayoutModule","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","asObservable","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","PWAModuleConfig","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","languageService","lang","documentElement","replace","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","JsonLdScriptFactory","rendererFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","scriptElement","getElementById","createRenderer","JSON","stringify","_key","SecurityContext","HTML","RendererFactory2","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","anonymousConsentsConfig","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","ConsentManagementModule","AuthGuard","AnonymousConsentsModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","Error","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","distinctUntilKeyChanged","typeCode","select","tabNum","routeState","history","getTitleParams","tabComps","comp","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","AmendOrderActionsModule","ValidateQuantity","q","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","activeTab","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","paymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","getLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","observeOn","asyncScheduler","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","allowAlignToRight","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","querySelector","navBar","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","message","toggleBodyClass","hasResults","hasBodyClass","classList","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ref","source","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","y","pluck","criteria","getCriteriaFromRoute","model$","clearSearchResults","routeParams","getQueryFromRouteParams","brandCode","searchConfig","getSearchConfig","setQuery","setQueryParams","viewPage","pageNumber","getPageItems","routeCriteria","navigate","queryParamsHandling","relativeTo","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","updateState","increaseVisibleValues","values","decreaseVisibleValues","topValueCount","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","expandFacetGroup","isCollapsed","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","viewStore","prepareRouteUrl","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchQuery","queryText","geolocation","useMyLocation","parseParameters","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","sub","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","loginAsGuest","prefilledEmail","loginForm","_e","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","StorefrontFoundationModule","StateModule","AuthModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n}\n\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automitacally loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","export abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","import { Component, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(fontawesomeIconConfig),\n    { provide: IconConfig, useExisting: Config },\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../modal/index';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  constructor(\n    private config: AnonymousConsentsConfig,\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.closeModal('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    private modalService: ModalService,\n    private anonymousConsentsService: AnonymousConsentsService\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AnonymousConsentDialogComponent } from '../../../shared/components/anonymous-consents/dialog/anonymous-consent-dialog.component';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  constructor(protected modalService: ModalService) {}\n\n  openDialog(): void {\n    this.modalService.open(AnonymousConsentDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, FeaturesConfigModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsComponentMapping, CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  private missingComponents: string[] = [];\n\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  public getComponentMapping(componentType: string): CmsComponentMapping {\n    const componentConfig = this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  isComponentEnabled(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getComponentMapping(componentType)?.disableSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    return this.getComponentMapping(componentType)?.childRoutes ?? [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    return this.getComponentMapping(componentType)?.guards ?? [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    return this.getComponentMapping(componentType)?.i18nKeys ?? [];\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Handler, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Handler {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveHandler } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveHandler(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsMappingService } from '../../../services/cms-mapping.service';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsMapping: CmsMappingService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsMapping.getComponentMapping(type)?.providers ?? [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsMappingService } from '../../services/cms-mapping.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsMappingService: CmsMappingService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService,\n    protected cmsService: CmsService // TODO: remove, move smartedit detection responsibility to different layer/service\n  ) {}\n\n  ngOnInit() {\n    if (\n      this.cmsMappingService.isComponentEnabled(\n        this.cxComponentWrapper.flexType\n      )\n    ) {\n      this.launchComponent();\n    }\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsMappingService.getComponentMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n      });\n  }\n\n  private decorate(elementRef: ElementRef) {\n    if (this.cmsService.isLaunchInSmartEdit()) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.cxComponentWrapper.properties,\n        elementRef.nativeElement,\n        this.renderer\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      componentMapping.component.prototype\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  BaseSiteService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  CmsService,\n  CurrencyService,\n  FeatureConfigService,\n  GlobalMessageService,\n  KymaService,\n  LanguageService,\n  OccEndpointsService,\n  PageMetaService,\n  ProductReferenceService,\n  ProductReviewService,\n  ProductSearchService,\n  ProductService,\n  RoutingService,\n  SearchboxService,\n  SelectiveCartService,\n  TranslationService,\n  UserAddressService,\n  UserConsentService,\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  UserOrderService,\n  UserPaymentService,\n  UserService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CxApiService {\n  cmsComponentData?: CmsComponentData<any>;\n\n  constructor(\n    // auth\n    @Optional() public auth: AuthService,\n    // cart\n    @Optional() public cart: ActiveCartService,\n    // checkout\n    @Optional() public checkout: CheckoutService,\n    @Optional() public checkoutDelivery: CheckoutDeliveryService,\n    @Optional() public checkoutPayment: CheckoutPaymentService,\n    // cms\n    @Optional() public cms: CmsService,\n    @Optional() public pageMeta: PageMetaService,\n    // features config\n    @Optional() public featureConfig: FeatureConfigService,\n    // global message\n    @Optional() public globalMessage: GlobalMessageService,\n    // i18n\n    @Optional() public translation: TranslationService,\n    // kyma\n    @Optional() public kyma: KymaService,\n    // occ\n    @Optional() public occEndpoints: OccEndpointsService,\n    // product\n    @Optional() public product: ProductService,\n    @Optional() public productSearch: ProductSearchService,\n    @Optional() public productReview: ProductReviewService,\n    @Optional() public productReference: ProductReferenceService,\n    @Optional() public searchbox: SearchboxService,\n    // routing\n    @Optional() public routing: RoutingService,\n    // site context\n    @Optional() public currency: CurrencyService,\n    @Optional() public language: LanguageService,\n    @Optional() public baseSite: BaseSiteService,\n    // user\n    @Optional() public user: UserService,\n    @Optional() public userAddress: UserAddressService,\n    @Optional() public userConsent: UserConsentService,\n    @Optional() public userOrder: UserOrderService,\n    @Optional() public userPayment: UserPaymentService,\n    @Optional()\n    public userNotificationPreferenceService: UserNotificationPreferenceService,\n    @Optional()\n    public userInterestsService: UserInterestsService,\n    @Optional() public selectiveCartService: SelectiveCartService,\n    // framework\n    public ngZone: NgZone\n  ) {}\n}\n","import {\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ComponentHandler } from './component-handler';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { CxApiService } from '../services/cx-api.service';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { CmsComponentData } from '../../model';\n\n/**\n * Component handler responsible for launching cms web components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebComponentHandler implements ComponentHandler {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    @Inject(PLATFORM_ID) protected platform: any\n  ) {}\n\n  private loadedWebComponents: { [path: string]: any } = {};\n\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'string' &&\n      componentMapping.component.includes('#')\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef }> {\n    return new Observable<{ elementRef: ElementRef }>((subscriber) => {\n      let webElement;\n      let active = true;\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const renderer = injector.get(Renderer2);\n\n      const disposeFunc = () => {\n        active = false;\n        if (webElement) {\n          webElement.remove();\n        }\n      };\n\n      this.initWebComponent(componentMapping.component, renderer).then(\n        (elementName) => {\n          if (elementName) {\n            webElement = renderer.createElement(elementName);\n\n            const cmsComponentData = injector.get(CmsComponentData, null);\n\n            webElement.cxApi = {\n              ...injector.get(CxApiService),\n              cmsComponentData,\n            };\n\n            renderer.appendChild(\n              viewContainerRef.element.nativeElement.parentElement,\n              webElement\n            );\n\n            subscriber.next({ elementRef: new ElementRef(webElement) });\n\n            if (!active) {\n              disposeFunc();\n            }\n          }\n        }\n      );\n\n      return disposeFunc;\n    });\n  }\n\n  private initWebComponent(\n    component: string,\n    renderer: Renderer2\n  ): Promise<string> {\n    return new Promise((resolve) => {\n      const [path, selector] = component.split('#');\n\n      let script = this.loadedWebComponents[path];\n\n      if (!script) {\n        if (path) {\n          script = renderer.createElement('script');\n          this.loadedWebComponents[path] = script;\n          script.setAttribute('src', path);\n          renderer.appendChild(this.document.body, script);\n          if (isPlatformBrowser(this.platform)) {\n            script.onload = () => {\n              script.onload = null;\n            };\n          }\n        } else {\n          script = {};\n        }\n      }\n\n      if (script.onload) {\n        // If script is still loading (has onload callback defined)\n        // add new callback and chain it with the existing one.\n        // Needed to support loading multiple components from one script\n        const chainedOnload = script.onload;\n        script.onload = () => {\n          chainedOnload();\n          resolve(selector);\n        };\n      } else {\n        resolve(selector);\n      }\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { WebComponentHandler } from './handlers/web-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: WebComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singlton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the mouse-focus class is added to the host element,\n   * indicating that the element focus was not caused by the keyboard.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n\n  // whenever the target autofocus element is selected by the `skipFocus` selector,\n  // autofocus is ignored.\n  skipFocus?: string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistance\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport abstract class LaunchConfig {\n  launch?: {\n    [key: string]: LaunchOptions;\n  };\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Optional elements for other configurations\n   */\n  options?: {\n    /**\n     * Dialog type is used to apply CSS classes\n     */\n    dialogType?: DIALOG_TYPE;\n  };\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { AsmMainUiComponent } from '../../../cms-components/asm/asm-main-ui/asm-main-ui.component';\nimport { SkipLinkComponent } from '../../a11y/skip-link/component/skip-link.component';\nimport { LaunchConfig } from './launch-config';\n\nexport const DEFAULT_LAUNCH_CONFIG: LaunchConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n    SKIP_LINKS: {\n      outlet: 'cx-storefront',\n      component: SkipLinkComponent,\n    },\n  },\n};\n","import { ViewContainerRef } from '@angular/core';\nimport { LAUNCH_CALLER, LaunchDialog, LaunchOptions } from '../config';\nimport { Handler } from '@spartacus/core';\n\nexport abstract class LaunchRenderStrategy implements Handler {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER;\n    element?: any;\n  }> = [];\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ): void;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(caller: LAUNCH_CALLER, config: LaunchDialog): boolean {\n    return this.renderedCallers.some((el) => el.caller === caller)\n      ? !!config.multi\n      : true;\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER, _config?: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n  }\n}\n","import { Inject, Injectable, ViewContainerRef } from '@angular/core';\nimport {\n  LAUNCH_CALLER,\n  LaunchConfig,\n  LaunchOptions,\n} from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\nimport { resolveHandler } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  // Keep a list of rendered elements\n  protected renderedCallers: LAUNCH_CALLER[] = [];\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected launchConfig: LaunchConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(caller: LAUNCH_CALLER, vcr?: ViewContainerRef): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.render(config, caller, vcr);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER): LaunchOptions {\n    return this.launchConfig?.launch[caller];\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveHandler(this.renderStrategies, [config]);\n  }\n}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import { DeferLoadingStrategy } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by idication, however a more\n   * precise indication will have an positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferrred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overriden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { MediaFormatSize } from './media.model';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { MediaComponent } from './media.component';\nimport { MediaConfig } from './media.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n      providers: [\n        {\n          provide: MediaConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith, tap } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functinality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive inteteger or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Inidicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  private _control$: Observable<FormControl>;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Returns an observable with the control. The value changes of the\n   * control are intercepted in order to suppress invalid values.\n   */\n  getControl(): Observable<FormControl> {\n    if (!this._control$) {\n      this._control$ = this.control.valueChanges.pipe(\n        startWith(this.control.value),\n        tap((value) =>\n          this.control.setValue(this.getValidCount(value), { emitEvent: false })\n        ),\n        map(() => this.control)\n      );\n    }\n    return this._control$;\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\n\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig, PaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultPaginationConfig),\n    { provide: PaginationConfig, useExisting: Config },\n  ],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","export abstract class QualtricsConfig {\n  qualtrics?: {\n    projectId?: string;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, fromEvent, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, tap } from 'rxjs/operators';\nimport { QualtricsConfig } from './config/qualtrics-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  private qualtricsLoaded$ = new BehaviorSubject<boolean>(false);\n\n  constructor(private winRef: WindowRef, private config: QualtricsConfig) {\n    if (\n      Boolean(this.winRef.nativeWindow) &&\n      Boolean(this.winRef.document) &&\n      this.isQualtricsConfigured()\n    ) {\n      this.initialize();\n      this.setup();\n    }\n  }\n\n  private initialize(): void {\n    fromEvent(this.winRef.nativeWindow, 'qsi_js_loaded').subscribe(() =>\n      this.qualtricsLoaded$.next(true)\n    );\n  }\n\n  private setup(): void {\n    const qualtricsScript = this.winRef.document.createElement('script');\n    qualtricsScript.type = 'text/javascript';\n    qualtricsScript.defer = true;\n    qualtricsScript.src = 'assets/qualtricsIntegration.js';\n\n    const idScript = this.winRef.document.createElement('div');\n    idScript.id = this.config.qualtrics.projectId;\n\n    this.winRef.document\n      .getElementsByTagName('head')[0]\n      .appendChild(qualtricsScript);\n\n    this.winRef.document.getElementsByTagName('head')[0].appendChild(idScript);\n  }\n\n  private isQualtricsConfigured(): boolean {\n    return (\n      Boolean(this.config.qualtrics) && Boolean(this.config.qualtrics.projectId)\n    );\n  }\n\n  load(): Observable<boolean> {\n    return this.qualtricsLoaded$.pipe(\n      filter((loaded) => loaded),\n      switchMap(() => {\n        const qsi = this.winRef.nativeWindow['QSI'];\n        return this.isDataLoaded().pipe(\n          distinctUntilChanged(),\n          tap((dataLoaded) => {\n            if (dataLoaded) {\n              qsi.API.unload();\n              qsi.API.load().done(qsi.API.run());\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data\n   * If client(s) does not extend this service to override this implementation, it returns true\n   * Return false otherwise.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n}\n","import { Component } from '@angular/core';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n\n@Component({\n  selector: 'cx-qualtrics',\n  template: ` <ng-container *ngIf=\"qualtricsEnabled$ | async\"></ng-container> `,\n})\nexport class QualtricsComponent {\n  qualtricsEnabled$ = this.qualtricsLoader.load();\n\n  constructor(private qualtricsLoader: QualtricsLoaderService) {}\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n\n    {\n      provide: QualtricsConfig,\n      useExisting: Config,\n    },\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => this.getInjectedService(ctx)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","export abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ViewConfig } from './view-config';\nimport { Config, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n        {\n          provide: ViewConfig,\n          useExisting: Config,\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AsmModule as AsmCoreModule, I18nModule } from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { FormErrorsModule } from '../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n  ],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = { disableMouseFocus: true };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** controls a polyfill class for the lacking focus-visible feature */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown') handleKeydown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = false;\n    }\n  }\n\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistance key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      super.handleFocus(event as KeyboardEvent);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elmenents,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\nimport { FeaturesConfigModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, FeaturesConfigModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  FeatureConfigService,\n  OCC_USER_ID_ANONYMOUS,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected featureConfig: FeatureConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n    if (this.featureConfig && this.featureConfig.isLevel('1.5')) {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n        this.customerCouponService.getCustomerCoupons(\n          this.MAX_CUSTOMER_COUPON_PAGE\n        ),\n      ]).pipe(\n        tap(\n          ([cart, userId, customerCoupons]: [\n            Cart,\n            string,\n            CustomerCouponSearchResult\n          ]) => {\n            this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code;\n            this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n          }\n        ),\n        map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n    else {\n      this.cart$ = combineLatest([\n        this.activeCartService.getActive(),\n        this.authService.getOccUserId(),\n      ]).pipe(\n        tap(\n          ([cart, userId]: [Cart, string]) =>\n            (this.cartId =\n              userId === OCC_USER_ID_ANONYMOUS ? cart.guid : cart.code)\n        ),\n        map(([cart]: [Cart, string]) => cart)\n      );\n    }\n    //TODO(issue:#5971) Deprecated since 1.5\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    FeaturesConfigModule,\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    private authService: AuthService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn ? cartLoaded && sflLoaded : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.getCart(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart]) => {\n          if (cart.totalItems) {\n            return slots.filter((slot) => slot !== 'EmptyCartMiddleContent');\n          } else if (selectiveCart.totalItems) {\n            return slots.filter(\n              (slot) =>\n                slot !== 'EmptyCartMiddleContent' &&\n                slot !== 'CenterRightContentSlot'\n            );\n          } else {\n            return slots.filter(\n              (slot) =>\n                slot !== 'TopContent' && slot !== 'CenterRightContentSlot'\n            );\n          }\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SaveForLaterComponent } from './save-for-later.component';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n      features: {\n        saveForLater: '1.5',\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, Config, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  Config,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n    { provide: CheckoutConfig, useExisting: Config },\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        this.currentDeliveryModeId = code;\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserPaymentService,\n  Region,\n  UserAddressService,\n  StateUtils,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.paymentForm.get('cardType.code').setValue(card.code);\n  }\n\n  monthSelected(month: string): void {\n    this.paymentForm.get('expiryMonth').setValue(month);\n  }\n\n  yearSelected(year: number): void {\n    this.paymentForm.get('expiryYear').setValue(year);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest([this.countries$, this.shippingAddress$]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.billingAddressForm\n      .get('region.isocodeShort')\n      .setValue(region.isocodeShort);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  selectedPayment: PaymentDetails;\n  allowRouting: boolean;\n  isGuestCheckout = false;\n\n  private getPaymentDetailsSub: Subscription;\n\n  private deliveryAddress: Address;\n  private checkoutStepUrlNext: string;\n  private checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.allowRouting = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutPaymentService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          (paymentInfo) => paymentInfo && !!Object.keys(paymentInfo).length\n        )\n      )\n      .subscribe((paymentInfo) => {\n        if (this.allowRouting) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach((key) => {\n            if (key.startsWith('InvalidField')) {\n              this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    if (!this.selectedPayment && payment.defaultPayment) {\n      this.selectedPayment = payment;\n    }\n\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          return this.createCard(payment, {\n            textExpires,\n            textUseThisPayment,\n            textDefaultPaymentMethod,\n            textSelected,\n          });\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n    isNewPayment = true,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n    isNewPayment?: boolean;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n\n    if (isNewPayment) {\n      this.checkoutPaymentService.createPaymentDetails(details);\n    } else if (this.selectedPayment && this.selectedPayment.id === details.id) {\n      this.checkoutPaymentService.setPaymentDetails(details);\n    }\n\n    this.allowRouting = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(msg: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field: msg },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(paymentDetails, cardLabels) {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        this.selectedPayment && this.selectedPayment.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.setPaymentDetails({\n      paymentDetails: this.selectedPayment,\n      isNewPayment: false,\n    });\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some((error) => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.addressForm['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    const selectedSub = this.selectedAddress$.subscribe((selected) => {\n      if (selected && selected.shippingAddress) {\n        this.goNext();\n        selectedSub.unsubscribe();\n      }\n    });\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  private templatesRefs = new Map<string, T[]>();\n  private templatesRefsBefore = new Map<string, T[]>();\n  private templatesRefsAfter = new Map<string, T[]>();\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.store(this.templatesRefsBefore, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.store(this.templatesRefs, outlet, templateOrFactory);\n    }\n    if (position === OutletPosition.AFTER) {\n      this.store(this.templatesRefsAfter, outlet, templateOrFactory);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    let templateRef: T[];\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore.get(outlet);\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter.get(outlet);\n        break;\n      default:\n        templateRef = this.templatesRefs.get(outlet);\n    }\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    switch (position) {\n      case OutletPosition.BEFORE:\n        this.removeValueOrAll(this.templatesRefsBefore, outlet, value);\n        break;\n      case OutletPosition.AFTER:\n        this.removeValueOrAll(this.templatesRefsAfter, outlet, value);\n        break;\n      default:\n        this.removeValueOrAll(this.templatesRefs, outlet, value);\n    }\n  }\n\n  private store(store: Map<string, T[]>, outlet: string, value: T) {\n    const existing = store.get(outlet) || [];\n    const newValue: T[] = existing.concat([value]);\n    store.set(outlet, newValue);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n      existing = existing.filter((val) => val === value);\n      store.set(outlet, existing);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  Config,\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkConfig } from './config/skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    { provide: SkipLinkConfig, useExisting: Config },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import {\n  ComponentFactoryResolver,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected componentFactoryResolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER,\n    vcr: ViewContainerRef\n  ) {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      vcr.createComponent(template);\n      this.renderedCallers.push({ caller, element: vcr.element });\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, thresholds: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new Map<string, OutletDirective>();\n\n  render(outlet: string): void {\n    if (this.outletRefs.size !== 0) {\n      this.outletRefs.get(outlet).render();\n    }\n  }\n\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.set(cxOutlet, context);\n  }\n}\n","import {\n  ComponentFactory,\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService?: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n    this.outletRendererService.register(this.cxOutlet, this);\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    templates.forEach((obj) => {\n      this.create(obj);\n    });\n  }\n\n  private create(tmplOrFactory: any): void {\n    if (tmplOrFactory instanceof ComponentFactory) {\n      this.vcr.createComponent(tmplOrFactory);\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n    }\n    this.renderedTemplate.push(tmplOrFactory);\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent elements of the given element.\n   *\n   * @param element\n   */\n  private getHostElement(element: Element): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentElement);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  Injectable,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super();\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER,\n    vcr?: ViewContainerRef\n  ) {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n\n      const element = vcr?.element;\n      this.renderedCallers.push({ caller, element });\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller === caller\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(protected routingService: RoutingService) {\n    super();\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config, provideConfig } from '@spartacus/core';\nimport { DEFAULT_LAUNCH_CONFIG } from './config/default-launch-config';\nimport { LaunchConfig } from './config/launch-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [\n        provideConfig(DEFAULT_LAUNCH_CONFIG),\n        { provide: LaunchConfig, useExisting: Config },\n      ],\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { LayoutConfig } from './config/layout-config';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot()],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsConfig,\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DeferLoadingStrategy,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\n\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position is used to find the CMS page slot (and optional outlet)\n   * that is rendered in the PageSlotComponent. Furthermore, the position\n   * is added as a CSS class name to the host element.\n   */\n  @Input()\n  set position(position: string) {\n    this.position$.next(position);\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  @HostBinding('class.cx-pending') isPending = true;\n  @HostBinding('class.has-components') hasComponents = false;\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  private pendingComponentCount: number;\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   *\n   * @deprecated we'll stop supporting this property in 2.0 as\n   * it is not used separately.\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    tap((slot) => this.addSmartEditSlotClass(slot))\n  );\n\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map((slot) => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    )\n  );\n\n  private subscription = new Subscription();\n\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef,\n    // tslint:disable-next-line:unified-signatures\n    config: CmsConfig\n  );\n  /**\n   * @deprecated since version 1.4\n   * Use constructor(cmsService: CmsService, dynamicAttributeService: DynamicAttributeService, renderer: Renderer2, hostElement: ElementRef, config?: CmsConfig) instead\n   */\n  constructor(\n    cmsService: CmsService,\n    dynamicAttributeService: DynamicAttributeService,\n    renderer: Renderer2,\n    hostElement: ElementRef\n  );\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef,\n    protected config?: CmsConfig,\n    protected cdRef?: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.components$.subscribe((components) => {\n        this.hasComponents = components && components.length > 0;\n        this.pendingComponentCount = components ? components.length : 0;\n        this.isPending = this.pendingComponentCount > 0;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  /**\n   * Is triggered when a component is added to the view.\n   * We use this information to dropthe `is-pending` class from the page slot\n   * when all nested components have been added.\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pendingComponentCount--;\n    }\n    this.isPending = this.pendingComponentCount > 0;\n    this.cdRef?.markForCheck();\n  }\n\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.getDeferLoadingStrategy(componentType);\n    return { deferLoading };\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether component rendering\n   * should be deferred.\n   */\n  private getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    if (this.config) {\n      return ((this.config as CmsConfig).cmsComponents[componentType] || {})\n        .deferLoading;\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","export abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  build() {\n    this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './dialog/anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsModule } from '../../shared/components/anonymous-consents/anonymous-consents.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsMappingService } from './cms-mapping.service';\n\n/**\n * Please don't put that service in public API.\n * */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  switchMap,\n} from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    // tslint:disable-next-line:unified-signatures\n    winRef: WindowRef\n  );\n  /**\n   * @deprecated since 1.4\n   *\n   * TODO(issue:#5813) Deprecated since 1.4\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService,\n    private winRef?: WindowRef\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilKeyChanged('components'),\n    switchMap((data) =>\n      combineLatest(\n        data.components.split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n\n  ngOnInit(): void {\n    if (this.winRef && this.winRef.nativeWindow) {\n      const routeState =\n        this.winRef.nativeWindow.history &&\n        this.winRef.nativeWindow.history.state;\n\n      if (routeState && routeState['activeTab']) {\n        this.activeTabNum = routeState['activeTab'];\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n    AddressBookComponentService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() isValid: string;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantity(control: FormControl) {\n  let q = 0;\n  Object.keys(control.value).forEach((key) => (q += control.value[key]));\n\n  return q > 0 ? null : { required: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup({}, { validators: [ValidateQuantity] });\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    if (this.isConfirmation) {\n      control.disable();\n    }\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport { ItemCounterModule, MediaModule } from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => Boolean(order)),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { asyncScheduler, combineLatest, Observable } from 'rxjs';\nimport { filter, map, observeOn } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home').pipe(observeOn(asyncScheduler)),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category)\n   */\n  private getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  @Input() allowAlignToRight = false;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    if (this.allowAlignToRight) {\n      const wrapper = <HTMLElement>node.querySelector('.wrapper');\n      const navBar = <HTMLElement>this.elemRef.nativeElement;\n      if (wrapper) {\n        this.renderer.removeStyle(wrapper, 'margin-left');\n        if (\n          wrapper.offsetLeft + wrapper.offsetWidth >\n          navBar.offsetLeft + navBar.offsetWidth\n        ) {\n          this.renderer.setStyle(\n            wrapper,\n            'margin-left',\n            `${node.offsetWidth - wrapper.offsetWidth}px`\n          );\n        }\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d.styleClass)\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) =>\n      this.mainMediaContainer.next(p.images ? p.images.PRIMARY : {})\n    )\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RoutingService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\n\ninterface ProductListRouteParams {\n  brandCode?: string;\n  categoryCode?: string;\n  query?: string;\n}\n\ninterface SearchCriteria {\n  currentPage?: number;\n  pageSize?: number;\n  sortCode?: string;\n  query?: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected sub: Subscription;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  private searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  private searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    // also trigger search on site context changes\n    this.languageService.getActive(),\n    this.currencyService.getActive(),\n  ]).pipe(\n    pluck(0, 'state'),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream should be used only on the Product Listing Page.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  clearSearchResults(): void {\n    this.productSearchService.clearResults();\n  }\n\n  private getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  private getQueryFromRouteParams({\n    brandCode,\n    categoryCode,\n    query,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  private search(criteria: SearchCriteria): void {\n    const query = criteria.query;\n    const searchConfig = this.getSearchConfig(criteria);\n\n    this.productSearchService.search(query, searchConfig);\n  }\n\n  private getSearchConfig(criteria: SearchCriteria): SearchConfig {\n    const result: SearchConfig = {\n      currentPage: criteria.currentPage,\n      pageSize: criteria.pageSize,\n      sortCode: criteria.sortCode,\n    };\n\n    // drop empty keys\n    Object.keys(result).forEach((key) => !result[key] && delete result[key]);\n\n    return result;\n  }\n\n  setQuery(query: string): void {\n    this.setQueryParams({ query, currentPage: undefined });\n  }\n\n  viewPage(pageNumber: number): void {\n    this.setQueryParams({ currentPage: pageNumber });\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  sort(sortCode: string): void {\n    this.setQueryParams({ sortCode });\n  }\n\n  private setQueryParams(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.productListComponentService.clearSearchResults();\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      breadcrumb.facetValueCode === params.categoryCode\n    );\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: facet.topValueCount || 0,\n          maxVisible: facet.topValueCount || 0,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string) {\n    return { query: new HttpUrlEncodingCodec().decodeValue(query) };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\n\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\nimport { Observable } from 'rxjs';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given facet when there are no\n   * facets available. This is a great experience for the keyboard user, who keep the\n   * focus on the activated facet all the time.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return !facetList.facets?.length ? facet.facetValueName : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input() isDialog: boolean;\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.closeList.emit(event);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { ActivatedRoute } from '@angular/router';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService, RoutingService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(\n    protected storeDataService: StoreDataService,\n    protected route: ActivatedRoute,\n    protected routingService: RoutingService\n  ) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  viewStore(location: any): void {\n    this.routingService.go([this.prepareRouteUrl(location)]);\n  }\n\n  prepareRouteUrl(location: any): string {\n    const countryParam = this.route.snapshot.params.country\n      ? `country/${this.route.snapshot.params.country}/`\n      : '';\n    const regionParam = this.route.snapshot.params.region\n      ? `region/${this.route.snapshot.params.region}/`\n      : '';\n    return `store-finder/${countryParam}${regionParam}${location.name}`;\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  searchQuery: StoreFinderSearchQuery;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n  geolocation: GeoPoint;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}