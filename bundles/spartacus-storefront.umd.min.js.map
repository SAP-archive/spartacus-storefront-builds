{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.ts","ng://@spartacus/storefront/shared/directives/auto-focus/auto-focus.directive.module.ts","ng://@spartacus/storefront/shared/directives/only-number/only-number.directive.ts","ng://@spartacus/storefront/shared/components/form-components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/form-components/form-components.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/utils/forms/form-utils.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/billing-address-form/billing-address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/layout/config/default-layout-config.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-style.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/cms-structure/outlet/style-ref/style-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/style-ref/style-ref.module.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-structure/cms.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.service.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-structure/page/config/default-cart-page.config.ts","ng://@spartacus/storefront/cms-structure/page/config/default-header.config.ts","ng://@spartacus/storefront/cms-structure/page/config/default-pdp-config.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-mapping.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-card/address-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/shared-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-details/container/product-details.component.ts","ng://@spartacus/storefront/cms-components/product/product-details/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-details/product-details.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/cart-page/cart-page.component.ts","ng://@spartacus/storefront/cms-pages/cart-page/cart-page.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.component.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/config/provide-config-from-meta-tags.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/storefront.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/cms-structure/page/config/default-cms-content.config.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","step","op","TypeError","done","value","pop","push","e","__values","o","m","__read","r","ar","error","__spread","concat","ModalRef","tslib_1.__extends","NgbModalRef","ModalService","ngbModalService","modals","open","content","options","activeModal","getActiveModal","modal","dismissActiveModal","reason","dismiss","closeActiveModal","close","Injectable","args","providedIn","NgbModal","CurrentProductService","routingService","productService","getProduct","_this","getRouterState","pipe","map","state","params","filter","productCode","switchMap","get","RoutingService","ProductService","STAR","SEARCH","CART","INFO","GRID","LIST","CARET_DOWN","CARET_LEFT","CARET_RIGHT","TIMES","ERROR","WARNING","SUCCESS","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","PLUS","MINUS","RESET","IconConfig","SVG","LINK","fontawesomeIconConfig","icon","symbols","resources","type","IconResourceType","url","IconLoaderService","winRef","config","loadedResources","useSvg","iconType","find","res","types","includes","getSvgPath","svgResource","getSymbol","getStyleClasses","addLinkResource","resource","findResource","head","document","getElementsByTagName","link","createElement","rel","href","appendChild","resourceType","WindowRef","IconComponent","iconLoader","elementRef","styleClasses","defineProperty","_type","addStyleClasses","staticStyleClasses","undefined","nativeElement","classList","Component","selector","template","ElementRef","Input","HostBinding","IconModule","NgModule","declarations","imports","CommonModule","ConfigModule","withConfig","providers","provide","useExisting","Config","exports","AddedToCartDialogComponent","modalService","cartService","fb","iconTypes","ICON_TYPE","quantity","firstUpdate","form","group","ngOnInit","entry$","tap","entry","code","product","controls","setValue","setControl","createEntryFormGroup","markAsPristine","showItemIncrLabel","dismissModal","removeEntry","item","updateEntry","_a","updatedQuantity","entryNumber","CartService","FormBuilder","ViewChild","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","cartEntry$","getEntry","Boolean","subscribe","stock","stockLevelStatus","stockLevel","maxQuantity","markForCheck","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","size","componentInstance","cart$","getActive","loaded$","getLoaded","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","AutoFocusDirective","hostElement","ngAfterViewInit","focus","Directive","AutoFocusDirectiveModule","OnlyNumberDirective","renderer","previousValue","integerUnsigned","onChange","validateValue","onInput","onPaste","clipboardData","getData","preventDefault","onKeyUp","target","onKeyDown","originalValue","key","getName","controlOrCommand","ctrlKey","metaKey","RegExp","test","replace","setProperty","keyCode","String","fromCharCode","Renderer2","HostListener","COUNTER_CONTROL_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","ItemCounterComponent","multi","async","cartIsLoading","isValueChangeable","update","EventEmitter","isValueOutOfRange","inputValue","FormControl","disabled","onTouch","onModelChange","_rating","writeValue","min","valueChanges","debounceTime","manualChange","Number","ngOnChanges","disable","onlySelf","emitEvent","enable","adjustValueInRange","incomingValue","max","newValue","updateValue","input","event","handlers","ArrowDown","decrement","ArrowUp","increment","stopPropagation","onBlur","onFocus","setFocus","registerOnTouched","fn","registerOnChange","emit","isIncremented","isMaxOrMinValueOrBeyond","incrementBtn","decrementBtn","Output","FormComponentsModule","FormsModule","ReactiveFormsModule","GenericLinkComponent","protocolRegex","getAbsoluteUrl","isExternalUrl","startsWith","GenericLinkModule","RouterModule","PaginationComponent","viewPageEvent","getCurrentPageNumber","pagination","currentPage","getPagePrevious","getPageNext","getPageIndicies","totalPages","getPageWindowMinIndex","Math","floor","getPageWindowMaxIndex","hasPages","onFirstPage","onLastPage","onPageIndex","index","hidePageIndex","showDots","clickPageNo","page","pageChange","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","xs","sm","md","lg","xl","LayoutConfig","ServerConfig","DEFAULT_MEDIA_FORMAT","MediaService","layoutConfig","mediaFormats","threshold","breakpoints","BREAKPOINT","getImageUrl","getBaseUrl","getMedia","container","format","alt","src","getMainImage","srcset","getSrcSet","getAlt","media","altText","reduce","set","backend","baseUrl","occ","OccConfig","MediaComponent","mediaService","loaded","isInitialized","isLoading","isMissing","handleMissing","loadHandler","errorHandler","MediaModule","SpinnerComponent","SpinnerModule","I18nModule","GlobalMessageComponent","globalMessageService","messageType","GlobalMessageType","messages$","clear","remove","GlobalMessageService","GlobalMessageComponentModule","HttpClientModule","GlobalMessageModule","forRoot","LanguageCurrencyComponent","CmsComponentData","LABELS","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","context","getService","service","getAll","items","getContext","ctx","forEach","getOptionLabel","of","getActiveItem","getLabel","setActive","take","getInjectedService","data$","data","nativeName","symbol","isocode","decorators","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","cmsComponents","CMSSiteContextComponent","useClass","deps","SiteContextModule","entryComponents","StarRatingComponent","el","change","initialRate","setRate","rating","force","style","saveRate","StarRatingModule","FormUtils","isNotValidField","formControlName","submitted","invalid","touched","dirty","PromotionsComponent","PromotionsModule","CartItemListComponent","isReadOnly","hasHeader","potentialProductPromotions","getPotentialProductPromotionsForItem","entryPromotions","_c","tslib_1.__values","_d","promotion","description","consumedEntries","_e","_f","consumedEntry","isConsumedByEntry","consumendEntryNumber","orderEntryNumber","entries","_b","CartItemComponent","compact","view","isProductOutOfStock","updateItem","removeItem","viewItem","OrderSummaryComponent","CartSharedModule","UrlModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","entries$","getEntries","cartLoaded$","getAllPromotionsForCart","cart","potentialOrderPromotions","appliedOrderPromotions","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","skipWhile","isEmpty","go","cxRoute","CartTotalsComponent","CartTotalsModule","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","CartModule","CartComponentModule","CheckoutConfig","CheckoutConfigService","checkoutConfig","routingConfigService","steps","checkout","getCheckoutStep","currentStepType","getCheckoutStepIndex","getNextCheckoutStepUrl","activatedRoute","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","routeName","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","snapshot","join","stepRoute","getRouteConfig","paths","findIndex","RoutingConfigService","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","defaultCheckoutConfig","id","name","CheckoutStepType","CheckoutGuard","router","parseUrl","Router","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","guards","AuthGuard","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","CheckoutProgressModule","CheckoutProgress","CheckoutDetailsService","checkoutService","cartId$","cartData","cartId","getCheckoutDetailsLoaded$","loadCheckoutDetails","shareReplay","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutService","ShippingAddressSetGuard","checkoutDetailsService","checkoutConfigService","serverConfig","checkoutStep","production","console","warn","deliveryAddress","keys","DeliveryModeComponent","mode","deliveryModeId","Validators","required","checkoutStepUrlNext","checkoutStepUrlPrevious","changedOption","supportedDeliveryModes$","getSupportedDeliveryModes","selectedDeliveryMode$","getSelectedDeliveryMode","loadSupportedDeliveryModes","deliveryMode","currentDeliveryModeId","changeMode","setDeliveryMode","deliveryModeSub","back","ngOnDestroy","unsubscribe","ActivatedRoute","DeliveryModeModule","CheckoutDeliveryMode","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","delete","setDefault","send","edit","CardModule","DeliveryModeSetGuard","BillingAddressFormComponent","countrySelected","country","billingAddress","BillingAddressFormModule","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","userService","months","years","sameAsShippingAddress","goBack","closeForm","addPaymentInfo","payment","defaultPayment","accountHolderName","cardNumber","cardType","expiryMonth","expiryYear","cvn","firstName","lastName","line1","line2","town","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","checkboxSub","showSameAsShippingAddressCheckbox","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","clearAddressVerificationResults","decision","add","MSG_TYPE_ERROR","openSuggestedAddress","year","Date","getFullYear","j","toString","toggleDefaultPaymentMethod","paymentSelected","card","monthSelected","month","yearSelected","toggleSameAsShippingAddress","isContinueButtonDisabled","combineLatest","address","getAddressCardContent","region","textBold","text","phone","suggestedAddressModalRef","result","then","catch","verifyAddress","paymentDetails","UserService","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","isLoading$","getPaymentMethodsLoading","loadPaymentMethods","existingPaymentMethods$","getPaymentMethods","getPaymentDetailsSub","paymentInfo","field","clearCheckoutStep","selectedPayment","getCardContent","translate","textExpires","textUseThisPayment","textDefaultPaymentMethod","textSelected","title","img","getCardIcon","actions","header","paymentMethodSelected","showNewPaymentForm","hideNewPaymentForm","newPayment","addNewPaymentMethod","getDeliveryAddressSub","createPaymentDetails","setPaymentDetails","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","tAndCToggler","toggleTAndC","placeOrder","placeOrderSubscription","getOrderDetails","order","PlaceOrderModule","CheckoutModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","deliveryAddress$","paymentDetails$","deliveryMode$","selected","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","selectedCountry$","BehaviorSubject","showCancelBtn","submitAddress","backToAddress","defaultAddress","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","regions$","getRegions","regions","regionControl","errors","some","subject","addressData","patchValue","regionSelected","titleSelected","toggleDefaultAddress","AddressFormModule","ShippingAddressComponent","newAddressFormManuallyOpened","cards","selectedAddress$","goTo","getAddressesLoading","existingAddresses$","getAddresses","cards$","asObservable","addresses","textDefaultShippingAddress","textShipToThisAddress","loadDetails","loadAddresses","setAddressSub","setAddress","goNext","selectedAddressSub","addressSelected","addAddress","newAddress","createAndSetAddress","setDeliveryAddress","addNewAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","BreakpointService","window","fromEvent","startWith","getBreakpoint","innerWidth","distinctUntilChanged","windowWidth","breakpoint","getClosest","getSize","reverse","br","nativeWindow","defaultLayoutConfig","layoutSlots","slots","navigation","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","SearchResultsListPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","HamburgerMenuService","isExpanded","events","NavigationStart","toggle","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","REPLACE","BEFORE","AFTER","OutletService","templatesRefs","templatesRefsBefore","templatesRefsAfter","outlet","position","OutletPosition","templateRef","OutletRefDirective","tpl","outletService","cxOutletRef","cxOutletPos","TemplateRef","OutletRefModule","OutletStyleService","templateRefs","elem","OutletDirective","vcr","outletStyleService","_context","nodes","renderTemplate","renderStyleLink","cxOutlet","ref","createEmbeddedView","$implicit","rootNodes","styleElement","parentElement","node","HTMLElement","shadowRoot","ViewContainerRef","OutletModule","StyleRefDirective","element","cssOutletService","cxCssRef","StyleRefModule","CustomFormValidators","emailDomainValidator","control","match","InvalidEmail","emailValidator","passwordValidator","InvalidPassword","LoginFormComponent","auth","authRedirectService","userId","password","login","authorize","sub","getUserToken","access_token","redirect","AuthService","AuthRedirectService","CmsModule","defaultCmsModuleConfig","CmsCoreModule","CmsConfig","LoginFormModule","UserModule","ReturningCustomerLoginComponent","NotAuthGuard","LoginComponentService","_isLogin","LoginComponent","loginService","token","isLogin","load","ComponentWrapperDirective","componentMapper","cmsService","dynamicAttributeService","platformId","shouldRenderComponent","isWebComponent","cxComponentWrapper","flexType","launchWebComponent","launchComponent","isSSR","isPlatformServer","isComponentDisabledInSSR","disableSSR","factory","getComponentFactoryByCode","cmpRef","createComponent","getInjectorForComponent","detectChanges","isLaunchInSmartEdit","addSmartEditContract","location","__awaiter","_arguments","P","generator","Promise","resolve","reject","fulfilled","rejected","initWebComponent","elementName","webElement","cxApi","CxApiService","getCmsDataForComponent","uid","getComponentData","configProviders","useValue","parent","addDynamicAttributes","properties","destroy","removeChild","ComponentMapperService","CmsService","DynamicAttributeService","Inject","PLATFORM_ID","PageComponentModule","PageSlotComponent","position$","slot$","getContentSlot","slot","addSmartEditSlotClass","components$","components","a","addComponentClass","addClass","PageSlotModule","LoginModule","LogoutGuard","cms","routing","semanticPathService","logout","hasPage","PageType","CONTENT_PAGE","SemanticPathService","cartComponents","emptyCartText","typeCode","defaultCartPageConfig","ignoreBackend","pageId","EmptyCartMiddleContent","componentIds","headerComponents","LanguageComponent","CurrencyComponent","BreadcrumbComponent","Logo","mime","urlLink","SearchBox","MiniCart","CategoryNavigationComponent","navigationNode","children","itemId","itemSuperType","itemType","defaultPageHeaderConfig","PreHeader","SiteContext","SiteLinks","SiteLogo","SiteLogin","NavigationBar","BottomHeaderSlot","defaultPdpComponents","CMSProductImages","defaultPdpSlots","ProductDetails","PageLayoutService","breakpointService","warnLogMessages","logSlots","getSlots","section","breakpoint$","page$","getSlotConfig","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","pageTemplateConfig","getSlotConfigForSection","getResponsiveSlotConfig","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","splice","indexOf","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","layoutName$","templateName$","styleClass","slots$","cls","currentClass","removeClass","PageLayoutModule","ɵ0","LogoutModule","forChild","path","component","RegisterComponent","userRegistrationForm","email","passwordconf","newsletter","termsandconditions","requiredTrue","validator","matchPassword","submit","userRegisterFormData","register","subscription","globalMessageEntities","message","ac","NotEqual","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","CmsMappingService","isComponentEnabled","getRoutesForComponents","componentTypes","routes","componentTypes_1","componentTypes_1_1","componentType","getRoutesForComponent","getGuardsForComponents","Set","componentTypes_2","componentTypes_2_1","getGuardsForComponent","guard","from","getI18nKeysForComponents","i18nKeys","componentTypes_3","componentTypes_3_1","getI18nKeysForComponent","mappingConfig","childRoutes","CmsGuardsService","cmsMapping","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isFunction","wrapIntoObservable","isObservable","isPromise","obj","first","Error","endWith","CmsI18nService","translationChunk","loadChunksForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesService","cmsRouteExist","isCmsDrivenRoute","routePath","substr","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","componentRoutes","updateRouting","navigateByUrl","newRoute","resetConfig","CmsPageGuard","cmsRoutes","cmsI18n","cmsGuards","getNextPageContext","withLatestFrom","resolveCmsPageLogic","handleNotFoundPage","getPageComponentTypes","notFoundCmsPageContext","hasNotFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","guardName","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","MSG_TYPE_CONFIRMATION","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","_super","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","RegistrationOptions","useFactory","APP_INITIALIZER","cmsRoute","addCmsRoute","ɵ0$1","CmsRouteModule","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","htmlLangProvider","setHtmlLangAttribute","LanguageService","languageService","lang","documentElement","initSeoService","SeoModule","StorefrontComponent","isExpanded$","navigateSubscription","isNavigating","val","startNavigating","stopNavigating","collapseMenu","MainModule","layoutModules","LayoutModule","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","split","tab","select","tabNum","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","AddressBookComponent","showAddAddressForm","showEditAddressForm","addresses$","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","AddressCardComponent","editEvent","openEditFormEvent","setAddressAsDefault","deleteAddress","deleteUserAddress","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","authService","translationService","Subscription","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","success","onSuccess","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ConsentManagementFormComponent","consentChanged","consentGiven","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","onConsentChange","given","ConsentManagementComponent","subscriptions","loading$","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","getConsents","templateList","consentsExists","loadConsents","resetGiveConsentProcessState","getGiveConsentResultSuccess","onConsentGivenSuccess","resetWithdrawConsentProcessState","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","giveConsent","version","withdrawConsent","onDone","ConsentManagementModule","ForgotPasswordComponent","submited","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","OrderDetailsService","orderCode$","routingData","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","bufferSize","refCount","OrderDetailHeadlineComponent","orderDetailsService","order$","OrderDetailItemsComponent","getConsignmentProducts","consignment","products","orderEntry","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","moduleComponents","OrderDetailsModule","ɵ0$2","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","orders","sortType","sort","isLoaded$","getOrderHistoryListLoaded","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","AccountOrderHistoryComponent","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDelete","textDeleteConfirmation","deleteMsg","deletePaymentMethod","paymentMethod","setEdit","setPaymentMethodAsDefault","userServiceSub","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","repassword","queryParams","isPasswordReset","reset","resetPassword","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","confirmEmail","matchEmail","isEmailConfirmNotValid","hasError","isNotValid","onSubmit","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitClicked","cancelled","oldPassword","newPassword","newPasswordConfirm","isPasswordConfirmNotValid","abstractControl","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","user","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","setCrumbs","title$","heading","crumbs$","textHome","breadcrumbs","BreadcrumbModule","CmsPageTitleModule","NavigationComponentService","createNavigation","getNavigationNode","nav","getNavigationEntryItems","createNode","nodeData","root","itemsList","superType","processChildren","rootUid","loadNavigationItems","child","addLinkToNode","createChildren","linkName","childNode","node$","styleClass$","NavigationUIComponent","flyout","isOpen","openNodes","NavigationEnd","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","getDepth","depth","NavigationComponent","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","HAS_SEARCH_RESULT_CLASS","SearchBoxComponentService","searchService","search","query","minCharactersBeforeRequest","displayProducts","pageSize","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","className","contains","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","launchSearchPage","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","ignoreCloseEvent","results$","config$","c","blur","avoidReopen","launchSearchResult","disableClose","HighlightPipe","transform","trim","Pipe","SearchBoxModule","ProductModule","SharedCarouselService","MAX_WIDTH","MAX_ITEM_SIZE","SPEED","itemSize$","activeItem$","activeItemWithDelay$","getActiveItemWithDelay","getItemSize","setItemSize","clientWidth","itemsPerPage","round","setItemAsActive","newActiveItem","itemSize","setItem","setPreviousItemAsActive","activeItem","setNextItemAsActive","delay","getDelayValue","ProductCarouselService","getTitle","fetchTitle","items$","fetchItems","productCodes","ProductCarouselComponent","productCarouselService","sharedCarouselService","ProductCarouselModule","ProductReferencesService","referenceService","routerService","getDisplayProductTitles","displayProductTitles$","JSON","parse","toLowerCase","fetchDisplayProductTitles","displayProductTitles","getDisplayProductPrices","displayProductPrices$","fetchDisplayProductPrices","displayProductPrices","getReferenceType","productReferenceTypes","getProductCode","getReferenceList","setReferenceList","referenceType","ProductReferenceService","ProductReferencesComponent","productReferencesService","ProductReferencesModule","WAITING_CLASS","ProductImagesComponent","product$","_imageContainer$","imageContainer$","images","PRIMARY","showImage","imageContainer","startWaiting","isMainImageContainer","currentContainer","zoom","clearWaitList","waiting","SUMMARY","TITLE","RATING","PRICE","SHARE","DESCRIPTION","ProductDetailsComponent","currentPageService","outlets","ProductDetailOutlets","ProductSummaryComponent","translatePipe","itemCount","getReviewsComponent","querySelector","getTabsComponent","getTabByLabel","tabsComponent","h3Elements","h3Element","innerHTML","clickTabIfInactive","click","showReviews","reviewsTabLabel","reviewsTab","reviewsComponent","scrollIntoView","reviewsTabAvailable","TranslatePipe","ProductDetailsModule","Grid","List","ProductViewComponent","modeChange","viewMode","newMode","ViewModes","ProductListComponent","productSearchService","searchConfig","gridMode$","createOptionsByUrlParams","categoryCode","brandCode","newConfig","itemPerPage","updateParams$","model$","searchResult","getCategoryTitle","categoryTitle","facetValueName","totalResults","viewPage","pageNumber","setGridMode","ProductSearchService","ProductFacetNavigationComponent","minPerFacet","collapsedFacets","showAllPerFacetMap","Map","queryCodec","HttpUrlEncodingCodec","facets","facet","visible","activeFacetValueCode","searchResult$","openFilterModal","ariaLabelledBy","toggleValue","decodeValue","showLess","facetName","updateShowAllPerFacetMap","showMore","showAll","isFacetCollapsed","has","toggleFacet","getVisibleFacetValues","values","slice","ProductGridItemComponent","ProductListItemComponent","ProductListModule","CMSProductListComponent","SearchResultsListComponent","ProductRefinementComponent","ProductAttributesComponent","ProductReviewsComponent","reviewService","isWritingReview","initialMaxListItems","reviews$","getByProductCode","resetReviewForm","maxListItems","initiateWriteReview","cancelWriteReview","setRating","reviewForm","submitReview","reviewFormControls","review","headline","comment","alias","reviewerName","ProductReviewService","ProductReviewsModule","ProductDetailsTabComponent","ProductDetailsTabModule","ProductTabsModule","ProductSpecsTabComponent","ProductReviewsTabComponent","ProductImagesModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationThankYouMessageComponent","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationTotalsComponent","OrderConfirmationGuard","orderDetails","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","CmsLibModule","CartPageComponent","CartPageModule","ProductDetailsPageComponent","suffixUrlMatcher","segments","_segmentGroup","cxSuffixUrlMatcher","marker","paramName","precedingParamName","markerIndex","findLastIndex","elements","predicate","isMarkerLastSegment","paramIndex","posParams","consumed","matcher","ProductDetailsPageModule","ɵ0$5","ɵ1$1","pageLabel","ɵ2","ɵ3","ProductListingPageModule","provideConfigFromMetaTags","provideConfigFactory","occServerConfigFromMetaTagFactory","mediaServerConfigFromMetaTagFactory","defaultStorefrontRoutesConfig","home","notFound","forgotPassword","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","paramsMapping","category","brand","termsAndConditions","defaultRoutingConfig","RoutingModule","CoreRoutingModule","StorefrontModule","ngModule","provideConfig","OccModule","StateModule","AuthModule","CxApiModule","SmartEditModule","PersonalizationModule","LANGUAGE","CURRENCY","defaultCmsContentConfig","cmsStructure","pages"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProductService, RoutingService, Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  getProduct(): Observable<Product> {\n    return this.routingService.getRouterState().pipe(\n      map(state => state.state.params['productCode']),\n      filter(productCode => !!productCode),\n      switchMap((productCode: string) => this.productService.get(productCode))\n    );\n  }\n}\n","export enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  TIMES = 'TIMES',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  PLUS = 'PLUS',\n  MINUS = 'MINUS',\n  RESET = 'RESET',\n}\n\nexport abstract class IconConfig {\n  icon?: {\n    /**\n     * Each icon type can be configured with a so-called symbol. The symbol will\n     * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n     * a font based icon. The following configuration would map to a fontawesome\n     * icon:\n     *\n     * icon: {\n     *   symbols: {\n     *     CART: 'fas fa-shopping-cart'\n     *   }\n     * }\n     */\n    symbols?: {\n      [ICON_TYPE: string]: string;\n    };\n\n    /**\n     * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n     * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n     * is used for the SVG xlink reference.\n     */\n    resources?: IconConfigResource[];\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: ICON_TYPE[];\n}\n\nexport enum IconResourceType {\n  SVG = 'svg',\n  LINK = 'link',\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      TIMES: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      MINUS: 'fas fa-minus',\n      PLUS: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(protected winRef: WindowRef, protected config: IconConfig) {}\n\n  /**\n   * Indicates whether the given icon type is configured to use SVG.\n   */\n  useSvg(iconType: ICON_TYPE): boolean {\n    return (\n      this.config.icon.resources &&\n      !!this.config.icon.resources.find(\n        res =>\n          res.types &&\n          res.type === IconResourceType.SVG &&\n          res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config has been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  getSvgPath(iconType: ICON_TYPE): string {\n    const svgResource = this.config.icon.resources.find(\n      res =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (resource && resource.url) {\n      if (!this.loadedResources.includes(resource.url)) {\n        this.loadedResources.push(resource.url);\n        const head = this.winRef.document.getElementsByTagName('head')[0];\n        const link = this.winRef.document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = resource.url;\n        head.appendChild(link);\n      }\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.icon.resources) {\n      return;\n    }\n\n    let resource = this.config.icon.resources.find(\n      res =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.icon.resources.find(\n        res => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  private getSymbol(iconType: ICON_TYPE | string) {\n    if (\n      this.config.icon &&\n      this.config.icon.symbols &&\n      this.config.icon.symbols[iconType]\n    ) {\n      return this.config.icon.symbols[iconType];\n    }\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n@Component({\n  selector: 'cx-icon',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The type of the icon which maps to the icon link\n   * in the svg icon sprite.\n   */\n  _type: ICON_TYPE;\n  @Input('type')\n  set type(type: ICON_TYPE) {\n    this._type = type;\n    this.addStyleClasses(type);\n  }\n\n  /**\n   * Keeps the given style classes so that we can\n   * clean them up when the icon changes\n   */\n  @HostBinding('class') styleClasses = '';\n\n  /**\n   * Style class names from the host element are taken into account\n   * when classes are set dynamically.\n   */\n  private staticStyleClasses: string;\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>\n  ) {}\n\n  /**\n   * Indicates whether the icon is configured to use SVG or not.\n   */\n  get useSvg(): boolean {\n    return this.iconLoader.useSvg(this._type);\n  }\n\n  /**\n   * Returns the path to the svg symbol. The path could include an\n   * external URL to an svg (sprite) file, but can also reference\n   * an existing SVG symbol in the DOM.\n   */\n  get svgPath(): string {\n    return this.iconLoader.getSvgPath(this._type);\n  }\n\n  /**\n   * Adds the style classes and the link resource (if availabe).\n   */\n  private addStyleClasses(type: ICON_TYPE) {\n    if (this.useSvg) {\n      return;\n    }\n\n    if (this.staticStyleClasses === undefined) {\n      this.staticStyleClasses = this.elementRef.nativeElement.classList.value\n        ? this.elementRef.nativeElement.classList.value + ' '\n        : '';\n    }\n\n    this.styleClasses =\n      this.staticStyleClasses + this.iconLoader.getStyleClasses(type);\n\n    this.iconLoader.addLinkResource(type);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\nimport { IconConfig } from './icon.model';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule, ConfigModule.withConfig(fontawesomeIconConfig)],\n  providers: [{ provide: IconConfig, useExisting: Config }],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Cart, CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n\n  quantity = 0;\n  firstUpdate = true;\n  showItemIncrLabel: boolean;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: CartService,\n    protected fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.entry$ = this.entry$.pipe(\n      tap(entry => {\n        if (entry) {\n          const { code } = entry.product;\n          if (!this.form.controls[code]) {\n            this.form.setControl(code, this.createEntryFormGroup(entry));\n          } else {\n            const entryForm = this.form.controls[code] as FormGroup;\n            entryForm.controls.quantity.setValue(entry.quantity);\n          }\n          this.form.markAsPristine();\n\n          // Announce in header if Add To Cart button has incremented product\n          this.showItemIncrLabel = this.firstUpdate && entry.quantity > 1;\n          // Any updates after the first will be flagged as false\n          this.firstUpdate = false;\n        }\n      })\n    );\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  removeEntry(item: OrderEntry): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n    this.dismissModal('Removed');\n  }\n\n  updateEntry({ item, updatedQuantity }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  private createEntryFormGroup(entry: OrderEntry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { CartService, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef, ModalService } from '../../../shared/components/modal/index';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit {\n  @Input() productCode: string;\n\n  @Input() showQuantity = true;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n\n  cartEntry$: Observable<OrderEntry>;\n\n  constructor(\n    protected cartService: CartService,\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    if (this.productCode) {\n      this.cartEntry$ = this.cartService.getEntry(this.productCode);\n      this.hasStock = true;\n    } else {\n      this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe(product => {\n          this.productCode = product.code;\n\n          if (\n            product.stock &&\n            product.stock.stockLevelStatus !== 'outOfStock' &&\n            product.stock.stockLevel > 0\n          ) {\n            this.maxQuantity = product.stock.stockLevel;\n            this.hasStock = true;\n          } else {\n            this.hasStock = false;\n          }\n\n          this.cartEntry$ = this.cartService.getEntry(this.productCode);\n\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    if (!this.productCode || this.quantity <= 0) {\n      return;\n    }\n    this.openModal();\n    this.cartService.addEntry(this.productCode, this.quantity);\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.cartService.getActive();\n    modalInstance.loaded$ = this.cartService.getLoaded();\n    modalInstance.quantity = this.quantity;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[cxAutoFocus]',\n})\nexport class AutoFocusDirective implements AfterViewInit {\n  constructor(private hostElement: ElementRef) {}\n\n  ngAfterViewInit() {\n    this.hostElement.nativeElement.focus();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AutoFocusDirective } from './auto-focus.directive';\n\n@NgModule({\n  declarations: [AutoFocusDirective],\n  exports: [AutoFocusDirective],\n})\nexport class AutoFocusDirectiveModule {}\n","import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[cxOnlyNumber]',\n})\nexport class OnlyNumberDirective {\n  previousValue = '';\n  integerUnsigned = '^[0-9]*$';\n  /**\n   * Class constructor\n   * @param hostElement\n   */\n  constructor(private hostElement: ElementRef, private renderer: Renderer2) {}\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('change')\n  onChange() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's change event\n   */\n  @HostListener('input')\n  onInput() {\n    this.validateValue(this.hostElement.nativeElement.value);\n  }\n\n  /**\n   * Event handler for host's paste event\n   * @param e\n   */\n  @HostListener('paste', ['$event'])\n  onPaste(e: ClipboardEvent) {\n    const value = e.clipboardData.getData('text/plain');\n    this.validateValue(value);\n    e.preventDefault();\n  }\n\n  /**\n   * Event handler for host's keyup event\n   * @param e\n   */\n  @HostListener('keyup', ['$event'])\n  onKeyUp(e: KeyboardEvent): void {\n    const value = e.target['value'];\n    this.validateValue(value);\n  }\n\n  /**\n   * Event handler for host's keydown event\n   * @param e\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(e: KeyboardEvent): void {\n    const originalValue: string = e.target['value'];\n    const key: string = this.getName(e);\n    const controlOrCommand = e.ctrlKey === true || e.metaKey === true;\n\n    // allowed keys apart from numeric characters\n    const allowedKeys = [\n      'Backspace',\n      'ArrowLeft',\n      'ArrowRight',\n      'Escape',\n      'Tab',\n    ];\n    // allow some non-numeric characters\n    if (\n      allowedKeys.includes(key) ||\n      // Allow: Ctrl+A and Command+A\n      (key === 'a' && controlOrCommand) ||\n      // Allow: Ctrl+C and Command+C\n      (key === 'c' && controlOrCommand) ||\n      // Allow: Ctrl+V and Command+V\n      (key === 'v' && controlOrCommand) ||\n      // Allow: Ctrl+X and Command+X\n      (key === 'x' && controlOrCommand)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n\n    // save value before keydown event\n    this.previousValue = originalValue;\n\n    // allow number characters only\n    const isNumber = new RegExp(this.integerUnsigned).test(key);\n    if (isNumber) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Test whether value is a valid number or not\n   * @param value\n   */\n  validateValue(value: string): void {\n    value = value.replace(/[^0-9]+/g, '');\n    this.renderer.setProperty(this.hostElement.nativeElement, 'value', value);\n  }\n\n  /**\n   * Get key's name\n   * @param e\n   */\n  getName(e: KeyboardEvent): string {\n    if (e.key) {\n      return e.key;\n    } else {\n      // for old browsers\n      if (e.keyCode && String.fromCharCode) {\n        switch (e.keyCode) {\n          case 8:\n            return 'Backspace';\n          case 9:\n            return 'Tab';\n          case 27:\n            return 'Escape';\n          case 37:\n            return 'ArrowLeft';\n          case 39:\n            return 'ArrowRight';\n          default:\n            return String.fromCharCode(e.keyCode);\n        }\n      }\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALUE_ACCESSOR,\n} from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\n\nconst COUNTER_CONTROL_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line */\n  useExisting: forwardRef(() => ItemCounterComponent),\n  multi: true,\n};\n\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  providers: [COUNTER_CONTROL_ACCESSOR],\n})\nexport class ItemCounterComponent\n  implements OnInit, ControlValueAccessor, OnChanges {\n  @ViewChild('itemCounterInput')\n  public input: ElementRef;\n  @ViewChild('incrementBtn')\n  public incrementBtn: ElementRef;\n  @ViewChild('decrementBtn')\n  public decrementBtn: ElementRef;\n\n  value = 0;\n  @Input()\n  step = 1;\n  @Input()\n  min: number;\n  @Input()\n  max: number;\n  @Input()\n  async = false;\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isValueChangeable = false;\n\n  @Output()\n  update = new EventEmitter<number>();\n\n  focus: boolean;\n\n  isValueOutOfRange = false;\n  inputValue: FormControl = new FormControl({\n    disabled: this.isValueChangeable,\n  });\n\n  ngOnInit() {\n    this.writeValue(this.min || 0);\n    this.inputValue.valueChanges.pipe(debounceTime(300)).subscribe(value => {\n      if (value) {\n        this.manualChange(Number(value));\n      }\n    });\n  }\n\n  ngOnChanges() {\n    if (this.cartIsLoading) {\n      this.inputValue.disable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    } else {\n      this.inputValue.enable({\n        onlySelf: true,\n        emitEvent: false,\n      });\n    }\n  }\n\n  constructor(private renderer: Renderer2) {}\n\n  onTouch: Function = () => {};\n  onModelChange: Function = (_rating: number) => {};\n\n  /**\n   * If value is too small it will be set to min, if is too big it will be set to max.\n   */\n  adjustValueInRange(incomingValue: number): number {\n    return incomingValue < this.min || !this.min\n      ? this.min\n      : incomingValue > this.max || !this.max\n      ? this.max\n      : incomingValue;\n  }\n\n  /**\n   * Update model value and refresh input\n   */\n  manualChange(newValue: number): void {\n    newValue = this.adjustValueInRange(newValue);\n    this.updateValue(newValue);\n    /* We use the value from the input, however, this value\n      is not the correct value that should be displayed. The correct value to display\n      is this.value, which the parent updates if the async call succeed. If the call\n      fails, then the input will need to display this.value, and not what the user\n      recently typed in */\n    this.renderer.setProperty(this.input.nativeElement, 'value', newValue);\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    const handlers = {\n      ArrowDown: () => this.decrement(),\n      ArrowUp: () => this.increment(),\n    };\n\n    if (handlers[event.code]) {\n      handlers[event.code]();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onBlur(event: FocusEvent): void {\n    this.focus = false;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus = true;\n    event.preventDefault();\n    event.stopPropagation();\n    this.onTouch();\n  }\n\n  /**\n   * Verify value that it can be incremented, if yes it does that.\n   */\n  increment(): void {\n    this.manualChange(this.value + this.step);\n    this.setFocus(true);\n  }\n\n  /**\n   * Verify value that it can be decremented, if yes it does that.\n   */\n  decrement(): void {\n    this.manualChange(this.value - this.step);\n    this.setFocus(false);\n  }\n\n  // ControlValueAccessor interface\n\n  registerOnTouched(fn: Function): void {\n    this.onTouch = fn;\n  }\n\n  registerOnChange(fn: Function): void {\n    this.onModelChange = fn;\n  }\n\n  writeValue(value: number): void {\n    this.value = value || this.min || 0;\n    this.onModelChange(this.value);\n  }\n\n  /**\n   * Set up new value for input and emit event outside\n   */\n  updateValue(updatedQuantity: number): void {\n    if (!this.async) {\n      // If the async flag is true, then the parent component is responsible for updating the form\n      this.writeValue(updatedQuantity);\n    }\n\n    // Additionally, we emit a change event, so that users may optionally do something on change\n    this.update.emit(updatedQuantity);\n    this.onTouch();\n  }\n\n  /**\n   * Determines which HTML element should have focus at a given time\n   */\n  setFocus(isIncremented: boolean): void {\n    if (this.isMaxOrMinValueOrBeyond()) {\n      this.input.nativeElement.focus();\n    } else if (isIncremented) {\n      this.incrementBtn.nativeElement.focus();\n    } else {\n      this.decrementBtn.nativeElement.focus();\n    }\n  }\n\n  isMaxOrMinValueOrBeyond(): boolean {\n    return this.value >= this.max || this.value <= this.min;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { OnlyNumberDirective } from '../../directives/only-number/only-number.directive';\nimport { ItemCounterComponent } from './item-counter/item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent, OnlyNumberDirective],\n  exports: [ItemCounterComponent],\n})\nexport class FormComponentsModule {}\n","import { Component, Input } from '@angular/core';\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent {\n  private readonly protocolRegex: RegExp = /^https?:\\/\\//i;\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  get routerUrl(): any[] {\n    if (typeof this.url === 'string') {\n      return [this.getAbsoluteUrl(this.url)];\n    }\n    return this.url;\n  }\n\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.protocolRegex.test(this.url);\n  }\n\n  private getAbsoluteUrl(url: string) {\n    return url.startsWith('/') ? this.url : '/' + this.url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\nconst PAGE_FIRST = 1;\nconst PAGE_WINDOW_SIZE = 3;\n\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  @Input() pagination: PaginationModel;\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  // Because pagination model uses indexes starting from 0,\n  // add 1 to get current page number\n  private getCurrentPageNumber() {\n    return this.pagination.currentPage + 1;\n  }\n\n  getPagePrevious(): number {\n    return this.getCurrentPageNumber() - 1;\n  }\n\n  getPageNext(): number {\n    return this.getCurrentPageNumber() + 1;\n  }\n\n  getPageIndicies(): Array<number> {\n    return Array(this.pagination.totalPages);\n  }\n\n  // Gets the minimum index of page numbers that can be shown by being within the page window range\n  getPageWindowMinIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n      PAGE_WINDOW_SIZE\n    );\n  }\n\n  // Gets the maximum index of page numbers that can be shown by being within the page window range\n  getPageWindowMaxIndex(): number {\n    return (\n      Math.floor(this.pagination.currentPage / PAGE_WINDOW_SIZE) *\n        PAGE_WINDOW_SIZE +\n      2\n    );\n  }\n\n  hasPages(): boolean {\n    return this.pagination.totalPages > 0;\n  }\n\n  onFirstPage(): boolean {\n    return this.pagination.currentPage === 0;\n  }\n\n  onLastPage(): boolean {\n    return this.pagination.currentPage === this.pagination.totalPages - 1;\n  }\n\n  onPageIndex(index: number): boolean {\n    return this.pagination.currentPage === index;\n  }\n\n  hidePageIndex(index: number): boolean {\n    return (\n      (this.getPageWindowMinIndex() > index ||\n        this.getPageWindowMaxIndex() < index) &&\n      (index > 0 && index < this.pagination.totalPages - 1)\n    );\n  }\n\n  showDots(index: number): boolean {\n    return (\n      this.hidePageIndex(index) &&\n      (index === this.getPageWindowMaxIndex() + 1 ||\n        index === this.getPageWindowMinIndex() - 1)\n    );\n  }\n\n  clickPageNo(page: number): number {\n    // Change page on valid index\n    if (\n      page >= PAGE_FIRST &&\n      page <= this.pagination.totalPages &&\n      page !== this.getCurrentPageNumber()\n    ) {\n      this.pageChange(page);\n      return page;\n    }\n\n    // Page stays the same on invalid index\n    return this.pagination.currentPage;\n  }\n\n  pageChange(page: number): void {\n    this.viewPageEvent.emit(page - 1);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent } from './pagination/pagination.component';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule],\n  declarations: [PaginationComponent, SortingComponent],\n  exports: [PaginationComponent, SortingComponent],\n})\nexport class ListNavigationModule {}\n","import { ServerConfig } from '@spartacus/core';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breadpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\nexport abstract class LayoutConfig extends ServerConfig {\n  /** The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints. */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { OccConfig } from '@spartacus/core';\nimport { BREAKPOINT, LayoutConfig } from '../../../layout/config/layout-config';\nimport { Media, MediaFormats } from './media.model';\n\n/** the default format is used for browsers that do not support   */\nconst DEFAULT_MEDIA_FORMAT = 'tablet';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  constructor(\n    protected config: OccConfig,\n    protected layoutConfig: LayoutConfig\n  ) {}\n\n  private mediaFormats: MediaFormats[] = [\n    { code: 'mobile', threshold: this.layoutConfig.breakpoints[BREAKPOINT.xs] },\n    { code: 'tablet', threshold: this.layoutConfig.breakpoints[BREAKPOINT.sm] },\n    {\n      code: 'desktop',\n      threshold: this.layoutConfig.breakpoints[BREAKPOINT.md],\n    },\n    {\n      code: 'widescreen',\n      threshold: this.layoutConfig.breakpoints[BREAKPOINT.lg],\n    },\n  ];\n\n  getMedia(container, format?: string, alt?: string): Media {\n    return {\n      src: this.getMainImage(container, format),\n      srcset: this.getSrcSet(container),\n      alt: alt || this.getAlt(container, format),\n    };\n  }\n\n  private getMainImage(media, format?: string): string {\n    if (media && media[format || DEFAULT_MEDIA_FORMAT]) {\n      return this.getImageUrl(media[format || DEFAULT_MEDIA_FORMAT].url);\n    } else if (media && media.url) {\n      return this.getImageUrl(media.url);\n    } else {\n      return null;\n    }\n  }\n\n  private getAlt(media, format?: string): string {\n    if (!media) {\n      return undefined;\n    } else if (media[format || DEFAULT_MEDIA_FORMAT]) {\n      return media[format || DEFAULT_MEDIA_FORMAT].altText;\n    } else if (media.altText) {\n      return media.altText;\n    }\n  }\n\n  /**\n   * builds a set of images aligned with the breakpoints\n   */\n  private getSrcSet(media): string {\n    if (!media) {\n      return undefined;\n    }\n    const srcset = this.mediaFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.getImageUrl(media[format.code].url)} ${\n          format.threshold\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  private getImageUrl = (url: string) => {\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  };\n\n  private getBaseUrl(): string {\n    return (\n      this.config.backend.media.baseUrl || this.config.backend.occ.baseUrl || ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: any;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  private create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  private handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n  styleUrls: ['./global-message.component.scss'],\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { GlobalMessageModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    IconModule,\n    I18nModule,\n    GlobalMessageModule.forRoot(),\n  ],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"LANGUAGE\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"CURRENCY\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap(items =>\n        this.getContext(context).pipe(\n          switchMap(ctx => {\n            items.forEach(item => {\n              return (item.label = this.getOptionLabel(item, ctx));\n            });\n            return of(items);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map(ctx => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe(service => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map(ctx => this.getInjectedService(ctx)),\n      filter(Boolean)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(map(data => data.context));\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ContextServiceMap,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          selector: 'cx-site-context-selector',\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          selector: 'cx-language-currency-selector',\n        },\n      },\n    }),\n    SiteContextModule,\n    IconModule,\n  ],\n  providers: [SiteContextComponentService],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.el.nativeElement.style.setProperty(\n        '--star-fill',\n        value || this.initialRate\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { FormGroup } from '@angular/forms';\n\n/**\n * Utility class when working with forms.\n */\nexport class FormUtils {\n  /**\n   *\n   * Checks is the `formControlName` field valid in the provided `form`.\n   *\n   * If it's NOT valid, the method returns `true`.\n   *\n   * @param form a form whose field to check\n   * @param formControlName a field name\n   * @param submitted is the form submitted\n   */\n  static isNotValidField(\n    form: FormGroup,\n    formControlName: string,\n    submitted: boolean\n  ): boolean {\n    return (\n      form.get(formControlName).invalid &&\n      (submitted ||\n        (form.get(formControlName).touched && form.get(formControlName).dirty))\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { CartService, PromotionResult } from '@spartacus/core';\nimport { Item } from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n})\nexport class CartItemListComponent implements OnInit {\n  @Input()\n  isReadOnly = false;\n\n  @Input()\n  hasHeader = true;\n\n  @Input()\n  items: Item[] = [];\n\n  @Input()\n  potentialProductPromotions: PromotionResult[] = [];\n\n  @Input()\n  cartIsLoading = false;\n\n  form: FormGroup = this.fb.group({});\n\n  constructor(protected cartService: CartService, protected fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.items.forEach(item => {\n      const { code } = item.product;\n      if (!this.form.controls[code]) {\n        this.form.setControl(code, this.createEntryFormGroup(item));\n      } else {\n        const entryForm = this.form.controls[code] as FormGroup;\n        entryForm.controls.quantity.setValue(item.quantity);\n      }\n    });\n  }\n\n  removeEntry(item: Item): void {\n    this.cartService.removeEntry(item);\n    delete this.form.controls[item.product.code];\n  }\n\n  updateEntry({\n    item,\n    updatedQuantity,\n  }: {\n    item: any;\n    updatedQuantity: number;\n  }): void {\n    this.cartService.updateEntry(item.entryNumber, updatedQuantity);\n  }\n\n  getPotentialProductPromotionsForItem(item: Item): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (\n      this.potentialProductPromotions &&\n      this.potentialProductPromotions.length > 0\n    ) {\n      for (const promotion of this.potentialProductPromotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private createEntryFormGroup(entry): FormGroup {\n    return this.fb.group({\n      entryNumber: entry.entryNumber,\n      quantity: entry.quantity,\n    });\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumendEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumendEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumendEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input()\n  compact = false;\n  @Input()\n  item: Item;\n  @Input()\n  potentialProductPromotions: any[];\n  @Input()\n  isReadOnly = false;\n  @Input()\n  cartIsLoading = false;\n\n  @Output()\n  remove = new EventEmitter<any>();\n  @Output()\n  update = new EventEmitter<any>();\n  @Output()\n  view = new EventEmitter<any>();\n\n  @Input()\n  parent: FormGroup;\n\n  ngOnInit() {}\n\n  isProductOutOfStock(product) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  updateItem(updatedQuantity: number) {\n    this.update.emit({ item: this.item, updatedQuantity });\n  }\n\n  removeItem() {\n    this.remove.emit(this.item);\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { FormComponentsModule, MediaModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    FormComponentsModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { AutoFocusDirectiveModule } from '../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { FormComponentsModule, SpinnerModule } from '../../../shared/index';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: { selector: 'cx-add-to-cart' },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n    FormComponentsModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\nimport { CartService, Cart, OrderEntry } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n    this.cartLoaded$ = this.cartService.getLoaded();\n  }\n\n  getAllPromotionsForCart(cart: Cart): Cart[] {\n    const potentialPromotions = cart.potentialOrderPromotions || [];\n    const appliedPromotions = cart.appliedOrderPromotions || [];\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          selector: 'cx-cart-details',\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { skipWhile, map, switchMap } from 'rxjs/operators';\n\nimport { CartService, RoutingService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    private cartService: CartService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.cartService.getLoaded().pipe(\n      skipWhile(loaded => !loaded),\n      switchMap(() => this.cartService.getActive()),\n      map(cart => {\n        if (this.cartService.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Cart, OrderEntry, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService\n      .getEntries()\n      .pipe(filter(entries => entries.length > 0));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  UrlModule,\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartTotalsComponent } from './cart-totals.component';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          selector: 'cx-cart-totals',\n        },\n      },\n    }),\n    CartSharedModule,\n    I18nModule,\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.cartService\n    .getActive()\n    .pipe(map(cart => cart.deliveryItemsQuantity || 0));\n\n  total$: Observable<string> = this.cartService.getActive().pipe(\n    filter(cart => !!cart.totalPrice),\n    map(cart => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected cartService: CartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CartModule,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: { selector: 'cx-mini-cart' },\n      },\n    }),\n    UrlModule,\n    IconModule,\n    I18nModule,\n  ],\n  declarations: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\n\n@NgModule({\n  imports: [\n    CartModule,\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n  ],\n  exports: [\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n  ],\n})\nexport class CartComponentModule {}\n","import { CheckoutStep } from '../model/checkout-step.model';\n\nexport abstract class CheckoutConfig {\n  checkout?: {\n    steps: Array<CheckoutStep>;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { CheckoutConfig } from './config/checkout-config';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutStep, CheckoutStepType } from './model/checkout-step.model';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable()\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute) {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  private getStepUrlFromActivatedRoute(activatedRoute: ActivatedRoute) {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string) {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutConfig } from './checkout-config';\nimport { CheckoutStepType } from '../model/checkout-step.model';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\n\nimport { CheckoutConfig } from '../config/checkout-config';\nimport { Observable, of } from 'rxjs';\nimport { RoutingConfigService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    private config: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.config.checkout.steps[0].routeName\n        ).paths[0]\n      )\n    );\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AuthGuard, CmsConfig, Config, ConfigModule } from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          selector: 'cx-checkout-orchestrator',\n          guards: [AuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CartService, Cart } from '@spartacus/core';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          selector: 'cx-checkout-order-summary',\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          selector: 'cx-checkout-progress-mobile-bottom',\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport {\n  RoutingService,\n  CartService,\n  Cart,\n  RoutingConfigService,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected cartService: CartService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.cartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          selector: 'cx-checkout-progress-mobile-top',\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap(router => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  Config,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UrlModule,\n    I18nModule,\n    RouterModule,\n    ConfigModule.withConfig(defaultCheckoutConfig),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          selector: 'cx-checkout-progress',\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [{ provide: CheckoutConfig, useExisting: Config }],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n  filter,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private cartService: CartService\n  ) {\n    this.cartId$ = this.cartService.getActive().pipe(\n      map(cartData => cartData.code),\n      filter(cartId => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap(cartId => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile(loaded => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutService.getSelectedDeliveryModeCode())\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ServerConfig, Address, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.SHIPPING_ADDRESS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\nimport { DeliveryMode, CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  changedOption: boolean;\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.changedOption = false;\n\n    this.supportedDeliveryModes$ = this.checkoutService.getSupportedDeliveryModes();\n    this.selectedDeliveryMode$ = this.checkoutService.getSelectedDeliveryMode();\n\n    this.checkoutService.loadSupportedDeliveryModes();\n\n    this.selectedDeliveryMode$\n      .pipe(\n        map((deliveryMode: DeliveryMode) =>\n          deliveryMode && deliveryMode.code ? deliveryMode.code : null\n        )\n      )\n      .subscribe(code => {\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          this.currentDeliveryModeId = code;\n        }\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.changedOption = true;\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    if (this.changedOption) {\n      this.checkoutService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n\n    this.deliveryModeSub = this.checkoutService\n      .getSelectedDeliveryMode()\n      .subscribe(data => {\n        if (data && data.code === this.currentDeliveryModeId) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n      });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          selector: 'cx-delivery-mode',\n          guards: [AuthGuard, CartNotEmptyGuard, ShippingAddressSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss'],\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { CardComponent } from './card.component';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutConfigService } from '../checkout-config.service';\nimport { ServerConfig, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.DELIVERY_MODE\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Country } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-billing-address-form',\n  templateUrl: './billing-address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BillingAddressFormComponent {\n  @Input()\n  billingAddress: FormGroup;\n\n  @Input()\n  countries$: Observable<Country[]>;\n\n  countrySelected(country: Country): void {\n    this.billingAddress['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { I18nModule } from '@spartacus/core';\nimport { BillingAddressFormComponent } from './billing-address-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    I18nModule,\n  ],\n  declarations: [BillingAddressFormComponent],\n  exports: [BillingAddressFormComponent],\n})\nexport class BillingAddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\ntype monthType = { id: number; name: string };\ntype yearType = { id: number; name: number };\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private checkboxSub: Subscription;\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: monthType[] = [];\n  years: yearType[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  sameAsShippingAddress = true;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  addPaymentInfo = new EventEmitter<any>();\n\n  payment: FormGroup = this.fb.group({\n    defaultPayment: [false],\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    cardType: this.fb.group({\n      code: ['', Validators.required],\n    }),\n    expiryMonth: ['', Validators.required],\n    expiryYear: ['', Validators.required],\n    cvn: ['', Validators.required],\n  });\n\n  billingAddress: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    country: this.fb.group({\n      isocode: ['', Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userService.getAllBillingCountries().pipe(\n      tap(countries => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutService.getCardTypes().pipe(\n      tap(cardTypes => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutService.getDeliveryAddress();\n\n    this.checkboxSub = this.showSameAsShippingAddressCheckbox().subscribe(\n      (shouldShowCheckbox: boolean) => {\n        // this operation makes sure the checkbox is not checked if not shown and vice versa\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      }\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n    for (let i = 0; i < 10; i++) {\n      this.years.push({ id: i + 1, name: year + i });\n    }\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push({ id: j, name: '0' + j.toString() });\n      } else {\n        this.months.push({ id: j, name: j.toString() });\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.payment.value.defaultPayment = !this.payment.value.defaultPayment;\n  }\n\n  paymentSelected(card: CardType): void {\n    this.payment['controls'].cardType['controls'].code.setValue(card.code);\n  }\n\n  monthSelected(month: monthType): void {\n    this.payment['controls'].expiryMonth.setValue(month.name);\n  }\n\n  yearSelected(year: yearType): void {\n    this.payment['controls'].expiryYear.setValue(year.name);\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  isContinueButtonDisabled(): boolean {\n    return (\n      this.payment.invalid ||\n      (!this.sameAsShippingAddress && this.billingAddress.invalid)\n    );\n  }\n\n  /**\n   * Check if the shipping address can also be a billing address\n   *\n   * @memberof PaymentFormComponent\n   */\n  showSameAsShippingAddressCheckbox(): Observable<boolean> {\n    return combineLatest(this.countries$, this.shippingAddress$).pipe(\n      map(([countries, address]) => {\n        return !!countries.filter(\n          (country: Country): boolean =>\n            country.isocode === address.country.isocode\n        ).length;\n      })\n    );\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddress.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutService.verifyAddress(this.billingAddress.value);\n    }\n  }\n\n  next(): void {\n    this.addPaymentInfo.emit({\n      paymentDetails: this.payment.value,\n      billingAddress: this.sameAsShippingAddress\n        ? null\n        : this.billingAddress.value,\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.checkboxSub) {\n      this.checkboxSub.unsubscribe();\n    }\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { BillingAddressFormModule } from '../billing-address-form/billing-address-form.module';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    BillingAddressFormModule,\n    I18nModule,\n    IconModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingConfigService,\n  RoutingService,\n  TranslationService,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  newPaymentFormManuallyOpened = false;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  getPaymentDetailsSub: Subscription;\n  getDeliveryAddressSub: Subscription;\n  selectedPayment: PaymentDetails;\n  deliveryAddress: Address;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userService: UserService,\n    protected checkoutService: CheckoutService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingConfigService: RoutingConfigService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userService.getPaymentMethodsLoading();\n    this.userService.loadPaymentMethods();\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.existingPaymentMethods$ = this.userService.getPaymentMethods();\n    this.getPaymentDetailsSub = this.checkoutService\n      .getPaymentDetails()\n      .pipe(\n        filter(\n          paymentInfo => paymentInfo && Object.keys(paymentInfo).length !== 0\n        )\n      )\n      .subscribe(paymentInfo => {\n        if (!paymentInfo['hasError']) {\n          this.selectedPayment = paymentInfo;\n        } else {\n          Object.keys(paymentInfo).forEach(key => {\n            if (key.startsWith('InvalidField')) {\n              this.globalMessageService.add(\n                {\n                  key: 'paymentMethods.invalidField',\n                  params: { field: paymentInfo[key] },\n                },\n                GlobalMessageType.MSG_TYPE_ERROR\n              );\n            }\n          });\n          this.checkoutService.clearCheckoutStep(3);\n        }\n      });\n  }\n\n  getCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          textExpires,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          const card: Card = {\n            title: payment.defaultPayment ? textDefaultPaymentMethod : '',\n            textBold: payment.accountHolderName,\n            text: [payment.cardNumber, textExpires],\n            img: this.getCardIcon(payment.cardType.code),\n            actions: [{ name: textUseThisPayment, event: 'send' }],\n          };\n          if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n            card.header = textSelected;\n          }\n          return card;\n        }\n      )\n    );\n  }\n\n  paymentMethodSelected(paymentDetails: PaymentDetails) {\n    this.selectedPayment = paymentDetails;\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  next(): void {\n    this.addPaymentInfo({\n      payment: this.selectedPayment,\n      newPayment: false,\n    });\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  addNewPaymentMethod({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress: Address;\n  }): void {\n    this.getDeliveryAddressSub = this.checkoutService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        billingAddress = address;\n      });\n    this.addPaymentInfo({\n      payment: paymentDetails,\n      billingAddress,\n      newPayment: true,\n    });\n  }\n\n  addPaymentInfo({\n    newPayment,\n    payment,\n    billingAddress,\n  }: {\n    newPayment: boolean;\n    payment: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    payment.billingAddress = billingAddress\n      ? billingAddress\n      : this.deliveryAddress;\n\n    if (newPayment) {\n      this.checkoutService.createPaymentDetails(payment);\n      this.checkoutService.clearCheckoutStep(3);\n    }\n\n    // if the selected payment is the same as the cart's one\n    if (this.selectedPayment && this.selectedPayment.id === payment.id) {\n      this.checkoutService.setPaymentDetails(payment);\n      this.checkoutService.clearCheckoutStep(3);\n    }\n\n    this.getPaymentDetailsSub = this.checkoutService\n      .getPaymentDetails()\n      .subscribe(data => {\n        if (data.accountHolderName && data.cardNumber) {\n          this.routingService.go(this.checkoutStepUrlNext);\n\n          return;\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.getPaymentDetailsSub) {\n      this.getPaymentDetailsSub.unsubscribe();\n    }\n    if (this.getDeliveryAddressSub) {\n      this.getDeliveryAddressSub.unsubscribe();\n    }\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          selector: 'cx-payment-method',\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { CheckoutService, RoutingService } from '@spartacus/core';\n\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  tAndCToggler = false;\n  placeOrderSubscription: Subscription;\n\n  constructor(\n    private checkoutService: CheckoutService,\n    private routingService: RoutingService\n  ) {}\n\n  toggleTAndC(): void {\n    this.tAndCToggler = !this.tAndCToggler;\n  }\n\n  placeOrder(): void {\n    this.checkoutService.placeOrder();\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter(order => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CheckoutModule,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          selector: 'cx-place-order',\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ServerConfig, RoutingConfigService } from '@spartacus/core';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router,\n    private serverConfig: ServerConfig\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && !this.serverConfig.production) {\n      console.warn(\n        `Missing step with type ${\n          CheckoutStepType.PAYMENT_DETAILS\n        } in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map(paymentDetails =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  Country,\n  DeliveryMode,\n  PaymentDetails,\n  Cart,\n  OrderEntry,\n  UserService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected userService: UserService,\n    protected cartService: CartService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n    this.entries$ = this.cartService.getEntries();\n    this.deliveryAddress$ = this.checkoutService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutService.getPaymentDetails();\n\n    this.deliveryMode$ = this.checkoutService.getSelectedDeliveryMode().pipe(\n      tap((selected: DeliveryMode) => {\n        if (selected === null) {\n          this.checkoutService.loadSupportedDeliveryModes();\n        }\n      })\n    );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          selector: 'cx-review-submit',\n          guards: [\n            AuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subscription, BehaviorSubject } from 'rxjs';\nimport { map, tap, switchMap } from 'rxjs/operators';\n\nimport {\n  Address,\n  AddressValidation,\n  CheckoutService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserService,\n} from '@spartacus/core';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  address: FormGroup = this.fb.group({\n    defaultAddress: [false],\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    protected checkoutService: CheckoutService,\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userService.getDeliveryCountries().pipe(\n      tap(countries => {\n        if (Object.keys(countries).length === 0) {\n          this.userService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map(titles => {\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap(country => this.userService.getRegions(country)),\n      tap(regions => {\n        const regionControl = this.address.get('region.isocode');\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results === 'FAIL') {\n          this.checkoutService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.address.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(error => error.subject === 'titleCode')\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData) {\n      this.address.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n  }\n\n  titleSelected(title: Title): void {\n    this.address['controls'].titleCode.setValue(title.code);\n  }\n\n  countrySelected(country: Country): void {\n    this.address['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.address['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.address['controls'].defaultAddress.setValue(\n      this.address.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    this.checkoutService.verifyAddress(this.address.value);\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.address.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(address => {\n          this.checkoutService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.address.value.titleCode,\n                phone: this.address.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.address.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { AutoFocusDirectiveModule } from '../../../../../shared/directives/auto-focus/auto-focus.directive.module';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    AutoFocusDirectiveModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent],\n})\nexport class AddressFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Address,\n  CartService,\n  CheckoutService,\n  RoutingService,\n  TranslationService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../checkout-config.service';\nimport { CheckoutStepType } from '../../model/checkout-step.model';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  cards: Card[] = [];\n  isLoading$: Observable<boolean>;\n  selectedAddress: Address;\n  goTo: CheckoutStepType;\n  setAddress: Address;\n  setAddressSub: Subscription;\n  selectedAddressSub: Subscription;\n  selectedAddress$: BehaviorSubject<Address> = new BehaviorSubject<Address>(\n    null\n  );\n  cards$: Observable<CardWithAddress[]>;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userService: UserService,\n    protected cartService: CartService,\n    protected routingService: RoutingService,\n    protected checkoutService: CheckoutService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.goTo = null;\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = 'cart';\n\n    this.isLoading$ = this.userService.getAddressesLoading();\n    this.existingAddresses$ = this.userService.getAddresses();\n    this.cards$ = combineLatest(\n      this.existingAddresses$,\n      this.selectedAddress$.asObservable(),\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected')\n    ).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          return addresses.map(address => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    this.cartService.loadDetails();\n    this.userService.loadAddresses();\n\n    this.setAddressSub = this.checkoutService\n      .getDeliveryAddress()\n      .subscribe(address => {\n        this.setAddress = address;\n        this.selectedAddress$.next(address);\n        if (this.goTo) {\n          this.goNext();\n          this.goTo = null;\n        }\n      });\n    this.selectedAddressSub = this.selectedAddress$.subscribe(address => {\n      this.selectedAddress = address;\n    });\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n    const card: Card = {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n\n    this.cards.push(card);\n\n    return card;\n  }\n\n  addressSelected(address: Address): void {\n    this.selectedAddress$.next(address);\n  }\n\n  next(): void {\n    this.addAddress({ address: this.selectedAddress, newAddress: false });\n  }\n\n  addAddress({\n    newAddress,\n    address,\n  }: {\n    newAddress: boolean;\n    address: Address;\n  }): void {\n    if (newAddress) {\n      this.checkoutService.createAndSetAddress(address);\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      return;\n    }\n    if (\n      this.setAddress &&\n      this.selectedAddress &&\n      this.setAddress.id === this.selectedAddress.id\n    ) {\n      this.goNext();\n    } else {\n      this.goTo = CheckoutStepType.DELIVERY_MODE;\n      this.checkoutService.setDeliveryAddress(address);\n    }\n  }\n\n  addNewAddress(address: Address): void {\n    this.addAddress({ address, newAddress: true });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goBack: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goBack) {\n      this.back();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  ngOnDestroy(): void {\n    if (this.setAddressSub) {\n      this.setAddressSub.unsubscribe();\n    }\n    if (this.selectedAddressSub) {\n      this.selectedAddressSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          selector: 'cx-shipping-address',\n          guards: [AuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutModule } from '@spartacus/core';\nimport { CartComponentModule } from '../cart/cart.module';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartComponentModule,\n    CheckoutModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n  // @todo: should we keep below provider here?\n  providers: [CheckoutConfigService],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  startWith,\n} from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return fromEvent(this.window, 'resize').pipe(\n      debounceTime(300),\n      startWith({ target: this.window }),\n      map(event => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth < this.getSize(BREAKPOINT.xs)\n      ? BREAKPOINT.xs\n      : this.breakpoints.reverse().find(br => windowWidth >= this.getSize(br));\n  }\n\n  protected getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints ? this.config.breakpoints[breakpoint] : 576;\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { LayoutConfig } from './layout-config';\n\nexport const defaultLayoutConfig: LayoutConfig = {\n  breakpoints: {\n    xs: 576,\n    sm: 768,\n    md: 992,\n    lg: 1200,\n  },\n  layoutSlots: {\n    header: {\n      md: {\n        slots: [\n          'PreHeader',\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      xs: {\n        slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n      },\n    },\n    navigation: {\n      md: { slots: [] },\n      xs: {\n        slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n      },\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductListSlot', 'ProductLeftRefinements'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'SearchResultsListSlot',\n        'ProductLeftRefinements',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      slots: [\n        'TopHeaderSlot',\n        'ProductDetails',\n        'VariantSelectorSlot',\n        // 'AddToCart', // the add to cart is currently hard coded in the PDP component\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter(event => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: { selector: 'cx-hamburger-menu' },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService {\n  private templatesRefs = {};\n  private templatesRefsBefore = {};\n  private templatesRefsAfter = {};\n\n  add(\n    outlet: string,\n    template: TemplateRef<any>,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    if (position === OutletPosition.BEFORE) {\n      this.templatesRefsBefore[outlet] = template;\n    }\n    if (position === OutletPosition.REPLACE) {\n      this.templatesRefs[outlet] = template;\n    }\n    if (position === OutletPosition.AFTER) {\n      this.templatesRefsAfter[outlet] = template;\n    }\n  }\n\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): TemplateRef<any> {\n    let templateRef;\n    switch (position) {\n      case OutletPosition.BEFORE:\n        templateRef = this.templatesRefsBefore[outlet];\n        break;\n      case OutletPosition.AFTER:\n        templateRef = this.templatesRefsAfter[outlet];\n        break;\n      default:\n        templateRef = this.templatesRefs[outlet];\n    }\n    return templateRef;\n    // return this.templatesRefs[outlet] ? this.templatesRefs[outlet] : null;\n  }\n}\n","import { Directive, TemplateRef, Input, OnInit } from '@angular/core';\n\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable, ElementRef } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletStyleService {\n  private templateRefs = {};\n\n  add(outlet: string, elem: ElementRef<any>): void {\n    this.templateRefs[outlet] = elem;\n  }\n\n  get(outlet: string): ElementRef<any> {\n    return this.templateRefs[outlet];\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  Renderer2,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { OutletStyleService } from './outlet-style.service';\nimport { OutletPosition } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnInit {\n  @Input() cxOutlet: string;\n\n  private _context: string;\n  @Input()\n  set cxOutletContext(value: string) {\n    this._context = value;\n  }\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService,\n    private outletStyleService: OutletStyleService,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit(): void {\n    const nodes = [];\n    nodes.push(...this.renderTemplate(OutletPosition.BEFORE));\n    nodes.push(...this.renderTemplate(OutletPosition.REPLACE, true));\n    nodes.push(...this.renderTemplate(OutletPosition.AFTER));\n\n    this.renderStyleLink(nodes);\n  }\n\n  private renderTemplate(position: OutletPosition, replace = false): any[] {\n    const nodes = [];\n    const template = this.outletService.get(this.cxOutlet, position);\n    if (template || replace) {\n      const ref = this.vcr.createEmbeddedView(template || this.templateRef, {\n        $implicit: this.context,\n      });\n      nodes.push(...ref.rootNodes);\n    }\n    return nodes;\n  }\n\n  private renderStyleLink(nodes: any[]) {\n    const styleElement = this.outletStyleService.get(this.cxOutlet);\n\n    if (styleElement) {\n      let parentElement = nodes.find(node => node instanceof HTMLElement);\n\n      if (parentElement.shadowRoot) {\n        parentElement = parentElement.shadowRoot;\n      }\n      styleElement.nativeElement.rel = 'stylesheet';\n      this.renderer.appendChild(parentElement, styleElement.nativeElement);\n    }\n  }\n\n  private get context() {\n    // return specific context if provided\n    if (this._context) {\n      return this._context;\n    }\n    const ctx = (<any>this.vcr.injector).view.context;\n\n    // the context might already be given $implicit\n    // by a parent *ngIf or *ngFor\n    return ctx.$implicit || ctx;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { ElementRef, OnInit, Input, Directive } from '@angular/core';\n\nimport { OutletStyleService } from '../outlet-style.service';\n\n@Directive({\n  selector: '[cxCssRef]',\n})\nexport class StyleRefDirective implements OnInit {\n  @Input() cxCssRef: string;\n\n  constructor(\n    private element: ElementRef,\n    private cssOutletService: OutletStyleService\n  ) {}\n\n  ngOnInit() {\n    this.cssOutletService.add(this.cxCssRef, this.element);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { StyleRefDirective } from './style-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [StyleRefDirective],\n  exports: [StyleRefDirective],\n})\nexport class StyleRefModule {}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\n\nexport class CustomFormValidators {\n  static emailDomainValidator(\n    control: AbstractControl\n  ): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match('[.][a-zA-Z]+$') ? null : { InvalidEmail: true };\n  }\n\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return email.match(\n      // Email Standard RFC 5322:\n      /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/ // tslint:disable-line\n    )\n      ? null\n      : { InvalidEmail: true };\n  }\n\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n    return password.match(\n      '^(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[!@#$%^*()_+{};:.,]).{6,}$'\n    )\n      ? null\n      : { InvalidPassword: true };\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  form: FormGroup;\n\n  constructor(\n    private auth: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder,\n    private authRedirectService: AuthRedirectService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userId: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: ['', Validators.required],\n    });\n  }\n\n  login(): void {\n    this.auth.authorize(\n      this.form.controls.userId.value,\n      this.form.controls.password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  CmsModule as CmsCoreModule,\n  Config,\n  ConfigModule,\n  defaultCmsModuleConfig,\n} from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultCmsModuleConfig),\n    CmsCoreModule,\n  ],\n  providers: [{ provide: CmsConfig, useExisting: Config }],\n})\nexport class CmsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\nimport { CmsModule } from '../../../cms-structure/cms.module';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    CmsModule,\n    UserModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          selector: 'cx-login-form',\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginComponentService {\n  private _isLogin = false;\n\n  get isLogin(): boolean {\n    return this._isLogin;\n  }\n\n  set isLogin(login: boolean) {\n    this._isLogin = login;\n  }\n}\n","import { Component } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, switchMap } from 'rxjs/operators';\nimport { LoginComponentService } from './login.component.service';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent {\n  constructor(\n    private auth: AuthService,\n    private userService: UserService,\n    private loginService: LoginComponentService\n  ) {}\n\n  get user$(): Observable<User> {\n    return this.auth.getUserToken().pipe(\n      map(token => {\n        if (token && !!token.access_token && !this.loginService.isLogin) {\n          this.loginService.isLogin = true;\n          this.userService.load();\n        } else if (token && !token.access_token && this.loginService.isLogin) {\n          this.loginService.isLogin = false;\n        }\n        return token;\n      }),\n      filter(token => token && !!token.access_token),\n      switchMap(() => this.userService.get())\n    );\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  PLATFORM_ID,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  CmsComponent,\n  CmsConfig,\n  CmsService,\n  ComponentMapperService,\n  ContentSlotComponentData,\n  CxApiService,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../model/cms-component-data';\n\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  cmpRef: ComponentRef<any>;\n  webElement: any;\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private componentMapper: ComponentMapperService,\n    private injector: Injector,\n    private cmsService: CmsService,\n    private dynamicAttributeService: DynamicAttributeService,\n    private renderer: Renderer2,\n    private cd: ChangeDetectorRef,\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  ngOnInit() {\n    if (!this.shouldRenderComponent()) {\n      return;\n    }\n\n    if (this.componentMapper.isWebComponent(this.cxComponentWrapper.flexType)) {\n      this.launchWebComponent();\n    } else {\n      this.launchComponent();\n    }\n  }\n\n  private shouldRenderComponent(): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (\n      this.config.cmsComponents[this.cxComponentWrapper.flexType] || {}\n    ).disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  private launchComponent() {\n    const factory = this.componentMapper.getComponentFactoryByCode(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (factory) {\n      this.cmpRef = this.vcr.createComponent(\n        factory,\n        undefined,\n        this.getInjectorForComponent()\n      );\n\n      this.cd.detectChanges();\n\n      if (this.cmsService.isLaunchInSmartEdit()) {\n        this.addSmartEditContract(this.cmpRef.location.nativeElement);\n      }\n    }\n  }\n\n  private async launchWebComponent() {\n    const elementName = await this.componentMapper.initWebComponent(\n      this.cxComponentWrapper.flexType,\n      this.renderer\n    );\n\n    if (elementName) {\n      this.webElement = this.renderer.createElement(elementName);\n\n      this.webElement.cxApi = {\n        ...this.injector.get(CxApiService),\n        CmsComponentData: this.getCmsDataForComponent(),\n      };\n\n      this.renderer.appendChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n\n  private getCmsDataForComponent<T extends CmsComponent>(): CmsComponentData<\n    T\n  > {\n    return {\n      uid: this.cxComponentWrapper.uid,\n      data$: this.cmsService.getComponentData(this.cxComponentWrapper.uid),\n    };\n  }\n\n  private getInjectorForComponent(): Injector {\n    const configProviders =\n      (this.config.cmsComponents[this.cxComponentWrapper.flexType] || {})\n        .providers || [];\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsDataForComponent(),\n        },\n        ...configProviders,\n      ],\n      parent: this.injector,\n    });\n  }\n\n  private addSmartEditContract(element: Element) {\n    this.dynamicAttributeService.addDynamicAttributes(\n      this.cxComponentWrapper.properties,\n      element,\n      this.renderer\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.cmpRef) {\n      this.cmpRef.destroy();\n    }\n    if (this.webElement) {\n      this.renderer.removeChild(\n        this.vcr.element.nativeElement.parentElement,\n        this.webElement\n      );\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-page-slot',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent {\n  @Input() set position(position: string) {\n    this.position$.next(position);\n    // add the position name as a css class so that\n    // layout can be applied to it, using the position based class.\n    this.renderer.addClass(this.hostElement.nativeElement, position);\n  }\n\n  readonly position$ = new BehaviorSubject<string>(undefined);\n\n  /**\n   * observable with `ContentSlotData` for the current position\n   */\n  readonly slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap(position => this.cmsService.getContentSlot(position)),\n    tap(slot => this.addSmartEditSlotClass(slot))\n  );\n\n  /**\n   * observable with components (`ContentSlotComponentData[]`)\n   * for the current slot\n   */\n  readonly components$: Observable<\n    ContentSlotComponentData[]\n  > = this.slot$.pipe(\n    map(slot => (slot && slot.components ? slot.components : [])),\n    distinctUntilChanged(\n      (a, b) =>\n        a.length === b.length && !a.find((el, index) => el.uid !== b[index].uid)\n    ),\n    tap(components => this.addComponentClass(components))\n  );\n\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected hostElement: ElementRef\n  ) {}\n\n  // add a class to indicate whether the class is empty or not\n  private addComponentClass(components): void {\n    if (components && components.length > 0) {\n      this.renderer.addClass(this.hostElement.nativeElement, 'has-components');\n    }\n  }\n\n  private addSmartEditSlotClass(slot): void {\n    if (slot && this.cmsService.isLaunchInSmartEdit()) {\n      this.addSmartEditContract(slot);\n    }\n  }\n\n  private addSmartEditContract(slot: ContentSlotData): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      slot.properties,\n      this.hostElement.nativeElement,\n      this.renderer\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    PageSlotModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          selector: 'cx-login',\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap(hasPage => {\n          if (!hasPage) {\n            this.routing.go({ cxRoute: 'home' });\n          }\n        })\n      );\n  }\n\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { CmsPageConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const cartComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  emptyCartText: {\n    flexType: 'CMSParagraphComponent',\n    typeCode: 'CMSParagraphComponent',\n    content: `\n      <h2>Your shopping cart is empty</h2>\n      <p>Suggestions</p>\n      <ul>\n          <li>\n          Browse our products by selecting a category above\n          </li>\n      </ul>`,\n  },\n};\n\nexport const defaultCartPageConfig: CmsPageConfig = {\n  ignoreBackend: false,\n  pageId: 'cartPage',\n  type: 'ContentPage',\n  template: 'CartPageTemplate',\n  title: 'Cart',\n  slots: {\n    EmptyCartMiddleContent: {\n      componentIds: ['emptyCartText'],\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LanguageComponent: {\n    typeCode: 'CMSSiteContextComponent',\n    flexType: 'CMSSiteContextComponent',\n    context: 'LANGUAGE',\n  },\n  CurrencyComponent: {\n    typeCode: 'CMSSiteContextComponent',\n    flexType: 'CMSSiteContextComponent',\n    context: 'CURRENCY',\n  },\n  LanguageCurrencyComponent: {\n    typeCode: 'LanguageCurrencyComponent',\n    flexType: 'LanguageCurrencyComponent',\n  },\n  // TODO:#2811 - uncomment to enable\n  // StoreFinder: {\n  //   typeCode: 'CMSLinkComponent',\n  //   flexType: 'CMSLinkComponent',\n  //   linkName: 'Find a Store',\n  //   url: '/store-finder',\n  // },\n  BreadcrumbComponent: {\n    typeCode: 'BreadcrumbComponent',\n    flexType: 'BreadcrumbComponent',\n  },\n  Logo: {\n    typeCode: 'SimpleBannerComponent',\n    flexType: 'SimpleBannerComponent',\n    uid: 'logo',\n    media: {\n      mime: 'svg/image/svg+xml',\n      url: 'https://www.sap.com/dam/application/shared/logos/sap-logo-svg.svg',\n    },\n    urlLink: '/',\n  },\n  SearchBox: {\n    typeCode: 'SearchBoxComponent',\n    flexType: 'SearchBoxComponent',\n    uid: 'SearchBoxComponent',\n  },\n  MiniCart: {\n    typeCode: 'MiniCartComponent',\n    flexType: 'MiniCartComponent',\n    uid: 'MiniCartComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n  CategoryNavigationComponent: {\n    typeCode: 'CategoryNavigationComponent',\n    flexType: 'CategoryNavigationComponent',\n    uid: 'ElectronicsCategoryNavComponent',\n    navigationNode: {\n      uid: 'ElectronicsCategoryNavNode',\n      children: [\n        {\n          uid: 'CameraLensesNavNode',\n          title: 'Electronic catalog',\n          entries: [\n            {\n              itemId: 'CameraLensesCategoryLink',\n              itemSuperType: 'AbstractCMSComponent',\n              itemType: 'CMSLinkComponent',\n            },\n          ],\n        },\n      ],\n    },\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['SkipLinkComponent', 'HamburgerMenuComponent'],\n  },\n  SiteContext: {\n    componentIds: ['LanguageComponent', 'CurrencyComponent'],\n  },\n  SiteLinks: {\n    componentIds: ['StoreFinder'],\n  },\n  SiteLogo: {\n    componentIds: ['Logo'],\n  },\n  SearchBox: {\n    componentIds: ['SearchBox'],\n  },\n  MiniCart: {\n    componentIds: ['MiniCart'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n  NavigationBar: {\n    componentIds: ['CategoryNavigationComponent'],\n  },\n  BottomHeaderSlot: {\n    componentIds: ['BreadcrumbComponent'],\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const defaultPdpComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  CMSProductImages: {\n    typeCode: 'CMSProductImages',\n    flexType: 'CMSProductImages',\n    uid: 'CMSProductImages',\n  },\n};\n\nexport const defaultPdpSlots: CmsPageSlotsConfig = {\n  ProductDetails: {\n    componentIds: ['CMSProductImages'],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\n\n@Injectable()\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService\n  ) {}\n\n  // we print warn messages on missing layout configs\n  // only once to not polute the console log\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return this.breakpointService.breakpoint$.pipe(\n      switchMap(breakpoint =>\n        this.page$.pipe(\n          map(page => {\n            const config = this.getSlotConfig(\n              page.template,\n              'slots',\n              section,\n              breakpoint\n            );\n            if (config && config.slots) {\n              return config.slots;\n            } else if (!section) {\n              this.logMissingLayoutConfig(page);\n              return Object.keys(page.slots);\n            } else {\n              this.logMissingLayoutConfig(page, section);\n              return [];\n            }\n          })\n        )\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter(Boolean));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter(page => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (this.config.production) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap(section =>\n      section ? of(section) : this.pageLayoutService.templateName$\n    ),\n    tap(name => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap(section => this.pageLayoutService.getSlots(section))\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageLayoutService } from './page-layout.service';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  providers: [PageLayoutService],\n  exports: [PageLayoutComponent],\n})\nexport class PageLayoutModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  Title,\n  UserSignUp,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  subscription: Subscription;\n  userRegistrationForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: [false],\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private auth: AuthService,\n    private authRedirectService: AuthRedirectService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n  }\n\n  submit(): void {\n    const {\n      firstName,\n      lastName,\n      email,\n      password,\n      titleCode,\n    } = this.userRegistrationForm.value;\n    const userRegisterFormData: UserSignUp = {\n      firstName,\n      lastName,\n      uid: email,\n      password,\n      titleCode,\n    };\n    this.userService.register(userRegisterFormData);\n\n    if (!this.subscription) {\n      this.subscription = this.auth.getUserToken().subscribe(data => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.globalMessageService\n      .get()\n      .pipe(filter(data => Object.keys(data).length > 0))\n      .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n        if (\n          globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR].some(\n            message => message === 'This field is required.'\n          )\n        ) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.globalMessageService.add(\n            { key: 'register.titleRequired' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  private matchPassword(ac: AbstractControl): { NotEqual: boolean } {\n    if (ac.get('password').value !== ac.get('passwordconf').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n  UserModule,\n} from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          selector: 'cx-register',\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule, UserModule } from '@spartacus/core';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UserModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { CmsConfig } from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsMappingService {\n  constructor(\n    private config: CmsConfig,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  isComponentEnabled(flexType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    const isComponentDisabledInSSR = (this.config.cmsComponents[flexType] || {})\n      .disableSSR;\n    return !(isSSR && isComponentDisabledInSSR);\n  }\n\n  getRoutesForComponents(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        routes.push(...this.getRoutesForComponent(componentType));\n      }\n    }\n    return routes;\n  }\n\n  getGuardsForComponents(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getGuardsForComponent(componentType).forEach(guard =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  getI18nKeysForComponents(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.isComponentEnabled(componentType)) {\n        this.getI18nKeysForComponent(componentType).forEach(key =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n\n  private getRoutesForComponent(componentType: string): Route[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.childRoutes) || [];\n  }\n\n  private getGuardsForComponent(componentType: string): any[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.guards) || [];\n  }\n\n  private getI18nKeysForComponent(componentType: string): string[] {\n    const mappingConfig = this.config.cmsComponents[componentType];\n    return (mappingConfig && mappingConfig.i18nKeys) || [];\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsMapping.getGuardsForComponents(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map(guardClass => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { CmsMappingService } from './cms-mapping.service';\nimport { TranslationService, TranslationChunkService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    private cmsMapping: CmsMappingService,\n    private translation: TranslationService,\n    private translationChunk: TranslationChunkService\n  ) {}\n\n  loadChunksForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsMapping.getI18nKeysForComponents(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsMappingService } from './cms-mapping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsRoutesService {\n  constructor(private router: Router, private cmsMapping: CmsMappingService) {}\n\n  cmsRouteExist(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string\n  ): boolean {\n    const componentRoutes = this.cmsMapping.getRoutesForComponents(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(pageContext: PageContext, routes: Route[]): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageContext.id.startsWith('/') &&\n      pageContext.id.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageContext.id.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: pageContext,\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\n\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  PageContext,\n  PageType,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\n\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  first,\n  map,\n  switchMap,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    private routingService: RoutingService,\n    private cmsService: CmsService,\n    private cmsRoutes: CmsRoutesService,\n    private cmsI18n: CmsI18nService,\n    private cmsGuards: CmsGuardsService,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.routingService.getNextPageContext().pipe(\n      switchMap(pageContext =>\n        this.cmsService.hasPage(pageContext, true).pipe(\n          first(),\n          withLatestFrom(of(pageContext))\n        )\n      ),\n      switchMap(([hasPage, pageContext]) =>\n        hasPage\n          ? this.resolveCmsPageLogic(pageContext, route, state)\n          : this.handleNotFoundPage(pageContext, route, state)\n      )\n    );\n  }\n\n  private resolveCmsPageLogic(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      switchMap(componentTypes =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadChunksForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        if (\n          canActivate === true &&\n          !route.data.cxCmsRouteContext &&\n          !this.cmsRoutes.cmsRouteExist(pageContext.id)\n        ) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  private handleNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n    return this.cmsService.hasPage(notFoundCmsPageContext).pipe(\n      switchMap(hasNotFoundPage => {\n        if (hasNotFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap(notFoundIndex => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap(notFoundIndex =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter(index => index === notFoundIndex)\n              )\n            ),\n            switchMap(() => this.resolveCmsPageLogic(pageContext, route, state))\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { ServerConfig } from '@spartacus/core';\n\nexport abstract class PWAModuleConfig extends ServerConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { PWAModuleConfig } from '../pwa.module-config';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddToHomeScreenService {\n  private deferredEvent: any;\n\n  private canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    private config: PWAModuleConfig,\n    private globalMessageService: GlobalMessageService,\n    private winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        event => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  Éµangular_packages_service_worker_service_worker_b as RegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, ConfigModule, I18nModule } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): RegistrationOptions {\n  return { enabled: (pwaConfig.production && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(defaultPWAModuleConfig),\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    { provide: PWAModuleConfig, useExisting: Config },\n    {\n      provide: RegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n    AddToHomeScreenService,\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/index';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { Injectable } from '@angular/core';\nimport { Title, Meta, MetaDefinition } from '@angular/platform-browser';\nimport { PageMetaService, PageMeta, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  init() {\n    this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { WindowRef, LanguageService } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe(lang => {\n      winRef.document.documentElement.lang = lang;\n    });\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { SeoMetaService } from './seo-meta.service';\nimport { htmlLangProvider } from './html-lang-provider';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe(val => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { UserComponentModule } from '../../cms-components/user/index';\nimport { CmsModule } from '../../cms-structure/cms.module';\nimport { SeoModule } from '../../cms-structure/index';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/index';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/index';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    UserComponentModule,\n    CmsModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { NgModule } from '@angular/core';\nimport { Config, ConfigModule } from '@spartacus/core';\nimport { OutletRefModule } from '../cms-structure/outlet/index';\nimport { StyleRefModule } from '../cms-structure/outlet/style-ref/style-ref.module';\nimport { defaultLayoutConfig } from './config/default-layout-config';\nimport { LayoutConfig } from './config/layout-config';\nimport { MainModule } from './main/main.module';\n\nconst layoutModules = [OutletRefModule, StyleRefModule];\n\n@NgModule({\n  imports: [\n    MainModule,\n    ...layoutModules,\n    ConfigModule.withConfig(defaultLayoutConfig),\n  ],\n  providers: [{ provide: LayoutConfig, useExisting: Config }],\n  exports: [MainModule, ...layoutModules],\n})\nexport class LayoutModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          selector: 'cx-banner',\n        },\n        BannerComponent: {\n          selector: 'cx-banner',\n        },\n        SimpleBannerComponent: {\n          selector: 'cx-banner',\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { selector: 'cx-link' },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { ConfigModule } from '@spartacus/core';\nimport { CmsConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: { selector: 'cx-paragraph' },\n        CMSTabParagraphComponent: { selector: 'cx-paragraph' },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsService, CMSTabParagraphContainer } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent {\n  activeTabNum = 0;\n\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    private cmsService: CmsService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    switchMap(data =>\n      combineLatest(\n        data.components.split(' ').map(component =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            map(tab => {\n              if (!tab.flexType) {\n                tab.flexType = tab.typeCode;\n              }\n              return {\n                ...tab,\n                title: `CMSTabParagraphContainer.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number): void {\n    this.activeTabNum = tabNum;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: { selector: 'cx-tab-paragraph-container' },\n      },\n    }),\n    PageComponentModule,\n    OutletModule,\n    I18nModule,\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport { Address, UserService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AddressBookComponentService {\n  constructor(private userService: UserService) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userService.updateUserAddress(addressId, address);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n\n  constructor(public service: AddressBookComponentService) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Address, UserService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-address-card',\n  templateUrl: './address-card.component.html',\n})\nexport class AddressCardComponent {\n  editMode: boolean;\n  isDefault: boolean;\n\n  @Input() address: Address;\n\n  @Output() editEvent = new EventEmitter<any>();\n\n  constructor(private userService: UserService) {}\n\n  openEditFormEvent(): void {\n    this.editEvent.emit();\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n  }\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userService.setAddressAsDefault(addressId);\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userService.deleteUserAddress(addressId);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { AddressCardComponent } from './address-card/address-card.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          selector: 'cx-address-book',\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent, AddressCardComponent],\n  exports: [AddressBookComponent, AddressCardComponent],\n  providers: [UserService, AddressBookComponentService],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  styleUrls: ['./close-account-modal.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe(text => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          selector: 'cx-close-account',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  consentGiven = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consentTemplate && this.consentTemplate.currentConsent) {\n      if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n        this.consentGiven = false;\n      } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n        this.consentGiven = true;\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentChanged.emit({\n      given: !this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, skipWhile, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userService: UserService,\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest(\n      this.userService.getConsentsResultLoading(),\n      this.userService.getGiveConsentResultLoading(),\n      this.userService.getWithdrawConsentResultLoading()\n    ).pipe(\n      map(\n        ([consentLoading, giveConsentLoading, withdrawConsentLoading]) =>\n          consentLoading || giveConsentLoading || withdrawConsentLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userService.getConsents().pipe(\n      tap(templateList => {\n        if (!this.consentsExists(templateList)) {\n          this.userService.loadConsents();\n        }\n      })\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userService\n        .getGiveConsentResultSuccess()\n        .subscribe(success => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(this.userService.getWithdrawConsentResultSuccess()),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap(withdrawalSuccess => {\n            if (withdrawalSuccess) {\n              this.userService.loadConsents();\n            }\n          })\n        )\n        .subscribe(withdrawalSuccess =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userService.giveConsent(template.id, template.version);\n    } else {\n      this.userService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  onDone(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.userService.resetGiveConsentProcessState();\n    this.userService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          selector: 'cx-consent-management',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n})\nexport class ForgotPasswordComponent implements OnInit {\n  form: FormGroup;\n  submited = false;\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n    this.userService.requestForgotPasswordEmail(this.form.value.userEmail);\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          selector: 'cx-forgot-password',\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map(routingData => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap(orderCode => {\n        if (orderCode) {\n          this.userService.loadOrderDetails(orderCode);\n        } else {\n          this.userService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userService.getOrderDetails())\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order, Consignment, OrderEntry } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach(element => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${\n              address.postalCode\n            }`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n              billingAddress.postalCode\n            }`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderDetailsHeadlineComponent: {\n          selector: 'cx-order-details-headline',\n        },\n        AccountOrderDetailsItemsComponent: {\n          selector: 'cx-order-details-items',\n        },\n        AccountOrderDetailsTotalsComponent: {\n          selector: 'cx-order-details-totals',\n        },\n        AccountOrderDetailsShippingComponent: {\n          selector: 'cx-order-details-shipping',\n        },\n      },\n    }),\n  ],\n  providers: [OrderDetailsService],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n})\nexport class OrderHistoryComponent implements OnInit, OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userService: UserService,\n    private translation: TranslationService\n  ) {}\n\n  orders$: Observable<OrderHistoryList>;\n  isLoaded$: Observable<boolean>;\n\n  private PAGE_SIZE = 5;\n\n  sortType: string;\n\n  ngOnInit(): void {\n    this.orders$ = this.userService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n      tap((orders: OrderHistoryList) => {\n        if (orders.pagination) {\n          this.sortType = orders.pagination.sort;\n        }\n      })\n    );\n\n    this.isLoaded$ = this.userService.getOrderHistoryListLoaded();\n  }\n\n  ngOnDestroy(): void {\n    this.userService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n  UserService,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          selector: 'cx-order-history',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [UserService],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { OrderDetailsModule } from './order-details/order-details.module';\n\n@NgModule({\n  imports: [OrderHistoryModule, OrderDetailsModule],\n})\nexport class OrderModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit, OnDestroy {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  loading$: Observable<boolean>;\n\n  userServiceSub: Subscription;\n\n  constructor(\n    private userService: UserService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userService.getPaymentMethods().pipe(\n      tap(paymentDetails => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find(paymentDetail => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userService.getPaymentMethodsLoading();\n    this.userService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  ngOnDestroy(): void {\n    if (this.userServiceSub) {\n      this.userServiceSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UserService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          selector: 'cx-payment-methods',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  providers: [UserService],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n  submited = false;\n\n  form: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    { validator: this.matchPassword }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe(state => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe(reset => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  resetPassword() {\n    this.submited = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    const password = this.form.value['password'];\n    this.userService.resetPassword(this.token, password);\n  }\n\n  private matchPassword(ac: AbstractControl) {\n    if (ac.get('password').value !== ac.get('repassword').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          selector: 'cx-reset-password-form',\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n  styleUrls: ['./update-email-form.component.scss'],\n})\nexport class UpdateEmailFormComponent {\n  submited = false;\n\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  form: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    { validator: this.matchEmail }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  isEmailConfirmNotValid(formControlName: string): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submited ||\n        (this.form.get(formControlName).touched &&\n          this.form.get(formControlName).dirty))\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(this.form, formControlName, this.submited);\n  }\n\n  onSubmit(): void {\n    this.submited = true;\n\n    if (this.form.invalid) {\n      return;\n    }\n\n    const newUid = this.form.value.confirmEmail;\n    const password = this.form.value.password;\n\n    this.saveEmail.emit({ newUid, password });\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n\n  private matchEmail(ac: AbstractControl): ValidationErrors {\n    if (ac.get('email').value !== ac.get('confirmEmail').value) {\n      return { NotEqual: true };\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n  styleUrls: ['./update-email.component.scss'],\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          selector: 'cx-update-email',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  ValidationErrors,\n  Validators,\n} from '@angular/forms';\nimport { FormUtils } from '../../../../../shared/utils/forms/form-utils';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n  styleUrls: ['./update-password-form.component.scss'],\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  private submitClicked = false;\n  form: FormGroup;\n\n  @Output()\n  submited = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      { validator: this.matchPassword }\n    );\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  isPasswordConfirmNotValid(): boolean {\n    return (\n      this.form.hasError('NotEqual') &&\n      (this.submitClicked ||\n        (this.form.get('newPasswordConfirm').touched &&\n          this.form.get('newPasswordConfirm').dirty))\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      oldPassword: this.form.value.oldPassword,\n      newPassword: this.form.value.newPassword,\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n\n  private matchPassword(abstractControl: AbstractControl): ValidationErrors {\n    if (\n      abstractControl.get('newPassword').value !==\n      abstractControl.get('newPasswordConfirm').value\n    ) {\n      return { NotEqual: true };\n    }\n    return null;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          selector: 'cx-update-password',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\nimport { FormUtils } from '../../../../shared/utils/forms/form-utils';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n  styleUrls: ['./update-profile-form.component.scss'],\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submited = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  form = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  private submitClicked = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.form.patchValue(this.user);\n    }\n  }\n\n  isNotValid(formControlName: string): boolean {\n    return FormUtils.isNotValidField(\n      this.form,\n      formControlName,\n      this.submitClicked\n    );\n  }\n\n  onSubmit(): void {\n    this.submitClicked = true;\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.submited.emit({\n      userUpdates: { ...this.form.value },\n    });\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap(titles => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe(success => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          selector: 'cx-update-profile',\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest(\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home')\n    ).pipe(\n      map(([meta, textHome]) =>\n        meta.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ConfigModule, CmsConfig, CmsPageTitleModule } from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: { selector: 'cx-breadcrumb' },\n      },\n    }),\n    CmsPageTitleModule,\n  ],\n  declarations: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable, Optional } from '@angular/core';\nimport { CmsNavigationComponent, CmsService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable()\nexport class NavigationComponentService {\n  constructor(\n    protected cmsService: CmsService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsNavigationComponent>\n  ) {}\n\n  public getComponentData(): Observable<CmsNavigationComponent> {\n    return this.componentData.data$;\n  }\n\n  public createNavigation(): Observable<NavigationNode> {\n    return combineLatest(\n      this.getComponentData(),\n      this.getNavigationNode()\n    ).pipe(\n      map(([data, nav]) => {\n        return {\n          title: data.name,\n          children: [nav],\n        };\n      })\n    );\n  }\n\n  public getNavigationNode(): Observable<NavigationNode> {\n    return this.getComponentData().pipe(\n      filter(Boolean),\n      switchMap(data => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap(items => {\n            if (items === undefined) {\n              this.getNavigationEntryItems(navigation, true);\n            }\n          }),\n          filter(Boolean),\n          map(items => this.createNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Get all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private getNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ) {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach(entry => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      this.processChildren(nodeData, itemsList);\n    }\n\n    if (root) {\n      const rootUid = nodeData.uid;\n      this.cmsService.loadNavigationItems(rootUid, itemsList);\n    }\n  }\n\n  private processChildren(node, itemsList): void {\n    for (const child of node.children) {\n      this.getNavigationEntryItems(child, false, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for display\n   * @param nodeData\n   * @param items\n   */\n  private createNode(nodeData: any, items: any): NavigationNode {\n    const node = {};\n\n    node['title'] = nodeData.title;\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.addLinkToNode(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = this.createChildren(nodeData, items);\n      node['children'] = children;\n    }\n\n    return node;\n  }\n\n  private addLinkToNode(node, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (entry.itemType === 'CMSLinkComponent' && item !== undefined) {\n      if (!node['title']) {\n        node['title'] = item.linkName;\n      }\n      node['url'] = item.url;\n      // if \"NEWWINDOW\", target is true\n      node['target'] = item.target;\n    }\n  }\n\n  private createChildren(node, items) {\n    const children = [];\n    for (const child of node.children) {\n      const childNode = this.createNode(child, items);\n      children.push(childNode);\n    }\n    return children;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationComponentService } from '../navigation/navigation.component.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode();\n\n  styleClass$: Observable<string> = this.service\n    .getComponentData()\n    .pipe(map(d => d.styleClass));\n\n  constructor(public service: NavigationComponentService) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navitation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n\n  constructor(private router: Router, private renderer: Renderer2) {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(() => this.clear());\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (this.openNodes.includes(<HTMLElement>event.currentTarget)) {\n      this.openNodes = this.openNodes.filter(n => n !== event.currentTarget);\n      this.renderer.removeClass(<HTMLElement>event.currentTarget, 'is-open');\n    } else {\n      this.openNodes.push(<HTMLElement>event.currentTarget);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    this.renderer.removeClass(\n      this.openNodes[this.openNodes.length - 1],\n      'is-open'\n    );\n    this.openNodes.pop();\n    this.updateClasses();\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n\n  getDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(...node.children.map(n => this.getDepth(n, depth + 1)));\n    } else {\n      return depth;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationComponentService } from './navigation.component.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation();\n\n  styleClass$: Observable<string> = this.service\n    .getComponentData()\n    .pipe(map(d => d.styleClass));\n\n  constructor(public service: NavigationComponentService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsService,\n  ConfigModule,\n  I18nModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\nimport { NavigationComponentService } from './navigation.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          selector: 'cx-navigation',\n          providers: [\n            {\n              provide: NavigationComponentService,\n              useClass: NavigationComponentService,\n              deps: [CmsService, CmsComponentData],\n            },\n          ],\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, CmsService, ConfigModule } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationComponentService } from '../navigation/navigation.component.service';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          selector: 'cx-category-navigation',\n          providers: [\n            {\n              provide: NavigationComponentService,\n              useClass: NavigationComponentService,\n              deps: [CmsService, CmsComponentData],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationComponentService } from '../navigation/navigation.component.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode();\n\n  styleClass$: Observable<string> = this.service\n    .getComponentData()\n    .pipe(map(d => d.styleClass));\n\n  constructor(public service: NavigationComponentService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, CmsService, ConfigModule } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationComponentService } from '../navigation/navigation.component.service';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          selector: 'cx-footer-navigation',\n          providers: [\n            {\n              provide: NavigationComponentService,\n              useClass: NavigationComponentService,\n              deps: [CmsService, CmsComponentData],\n            },\n          ],\n        },\n      },\n    }),\n    GenericLinkModule,\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config)\n    ).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap(results =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map(res => res.map(suggestion => suggestion.value)),\n        switchMap(suggestions => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map(match => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap(productResult => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest(\n      this.getProductResults(config),\n      this.getProductSuggestions(config)\n    ).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          (suggestions && suggestions.length === 0)\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap(c => (this.config = c)),\n    switchMap(config => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map(c => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c.displayProducts === 'true' || c.displayProducts === true,\n            displayProductImages:\n              <any>c.displayProductImages === 'true' ||\n              c.displayProductImages === true,\n            displaySuggestions:\n              <any>c.displaySuggestions === 'true' ||\n              c.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.searchBoxComponentService.toggleBodyClass(\n        'searchbox-is-active',\n        false\n      );\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a singe product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  ProductModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ProductModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          selector: 'cx-searchbox',\n        },\n      },\n    }),\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import { Injectable } from '@angular/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  delay,\n  distinctUntilChanged,\n  map,\n  startWith,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Injectable()\nexport class SharedCarouselService {\n  MAX_WIDTH = 360;\n  MAX_ITEM_SIZE = 4;\n  SPEED = 250;\n\n  private itemSize$ = of(this.MAX_ITEM_SIZE);\n  private activeItem$ = of(0);\n  private activeItemWithDelay$ = of(0);\n\n  constructor() {}\n\n  getActiveItem(): Observable<number> {\n    return this.activeItem$;\n  }\n\n  getActiveItemWithDelay(): Observable<number> {\n    return this.activeItemWithDelay$;\n  }\n\n  getItemSize(): Observable<number> {\n    return this.itemSize$;\n  }\n\n  /**\n   * The number of items shown in the carousel can be calculated\n   * the standard implemenattions uses the element size to calculate\n   * the items that fit in the carousel.\n   * This method is called in `ngOnInit`.\n   */\n  setItemSize(window, nativeElement) {\n    this.itemSize$ = !window\n      ? of(this.MAX_ITEM_SIZE)\n      : fromEvent(window, 'resize').pipe(\n          map(() => (nativeElement as HTMLElement).clientWidth),\n          startWith((nativeElement as HTMLElement).clientWidth),\n          // avoid to much calls\n          debounceTime(100),\n          map((innerWidth: any) => {\n            const itemsPerPage = Math.round(innerWidth / this.MAX_WIDTH);\n            return itemsPerPage > 2 ? this.MAX_ITEM_SIZE : itemsPerPage;\n          }),\n          // only emit new size when the size changed\n          distinctUntilChanged()\n        );\n  }\n\n  setItemAsActive(newActiveItem: number) {\n    this.activeItem$ = this.itemSize$.pipe(\n      map(itemSize => this.setItem(newActiveItem, itemSize))\n    );\n  }\n\n  setPreviousItemAsActive(): void {\n    this.activeItem$ = this.activeItem$.pipe(\n      withLatestFrom(this.itemSize$),\n      map(([activeItem, itemSize]: [number, number]) =>\n        this.setItem(activeItem - itemSize, itemSize)\n      )\n    );\n  }\n\n  setNextItemAsActive(): void {\n    this.activeItem$ = this.activeItem$.pipe(\n      withLatestFrom(this.itemSize$),\n      map(([activeItem, itemSize]: [number, number]) =>\n        this.setItem(activeItem + itemSize, itemSize)\n      )\n    );\n  }\n\n  private setItem(newActiveItem: number, itemSize: number) {\n    this.activeItemWithDelay$ = of(newActiveItem).pipe(\n      delay(this.getDelayValue(itemSize))\n    );\n    return newActiveItem;\n  }\n\n  private getDelayValue(itemSize) {\n    return (itemSize - 1) * this.SPEED;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsProductCarouselComponent,\n  Product,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Injectable()\nexport class ProductCarouselService {\n  private items$: Observable<Observable<Product>[]>;\n  private title$: Observable<string>;\n\n  constructor(\n    protected component: CmsComponentData<CmsProductCarouselComponent>,\n    private productService: ProductService\n  ) {}\n\n  getTitle(): Observable<string> {\n    return this.title$;\n  }\n\n  fetchTitle(): void {\n    this.title$ = this.component.data$.pipe(\n      map(data => {\n        return data.title;\n      })\n    );\n  }\n\n  getItems(): Observable<Observable<Product>[]> {\n    return this.items$;\n  }\n\n  /**\n   * Maps the item codes from CMS component to an array of `Product` observables.\n   */\n  fetchItems(): void {\n    this.items$ = this.component.data$.pipe(\n      filter(data => data && !!data.productCodes),\n      map(data => {\n        const productCodes = data.productCodes.split(' ');\n        return productCodes.map(code => this.productService.get(code));\n      })\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnInit,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { SharedCarouselService } from '../shared-carousel.service';\nimport { ProductCarouselService } from './product-carousel.component.service';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent implements OnInit {\n  private window: Window;\n\n  constructor(\n    winRef: WindowRef,\n    private el: ElementRef,\n    public productCarouselService: ProductCarouselService,\n    public sharedCarouselService: SharedCarouselService\n  ) {\n    this.window = winRef.nativeWindow;\n  }\n\n  ngOnInit() {\n    this.productCarouselService.fetchTitle();\n    this.sharedCarouselService.setItemSize(this.window, this.el.nativeElement);\n    this.productCarouselService.fetchItems();\n    this.sharedCarouselService.setItemAsActive(0);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ProductService,\n  UrlModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { SharedCarouselService } from '../shared-carousel.service';\nimport { ProductCarouselComponent } from './product-carousel.component';\nimport { ProductCarouselService } from './product-carousel.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          selector: 'cx-product-carousel',\n          providers: [\n            {\n              provide: ProductCarouselService,\n              useClass: ProductCarouselService,\n              deps: [CmsComponentData, ProductService],\n            },\n            {\n              provide: SharedCarouselService,\n              useClass: SharedCarouselService,\n              deps: [],\n            },\n          ],\n        },\n      },\n    }),\n    UrlModule,\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  ProductReference,\n  ProductReferenceService,\n  RoutingService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Injectable()\nexport class ProductReferencesService {\n  private title$: Observable<string>;\n  private items$: Observable<ProductReference[]>;\n  private displayProductTitles$: Observable<string>;\n  private displayProductPrices$: Observable<string>;\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    private referenceService: ProductReferenceService,\n    private routerService: RoutingService\n  ) {}\n\n  getTitle(): Observable<string> {\n    return this.title$;\n  }\n\n  fetchTitle(): void {\n    this.title$ = this.component.data$.pipe(\n      map(data => {\n        return data.title;\n      })\n    );\n  }\n\n  getDisplayProductTitles(): Observable<boolean> {\n    return this.displayProductTitles$.pipe(\n      map(data => Boolean(JSON.parse(data.toLowerCase())))\n    );\n  }\n\n  fetchDisplayProductTitles(): void {\n    this.displayProductTitles$ = this.component.data$.pipe(\n      map(data => {\n        return data.displayProductTitles;\n      })\n    );\n  }\n\n  getDisplayProductPrices(): Observable<boolean> {\n    return this.displayProductPrices$.pipe(\n      map(data => Boolean(JSON.parse(data.toLowerCase())))\n    );\n  }\n\n  fetchDisplayProductPrices(): void {\n    this.displayProductPrices$ = this.component.data$.pipe(\n      map(data => {\n        return data.displayProductPrices;\n      })\n    );\n  }\n\n  getReferenceType(): Observable<string> {\n    return this.component.data$.pipe(map(data => data.productReferenceTypes));\n  }\n\n  getProductCode(): Observable<string> {\n    return this.routerService\n      .getRouterState()\n      .pipe(map(data => data.state.params.productCode));\n  }\n\n  getReferenceList(): Observable<ProductReference[]> {\n    return this.items$;\n  }\n\n  setReferenceList(pageSize?: number): void {\n    this.items$ = combineLatest(\n      this.getProductCode(),\n      this.getReferenceType()\n    ).pipe(\n      map(data => ({ productCode: data[0], referenceType: data[1] })),\n      switchMap(data => {\n        return this.referenceService.get(\n          data.productCode,\n          data.referenceType,\n          pageSize\n        );\n      })\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnInit,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { SharedCarouselService } from '../shared-carousel.service';\nimport { ProductReferencesService } from './product-references.component.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent implements OnInit {\n  private window: Window;\n\n  constructor(\n    winRef: WindowRef,\n    private el: ElementRef,\n    public productReferencesService: ProductReferencesService,\n    public sharedCarouselService: SharedCarouselService\n  ) {\n    this.window = winRef.nativeWindow;\n  }\n\n  ngOnInit() {\n    this.productReferencesService.fetchTitle();\n    this.productReferencesService.fetchDisplayProductTitles();\n    this.productReferencesService.fetchDisplayProductPrices();\n    this.sharedCarouselService.setItemSize(this.window, this.el.nativeElement);\n    this.productReferencesService.setReferenceList();\n    this.sharedCarouselService.setItemAsActive(0);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  ProductReferenceService,\n  RoutingService,\n  UrlModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { SharedCarouselService } from '../shared-carousel.service';\nimport { ProductReferencesComponent } from './product-references.component';\nimport { ProductReferencesService } from './product-references.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    UrlModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          selector: 'cx-product-references',\n          providers: [\n            {\n              provide: ProductReferencesService,\n              useClass: ProductReferencesService,\n              deps: [CmsComponentData, ProductReferenceService, RoutingService],\n            },\n            {\n              provide: SharedCarouselService,\n              useClass: SharedCarouselService,\n              deps: [],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\nconst WAITING_CLASS = 'is-waiting';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  waiting: HTMLElement;\n\n  product$: Observable<Product> = this.currentProductService\n    .getProduct()\n    .pipe(filter(Boolean));\n\n  private _imageContainer$ = new BehaviorSubject(null);\n\n  imageContainer$ = combineLatest(this.product$, this._imageContainer$).pipe(\n    map(([product, container]) =>\n      container\n        ? container\n        : product.images && product.images.PRIMARY\n        ? product.images.PRIMARY\n        : {}\n    )\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  showImage(event: MouseEvent, imageContainer): void {\n    this.startWaiting(<HTMLElement>event.target);\n    this._imageContainer$.next(imageContainer);\n  }\n\n  isMainImageContainer(currentContainer): Observable<boolean> {\n    return this.imageContainer$.pipe(\n      map(\n        (container: any) =>\n          container &&\n          container.zoom &&\n          currentContainer.zoom &&\n          container.zoom.url === currentContainer.zoom.url\n      )\n    );\n  }\n\n  loadHandler(): void {\n    this.clearWaitList();\n  }\n\n  private startWaiting(el: HTMLElement): void {\n    this.clearWaitList();\n    el.classList.add(WAITING_CLASS);\n    this.waiting = el;\n  }\n\n  private clearWaitList(): void {\n    if (this.waiting) {\n      this.waiting.classList.remove(WAITING_CLASS);\n      delete this.waiting;\n    }\n  }\n}\n","export enum ProductDetailOutlets {\n  SUMMARY = 'PDP.SUMMARY',\n  TITLE = 'PDP.TITLE',\n  RATING = 'PDP.RATING',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  DESCRIPTION = 'PDP.DESCRIPTION',\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CmsService, Page, Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\nimport { ProductDetailOutlets } from '../../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-details',\n  templateUrl: './product-details.component.html',\n})\nexport class ProductDetailsComponent implements OnInit {\n  static outlets = ProductDetailOutlets;\n\n  product$: Observable<Product>;\n  page$: Observable<Page>;\n\n  get outlets(): any {\n    return ProductDetailsComponent.outlets;\n  }\n\n  constructor(\n    protected currentPageService: CurrentProductService,\n    private cmsService: CmsService\n  ) {}\n\n  ngOnInit(): void {\n    this.product$ = this.currentPageService.getProduct();\n\n    this.page$ = this.cmsService.getCurrentPage();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { TranslatePipe, TranslationService } from '@spartacus/core';\nimport { ProductDetailOutlets } from '../../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [TranslatePipe],\n})\nexport class ProductSummaryComponent implements OnInit {\n  static outlets = ProductDetailOutlets;\n\n  itemCount = 1;\n  reviewsTabAvailable: boolean;\n\n  @Input() product: any;\n\n  get outlets() {\n    return ProductSummaryComponent.outlets;\n  }\n\n  updateCount(value) {\n    this.itemCount = value;\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Get Tab by label if exists on page\n  getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through h3 tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const h3Elements: HTMLCollectionOf<\n        HTMLElement\n      > = tabsComponent.getElementsByTagName('h3');\n\n      // Look through h3 tab elements until finding tab with label\n      for (const h3Element of Array.from(h3Elements)) {\n        if (h3Element.innerHTML.includes(label)) {\n          return h3Element;\n        }\n      }\n    }\n  }\n\n  // Click to activate tab if not already active\n  clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('productDetails.reviews')\n      .subscribe(reviewsTabLabel => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n\n        const reviewsComponent = this.getReviewsComponent();\n\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          reviewsComponent.scrollIntoView();\n        }\n      });\n  }\n\n  constructor(\n    protected translatePipe: TranslatePipe,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.reviewsTabAvailable = !!this.getReviewsComponent();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { CmsModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport {\n  FormComponentsModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule, CartSharedModule } from '../../cart/index';\nimport { ProductDetailsComponent } from './container/product-details.component';\nimport { ProductSummaryComponent } from './product-summary/product-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    CmsModule,\n    AddToCartModule,\n    OutletModule,\n    I18nModule,\n    FormComponentsModule,\n    MediaModule,\n    StarRatingModule,\n    UrlModule,\n    PageSlotModule,\n  ],\n  declarations: [ProductDetailsComponent, ProductSummaryComponent],\n  exports: [ProductDetailsComponent, ProductSummaryComponent],\n})\nexport class ProductDetailsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  ProductSearchPage,\n  ProductSearchService,\n  SearchConfig,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewModes } from '../product-view/product-view.component';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit {\n  query: string;\n  categoryCode: string;\n  brandCode: string;\n  itemPerPage: number;\n\n  model$: Observable<ProductSearchPage>;\n  searchConfig: SearchConfig = {};\n  categoryTitle: string;\n  options: SearchConfig;\n  updateParams$: Observable<Params>;\n  gridMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    private activatedRoute: ActivatedRoute,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  update(): void {\n    const { queryParams } = this.activatedRoute.snapshot;\n    this.options = this.createOptionsByUrlParams();\n\n    if (this.categoryCode && this.categoryCode !== queryParams.categoryCode) {\n      this.query = ':relevance:category:' + this.categoryCode;\n    }\n    if (this.brandCode && this.brandCode !== queryParams.brandCode) {\n      this.query = ':relevance:brand:' + this.brandCode;\n    }\n    if (!this.query && queryParams.query) {\n      this.query = queryParams.query;\n    }\n    this.search(this.query, this.options);\n  }\n\n  createOptionsByUrlParams(): SearchConfig {\n    const { queryParams } = this.activatedRoute.snapshot;\n    const newConfig = {\n      ...queryParams,\n    };\n    delete newConfig.query;\n    const options = {\n      ...this.searchConfig,\n      ...newConfig,\n      pageSize: this.itemPerPage || 10,\n    };\n    if (this.categoryCode) {\n      options.categoryCode = this.categoryCode;\n    }\n    if (this.brandCode) {\n      options.brandCode = this.brandCode;\n    }\n\n    return options;\n  }\n\n  ngOnInit(): void {\n    this.updateParams$ = this.activatedRoute.params.pipe(\n      tap(params => {\n        this.categoryCode = params.categoryCode;\n        this.brandCode = params.brandCode;\n        this.query = params.query;\n        this.update();\n      })\n    );\n\n    this.pageLayoutService.templateName$.pipe(take(1)).subscribe(template => {\n      this.gridMode$.next(\n        template === 'ProductGridPageTemplate' ? ViewModes.Grid : ViewModes.List\n      );\n    });\n\n    // clean previous search result\n    this.productSearchService.clearResults();\n\n    this.model$ = this.productSearchService.getResults().pipe(\n      tap(searchResult => {\n        if (Object.keys(searchResult).length === 0) {\n          this.search(this.query, this.options);\n        } else {\n          this.getCategoryTitle(searchResult);\n        }\n      }),\n      filter(searchResult => Object.keys(searchResult).length > 0)\n    );\n  }\n\n  protected getCategoryTitle(data: ProductSearchPage): string {\n    if (data.breadcrumbs && data.breadcrumbs.length > 0) {\n      this.categoryTitle = data.breadcrumbs[0].facetValueName;\n    } else if (!this.query.includes(':relevance:')) {\n      this.categoryTitle = this.query;\n    }\n    if (this.categoryTitle) {\n      this.categoryTitle =\n        data.pagination.totalResults + ' results for ' + this.categoryTitle;\n    }\n\n    return this.categoryTitle;\n  }\n\n  viewPage(pageNumber: number): void {\n    this.search(this.query, { currentPage: pageNumber });\n  }\n\n  sortList(sortCode: string): void {\n    this.search(this.query, { sortCode: sortCode });\n  }\n\n  setGridMode(mode: ViewModes): void {\n    this.gridMode$.next(mode);\n  }\n\n  protected search(query: string, options?: SearchConfig): void {\n    if (this.query) {\n      if (options) {\n        // Overide default options\n        this.searchConfig = {\n          ...this.searchConfig,\n          ...options,\n        };\n      }\n\n      this.productSearchService.search(query, this.searchConfig);\n    }\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  Facet,\n  ProductSearchPage,\n  ProductSearchService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/index';\nimport { ModalService } from '../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  activeFacetValueCode: string;\n  searchResult: ProductSearchPage;\n  minPerFacet = 6;\n  showAllPerFacetMap: Map<String, boolean>;\n  queryCodec: HttpUrlEncodingCodec;\n  private collapsedFacets = new Set<string>();\n  searchResult$: Observable<ProductSearchPage>;\n  updateParams$: Observable<Params>;\n\n  get visibleFacets(): Facet[] {\n    if (!this.searchResult.facets) {\n      return [];\n    }\n    return this.searchResult.facets.filter(facet => facet.visible);\n  }\n\n  constructor(\n    private modalService: ModalService,\n    private activatedRoute: ActivatedRoute,\n    private productSearchService: ProductSearchService\n  ) {\n    this.showAllPerFacetMap = new Map<String, boolean>();\n    this.queryCodec = new HttpUrlEncodingCodec();\n  }\n\n  ngOnInit(): void {\n    this.updateParams$ = this.activatedRoute.params.pipe(\n      tap(params => {\n        this.activeFacetValueCode = params.categoryCode || params.brandCode;\n      })\n    );\n\n    this.searchResult$ = this.productSearchService.getResults().pipe(\n      tap(searchResult => {\n        this.searchResult = searchResult;\n        if (this.searchResult.facets) {\n          this.searchResult.facets.forEach(el => {\n            this.showAllPerFacetMap.set(el.name, false);\n          });\n        }\n      }),\n      filter(searchResult => Object.keys(searchResult).length > 0)\n    );\n  }\n\n  openFilterModal(content): void {\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' });\n  }\n\n  toggleValue(query: string): void {\n    this.productSearchService.search(this.queryCodec.decodeValue(query));\n  }\n\n  showLess(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, false);\n  }\n\n  showMore(facetName: String): void {\n    this.updateShowAllPerFacetMap(facetName, true);\n  }\n\n  private updateShowAllPerFacetMap(facetName: String, showAll: boolean): void {\n    this.showAllPerFacetMap.set(facetName, showAll);\n  }\n\n  isFacetCollapsed(facetName: string): boolean {\n    return this.collapsedFacets.has(facetName);\n  }\n\n  toggleFacet(facetName: string): void {\n    if (this.collapsedFacets.has(facetName)) {\n      this.collapsedFacets.delete(facetName);\n    } else {\n      this.collapsedFacets.add(facetName);\n    }\n  }\n\n  getVisibleFacetValues(facet): any {\n    return facet.values.slice(\n      0,\n      this.showAllPerFacetMap.get(facet.name)\n        ? facet.values.length\n        : this.minPerFacet\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ConfigModule,\n  I18nModule,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  FormComponentsModule,\n  ListNavigationModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: { selector: 'cx-product-list' },\n        SearchResultsListComponent: { selector: 'cx-product-list' },\n        ProductRefinementComponent: { selector: 'cx-product-facet-navigation' },\n      },\n    }),\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    FormComponentsModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductFacetNavigationComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { CurrentProductService } from '../../current-product.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter(Boolean),\n    switchMap(product => this.reviewService.getByProductCode(product.code)),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  setRating(rating): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [0, [Validators.min(1), Validators.max(5)]],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule } from '@spartacus/core';\nimport {\n  FormComponentsModule,\n  StarRatingModule,\n} from '../../../../shared/index';\nimport { ProductReviewsComponent } from './product-reviews.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    FormComponentsModule,\n    I18nModule,\n    StarRatingModule,\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsModule,\n  ConfigModule,\n  I18nModule,\n  ProductService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { PageComponentModule } from '../../../cms-structure/page/index';\nimport { CartSharedModule } from '../../cart/index';\n// guards\nimport { ProductAttributesComponent } from './product-attributes/product-attributes.component';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsComponent } from './product-reviews/product-reviews.component';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    CmsModule,\n    OutletModule,\n    ProductReviewsModule,\n    ProductDetailsTabModule,\n    PageComponentModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          selector: 'cx-product-details-tab',\n        },\n        ProductSpecsTabComponent: {\n          selector: 'cx-product-attributes',\n        },\n        ProductReviewsTabComponent: {\n          selector: 'cx-product-reviews',\n        },\n      },\n    }),\n    I18nModule,\n  ],\n  declarations: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent, ProductReviewsComponent],\n  entryComponents: [ProductAttributesComponent],\n  providers: [ProductService, WindowRef, RoutingService],\n})\nexport class ProductTabsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, ConfigModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductImages: {\n          selector: 'cx-product-images',\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${\n            deliveryAddress.postalCode\n          }`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      map(textTitle => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${\n            billingAddress.postalCode\n          }`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map(orderDetails => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CheckoutModule,\n  I18nModule,\n  ConfigModule,\n  CmsConfig,\n  AuthGuard,\n} from '@spartacus/core';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { OrderConfirmationGuard } from './guards/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    CheckoutModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          selector: 'cx-order-confirmation-thank-you-message',\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          selector: 'cx-order-confirmation-items',\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          selector: 'cx-order-confirmation-totals',\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          selector: 'cx-order-confirmation-overview',\n          guards: [AuthGuard, OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport {\n  ProductCarouselModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { OrderConfirmationModule } from './order-confirmation/index';\n\n@NgModule({\n  imports: [\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    ProductListModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    // TODO:#2811 - uncomment to enable\n    // StoreFinderModule,\n    ProductImagesModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Cart, CartService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-cart-page',\n  templateUrl: './cart-page.component.html',\n})\nexport class CartPageComponent implements OnInit {\n  cart$: Observable<Cart>;\n\n  constructor(protected cartService: CartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.cartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CartDetailsModule } from '../../cms-components/cart/cart-details/cart-details.module';\nimport { CmsModule, CmsPageGuard } from '../../cms-structure/index';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/index';\nimport { CartPageComponent } from './cart-page.component';\n\nconst routes: Routes = [\n  {\n    path: null,\n    canActivate: [CmsPageGuard],\n    component: CartPageComponent,\n    data: { cxRoute: 'cart' },\n  },\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    PageLayoutModule,\n    CartDetailsModule,\n    OutletRefModule,\n    CmsModule,\n  ],\n  declarations: [CartPageComponent],\n})\nexport class CartPageModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-details-page',\n  templateUrl: './product-details-page.component.html',\n})\nexport class ProductDetailsPageComponent {}\n","import {\n  UrlSegment,\n  UrlMatchResult,\n  Route,\n  UrlSegmentGroup,\n} from '@angular/router';\n\nexport interface SuffixRoute extends Route {\n  data: {\n    cxSuffixUrlMatcher: {\n      marker: string;\n      paramName: string;\n      precedingParamName?: string;\n    };\n  };\n}\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName [ / ** ]'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function suffixUrlMatcher(\n  segments: UrlSegment[],\n  _segmentGroup: UrlSegmentGroup,\n  route: SuffixRoute\n): UrlMatchResult | null {\n  const config = route.data.cxSuffixUrlMatcher;\n  const { marker, paramName } = config;\n  const precedingParamName = config.precedingParamName || 'param';\n\n  const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n  const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n  if (markerIndex === -1 || isMarkerLastSegment) {\n    return null;\n  }\n\n  const paramIndex = markerIndex + 1;\n  const posParams: { [name: string]: UrlSegment } = {\n    [paramName]: segments[paramIndex],\n  };\n\n  for (let i = 0; i < markerIndex; i++) {\n    posParams[`${precedingParamName}${i}`] = segments[i];\n  }\n\n  return { consumed: segments.slice(0, paramIndex + 1), posParams };\n}\n\nexport function findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ProductDetailsModule } from '../../cms-components/product/product-details/index';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\nimport { ProductDetailsPageComponent } from './product-details-page.component';\n\nconst routes: Routes = [\n  {\n    path: null,\n    canActivate: [CmsPageGuard],\n    component: ProductDetailsPageComponent,\n    data: { cxRoute: 'product' },\n  },\n  {\n    matcher: suffixUrlMatcher,\n    canActivate: [CmsPageGuard],\n    component: ProductDetailsPageComponent,\n    data: {\n      cxSuffixUrlMatcher: {\n        marker: 'p',\n        paramName: 'productCode',\n      },\n    },\n  },\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    ProductDetailsModule,\n    PageLayoutModule,\n    OutletRefModule,\n  ],\n  declarations: [ProductDetailsPageComponent],\n  exports: [ProductDetailsPageComponent],\n})\nexport class ProductDetailsPageModule {}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { suffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        matcher: suffixUrlMatcher,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxSuffixUrlMatcher: {\n            marker: 'c',\n            paramName: 'categoryCode',\n          },\n        },\n      },\n    ]),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { Provider } from '@angular/core';\nimport { Meta } from '@angular/platform-browser';\nimport {\n  mediaServerConfigFromMetaTagFactory,\n  occServerConfigFromMetaTagFactory,\n  provideConfigFactory,\n} from '@spartacus/core';\n\nexport function provideConfigFromMetaTags(): Provider[] {\n  return [\n    provideConfigFactory(occServerConfigFromMetaTagFactory, [Meta]),\n    provideConfigFactory(mediaServerConfigFromMetaTagFactory, [Meta]),\n  ];\n}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n  search: { paths: ['search/:query'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'] },\n  logout: { paths: ['logout'] },\n  register: { paths: ['login/register'] },\n  forgotPassword: { paths: ['login/forgot-password'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n  product: {\n    paths: ['product/:productCode'],\n    paramsMapping: { productCode: 'code' },\n  },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n  termsAndConditions: { paths: ['termsAndConditions'] },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { NgModule } from '@angular/core';\nimport {\n  ConfigModule,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [\n    CoreRoutingModule,\n    ConfigModule.withConfig(defaultRoutingConfig),\n    CmsRouteModule,\n  ],\n})\nexport class RoutingModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  AuthModule,\n  ConfigModule,\n  CxApiModule,\n  I18nModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SmartEditModule,\n  StateModule,\n} from '@spartacus/core';\nimport { CmsLibModule } from './cms-components/index';\nimport { CartPageModule } from './cms-pages/cart-page/cart-page.module';\nimport { ProductDetailsPageModule } from './cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from './cms-pages/product-listing-page/product-listing-page.module';\nimport { CmsModule } from './cms-structure/cms.module';\nimport { CmsRouteModule } from './cms-structure/routing/cms-route/cms-route.module';\nimport { RoutingModule } from './cms-structure/routing/routing.module';\nimport { provideConfigFromMetaTags } from './config/provide-config-from-meta-tags';\nimport { StorefrontModuleConfig } from './config/storefront-config';\nimport { LayoutModule } from './layout/layout.module';\n\n@NgModule({\n  imports: [\n    OccModule,\n    StateModule,\n    AuthModule.forRoot(),\n    CmsLibModule,\n    CmsModule,\n    CmsRouteModule,\n    ConfigModule.forRoot(),\n    RoutingModule,\n    CxApiModule,\n    SmartEditModule.forRoot(),\n    PersonalizationModule.forRoot(),\n    I18nModule.forRoot(),\n    LayoutModule,\n    // pages\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    CartPageModule, // as longs as we do not have #2661 in place we need a specific cart page module\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n  declarations: [],\n})\nexport class StorefrontModule {\n  static withConfig(config?: StorefrontModuleConfig): ModuleWithProviders {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config), ...provideConfigFromMetaTags()],\n    };\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  cartComponents,\n  defaultCartPageConfig,\n} from './default-cart-page.config';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\nimport { defaultPdpComponents, defaultPdpSlots } from './default-pdp-config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n        ...cartComponents,\n        ...defaultPdpComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n        ...defaultPdpSlots,\n      },\n      pages: [defaultCartPageConfig],\n    },\n  };\n}\n"]}