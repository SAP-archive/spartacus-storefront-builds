{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@spartacus/storefront/layout/launch-dialog/config/launch-config.ts","ng://@spartacus/storefront/layout/config/layout-config.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.model.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/inline-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/launch-dialog.service.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.model.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-ref/outlet-ref.module.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet-renderer.service.ts","ng://@spartacus/storefront/layout/loading/intersection.service.ts","ng://@spartacus/storefront/layout/loading/defer-loader.service.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.directive.ts","ng://@spartacus/storefront/cms-structure/outlet/outlet.module.ts","ng://@spartacus/storefront/layout/launch-dialog/services/outlet-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/services/routing-render.strategy.ts","ng://@spartacus/storefront/layout/launch-dialog/launch-dialog.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-launch-dialog.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/base/base-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/visible/visible-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/block/block-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.model.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/persist/persist-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/select-focus.util.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/escape/escape-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/autofocus/auto-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/tab/tab-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/trap/trap-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/lock/lock-focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/services/keyboard-focus.service.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/focus.directive.ts","ng://@spartacus/storefront/layout/a11y/keyboard-focus/keyboard-focus.module.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/banner/anonymous-consent-management-banner.component.ts","ng://@spartacus/storefront/layout/direction/config/direction.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/fontawesome-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon-loader.service.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.model.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.component.ts","ng://@spartacus/storefront/cms-components/misc/icon/default-icon.config.ts","ng://@spartacus/storefront/cms-components/misc/icon/icon.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/default-anonymous-consent-layout.config.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/open-dialog/anonymous-consent-open-dialog.component.ts","ng://@spartacus/storefront/cms-components/anonymous-consent-management/anonymous-consent-management.module.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.component.ts","ng://@spartacus/storefront/shared/components/spinner/spinner.module.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-form/consent-management-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/components/consent-management.component.ts","ng://@spartacus/storefront/cms-components/myaccount/consent-management/consent-management.module.ts","ng://@spartacus/storefront/shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module.ts","ng://@spartacus/storefront/shared/components/card/card.component.ts","ng://@spartacus/storefront/shared/components/card/card.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.service.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.component.ts","ng://@spartacus/storefront/layout/breakpoint/breakpoint.service.ts","ng://@spartacus/storefront/shared/components/media/media.service.ts","ng://@spartacus/storefront/shared/components/media/media.component.ts","ng://@spartacus/storefront/shared/components/media/media.module.ts","ng://@spartacus/storefront/shared/components/carousel/carousel.module.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.component.ts","ng://@spartacus/storefront/shared/components/form/form-errors/form-errors.module.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.component.ts","ng://@spartacus/storefront/shared/components/generic-link/generic-link.module.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.component.ts","ng://@spartacus/storefront/shared/components/item-counter/item-counter.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/default-pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/config/pagination.config.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.builder.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context.model.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/pagination/pagination.module.ts","ng://@spartacus/storefront/shared/components/list-navigation/sorting/sorting.component.ts","ng://@spartacus/storefront/shared/components/list-navigation/list-navigation.module.ts","ng://@spartacus/storefront/shared/components/media/media.config.ts","ng://@spartacus/storefront/shared/components/modal/modal-ref.ts","ng://@spartacus/storefront/shared/components/modal/modal.service.ts","ng://@spartacus/storefront/shared/components/split-view/split-view-deactivate.guard.ts","ng://@spartacus/storefront/shared/components/split-view/split-view.service.ts","ng://@spartacus/storefront/shared/components/split-view/split/split-view.component.ts","ng://@spartacus/storefront/shared/components/split-view/view/view.component.ts","ng://@spartacus/storefront/shared/components/split-view/split-view.module.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.component.ts","ng://@spartacus/storefront/cms-components/misc/global-message/global-message.module.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics-loader.service.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.component.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/config/default-qualtrics-config.ts","ng://@spartacus/storefront/cms-components/misc/qualtrics/qualtrics.module.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/language-currency.component.ts","ng://@spartacus/storefront/cms-structure/page/model/cms-component-data.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-component.service.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.component.ts","ng://@spartacus/storefront/cms-components/misc/site-context-selector/site-context-selector.module.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.component.ts","ng://@spartacus/storefront/shared/components/star-rating/star-rating.module.ts","ng://@spartacus/storefront/shared/components/table/config/table.config.ts","ng://@spartacus/storefront/shared/components/table/table.component.ts","ng://@spartacus/storefront/shared/components/table/table.module.ts","ng://@spartacus/storefront/shared/components/table/table.service.ts","ng://@spartacus/storefront/shared/config/view-config.ts","ng://@spartacus/storefront/shared/config/view-config.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.service.ts","ng://@spartacus/storefront/shared/services/promotion/promotion.service.ts","ng://@spartacus/storefront/shared/utils/validators/custom-form-validators.ts","ng://@spartacus/storefront/shared/utils/forms/title-utils.ts","ng://@spartacus/storefront/cms-structure/services/feature-modules.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-components.service.ts","ng://@spartacus/storefront/shared/utils/combined-injector.ts","ng://@spartacus/storefront/cms-structure/page/component/services/cms-injector.service.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/component-handler.ts","ng://@spartacus/storefront/cms-structure/page/component/services/component-handler.service.ts","ng://@spartacus/storefront/cms-structure/page/component/component-wrapper.directive.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/default-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/handlers/lazy-component.handler.ts","ng://@spartacus/storefront/cms-structure/page/component/page-component.module.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-enabler.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-constants.ts","ng://@spartacus/storefront/cms-components/asm/asm-loader.module.ts","ng://@spartacus/storefront/cms-components/checkout/model/checkout-step.model.ts","ng://@spartacus/storefront/cms-components/checkout/config/checkout-config.ts","ng://@spartacus/storefront/cms-components/asm/services/asm-component.service.ts","ng://@spartacus/storefront/cms-components/asm/asm-main-ui/asm-main-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/asm-session-timer.component.ts","ng://@spartacus/storefront/cms-components/asm/asm-session-timer/format-timer.pipe.ts","ng://@spartacus/storefront/cms-components/asm/asm-toggle-ui/asm-toggle-ui.component.ts","ng://@spartacus/storefront/cms-components/asm/csagent-login-form/csagent-login-form.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-emulation/customer-emulation.component.ts","ng://@spartacus/storefront/cms-components/asm/customer-selection/customer-selection.component.ts","ng://@spartacus/storefront/cms-components/asm/default-asm-layout.config.ts","ng://@spartacus/storefront/cms-components/asm/asm.module.ts","ng://@spartacus/storefront/cms-components/product/current-product.service.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/added-to-cart-dialog/added-to-cart-dialog.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/promotions/promotions.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/applied-coupons/applied-coupons.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-coupon/cart-coupon.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item-list/cart-item-list.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-item/cart-item.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/order-summary/order-summary.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-shared/cart-shared.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-cart/add-to-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-details/cart-details.module.ts","ng://@spartacus/storefront/cms-components/cart/cart-not-empty.guard.ts","ng://@spartacus/storefront/cms-components/cart/cart-page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.component.ts","ng://@spartacus/storefront/cms-components/cart/cart-totals/cart-totals.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout-handler.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.component.ts","ng://@spartacus/storefront/cms-components/cart/mini-cart/mini-cart.module.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.component.ts","ng://@spartacus/storefront/cms-components/cart/add-to-wishlist/add-to-wish-list.module.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.component.ts","ng://@spartacus/storefront/cms-components/cart/save-for-later/save-for-later.module.ts","ng://@spartacus/storefront/cms-components/cart/cart.module.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/skip-link.config.ts","ng://@spartacus/storefront/cms-components/checkout/config/default-checkout-config.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-config.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-auth.guard.ts","ng://@spartacus/storefront/cms-components/checkout/services/checkout-details.service.ts","ng://@spartacus/storefront/cms-components/checkout/services/express-checkout.service.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-orchestrator/checkout-orchestrator.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-order-summary/checkout-order-summary.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/checkout-progress/checkout-progress.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/shipping-address-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/delivery-mode/delivery-mode.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/delivery-mode-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-form/payment-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/payment-method/payment-method.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/place-order/place-order.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/payment-details-set.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/review-submit/review-submit.module.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/address-form/address-form.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/checkout-details-loaded.guard.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.component.ts","ng://@spartacus/storefront/cms-components/checkout/components/shipping-address/shipping-address.module.ts","ng://@spartacus/storefront/cms-components/checkout/checkout.module.ts","ng://@spartacus/storefront/cms-components/checkout/guards/not-checkout-auth.guard.ts","ng://@spartacus/storefront/layout/a11y/skip-link/service/skip-link.service.ts","ng://@spartacus/storefront/layout/a11y/skip-link/component/skip-link.component.ts","ng://@spartacus/storefront/layout/a11y/skip-link/config/default-skip-link.config.ts","ng://@spartacus/storefront/layout/a11y/skip-link/directive/skip-link.directive.ts","ng://@spartacus/storefront/layout/a11y/skip-link/skip-link.module.ts","ng://@spartacus/storefront/layout/direction/config/direction.config.ts","ng://@spartacus/storefront/layout/direction/config/default-direction.config.ts","ng://@spartacus/storefront/layout/direction/direction.service.ts","ng://@spartacus/storefront/layout/direction/direction.module.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.service.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.component.ts","ng://@spartacus/storefront/layout/header/hamburger-menu/hamburger-menu.module.ts","ng://@spartacus/storefront/layout/layout.module.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.component.ts","ng://@spartacus/storefront/cms-structure/page/slot/page-slot.module.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.component.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-template-style.service.ts","ng://@spartacus/storefront/cms-structure/page/page-layout/page-layout.module.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module-config.ts","ng://@spartacus/storefront/cms-structure/pwa/services/add-to-home-screen.service.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-banner/add-to-home-screen-banner.component.ts","ng://@spartacus/storefront/cms-structure/pwa/components/add-to-home-screen-btn/add-to-home-screen-btn.component.ts","ng://@spartacus/storefront/cms-structure/pwa/pwa.module.ts","ng://@spartacus/storefront/cms-structure/seo/html-lang-provider.ts","ng://@spartacus/storefront/cms-structure/seo/seo-meta.service.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld-script.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/json-ld.directive.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/tokens.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.factory.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/structured-data.module.ts","ng://@spartacus/storefront/cms-structure/seo/seo.module.ts","ng://@spartacus/storefront/layout/main/storefront.component.ts","ng://@spartacus/storefront/layout/main/main.module.ts","ng://@spartacus/storefront/cms-structure/services/cms-guards.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-i18n.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes-impl.service.ts","ng://@spartacus/storefront/cms-structure/services/cms-routes.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page-guard.service.ts","ng://@spartacus/storefront/cms-structure/guards/cms-page.guard.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/add-cms-route.ts","ng://@spartacus/storefront/cms-structure/routing/cms-route/cms-route.module.ts","ng://@spartacus/storefront/cms-structure/routing/default-routing-config.ts","ng://@spartacus/storefront/cms-structure/routing/routing.module.ts","ng://@spartacus/storefront/cms-structure/routing/suffix-routes/suffix-url-matcher.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.model.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/breadcrumb/breadcrumb-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-base-product.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-offer.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/jsonld-product-review.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/product/product-schema.builder.ts","ng://@spartacus/storefront/cms-structure/seo/structured-data/builders/json-ld-builder.module.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.component.ts","ng://@spartacus/storefront/cms-components/content/banner-carousel/banner-carousel.module.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.component.ts","ng://@spartacus/storefront/cms-components/content/banner/banner.module.ts","ng://@spartacus/storefront/cms-components/content/link/link.component.ts","ng://@spartacus/storefront/cms-components/content/link/link.module.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.component.ts","ng://@spartacus/storefront/cms-components/content/paragraph/paragraph.module.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.component.ts","ng://@spartacus/storefront/cms-components/content/tab-paragraph-container/tab-paragraph-container.module.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.component.ts","ng://@spartacus/storefront/cms-components/myaccount/address-book/address-book.module.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account-modal/close-account-modal.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/components/close-account/close-account.component.ts","ng://@spartacus/storefront/cms-components/myaccount/close-account/close-account.module.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/forgot-password/forgot-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-actions/amend-order-actions.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-view/product-view.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/amend-order-items/amend-order-items.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/cancel-order/cancel-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/cancellations/order-cancellation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.guard.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/return-order/return-order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/amend-order/returns/order-return.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-headline/order-detail-headline.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-detail-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-shipping/order-detail-shipping.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-totals/order-detail-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-detail-actions/order-detail-actions.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-details/order-details.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order-history/order-history.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request.service.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-overview/return-request-overview.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-items/return-request-items.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-totals/return-request-totals.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-detail/return-request-detail.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.component.ts","ng://@spartacus/storefront/cms-components/myaccount/order/return-request-list/order-return-request-list.module.ts","ng://@spartacus/storefront/cms-components/myaccount/order/order.module.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.component.ts","ng://@spartacus/storefront/cms-components/myaccount/payment-methods/payment-methods.module.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/reset-password/reset-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email-form/update-email-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-email/update-email.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password-form/update-password-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/components/update-password/update-password.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-password/update-password.module.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/components/update-profile-form.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.component.ts","ng://@spartacus/storefront/cms-components/myaccount/update-profile/update-profile.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.service.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-dialog/coupon-dialog.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-card/coupon-card.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/coupon-claim/coupon-claim.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-coupons/my-coupons.module.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.component.ts","ng://@spartacus/storefront/cms-components/myaccount/notification-preference/notification-preference.module.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.component.ts","ng://@spartacus/storefront/cms-components/myaccount/my-interests/my-interests.module.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.component.ts","ng://@spartacus/storefront/cms-components/navigation/breadcrumb/breadcrumb.module.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.service.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation-ui.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/navigation/navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/category-navigation/category-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.component.ts","ng://@spartacus/storefront/cms-components/navigation/footer-navigation/footer-navigation.module.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box-component.service.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.component.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/highlight.pipe.ts","ng://@spartacus/storefront/cms-components/navigation/search-box/search-box.module.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","ng://@spartacus/storefront/cms-components/order-confirmation/guards/order-confirmation.guard.ts","ng://@spartacus/storefront/cms-components/order-confirmation/order-confirmation.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel.service.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-carousel/product-carousel.module.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.component.ts","ng://@spartacus/storefront/cms-components/product/carousel/product-references/product-references.module.ts","ng://@spartacus/storefront/cms-components/product/config/default-scroll-config.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.component.ts","ng://@spartacus/storefront/cms-components/product/product-images/product-images.module.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.component.ts","ng://@spartacus/storefront/cms-components/product/product-intro/product-intro.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list-component.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/container/product-scroll/product-scroll.component.ts","ng://@spartacus/storefront/cms-components/product/product-outlets.model.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/product-facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/services/facet.service.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/active-facets/active-facets.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet/facet.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/facet-list/facet-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-facet-navigation/product-facet-navigation.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-grid-item/product-grid-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list-item/product-list-item.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-selector/variant-style-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-size-selector/variant-size-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-color-selector/variant-color-selector.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.component.ts","ng://@spartacus/storefront/cms-components/product/product-variants/variant-style-icons/variant-style-icons.module.ts","ng://@spartacus/storefront/cms-components/product/product-variants/guards/product-variant.guard.ts","ng://@spartacus/storefront/cms-components/product/product-variants/product-variants.module.ts","ng://@spartacus/storefront/cms-components/product/product-list/product-list.module.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.component.ts","ng://@spartacus/storefront/cms-components/product/product-summary/product-summary.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-attributes/product-attributes.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-details-tab/product-details-tab.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.component.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-reviews/product-reviews.module.ts","ng://@spartacus/storefront/cms-components/product/product-tabs/product-tabs.module.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification-dialog/stock-notification-dialog.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.component.ts","ng://@spartacus/storefront/cms-components/product/stock-notification/stock-notification.module.ts","ng://@spartacus/storefront/cms-components/storefinder/components/schedule-component/schedule.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-grid/store-finder-grid.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-header/store-finder-header.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/abstract-store-item/abstract-store-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-list-item/store-finder-list-item.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-map/store-finder-map.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-pagination-details/store-finder-pagination-details.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-list/store-finder-list.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search-result/store-finder-search-result.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-search/store-finder-search.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store-description/store-finder-store-description.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-stores-count/store-finder-stores-count.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder/store-finder.component.ts","ng://@spartacus/storefront/cms-components/storefinder/components/store-finder-store/store-finder-store.component.ts","ng://@spartacus/storefront/cms-components/storefinder/store-finder.module.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.component.ts","ng://@spartacus/storefront/cms-components/user/checkout-login/checkout-login.module.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.component.ts","ng://@spartacus/storefront/cms-components/user/login-form/login-form.module.ts","ng://@spartacus/storefront/cms-components/user/login/login.component.ts","ng://@spartacus/storefront/cms-components/user/login/login.module.ts","ng://@spartacus/storefront/cms-components/user/logout/logout-guard.ts","ng://@spartacus/storefront/cms-components/user/logout/logout.module.ts","ng://@spartacus/storefront/cms-components/user/register/register.component.ts","ng://@spartacus/storefront/cms-components/user/register/register.module.ts","ng://@spartacus/storefront/cms-components/user/user.module.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list-item/wish-list-item.component.ts","ng://@spartacus/storefront/cms-components/wish-list/components/wish-list/wish-list.component.ts","ng://@spartacus/storefront/cms-components/wish-list/wish-list.module.ts","ng://@spartacus/storefront/cms-components/cms-lib.module.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-details-page/product-details-page.module.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-url-matcher.ts","ng://@spartacus/storefront/cms-pages/product-listing-page/product-listing-page.module.ts","ng://@spartacus/storefront/events/page/page.events.ts","ng://@spartacus/storefront/events/cart/cart-page.events.ts","ng://@spartacus/storefront/events/cart/cart-page-event.builder.ts","ng://@spartacus/storefront/events/cart/cart-page-event.module.ts","ng://@spartacus/storefront/events/page/page-event.builder.ts","ng://@spartacus/storefront/events/page/page-event.module.ts","ng://@spartacus/storefront/events/product/product-page.events.ts","ng://@spartacus/storefront/events/product/product-page-event.builder.ts","ng://@spartacus/storefront/events/product/product-page-event.module.ts","ng://@spartacus/storefront/recipes/config/b2c-layout-config.ts","ng://@spartacus/storefront/recipes/config/default-media.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-header.config.ts","ng://@spartacus/storefront/recipes/config/static-cms-structure/default-cms-content.config.ts","ng://@spartacus/storefront/events/events.module.ts","ng://@spartacus/storefront/recipes/storefront-foundation.module.ts","ng://@spartacus/storefront/recipes/storefront.module.ts","ng://@spartacus/storefront/recipes/b2c-storefront.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","DIALOG_TYPE","LAUNCH_CALLER","BREAKPOINT","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__values","o","m","__read","ar","error","__spread","concat","OutletPosition","LayoutConfig","Injectable","providedIn","useExisting","Config","LaunchRenderStrategy","document","rendererFactory","renderedCallers","dialogClasses","popoverClasses","sidebarEndClasses","sidebarStartClasses","renderer","createRenderer","shouldRender","caller","config","Boolean","component","some","el","multi","applyClasses","dialogType","classes","DIALOG","addClass","POPOVER","SIDEBAR_END","SIDEBAR_START","classes_1","classes_1_1","newClass","location","nativeElement","remove","filter","_a","removeClass","getPriority","Inject","DOCUMENT","InlineRenderStrategy","componentFactoryResolver","_this","_super","render","vcr","template","resolveComponentFactory","createComponent","element","of","isDevMode","console","warn","hasMatch","inline","args","RendererFactory2","ComponentFactoryResolver","LaunchDialogService","renderStrategies","layoutConfig","_dialogClose","BehaviorSubject","undefined","launch","findConfiguration","getStrategy","clear","asObservable","closeDialog","reason","resolveApplicable","ICON_TYPE","OutletService","features","templatesRefs","BEFORE","Map","REPLACE","AFTER","add","outlet","templateOrFactory","position","store","newValue","get","set","stacked","templateRef","removeValueOrAll","has","delete","existing","isLevel","val","FeatureConfigService","OutletRefDirective","tpl","outletService","ngOnInit","cxOutletRef","cxOutletPos","ngOnDestroy","TemplateRef","Input","Directive","selector","OutletRefModule","NgModule","imports","CommonModule","declarations","exports","OutletRendererService","outletRefs","size","register","cxOutlet","context","getOutletRef","pipe","map","IntersectionService","isIntersected","options","intersects","first","Observable","observer","intersectOptions","rootMargin","getRootMargin","threshold","intersectionObserver","IntersectionObserver","entries","observe","disconnect","flatMap","entry","isIntersecting","distinctUntilChanged","deferredLoading","intersectionMargin","DeferLoaderService","platformId","intersectionService","globalLoadStrategy","strategy","DeferLoadingStrategy","INSTANT","load","shouldLoadInstantly","deferLoading","elementLoadingStrategy","isPlatformServer","DEFER","type","PLATFORM_ID","OutletDirective","deferLoaderService","outletRendererService","renderedTemplate","renderedComponents","loaded","EventEmitter","subscription","Subscription","unsubscribe","cxOutletDefer","build","ngOnChanges","changes","emit","hostElement","getHostElement","subscribe","buildOutlet","templates","includes","isArray","components","forEach","obj","tmplOrFactory","ComponentFactory","view","createEmbeddedView","$implicit","cxOutletContext","markForCheck","HTMLElement","parentNode","ViewContainerRef","Output","OutletModule","providers","OutletRenderStrategy","template_1","outletDirective","reverse","find","componentType","tap","RoutingRenderStrategy","routingService","_caller","go","cxRoute","RoutingService","LaunchDialogModule","forRoot","ngModule","LaunchDialogModule_1","provide","AnonymousConsentLaunchDialogService","launchDialogService","openDialog","openElement","ANONYMOUS_CONSENT","combineLatest","dialogClose","close","comp","focus","destroy","BaseFocusService","BaseFocusDirective","elementRef","service","defaultConfig","setDefaultConfiguration","requiredTabindex","tabindex","requiresExplicitTabIndex","indexOf","host","tagName","toLowerCase","hasAttribute","ElementRef","HostBinding","VisibleFocusDirective","disableMouseFocus","mouseFocus","handleMousedown","shouldFocusVisible","handleKeydown","event","isNavigating","metaKey","code","HostListener","BlockFocusDirective","block","PersistFocusService","group","getPersistenceGroup","getAttribute","PersistFocusDirective","handleFocus","preventDefault","stopPropagation","attr","ngAfterViewInit","isPersisted","preventScroll","SelectFocusUtility","focusableSelectors","focusableSelectorSuffix","query","from","querySelectorAll","findFirstFocusable","autofocus","isHidden","findFocusable","locked","invisible","suffix","join","offsetParent","EscapeFocusService","selectFocusUtil","shouldFocus","focusOnEscape","handleEscape","focusOnDoubleEscape","EscapeFocusDirective","esc","AutoFocusService","hasPersistedFocus","getPersisted","focussed","AutoFocusDirective","shouldAutofocus","firstFocusable","TabFocusService","moveTab","increment","tab","findNextScrollable","findNext","active","getActiveChild","virtualSlideCount","Math","round","scrollWidth","clientWidth","nextVirtualSlide","offsetLeft","getChildren","childs","activeIndex","findIndex","persisted","children","index","isActive","child","activeElement","TabFocusDirective","handleNextTab","handlePreviousTab","TrapFocusService","hasFocusableChildren","moveFocus","focusable","getTrapStart","trap","getTrapEnd","TrapFocusDirective","handleTrapDown","handleTrapUp","LockFocusService","LockFocusDirective","lock","unlock","handleEnter","shouldLock","unlockFocus","handleClick","isLocked","lockFocus","addTabindexToChildren","setTimeout","_b","setAttribute","shouldUnlockAfterAutofocus","toString","Renderer2","KeyboardFocusService","FocusDirective","directives","KeyboardFocusModule","AnonymousConsentManagementBannerComponent","anonymousConsentsService","anonymousConsentLaunchDialogService","subscriptions","bannerVisible$","isBannerVisible","viewDetails","hideBanner","dialog","allowAll","giveAllConsents","toggleBannerDismissed","AnonymousConsentsService","Component","IconResourceType","IconConfig","DirectionMode","fontawesomeIconConfig","icon","symbols","SEARCH","CART","INFO","STAR","GRID","LIST","CARET_DOWN","CARET_RIGHT","CARET_LEFT","ERROR","WARNING","SUCCESS","CLOSE","VISA","MASTER_CARD","AMEX","DINERS_CLUB","CREDIT_CARD","COLLAPSE","EXPAND","RESET","CIRCLE","HEART","EMPTY_HEART","FILTER","resources","LINK","url","IconLoaderService","winRef","iconConfig","sanitizer","loadedResources","getHtml","isResourceType","SVG","bypassSecurityTrustHtml","getSvgPath","TEXT","getSymbol","getFlipDirection","flipDirection","getStyleClasses","iconType","resourceType","res","types","svgResource","addLinkResource","resource","findResource","head","getElementsByTagName","link","createElement","rel","href","appendChild","WindowRef","DomSanitizer","PaginationItemType","PaginationNavigationPosition","IconComponent","iconLoader","setIcon","addStyleClasses","flipIcon","iconDirection","flipAtLtr","LTR","flipAtRtl","RTL","styleClasses","cls","split","defaultIconConfig","IconModule","provideDefaultConfig","AnonymousConsentDialogComponent","role","modal","showLegalDescription","iconTypes","requiredConsents","focusConfig","anonymousConsents","showLegalDescriptionInDialog","templates$","getTemplates","consents$","getConsents","loading$","getLoadTemplatesLoading","rejectAll","take","consents","consent","getCorrespondingConsent","isConsentGiven","isRequiredConsent","withdrawConsent","id","consentState","isConsentWithdrawn","giveConsent","onConsentChange","given","consents_1","consents_1_1","templateCode","AnonymousConsentsConfig","defaultAnonymousConsentLayoutConfig","AnonymousConsentOpenDialogComponent","ViewChild","AnonymousConsentManagementBannerModule","I18nModule","FeaturesConfigModule","provideConfig","cmsComponents","entryComponents","SpinnerComponent","SpinnerModule","ConsentManagementFormComponent","consentGiven","consentChanged","ANONYMOUS_CONSENT_STATUS","GIVEN","consentTemplate","currentConsent","consentWithdrawnDate","consentGivenDate","isRequired","templateId","ConsentManagementComponent","userConsentService","globalMessageService","anonymousConsentsConfig","authService","allConsentsLoading","getConsentsResultLoading","getGiveConsentResultLoading","getWithdrawConsentResultLoading","isUserLoggedIn","consentLoading","giveConsentLoading","withdrawConsentLoading","consentListInit","giveConsentInit","withdrawConsentInit","templateList$","withLatestFrom","templateList","consentsExists","loadConsents","anonymousTemplates","consentManagementPage","hideAnonymousConsents","hideTemplateIds","showAnonymousConsents","hideConsents","filterConsentTemplates","resetGiveConsentProcessState","getGiveConsentResultSuccess","success","onConsentGivenSuccess","resetWithdrawConsentProcessState","skipWhile","getWithdrawConsentResultSuccess","withdrawalSuccess","onConsentWithdrawnSuccess","version","GlobalMessageType","MSG_TYPE_CONFIRMATION","consentsToWithdraw","setupWithdrawalStream","_timesLoaded","loading","scan","acc","_value","timesLoaded","consentsToGive","setupGiveStream","UserConsentService","GlobalMessageService","AuthService","ConsentManagementModule","FormsModule","ReactiveFormsModule","guards","AuthGuard","AnonymousConsentsDialogModule","CardComponent","deleteCard","setDefaultCard","sendCard","editCard","cancelCard","border","editMode","isDefault","fitToContainer","setEditMode","cancelEdit","setDefault","send","edit","CardModule","CarouselService","getItemsPerSlide","itemWidth","resize$","totalWidth","calculateItems","availableWidth","calculatedItems","endsWith","substring","floor","CarouselComponent","hideIndicators","indicatorIcon","previousIcon","nextIcon","inputItems","items","activeSlide","size$","changeDetection","ChangeDetectionStrategy","OnPush","DEFAULT_BREAKPOINTS","xs","sm","md","lg","BreakpointService","window","getBreakpoint","innerWidth","getSize","breakpoint","breakpoints","xl","isDown","breakpoint$","br","slice","isUp","isEqual","windowWidth","getClosest","nativeWindow","MediaService","breakpointService","getMedia","mediaContainer","format","alt","mainMedia","resolveMedia","src","resolveAbsoluteUrl","altText","srcset","resolveSrcSet","_sortedFormats","keys","mediaFormats","sort","a","width","_reversedFormats","sortedFormats","media","resolveFormat","resolveBestFormat","reversedFormats","reduce","startsWith","getBaseUrl","backend","baseUrl","occ","MediaComponent","mediaService","isInitialized","isLoading","isMissing","container","handleMissing","loadHandler","errorHandler","MediaModule","MediaModule_1","CarouselModule","RouterModule","UrlModule","FormErrorsComponent","_control","control","errors$","statusChanges","startWith","errors","invalid","dirty","touched","FormErrorsModule","GenericLinkComponent","router","PROTOCOL_REGEX","URL_SPLIT","routeParts","isExternalUrl","test","setUrlParts","currentValue","path","queryParams","fragment","getAbsoluteUrl","splitUrl","parseUrl","match","Router","GenericLinkModule","ItemCounterComponent","min","allowZero","readonly","input","sub","valueChanges","setValue","getValidCount","emitEvent","markAsDirty","decrement","max","ItemCounterModule","defaultPaginationConfig","pagination","addStart","addEnd","PaginationConfig","SiteContextType","FALLBACK_PAGINATION_OPTIONS","rangeCount","dotsLabel","startLabel","previousLabel","nextLabel","endLabel","PaginationBuilder","paginationConfig","paginate","pageCount","current","pages","addPages","addDots","addFirstLast","addNavigation","start","getStartOfRange","number","String","PAGE","unshift","firstItemNumber","gapNumber","addFirst","isGap","substituteDotsForSingularPage","isSubstitued","GAP","FIRST","addFirstGap","nextPageNumber","last","addLast","LAST","addLastGap","before","getBeforeLinks","after","getAfter","pos","navigationPosition","ASIDE","list","START","addPrevious","PREVIOUS","addNext","NEXT","END","count","delta","minStart","maxStart","PaginationComponent","paginationBuilder","activatedRoute","viewPageEvent","_pagination","totalPages","currentPage","isCurrent","item","isInactive","getQueryParams","snapshot","queryParam","defaultPage","pageChange","page","ActivatedRoute","PaginationModule","SortingComponent","sortListEvent","sortList","sortCode","ListNavigationModule","NgSelectModule","MediaConfig","ModalRef","NgbModalRef","ModalService","ngbModalService","modals","open","content","activeModal","getActiveModal","dismissActiveModal","dismiss","closeActiveModal","NgbModal","SplitViewDeactivateGuard","canDeactivate","timer","SplitViewService","_views$","visibleViewCount","views","hidden","visible","viewPosition","hide","splice","toggle","force","viewState","generateNextPosition","SplitViewComponent","splitService","lastVisibleView","lastVisible","ViewComponent","hiddenChange","SplitViewModule","GlobalMessageComponent","messageType","messages$","GlobalMessageComponentModule","HttpClientModule","QualtricsConfig","QualtricsLoaderService","qsiLoaded$","fromEvent","qsi$","switchMap","isDataLoaded","api","qsi","qsiApi","initialize","run","reload","API","unload","log","addScript","scriptSource","hasScript","script","defer","source","querySelector","QualtricsComponent","qualtricsLoader","qualtrics","defaultQualtricsConfig","QualtricsModule","LanguageCurrencyComponent","LABELS","_a$1","LANGUAGE_CONTEXT_ID","CURRENCY_CONTEXT_ID","SiteContextComponentService","componentData","contextServiceMap","injector","getItems","getService","getAll","getContext","ctx","itemsCopy","items_1","items_1_1","getOptionLabel","getActiveItem","getActive","getLabel","setActive","getInjectedService","data$","data","nativeName","symbol","isocode","CmsComponentData","Optional","ContextServiceMap","Injector","SiteContextSelectorComponent","componentService","SiteContextSelectorModule","SiteContextModule","CMSSiteContextComponent","useClass","deps","StarRatingComponent","disabled","change","initialRate","setRate","rating","saveRate","setRateOnEvent","StarRatingModule","TableConfig","TableComponent","paginateEvent","_dataset","dataset","addTableDebugInfo","getDataValue","dataRow","headerKey","values","header","tableType","structure","TableModule","TableService","buildStructure","hasTableConfig","buildStructureFromConfig","buildStructureFromData","buildRandomStructure","getTableConfig","headers","hideHeader","tableConfig","table","bestMatch","message","ViewConfig","ViewConfigModule","ViewConfigModule_1","OrderDetailsService","userOrderService","orderCode$","getRouterState","routingData","state","params","orderCode","orderLoad$","loadOrderDetails","clearOrderDetails","shareReplay","bufferSize","refCount","getOrderDetails","UserOrderService","PromotionService","orderDetailsService","checkoutService","activeCartService","getOrderPromotions","promotionLocation","PromotionLocation","ActiveCart","getOrderPromotionsFromCart","Checkout","getOrderPromotionsFromCheckout","Order","getOrderPromotionsFromOrder","cart","getOrderPromotionsFromCartHelper","potentialPromotions","potentialOrderPromotions","appliedPromotions","appliedOrderPromotions","order","getOrderPromotionsFromOrderHelper","getProductPromotionForEntry","getProductPromotion","appliedProductPromotions","promotions","entryPromotions","promotions_1","promotions_1_1","promotion","description","consumedEntries","_c","e_2","_d","consumedEntry","isConsumedByEntry","consumedEntryNumber","orderEntryNumber","entryNumber","CheckoutService","ActiveCartService","CustomFormValidators","emailValidator","email","EMAIL_PATTERN","cxInvalidEmail","passwordValidator","password","PASSWORD_PATTERN","cxInvalidPassword","starRatingEmpty","cxStarRatingEmpty","passwordsMustMatch","passwordConfirmation","formGroup","controlsMustMatch","emailsMustMatch","emailConfirmation","firstControlName","secondControlName","errorName","firstControl","controls","secondControl","setErrors","titleScores","mr","mrs","miss","ms","dr","rev","sortTitles","title1","title2","FeatureModulesService","configInitializer","compiler","componentFeatureMap","dependencyModules","initFeatureMap","_arguments","P","generator","getStableConfig","_k","featureModulesConfig","featureModules","_e","featureName","featureConfig","_f","_g","Promise","resolve","reject","fulfilled","rejected","result","then","hasFeatureFor","getCmsMapping","feature","resolveFeature","featureInstance","componentsMappings","getInjectors","injectors","moduleRef","depsModules","module","featureConfig_1","Error","depsResolve","dependencies","forkJoin","depModuleFunc","resolveDependencyModule","resolveFeatureModule","resolveModuleFactory","resolvedConfiguration","resolveFeatureConfiguration","featureInjector","featureConfigChunks","ConfigChunk","InjectFlags","Self","featureDefaultConfigChunks","DefaultConfigChunk","configurationFactory","moduleFunc","moduleFactory","pluck","NgModuleFactory","compileModuleAsync","observeOn","queueScheduler","merge","dependency","ConfigInitializerService","Compiler","CmsComponentsService","missingComponents","mappings","mappingResolvers","determineMappings","componentTypes","featureResolvers","componentTypes_1","componentTypes_1_1","staticConfig","getFeatureMappingResolver","mapTo","mappingResolver$","featureComponentMapping","deepMerge","share","getMapping","componentConfig","disableSSR","getDeferLoadingStrategy","getChildRoutes","routes","componentTypes_2","componentTypes_2_1","childRoutes","getGuards","Set","componentTypes_3","componentTypes_3_1","guard","getI18nKeys","i18nKeys","componentTypes_4","componentTypes_4_1","CmsConfig","NOT_FOUND_SYMBOL","CombinedInjector","mainInjector","complementaryInjectors","token","notFoundValue","flags","CmsInjectorService","cmsComponentsService","getCmsData","uid","parentInjector","CmsService","getComponentData","getInjector","configProviders","useValue","parent","ComponentHandlerService","handlers","invalidMappings","componentMapping","handler","getLauncher","viewContainerRef","elementInjector","launcher","ComponentHandler","ComponentWrapperDirective","dynamicAttributeService","componentHandler","cmsInjector","cxComponentWrapper","flexType","launchComponent","launcherResource","componentRef","cmpRef","ChangeDetectorRef","addDynamicAttributes","DynamicAttributeService","DefaultComponentHandler","subscriber","factory","getComponentFactory","LazyComponentHandler","defaultHandler","isNotClass","signature","substr","replace","PageComponentModule","AsmEnablerService","isEnabled","addUi","isLaunched","isUsedBefore","localStorage","setItem","getItem","ASM","Location","AsmLoaderModule","APP_INITIALIZER","useFactory","asmFactory","asmEnablerService","CheckoutStepType","DeliveryModePreferences","AsmComponentService","asmAuthService","logoutCustomerSupportAgentAndCustomer","getUserToken","isCustomerEmulationToken","logoutCustomer","logoutCustomerSupportAgent","logout","isCustomerEmulationSessionInProgress","mergeMap","userToken","removeItem","AsmAuthService","AsmMainUiComponent","userService","asmComponentService","asmService","startingCustomerSession","csAgentToken$","getCustomerSupportAgentToken","csAgentTokenLoading$","getCustomerSupportAgentTokenLoading","customer$","access_token","handleCustomerSessionStartRedirection","isCollapsed$","getAsmUiState","uiState","collapsed","MSG_TYPE_ERROR","loginCustomerSupportAgent","userId","authorizeCustomerSupportAgent","startCustomerEmulationSession","customerId","customerSupportAgentToken","hideUi","UserService","AsmService","encapsulation","ViewEncapsulation","None","AsmSessionTimerComponent","changeDetectorRef","maxStartDelayInSeconds","timeLeft","getTimerStartDelayInSeconds","interval","setInterval","clearInterval","resetOnNavigate","resetOnCustomerSessionChange","resetTimer","getOccUserId","asm","agentSessionTimer","startingDelayInSeconds","AsmConfig","FormatTimerPipe","transform","totalSeconds","minutes","seconds","Pipe","name","AsmToggleUiComponent","isCollapsed","toggleUi","updateAsmUiState","CSAgentLoginFormComponent","fb","csAgentTokenLoading","submitEvent","csAgentLoginForm","Validators","required","onSubmit","valid","markAllAsTouched","FormBuilder","CustomerEmulationComponent","user","customer","isCustomerEmulationSessionInProgress$","CustomerSelectionComponent","customerSelectionForm","searchTerm","customerSearchReset","searchResultsLoading$","getCustomerSearchResultsLoading","searchResults","getCustomerSearchResults","debounceTime","searchTermValue","handleSearchTerm","selectedCustomer","trim","customerSearch","pageSize","maxResults","selectCustomerFromList","onDocumentClick","resultList","contains","closeResults","(document:click)","defaultAsmLayoutConfig","AsmModule","AsmCoreModule","CurrentProductService","productService","DEFAULT_PRODUCT_SCOPE","ProductScope","DETAILS","getProduct","scopes","productCode","x","ProductService","AddedToCartDialogComponent","modalService","cartService","promotionService","quantity","modalIsOpen","form","FormGroup","getQuantityControl","quantityControl$","entry$","getFormControl","valueChange","updateEntry","dismissModal","markAsPristine","orderPromotions$","FormControl","updateOn","addControl","read","AddToCartComponent","currentProductService","cd","showQuantity","hasStock","addToCartForm","product","cartEntry$","getEntry","setStockInfo","stock","stockLevelStatus","stockLevel","maxQuantity","updateCount","addToCart","openModal","addEntry","modalInstance","modalRef","centered","componentInstance","cart$","loaded$","isStable","PromotionsComponent","PromotionsModule","AppliedCouponsComponent","cartVoucherService","cartIsLoading","isReadOnly","vouchers","localeCompare","removeVoucher","voucherId","CartVoucherService","CartCouponComponent","formBuilder","customerCouponService","MAX_CUSTOMER_COUPON_PAGE","ignoreCloseEvent","couponBoxIsActive","loadCustomerCoupons","getActiveCartId","getCustomerCoupons","activeCardId","customerCoupons","cartId","getApplicableCustomerCoupons","coupons","cartIsLoading$","resetAddVoucherProcessingState","couponForm","couponCode","getAddVoucherResultSuccess","onSuccess","getAddVoucherResultError","onError","reset","applicableCoupons","appliedVouchers","appliedVoucher","coupon","couponId","applyVoucher","addVoucher","applyCustomerCoupon","blur","disableClose","CustomerCouponService","CartCouponModule","CartApplyCouponComponent","CartItemListComponent","selectiveCartService","hasHeader","isSaveForLater","optionalBtn","_items","resolveItems","createForm","disable","enable","every","consignmentEntry","orderEntry","updateable","removeEntry","getControl","SelectiveCartService","CartItemComponent","compact","appliedProductPromotions$","isProductOutOfStock","quantityControl","viewItem","OrderSummaryComponent","CartSharedModule","NgbModule","AddToCartModule","ProductAddToCartComponent","CartDetailsComponent","loggedIn","promotions$","entries$","getEntries","selectiveCartEnabled","cartLoaded$","getLoaded","cartLoaded","sflLoaded","saveForLater","CartDetailsModule","CartComponent","CartNotEmptyGuard","canActivate","isEmpty","totalItems","CartPageLayoutHandler","handle","slots$","pageTemplate","section","getCart","getLoading","slots","selectiveCart","loadingCart","exclude","arr","arg","CartTotalsComponent","CartTotalsModule","PAGE_LAYOUT_HANDLER","InjectionToken","MiniCartComponent","quantity$","deliveryItemsQuantity","total$","totalPrice","formattedValue","MiniCartModule","AddToWishListComponent","wishListService","product$","wishListEntries$","getWishList","wishlist","wishList","userLoggedIn$","getWishListLoading","getProductInWishList","WishListService","AddToWishListModule","SaveForLaterComponent","cmsService","isCartEmpty$","saveForLater$","moveToCart","SaveForLaterModule","CartComponentModule","CartModule","SkipLinkScrollPosition","CheckoutConfig","defaultCheckoutConfig","checkout","steps","routeName","SHIPPING_ADDRESS","DELIVERY_MODE","PAYMENT_DETAILS","REVIEW_ORDER","express","defaultDeliveryMode","FREE","guest","CheckoutConfigService","checkoutConfig","routingConfigService","getCheckoutStep","currentStepType","getCheckoutStepIndex","getCheckoutStepRoute","getFirstCheckoutStepRoute","getNextCheckoutStepUrl","stepIndex","getCurrentStepIndex","getStepUrlFromStepRoute","getPreviousCheckoutStepUrl","currentStepUrl","getStepUrlFromActivatedRoute","compareDeliveryCost","deliveryMode1","deliveryMode2","deliveryCost","findMatchingDeliveryMode","deliveryModes","LEAST_EXPENSIVE","leastExpensiveFound","deliveryMode","MOST_EXPENSIVE","codeFound","getPreferredDeliveryMode","isExpressCheckout","isGuestCheckout","stepRoute","getRouteConfig","paths","RoutingConfigService","CheckoutAuthGuard","authRedirectService","checkoutConfigService","getAssignedUser","isGuestCart","forced","reportAuthGuard","AuthRedirectService","CheckoutDetailsService","checkoutDeliveryService","checkoutPaymentService","cartId$","cartData","OCC_USER_ID_ANONYMOUS","guid","getCheckoutDetailsLoaded$","loadCheckoutDetails","getCheckoutDetailsLoaded","getDeliveryAddress","getSelectedDeliveryModeCode","getPaymentDetails","CheckoutDeliveryService","CheckoutPaymentService","ExpressCheckoutService","userAddressService","userPaymentService","checkoutDetailsService","setShippingAddress","setDeliveryMode","setPaymentMethod","shippingAddressSet$","getAddresses","getAddressesLoadedSuccess","getSetDeliveryAddressProcess","loadAddresses","addresses","setDeliveryAddressProcess","defaultAddress","address","setDeliveryAddress","setDeliveryAddressProcessState","paymentMethodSet$","getPaymentMethods","getPaymentMethodsLoadedSuccess","getSetPaymentDetailsResultProcess","loadPaymentMethods","payments","setPaymentDetailsProcess","defaultPayment","setPaymentDetails","setPaymentDetailsProcessState","deliveryModeSet$","getSupportedDeliveryModes","getSetDeliveryModeProcess","getLoadSupportedDeliveryModeProcess","addressSet","supportedDeliveryModes","setDeliveryModeStatusFlag","loadSupportedDeliveryModeStatus","setDeliveryModeStatus","preferredDeliveryMode","deliveryModeLoadingStatus","resetCheckoutProcesses","resetSetDeliveryAddressProcess","resetSetPaymentDetailsProcess","resetSetDeliveryModeProcess","trySetDefaultCheckoutDetails","deliveryModeSet","paymentMethodSet","UserAddressService","UserPaymentService","CheckoutGuard","expressCheckoutService","firstStep$","expressCheckoutPossible","CheckoutOrchestratorComponent","CheckoutOrchestratorModule","CheckoutOrchestrator","CheckoutOrderSummaryComponent","CheckoutOrderSummaryModule","CheckoutOrderSummary","CheckoutProgressMobileBottomComponent","routerState$","activeStepUrl","activeStepIndex","CheckoutProgressMobileBottomModule","CheckoutProgressMobileBottom","CheckoutProgressMobileTopComponent","CheckoutProgressMobileTopModule","CheckoutProgressMobileTop","CheckoutProgressComponent","getTabIndex","isDisabled","CheckoutProgressModule","CheckoutProgress","ShippingAddressSetGuard","checkoutStep","deliveryAddress","DeliveryModeComponent","allowRedirect","mode","deliveryModeId","checkoutStepUrlNext","checkoutStepUrlPrevious","supportedDeliveryModes$","deliveryModeSub","getSelectedDeliveryMode","currentDeliveryModeId","changeMode","back","DeliveryModeModule","CheckoutDeliveryMode","DeliveryModeSetGuard","SuggestedAddressDialogComponent","selectedAddress","suggestedAddresses","enteredAddress","closeModal","PaymentFormComponent","months","years","sameAsShippingAddress","selectedCountry$","goBack","closeForm","paymentForm","cardType","accountHolderName","cardNumber","expiryMonth","expiryYear","cvn","billingAddressForm","firstName","lastName","line1","line2","town","region","isocodeShort","country","postalCode","expMonthAndYear","countries$","getAllBillingCountries","countries","loadBillingCountries","cardTypes$","getCardTypes","cardTypes","loadSupportedCardTypes","shippingAddress$","showSameAsShippingAddressCheckbox$","shouldShowCheckbox","addressVerifySub","getAddressVerificationResults","results","decision","clearAddressVerificationResults","openSuggestedAddress","regions$","getRegions","regions","regionControl","year","Date","getFullYear","j","toggleDefaultPaymentMethod","toggleSameAsShippingAddress","getAddressCardContent","textBold","text","phone","suggestedAddressModalRef","catch","verifyAddress","countrySelected","paymentDetails","billingAddress","PaymentFormModule","PaymentMethodComponent","translation","newPaymentFormManuallyOpened","shouldRedirect","isLoading$","getPaymentMethodsLoading","existingPaymentMethods$","selectedMethod$","paymentInfo","sendPaymentMethodFailGlobalMessage","clearCheckoutStep","cards$","methods","method","translate","month","payment","expiryTranslation","paymentMethods","selectedMethod","textUseThisPayment","textDefaultPaymentMethod","textSelected","defaultPaymentMethod","paymentMethod","createCard","textExpires","selectPaymentMethod","showNewPaymentForm","hideNewPaymentForm","details","createPaymentDetails","paymentProcessSuccess","getCardIcon","field","cardLabels","selected","title","img","actions","goNext","goPrevious","TranslationService","PaymentMethodModule","CheckoutPaymentDetails","PlaceOrderComponent","checkoutSubmitForm","termsAndConditions","requiredTrue","submitForm","placeOrder","placeOrderSubscription","PlaceOrderModule","CheckoutPlaceOrder","PaymentDetailsSetGuard","ReviewSubmitComponent","checkoutStepType","deliveryAddress$","paymentDetails$","deliveryMode$","loadSupportedDeliveryModes","countryName$","getCountry","loadDeliveryCountries","getShippingAddressCard","countryName","textTitle","getDeliveryModeCard","getPaymentMethodCard","getCheckoutStepUrl","stepType","ReviewSubmitModule","CheckoutReviewOrder","AddressFormComponent","setAsDefaultField","showCancelBtn","submitAddress","backToAddress","addressForm","titleCode","getDeliveryCountries","titles$","getTitles","titles","loadTitles","subject","addressData","patchValue","regionSelected","addresses$","toggleDefaultAddress","regionsSub","AddressFormModule","CheckoutDetailsLoadedGuard","ShippingAddressComponent","newAddressFormManuallyOpened","forceLoader","getAddressesLoading","existingAddresses$","selectedAddress$","textDefaultShippingAddress","textShipToThisAddress","selectAddress","card","getCardContent","addAddress","shippingAddress","createAndSetAddress","showNewAddressForm","hideNewAddressForm","ShippingAddressModule","CheckoutShippingAddress","CheckoutComponentModule","NotCheckoutAuthGuard","SkipLinkConfig","SkipLinkService","keyboardFocusService","skipLinks$","getSkipLinks","found","skipLinks","skipLink","getSkipLinkIndexInArray","i18nKey","scrollToTarget","parentElement","hasTabindex","removeAttribute","previous","this_1","SkipLinkComponent","skipLinkService","defaultSkipLinkConfig","SkipLinkDirective","cxSkipLink","SkipLinkModule","ConfigModule","withConfig","skipLinkFactory","DirectionConfig","defaultDirectionConfig","direction","detect","default","rtlLanguages","DirectionService","configInit","languageService","startsDetecting","setDirection","documentElement","isoCode","getDirection","language","ltrLanguages","LanguageService","initHtmlDirAttribute","directionService","featureConfigService","DirectionModule","HamburgerMenuService","isExpanded","events","NavigationStart","forceCollapse","HamburgerMenuComponent","hamburgerMenuService","HamburgerMenuModule","LayoutModule","PageSlotComponent","isPageFold","isPending","hasComponents","position$","slot$","getContentSlot","isDistinct","components$","slot","pendingComponentCount","class","lastPosition","pending","addSmartEditSlotClass","isLoaded","loadState","getComponentDeferOptions","old","slotData","PageSlotModule","PageLayoutService","cms","warnLogMessages","logSlots","getSlots","page$","resolveSlots","getPageFoldSlot","layoutSlots","pageTemplateConfig","getResponsiveSlotConfig","pageFold","getSlotConfig","pageSlots_1","logMissingLayoutConfig","getCurrentPage","templateUid","configAttribute","getSlotConfigForSection","sectionConfig","responsiveConfig","layoutSlotConfig","slotConfig","all","info","cacheKey","PageLayoutComponent","pageLayoutService","section$","templateName$","layoutName$","styleClass","pageFoldSlot$","templateName","currentClass","PageTemplateStyleService","ref","addStyleClass","currentTemplate","classList","initPageTemplateStyle","PageLayoutModule","APP_BOOTSTRAP_LISTENER","PWAModuleConfig","defaultPWAModuleConfig","pwa","enabled","addToHomeScreen","AddToHomeScreenService","canPrompt","canPrompt$","init","addEventListener","deferredEvent","enableAddToHomeScreen","disableAddToHomeScreen","firePrompt","prompt","AddToHomeScreenComponent","addToHomeScreenService","AddToHomeScreenBannerComponent","AddToHomeScreenBtnComponent","pwaConfigurationFactory","pwaConfig","pwaFactory","PwaModule","ServiceWorkerModule","SwRegistrationOptions","htmlLangProvider","setHtmlLangAttribute","lang","SeoMetaService","ngTitle","ngMeta","pageMetaService","getMeta","meta","image","robots","PageRobotsMeta","INDEX","FOLLOW","setTitle","addTag","imageUrl","updateTag","Title","Meta","PageMetaService","JsonLdScriptFactory","schema","isJsonLdRequired","createJsonLdScriptElement","innerHTML","sanitize","isPlatformBrowser","scriptElement","getElementById","JSON","stringify","_key","SecurityContext","HTML","JsonLdDirective","jsonLdScriptFactory","writeJsonLd","html","jsonLD","SCHEMA_BUILDER","JSONLD_PRODUCT_BUILDER","StructuredDataFactory","scriptBuilder","builders","collectSchemas","builder","getStructuredDataFactory","StructuredDataModule","initSeoService","SeoModule","StorefrontComponent","isExpanded$","keyboardFocusConfig","navigateSubscription","startNavigating","stopNavigating","collapseMenuIfClickOutside","className","collapseMenu","MainModule","CmsGuardsService","cmsPageCanActivate","route","canActivateObservables","guardClass","isCanActivate","isObservable","wrapIntoObservable","endWith","CmsI18nService","translationChunk","loadForComponents","i18nChunks","i18nKeys_1","i18nKeys_1_1","getChunkNameForKey","loadChunks","TranslationChunkService","CmsRoutesImplService","cmsRouteExists","isCmsDrivenRoute","routePath","cxCmsRouteContext","handleCmsRoutesInGuard","pageContext","currentUrl","currentPageLabel","componentRoutes","updateRouting","navigateByUrl","pageLabel","PageType","CONTENT_PAGE","newRoute","resetConfig","CmsRoutesService","CmsPageGuardService","semanticPathService","cmsRoutes","cmsI18n","cmsGuards","canActivatePage","pageData","getPageComponentTypes","canActivateNotFoundPage","notFoundCmsPageContext","getPage","notFoundPage","getPageIndex","notFoundIndex","setPageFailIndex","SemanticPathService","CmsPageGuard","protectedRoutesGuard","routingConfig","getNextPageContext","shouldReload","getLoadStrategy","guardName","ProtectedRoutesGuard","cmsRoute","addCmsRoute","CmsRouteModule","ɵ0","defaultStorefrontRoutesConfig","home","notFound","login","protected","forgotPassword","resetPassword","checkoutLogin","checkoutShippingAddress","checkoutDeliveryMode","checkoutPaymentDetails","checkoutReviewOrder","orderConfirmation","search","category","paramsMapping","categoryCode","brand","orders","orderDetails","orderGuest","orderReturn","orderReturnConfirmation","orderCancel","orderCancelConfirmation","returnRequestDetails","returnCode","couponClaim","defaultRoutingConfig","routing","RoutingModule","RoutingModule_1","CoreRoutingModule","getSuffixUrlMatcher","marker","paramName","precedingParamName","matcher","segments","markerIndex","elements","predicate","findLastIndex","isMarkerLastSegment","posParams","consumed","AmendOrderType","BreadcrumbSchemaBuilder","pageMeta","collect","breadcrumbs","crumbs","crumb","@type","@id","@context","itemListElement","JsonLdBaseProductBuilder","getProductBase","getProductBrand","getProductImage","sku","summary","images","PRIMARY","JsonLdProductOfferBuilder","price","currencyIso","priceCurrency","availability","offers","JsonLdProductReviewBuilder","reviewService","getByProductCode","reviews","aggregateRating","buildAggregatedReviews","review","buildReviews","aggregated","averageRating","ratingValue","ratingCount","reviewCount","comment","reviewSchema","principal","author","date","datePublished","getMonth","getDate","headline","reviewRating","ProductReviewService","ProductSchemaBuilder","currentProduct","JsonLdBuilderModule","BannerCarouselComponent","componentData$","theme","effect","items$","banners","codes","BannerCarouselModule","RotatingImagesComponent","BannerComponent","BannerModule","SimpleResponsiveBannerComponent","SimpleBannerComponent","LinkComponent","LinkModule","CMSLinkComponent","ParagraphComponent","CmsParagraphModule","CMSParagraphComponent","CMSTabParagraphComponent","TabParagraphContainerComponent","activeTabNum","tabTitleParams","typeCode","select","tabNum","scrollTo","offsetTop","history","activeTab","getTitleParams","tabComps","instance","tabTitleParam$","ViewChildren","TabParagraphContainerModule","CMSTabParagraphContainer","AddressBookComponentService","getAddressesStateLoading","addUserAddress","updateUserAddress","addressId","clearCheckoutDeliveryDetails","AddressBookComponent","showAddAddressForm","showEditAddressForm","addressesStateLoading$","addAddressButtonHandle","editAddressButtonHandle","currentAddress","addAddressSubmit","addAddressCancel","editAddressSubmit","editAddressCancel","defaultText","setAsDefaultText","textDelete","textEdit","textVerifyDeleteMsg","deleteMsg","setAddressAsDefault","deleteAddress","deleteUserAddress","setEdit","AddressBookModule","AccountAddressBookComponent","CloseAccountModalComponent","translationService","userToken$","resetRemoveUserProcessState","getRemoveUserResultSuccess","getRemoveUserResultError","getRemoveUserResultLoading","closeAccount","CloseAccountComponent","CloseAccountModule","ForgotPasswordComponent","forgotPasswordForm","userEmail","requestForgotPasswordEmail","ForgotPasswordModule","NotAuthGuard","AmendOrderActionsComponent","styles","continue","amendOrderForm","forwardRoute","AmendOrderActionsModule","ValidateQuantityToCancel","cxNoSelectedItemToCancel","ViewModes","OrderAmendService","getAmendedEntries","getForm","getOrder","buildForm","entryGroup","validators","getMaxAmendQuantity","getAmendedPrice","amendedQuantity","amendedPrice","basePrice","formatCurrency","getCurrencySymbol","isCancellation","cancellableQuantity","returnableQuantity","amendType","CANCEL","CancelOrReturnItemsComponent","orderAmendService","isConfirmation","form$","setAll","getItemPrice","AmendOrderItemsModule","CancelOrderConfirmationComponent","submit","save","OrderCancellationService","inputs","Number","cancelOrder","cancellationRequestEntryInputs","getCancelOrderSuccess","afterSave","resetCancelOrderProcessState","OrderCancellationGuard","CancelOrderConfirmationModule","forChild","ɵ0$1","CancelOrderComponent","CancelOrderModule","ɵ0$2","OrderCancellationModule","OrderReturnService","returnRequestService","RETURN","createOrderReturnRequest","returnRequestEntryInputs","getReturnRequestSuccess","getOrderReturnRequest","returnRequest","rma","OrderReturnRequestService","OrderReturnGuard","ReturnOrderConfirmationComponent","ReturnOrderConfirmationModule","ɵ0$3","ReturnOrderComponent","ReturnOrderModule","ɵ0$4","OrderReturnModule","OrderDetailHeadlineComponent","order$","completedValues","cancelledValues","OrderDetailItemsComponent","others$","getOtherStatus","completed$","getExactStatus","cancel$","consignmentStatus","consignments","consignment","status","_i","TrackingEventsComponent","clearConsignmentTracking","NgbActiveModal","ConsignmentTrackingComponent","consignmentTracking$","getConsignmentTracking","openTrackingDialog","loadConsignmentTracking","tracking$","shipDate","statusDate","consignmentCode","OrderConsignedEntriesComponent","getConsignmentProducts","products","OrderDetailShippingComponent","getBillingAddressCardContent","getPaymentCardContent","getShippingMethodCardContent","shipping","OrderDetailTotalsComponent","OrderDetailActionsComponent","moduleComponents","ɵ1","OrderDetailsModule","ɵ0$5","AccountOrderDetailsActionsComponent","AccountOrderDetailsHeadlineComponent","AccountOrderDetailsItemsComponent","AccountOrderDetailsTotalsComponent","AccountOrderDetailsShippingComponent","consignmentTracking","OrderHistoryComponent","PAGE_SIZE","orders$","getOrderHistoryList","sortType","isLoaded$","getOrderHistoryListLoaded","totalResults","clearOrderList","changeSortCode","fetchOrders","goToOrderDetail","getSortLabels","byDate","byOrderNumber","loadOrderList","OrderHistoryModule","ɵ0$6","AccountOrderHistoryComponent","ReturnRequestService","getCancelReturnRequestLoading","getCancelReturnRequestSuccess","getReturnRequest","getReturnRequestLoading","routingState","loadOrderReturnRequestDetail","clearReturnRequest","clearOrderReturnRequestDetail","cancelReturnRequest","returnRequestCode","cancelOrderReturnRequest","cancelSuccess","resetCancelReturnRequestProcessState","backToList","ReturnRequestOverviewComponent","returnRequest$","isCancelling$","isCancelSuccess$","cancelReturn","ReturnRequestItemsComponent","ReturnRequestTotalsComponent","ReturnRequestDetailModule","ɵ0$7","OrderReturnRequestListComponent","returnRequests$","getOrderReturnRequestList","requestList","returnRequests","clearOrderReturnRequestList","fetchReturnRequests","byRMA","loadOrderReturnRequestList","ReturnRequestListModule","OrderModule","PaymentMethodsComponent","paymentMethods$","paymentDetail","setDefaultPaymentMethod","textSetAsDefault","textDeleteConfirmation","deletePaymentMethod","setPaymentMethodAsDefault","PaymentMethodsModule","AccountPaymentDetailsComponent","ResetPasswordFormComponent","resetPasswordForm","repassword","isPasswordReset","ResetPasswordModule","ResetPasswordComponent","UpdateEmailFormComponent","saveEmail","cancelEmail","updateEmailForm","confirmEmail","newUid","onCancel","UpdateEmailComponent","resetUpdateEmailResultState","getUpdateEmailResultSuccess","getUpdateEmailResultLoading","updateEmail","UpdateEmailModule","UpdatePasswordFormComponent","submitted","cancelled","updatePasswordForm","oldPassword","newPassword","newPasswordConfirm","UpdatePasswordComponent","resetUpdatePasswordProcessState","getUpdatePasswordResultLoading","getUpdatePasswordResultSuccess","updatePassword","UpdatePasswordModule","UpdateProfileFormComponent","updateProfileForm","userUpdates","UpdateProfileComponent","resetUpdatePersonalDetailsProcessingState","user$","getUpdatePersonalDetailsResultLoading","getUpdatePersonalDetailsResultSuccess","updatePersonalDetails","UpdateProfileModule","MyCouponsComponentService","RELEVANCE","CUSTOMER_COUPON_CODE","launchSearchPage","buildSearchParam","couponcode","allProductsApplicable","byStartDateAsc","byStartDateDesc","byEndDateAsc","byEndDateDesc","MyCouponsComponent","couponService","myCouponsComponentService","sortMapping","sortOptions","couponResult$","totalCount","couponsLoading$","getCustomerCouponsLoading","couponSubscriptionLoading$","getSubscribeCustomerCouponResultLoading","getUnsubscribeCustomerCouponResultLoading","subscribing","unsubscribing","sortLabels","getSubscribeCustomerCouponResultError","subscriptionFail","getUnsubscribeCustomerCouponResultError","sortChange","notificationChange","notification","subscribeCustomerCoupon","unsubscribeCustomerCoupon","CouponDialogComponent","CouponCardComponent","notificationChanged","onSubscriptionChange","notificationOn","readMore","findProducts","CouponClaimComponent","messageService","k","claimCustomerCoupon","getClaimCustomerCouponResultSuccess","MyCouponsModule","ɵ0$8","NotificationPreferenceComponent","notificationPreferenceService","preferences","resetNotificationPreferences","preferences$","getPreferences","loadPreferences","getPreferencesLoading","getUpdatePreferencesResultLoading","prefsLoading","updateLoading","updatePreference","preference","updatedPreferences","channel","updatePreferences","UserNotificationPreferenceService","NotificationPreferenceModule","MyInterestsComponent","productInterestService","DEFAULT_PAGE_SIZE","byNameAsc","byNameDesc","interests$","getAndLoadProductInterests","interests","interest","getInterestsloading$","getProdutInterestsLoading","isRemoveDisabled$","getRemoveProdutInterestLoading","removeLoading","removeInterest","relation","removeProdutInterest","productInterestEntry","loadProductInterests","clearProductInterests","resetRemoveInterestState","UserInterestsService","MyInterestsModule","BreadcrumbComponent","setCrumbs","title$","heading","crumbs$","textHome","BreadcrumbModule","CmsPageTitleModule","NavigationService","createNavigation","getNavigationNode","nav","navigation","navigationNode","getNavigationEntryItems","loadNavigationEntryItems","expectedItems","existingItems_1","missingItems","it","loadNavigationItems","populateNavigationNode","nodeData","root","itemsList","superType","itemSuperType","itemId","node","populateLink","itemType","linkName","getLink","contentPageLabelOrId","CategoryNavigationComponent","node$","NavigationUIComponent","elemRef","flyout","isOpen","openNodes","resize","NavigationEnd","alignWrappersToRightIfStickOut","onResize","toggleOpen","currentTarget","updateClasses","stopImmediatePropagation","onMouseEnter","alignWrapperToRightIfStickOut","focusAfterPreviousClicked","getTotalDepth","depth","getColumnCount","wrapAfter","relatedTarget","ownerDocument","matches","wrapper","closest","removeStyle","offsetWidth","setStyle","navs","childNodes","NavigationComponent","styleClass$","NavigationModule","CategoryNavigationModule","FooterNavigationComponent","FooterNavigationModule","SearchBoxComponentService","searchService","minCharactersBeforeRequest","displayProducts","maxProducts","displaySuggestions","searchSuggestions","maxSuggestions","clearResults","getResults","getProductResults","getProductSuggestions","getSearchMessage","productResults","suggestions","toggleBodyClass","hasResults","hasBodyClass","getSuggestionResults","suggestion","getExactSuggestion","productResult","fetchTranslation","term","freeTextSearch","translationKey","SearchboxService","DEFAULT_SEARCHBOX_CONFIG","displayProductImages","SearchBoxComponent","searchBoxComponentService","results$","config$","isSearchboxFocused","blurSearchBox","getResultElements","getFocusedElement","avoidReopen","getFocusedIndex","focusPreviousChild","focusedIndex","focusNextChild","launchSearchResult","HighlightPipe","SearchBoxModule","OrderConfirmationItemsComponent","clearCheckoutData","OrderConfirmationOverviewComponent","getDeliveryModeCardContent","getPaymentInfoCardContent","OrderConfirmationThankYouMessageComponent","isGuestCustomer","guestCustomer","orderGuid","OrderConfirmationTotalsComponent","GuestRegisterFormComponent","guestRegisterForm","passwordconf","registerGuest","OrderConfirmationGuard","orderConfirmationComponents","OrderConfirmationModule","OrderConfirmationThankMessageComponent","ProductCarouselService","referenceService","loadProduct","convertProduct","getProductReferences","referenceType","displayTitle","displayProductPrices","refs","ProductReferenceService","ProductCarouselComponent","PRODUCT_SCOPE","productCodes","ProductCarouselModule","ProductReferencesComponent","currentProductCode$","cleanReferences","productReferenceTypes","ProductReferencesModule","defaultScrollConfig","infiniteScroll","productLimit","showMoreButton","ProductImagesComponent","mainMediaContainer","thumbs$","createThumbs","mainImage$","openImage","thumbnail","zoom","thumbs","GALLERY","ProductImagesModule","ProductIntroComponent","reviewsTabAvailable","ngAfterContentChecked","getReviewsComponent","showReviews","reviewsTabLabel","tabsComponent","getTabsComponent","reviewsTab","getTabByLabel","reviewsComponent","clickTabIfInactive","scrollIntoView","behavior","click","tabElements","buttonElement","ProductIntroModule","ProductListComponentService","productSearchService","currencyService","defaultPageSize","RELEVANCE_ALLCATEGORIES","searchResults$","searchResult","searchByRouting$","siteContext","routerState","criteria","getCriteriaFromRoute","model$","routeParams","getQueryFromRouteParams","brandCode","getPageItems","pageNumber","routeCriteria","navigate","queryParamsHandling","relativeTo","setQuery","viewPage","ProductSearchService","CurrencyService","FacetGroupCollapsedState","ProductViewComponent","modeChange","viewMode","newMode","Grid","List","ProductListComponent","productListComponentService","scrollConfig","viewMode$","isInfiniteScroll","setViewMode","ProductScrollComponent","appendProducts","resetList","isMaxProducts","isLastPage","inputConfig","setComponentConfigurations","inputModel","infiniteScrollOperations","inputViewMode","resetListOnViewModeChange","scrollPage","loadNextPage","scrollToTop","scroll","isButton","configProductLimit","model","setConditions","ProductDetailOutlets","ProductFacetService","routeState$","searchResult$","filterForPage","mapResults","facetList$","facets","activeFacets","CATEGORY_PAGE","currentQuery","filterBreadcrumbs","breadcrumb","hasBreadcrumb","facetCode","facetValueCode","FacetService","productFacetService","facetState","facetList","facet","getState","getStateSnapshot","toggledState","toggled","COLLAPSED","EXPANDED","maxVisible","topVisible","updateState","increaseVisibleValues","decreaseVisibleValues","topValueCount","hasState","property","getLinkParams","HttpUrlEncodingCodec","decodeValue","ActiveFacetsComponent","facetService","closeIcon","removeQuery","getFocusKey","facetValueName","Default","ActiveFacetsModule","FacetListComponent","closeList","dialogFocusConfig","_isDialog","expandFacetGroup","FacetComponent","expandIcon","collapseIcon","_facet","isMultiSelect","multiSelect","state$","toggleGroup","keyboardFocus","openLink","FacetModule","FacetListModule","ProductFacetNavigationComponent","CLOSE_DELAY","open$","isOpen$","asapScheduler","hasTrigger","delayWhen","launched","isActive$","trigger","ProductFacetNavigationModule","ProductRefinementComponent","ProductGridItemComponent","ProductListItemComponent","ProductVariantsComponent","variants","variantType","VariantType","baseOptions","option","VariantStyleSelectorComponent","variantQualifier","VariantQualifier","getVariantOptionValue","qualifiers","q","qualifier","STYLE","getVariantThumbnailUrl","variantOptionQualifiers","changeStyle","OccConfig","VariantStyleSelectorModule","VariantSizeSelectorComponent","changeSize","SIZE","VariantSizeSelectorModule","VariantColorSelectorComponent","changeColor","COLOR","VariantColorSelectorModule","VariantStyleIconsComponent","variantNames","variant","getVariantName","THUMBNAIL","rollupProperty","ROLLUP_PROPERTY","VariantStyleIconsModule","ProductVariantGuard","nextState","VARIANTS","purchasable","findVariant","variantOptions","_product","ProductVariantsModule","ProductVariantSelectorComponent","ProductListModule","InfiniteScrollModule","CMSProductListComponent","ProductGridComponent","SearchResultsListComponent","ProductSummaryComponent","outlets","ProductSummaryModule","ProductAttributesComponent","ATTRIBUTES","ProductAttributesModule","ProductSpecsTabComponent","ProductDetailsTabComponent","ProductDetailsTabModule","ProductReviewsComponent","isWritingReview","initialMaxListItems","reviews$","resetReviewForm","maxListItems","initiateWriteReview","detectChanges","titleInput","cancelWriteReview","writeReviewButton","setRating","reviewForm","submitReview","addReview","reviewFormControls","alias","reviewerName","static","ProductReviewsModule","ProductReviewsTabComponent","ProductTabsModule","StockNotificationDialogComponent","interestsService","enabledPrefs","subscribeSuccess$","resetAddInterestState","StockNotificationComponent","notificationPrefService","anonymous","outOfStock$","NotificationType","BACK_IN_STOCK","hasProductInterests$","getProductInterests","getAddProductInterestSuccess","isRemoveInterestLoading$","prefsEnabled$","getEnabledPreferences","prefs","getAddProductInterestError","onInterestAddingError","getRemoveProdutInterestSuccess","onInterestRemovingSuccess","addProductInterest","interestType","MSG_TYPE_INFO","clearPreferences","StockNotificationModule","ScheduleComponent","storeDataService","displayDays","initialDate","getInitialDate","valueOf","setDate","getStoreOpeningTime","getStoreClosingTime","currentDate","getDay","StoreDataService","StoreFinderGridComponent","storeFinderService","getViewAllStoresLoading","locations$","getViewAllStoresEntities","defaultLocation","findStoresAction","StoreFinderService","StoreFinderHeaderComponent","AbstractStoreItemComponent","getDirections","getStoreLatitude","getStoreLongitude","getFormattedStoreAddress","addressParts","StoreFinderListItemComponent","locationIndex","storeItemClick","handleStoreItemClick","onKey","StoreFinderMapComponent","googleMapRendererService","selectedStoreItem","locations","renderMap","centerMap","latitude","longitude","mapElement","selectStoreItemClickHandle","GoogleMapRendererService","StoreFinderPaginationDetailsComponent","getResultsPerPage","firstItem","resultsPerPage","StoreFinderListComponent","isDetailsModeVisible","centerStoreOnMapByIndex","showStoreDetails","selectedStoreIndex","selectedStore","storeMap","stores","selectStoreItemList","storeDetails","hideStoreDetails","StoreFinderSearchResultComponent","countryCode","searchConfig","searchQuery","queryText","geolocation","useMyLocation","radius","parseParameters","googleMaps","getStoresLoading","getFindStoresEntities","toUpperCase","StoreFinderConfig","StoreFinderSearchComponent","searchBox","findStores","viewStoresWithMyLoc","StoreFinderStoreDescriptionComponent","StoreFinderStoresCountComponent","viewAllStores","StoreFinderComponent","StoreFinderStoreComponent","requestStoresData","location$","viewStoreById","StoreFinderModule","NgbTabsetModule","StoreFinderCoreModule","StoreFinderPageTemplate","CheckoutLoginComponent","checkoutLoginForm","addEmail","redirect","CheckoutLoginModule","GuestCheckoutLoginComponent","LoginFormComponent","auth","loginAsGuest","routeState","prefilledEmail","loginForm","loginUser","authorize","LoginFormModule","ReturningCustomerLoginComponent","LoginComponent","LoginModule","LogoutGuard","protectedRoutes","hasPage","shouldProtect","ProtectedRoutesService","LogoutModule","ɵ0$9","RegisterComponent","registerForm","newsletter","isConsentRequired","termsandconditions","getRegisterUserResultLoading","registerUserProcessInit","messages","globalMessageEntities","registerConsent","anonymousConsent$","getConsent","getTemplate","toggleAnonymousConsent","registerUser","collectDataFromRegisterForm","titleSelected","formData","onRegisterUserSuccess","resetRegisterUserProcessState","getRegisterUserResultSuccess","RegisterComponentModule","RegisterCustomerComponent","UserComponentModule","WishListItemComponent","WishListComponent","wishList$","WishListModule","CmsLibModule","PRODUCT_DETAILS_URL_MATCHER","inject","UrlMatcherService","defaultMatcherFactory","DEFAULT_URL_MATCHER","defaultMatcher","suffixPDPMatcher","getCombined","ProductDetailsPageModule","ɵ0$a","matchers","PRODUCT_LISTING_URL_MATCHER","suffixPLPMatcher","ɵ1$1","ɵ2","ProductListingPageModule","ɵ0$b","HomePageEvent","PageEvent","CartPageEvent","CartPageEventBuilder","eventService","buildCartPageEvent","pageEvent","semanticRoute","createFrom","ActionsSubject","EventService","CartPageEventModule","_cartPageEventBuilder","PageEventBuilder","buildPageEvent","buildHomePageEvent","getNavigatedEvent","ofType","ROUTER_NAVIGATED","payload","PageEventModule","_pageEventBuilder","ProductDetailsPageEvent","CategoryPageResultsEvent","SearchPageResultsEvent","ProductPageEventBuilder","buildSearchPageResultsEvent","buildProductDetailsPageEvent","buildCategoryResultsPageEvent","categories","skip","EMPTY","numberOfResults","categoryName","categoryPage","searchPage","ProductPageEventModule","_productPageEventBuilder","b2cLayoutConfig","footer","LandingPage2Template","ContentPage1Template","CategoryPageTemplate","ProductListPageTemplate","ProductGridPageTemplate","SearchResultsListPageTemplate","SearchResultsGridPageTemplate","ProductDetailsPageTemplate","CartPageTemplate","AccountPageTemplate","LoginPageTemplate","ErrorPageTemplate","OrderConfirmationPageTemplate","MultiStepCheckoutSummaryPageTemplate","CheckoutLoginPageTemplate","mediaConfig","mobile","tablet","desktop","widescreen","cartIcon","headerComponents","defaultPageHeaderConfig","PreHeader","componentIds","SiteLogin","defaultCmsContentConfig","cmsStructure","EventsModule","StorefrontFoundationModule","StateModule","AuthModule","AnonymousConsentsModule","ConfigInitializerModule","ConfigValidatorModule","CmsModule","GlobalMessageModule","ProcessModule","CheckoutModule","UserModule","ProductModule","provideConfigFromMetaTags","StorefrontModule","StorefrontModule_1","scrollPositionRestoration","anchorScrolling","StoreModule","EffectsModule","SmartEditModule","PersonalizationModule","OccModule","ExternalRoutesModule","B2cStorefrontModule","B2cStorefrontModule_1","provideDefaultConfigFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\n\nexport interface LaunchConfig {\n  [key: string]: LaunchOptions;\n}\n\nexport type LaunchOptions =\n  | LaunchOutletDialog\n  | LaunchInlineDialog\n  | LaunchRoute;\n\n/**\n * Parent type for configurations that render components\n */\nexport interface LaunchDialog {\n  component: any;\n  /**\n   * Can the element be rendered multiple times\n   */\n  multi?: boolean;\n  /**\n   * Dialog type is used to apply CSS classes\n   */\n  dialogType?: DIALOG_TYPE;\n}\n\n/**\n * Configuration type to render a component in an outlet\n */\nexport interface LaunchOutletDialog extends LaunchDialog {\n  /**\n   * The outlet to render the element in\n   */\n  outlet: string;\n  /**\n   * Default: OutletPosition.BEFORE\n   */\n  position?: OutletPosition;\n}\n\n/**\n * Configuration type to render a component inline (next to the trigger)\n */\nexport interface LaunchInlineDialog extends LaunchDialog {\n  inline: boolean;\n}\n\n/**\n * Configuration type to render as link\n */\nexport interface LaunchRoute {\n  /**\n   * The route for the url\n   */\n  cxRoute: string;\n  /**\n   * The parameters for the route\n   */\n  params?: { [param: string]: any };\n}\n\n/**\n * Types of dialog openings supported\n */\nexport enum DIALOG_TYPE {\n  POPOVER = 'POPOVER',\n  DIALOG = 'DIALOG',\n  SIDEBAR_START = 'SIDEBAR_START',\n  SIDEBAR_END = 'SIDEBAR_END',\n}\n\n/**\n * List of available callers\n */\nexport enum LAUNCH_CALLER {\n  ASM = 'ASM',\n  SKIP_LINKS = 'SKIP_LINKS',\n  ANONYMOUS_CONSENT = 'ANONYMOUS_CONSENT',\n}\n","import { Injectable } from '@angular/core';\nimport { Config, DeferLoadingStrategy } from '@spartacus/core';\nimport { LaunchConfig } from '../launch-dialog/index';\n\nexport enum BREAKPOINT {\n  xs = 'xs',\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl',\n}\n\nexport type LayoutSections =\n  | 'header'\n  | 'footer'\n  | 'LandingPage2Template'\n  | string;\n\nexport type SlotConfig = {\n  /** The cms page slots are mapped by the `slot.position`. */\n  slots?: string[];\n\n  /**\n   * The page fold identifies the last expected page slot above-the-fold.\n   * It's perfectly fine to specify this by indication, but keep in mind that\n   * a more precise indication will gain a more positive impact on performance.\n   */\n  pageFold?: string;\n};\n\nexport type SlotGroup = {\n  /** The page slot configuration for large screens */\n  [BREAKPOINT.lg]?: SlotConfig;\n  /** The page slot configuration for medium screens */\n  [BREAKPOINT.md]?: SlotConfig;\n  /** The page slot configuration for small screens */\n  [BREAKPOINT.sm]?: SlotConfig;\n  /** The page slot configuration for extra small screens */\n  [BREAKPOINT.xs]?: SlotConfig;\n};\n\nexport type LayoutSlotConfig = {\n  [section in LayoutSections]: SlotConfig | SlotGroup | LayoutSlotConfig;\n};\n\n/**\n * The LayoutConfig supports the configuration of page slots by page templates\n * or page sections, such as headers and footers. The configuration also supports\n * adaptive design per breakpoint (not per device type), so that the DOM is (re)rendered\n * por a given breakpoint.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class LayoutConfig {\n  /**\n   * The breakpoint configuration is used when the DOM is (re)rendered in specific view.\n   * This allows for adaptive rendering, so that the DOM is rendered for specific breakpoints.\n   */\n  breakpoints?: {\n    [BREAKPOINT.xs]?: number;\n    [BREAKPOINT.sm]?: number;\n    [BREAKPOINT.md]?: number;\n    [BREAKPOINT.lg]?: number;\n  };\n  layoutSlots?: LayoutSlotConfig;\n\n  /**\n   * Deferred loading is a technique to hold of with the loading / creation\n   * of DOM elements which are not not in the initial view port.\n   * This technique wil increase performance.\n   */\n  deferredLoading?: {\n    /**\n     * The global strategy will be used as a fallback strategy for all DOM creation,\n     * but can be overridden by local configuration, i.e. for cms components.\n     */\n    strategy?: DeferLoadingStrategy;\n    /**\n     * The intersection margin contains the offset used by the Intersection Observer\n     * to observe elements outside the view port.\n     *\n     * See https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin\n     */\n    intersectionMargin?: string;\n  };\n\n  launch?: LaunchConfig;\n}\n","export enum OutletPosition {\n  REPLACE = 'replace',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n\nexport const AVOID_STACKED_OUTLETS = false;\nexport const USE_STACKED_OUTLETS = true;\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Renderer2,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Applicable, Priority } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  DIALOG_TYPE,\n  LaunchDialog,\n  LaunchOptions,\n  LAUNCH_CALLER,\n} from '../config';\n\nexport abstract class LaunchRenderStrategy implements Applicable {\n  // List of called references; only used for rendered elements\n  protected renderedCallers: Array<{\n    caller: LAUNCH_CALLER | string;\n    element?: any;\n    component?: ComponentRef<any>;\n  }> = [];\n\n  /**\n   * Classes to apply to the component when the dialog is a DIALOG\n   */\n  protected dialogClasses = ['d-block', 'fade', 'modal', 'show'];\n  /**\n   * Classes to apply to the component when the dialog is a POPOVER\n   */\n  protected popoverClasses = ['cx-dialog-popover'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_END\n   */\n  protected sidebarEndClasses = ['cx-sidebar-end'];\n  /**\n   * Classes to apply to the component when the dialog is a SIDEBAR_START\n   */\n  protected sidebarStartClasses = ['cx-sidebar-start'];\n\n  protected renderer: Renderer2;\n\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  /**\n   * Render method to implement based on the strategy\n   *\n   * @param config Launch configuration\n   */\n  abstract render(\n    config: LaunchOptions,\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>>;\n\n  /**\n   * Determines if the strategy is the right one for the provided configuration\n   *\n   * @param config\n   */\n  abstract hasMatch(config: LaunchOptions): boolean;\n\n  /**\n   * Determines if element should render\n   *\n   * @param caller\n   * @param config\n   */\n  protected shouldRender(\n    caller: LAUNCH_CALLER | string,\n    config: LaunchDialog\n  ): boolean {\n    return (\n      Boolean(config.component) &&\n      (this.renderedCallers.some((el) => el.caller === caller)\n        ? !!config.multi\n        : true)\n    );\n  }\n\n  protected applyClasses(\n    component: ComponentRef<any>,\n    dialogType: DIALOG_TYPE\n  ): void {\n    let classes = [];\n\n    // TODO: make classes configurable\n    switch (dialogType) {\n      case DIALOG_TYPE.DIALOG:\n        classes = this.dialogClasses;\n        this.renderer.addClass(this.document.body, 'modal-open');\n        break;\n      case DIALOG_TYPE.POPOVER:\n        classes = this.popoverClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_END:\n        classes = this.sidebarEndClasses;\n        break;\n      case DIALOG_TYPE.SIDEBAR_START:\n        classes = this.sidebarStartClasses;\n        break;\n    }\n\n    for (const newClass of classes) {\n      this.renderer.addClass(component.location.nativeElement, newClass);\n    }\n  }\n\n  /**\n   * Method to call when rendered element is destroyed\n   * The element will be removed from the list of rendered elements\n   *\n   * @param caller\n   * @param _config optional parameters used in children strategies\n   */\n  public remove(caller: LAUNCH_CALLER | string, config: LaunchOptions): void {\n    this.renderedCallers = this.renderedCallers.filter(\n      (el) => el.caller !== caller\n    );\n\n    if ((config as LaunchDialog)?.dialogType === DIALOG_TYPE.DIALOG) {\n      this.renderer.removeClass(this.document.body, 'modal-open');\n    }\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW; // low, as it's a default matcher\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  RendererFactory2,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { LaunchInlineDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class InlineRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected componentFactoryResolver: ComponentFactoryResolver\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the component from the configuration in the view container ref\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchInlineDialog,\n    caller: LAUNCH_CALLER | string,\n    vcr: ViewContainerRef\n  ): Observable<ComponentRef<any>> {\n    // Only render if a ViewContainerRef is provided\n    if (vcr && this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n\n      const component = vcr.createComponent(template);\n\n      if (config?.dialogType) {\n        this.applyClasses(component, config?.dialogType);\n      }\n\n      this.renderedCallers.push({ caller, element: vcr.element, component });\n\n      return of(component);\n    } else if (isDevMode()) {\n      if (!vcr) {\n        console.warn(`No view container ref provided for ${caller}`);\n      } else {\n        console.warn(\n          `Element for ${caller} already rendered. To allow multi rendering add property multi: true.`\n        );\n      }\n    }\n  }\n\n  hasMatch(config: LaunchInlineDialog) {\n    return Boolean(config.inline);\n  }\n}\n","import {\n  ComponentRef,\n  Inject,\n  Injectable,\n  isDevMode,\n  ViewContainerRef,\n} from '@angular/core';\nimport { resolveApplicable } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { LayoutConfig } from '../../config/layout-config';\nimport { LaunchOptions, LAUNCH_CALLER } from '../config/launch-config';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class LaunchDialogService {\n  private _dialogClose = new BehaviorSubject<string>(undefined);\n\n  constructor(\n    @Inject(LaunchRenderStrategy)\n    protected renderStrategies: LaunchRenderStrategy[],\n    protected layoutConfig: LayoutConfig\n  ) {\n    this.renderStrategies = this.renderStrategies || [];\n  }\n\n  /**\n   * Render the element based on the strategy from the launch configuration\n   *\n   * @param caller LAUNCH_CALLER\n   * @param vcr View Container Ref of the container for inline rendering\n   */\n  launch(\n    caller: LAUNCH_CALLER | string,\n    vcr?: ViewContainerRef\n  ): void | Observable<ComponentRef<any>> {\n    const config = this.findConfiguration(caller);\n    if (config) {\n      const renderer = this.getStrategy(config);\n\n      // Render if the strategy exists\n      if (renderer) {\n        this._dialogClose.next(undefined);\n        return renderer.render(config, caller, vcr);\n      }\n    } else if (isDevMode()) {\n      console.warn('No configuration provided for caller ' + caller);\n    }\n  }\n\n  /**\n   * Util method to remove element from rendered elements list\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  clear(caller: LAUNCH_CALLER | string): void {\n    const config = this.findConfiguration(caller);\n    const renderer = this.getStrategy(config);\n\n    // Render if the strategy exists\n    if (renderer) {\n      renderer.remove(caller, config);\n    }\n  }\n\n  get dialogClose(): Observable<string> {\n    return this._dialogClose.asObservable();\n  }\n\n  closeDialog(reason: string) {\n    this._dialogClose.next(reason);\n  }\n\n  /**\n   * Returns the configuration for the caller\n   *\n   * @param caller LAUNCH_CALLER\n   */\n  protected findConfiguration(caller: LAUNCH_CALLER | string): LaunchOptions {\n    if (this.layoutConfig?.launch) {\n      return this.layoutConfig.launch[caller];\n    }\n    return undefined;\n  }\n\n  /**\n   * Returns the render strategy based on the configuration\n   *\n   * @param config Configuration for launch\n   */\n  protected getStrategy(config: LaunchOptions): LaunchRenderStrategy {\n    return resolveApplicable(this.renderStrategies, [config]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { DirectionMode } from '../../../layout/direction/config/direction.model';\n\nexport enum ICON_TYPE {\n  STAR = 'STAR',\n  SEARCH = 'SEARCH',\n  CART = 'CART',\n  INFO = 'INFO',\n  GRID = 'GRID',\n  LIST = 'LIST',\n  CARET_DOWN = 'CARET_DOWN',\n  CARET_LEFT = 'CARET_LEFT',\n  CARET_RIGHT = 'CARET_RIGHT',\n  CLOSE = 'CLOSE',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  SUCCESS = 'SUCCESS',\n  VISA = 'VISA',\n  MASTER_CARD = 'MASTER_CARD',\n  AMEX = 'AMEX',\n  DINERS_CLUB = 'DINERS_CLUB',\n  CREDIT_CARD = 'CREDIT_CARD',\n  EXPAND = 'EXPAND',\n  COLLAPSE = 'COLLAPSE',\n  RESET = 'RESET',\n  CIRCLE = 'CIRCLE',\n  HEART = 'HEART',\n  EMPTY_HEART = 'EMPTY_HEART',\n  FILTER = 'FILTER',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class IconConfig {\n  icon?: IconOptions;\n}\n\nexport interface IconOptions {\n  /**\n   * Each icon type can be configured with a so-called symbol. The symbol will\n   * be used to map the icon to an SVG `symbol` (id) or to the style classes of\n   * a font based icon. The following configuration would map to a fontawesome\n   * icon:\n   *\n   * icon: {\n   *   symbols: {\n   *     CART: 'fas fa-shopping-cart'\n   *   }\n   * }\n   */\n  symbols?: {\n    [ICON_TYPE: string]: string;\n  };\n\n  /**\n   * Resources are used to map icon types to certain asset, such as an SVG (sprite) image.\n   * The resource type (`IconResourceType`) dictates whether an SVG image is used. The URL\n   * is used for the SVG xlink reference.\n   */\n  resources?: IconConfigResource[];\n\n  /**\n   * Lists icons that should be flipped for a specific direction.\n   */\n  flipDirection?: {\n    [ICON_TYPE: string]: DirectionMode;\n  };\n}\n\nexport interface IconConfigResource {\n  type: IconResourceType | string;\n  url?: string;\n  types?: (ICON_TYPE | string)[];\n}\n\n/**\n * Each ICON type can have an companied resource type, such as SVG, LINK (font) or just TEXT.\n * The resources will be automatically loaded in case they're required for the `ICON_TYPE`.\n */\nexport enum IconResourceType {\n  /**\n   * An svg based icon requires an SVG resource that must be loaded,\n   * this is typically a sprite svg file.\n   */\n  SVG = 'svg',\n\n  /**\n   * A font based ICON might require an additional CSS file to be loaded.\n   */\n  LINK = 'link',\n  /**\n   * Text based icons will simply add the ICON string to the DOM. Text icons do not need an image\n   * or CSS pseudo class (i.e. :before), as the text itself is the icon (i.e. +)\n   */\n  TEXT = 'text',\n}\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletService<T = TemplateRef<any>> {\n  /**\n   * @deprecated since 2.1, see #8116\n   */\n  constructor();\n  // tslint:disable-next-line: unified-signatures\n  constructor(features: FeatureConfigService);\n  constructor(protected features?: FeatureConfigService) {}\n\n  private templatesRefs = {\n    [OutletPosition.BEFORE]: new Map<string, T[]>(),\n    [OutletPosition.REPLACE]: new Map<string, T[]>(),\n    [OutletPosition.AFTER]: new Map<string, T[]>(),\n  };\n\n  /**\n   * Adds a template or ComponentFactory, so that UI outlets can be replaced dynamically.\n   * The UI position where this template or ComponentFactory is inserted is given by a\n   * string reference (called `outlet`) and optional `OutletPosition`. The `OutletPosition`\n   * is either before or after, or replaces the entire UI.\n   *\n   * @param outlet the UI location represented by a string\n   * @param template the `TemplateRef` that will be used to insert UI\n   * @param position the `OutletPosition` in the UI\n   */\n  add(outlet: string, template: T, position?: OutletPosition): void;\n  /**\n   * @param factory The `ComponentFactory` that will be dynamically added to the outlet UI\n   */\n  add(\n    outlet: string,\n    // tslint:disable-next-line: unified-signatures\n    factory: T,\n    position?: OutletPosition\n  ): void;\n  /**\n   * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.\n   */\n  add(\n    outlet: string,\n    templateOrFactory: T,\n    position: OutletPosition = OutletPosition.REPLACE\n  ): void {\n    const store = this.templatesRefs[position];\n    if (store) {\n      const existing = store.get(outlet) || [];\n      const newValue: T[] = existing.concat([templateOrFactory]);\n      store.set(outlet, newValue);\n    }\n  }\n\n  /**\n   *\n   * Returns a single object or multiple objects for the given outlet reference,\n   * depending on the `stacked` argument.\n   *\n   * @param outlet The outlet reference\n   * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`\n   * @param stacked Indicates whether an array of outlet components is returned\n   */\n  get(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    stacked = AVOID_STACKED_OUTLETS\n  ): T[] | T {\n    const store =\n      this.templatesRefs[position] ||\n      this.templatesRefs[OutletPosition.REPLACE];\n\n    const templateRef: T[] = store.get(outlet);\n    if (templateRef && !stacked) {\n      return templateRef[0];\n    }\n    return templateRef;\n  }\n\n  remove(\n    outlet: string,\n    position: OutletPosition = OutletPosition.REPLACE,\n    value?: T\n  ): void {\n    const store =\n      this.templatesRefs[position] ||\n      this.templatesRefs[OutletPosition.REPLACE];\n\n    this.removeValueOrAll(store, outlet, value);\n  }\n\n  protected removeValueOrAll(\n    store: Map<string, T[]>,\n    outlet: string,\n    value?: T\n  ): void {\n    if (!value && store.has(outlet)) {\n      store.delete(outlet);\n    } else if (value && store.has(outlet)) {\n      let existing = store.get(outlet);\n\n      if (this.features?.isLevel('2.1')) {\n        existing = existing.filter((val) => val !== value);\n      } else {\n        // deprecated since 2.1, see #8116:\n        existing = existing.filter((val) => val === value);\n      }\n\n      store.set(outlet, existing);\n    }\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnDestroy,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { OutletPosition } from '../outlet.model';\nimport { OutletService } from '../outlet.service';\n\n@Directive({\n  selector: '[cxOutletRef]',\n})\nexport class OutletRefDirective implements OnInit, OnDestroy {\n  @Input()\n  cxOutletRef: string;\n  @Input()\n  cxOutletPos: OutletPosition;\n\n  /**\n   * @deprecated since 2.1, see #8201\n   */\n  constructor(tpl: TemplateRef<any>, outletService: OutletService);\n  constructor(\n    tpl: TemplateRef<any>,\n    outletService: OutletService,\n    // tslint:disable-next-line: unified-signatures\n    features: FeatureConfigService\n  );\n  constructor(\n    private tpl: TemplateRef<any>,\n    private outletService: OutletService,\n    private features?: FeatureConfigService\n  ) {}\n\n  ngOnInit() {\n    this.outletService.add(this.cxOutletRef, this.tpl, this.cxOutletPos);\n  }\n\n  ngOnDestroy() {\n    if (this.features?.isLevel('2.1')) {\n      this.outletService.remove(this.cxOutletRef, this.cxOutletPos, this.tpl);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OutletRefDirective } from './outlet-ref.directive';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletRefDirective],\n  exports: [OutletRefDirective],\n})\nexport class OutletRefModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { OutletDirective } from './outlet.directive';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OutletRendererService {\n  private outletRefs = new BehaviorSubject(new Map<string, OutletDirective>());\n\n  /**\n   * Dynamically render the templates in the specified array\n   *\n   * @param outlet\n   */\n  render(outlet: string): void {\n    if (this.outletRefs.value.size !== 0) {\n      this.outletRefs.value.get(outlet).render();\n    }\n  }\n\n  /**\n   * Register outlet to be available to render dynamically\n   *\n   * @param cxOutlet\n   * @param context\n   */\n  register(cxOutlet: string, context: OutletDirective): void {\n    this.outletRefs.next(this.outletRefs.value.set(cxOutlet, context));\n  }\n  /**\n   * Returns map of outlets\n   *\n   */\n  getOutletRef(outlet: string): Observable<OutletDirective> {\n    return this.outletRefs.asObservable().pipe(\n      map((val) => val.get(outlet)),\n      filter((val) => Boolean(val))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, first, flatMap, map } from 'rxjs/operators';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\n\n/**\n * The IntersectionService uses the native IntersectionObserver (v2), which\n * can be used to implement pre-loading and deferred loading of DOM content.\n *\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class IntersectionService {\n  constructor(protected config: LayoutConfig) {}\n\n  /**\n   * Returns an Observable that emits only once a boolean value whenever\n   * the given element has shown in the view port.\n   *\n   * The returned observable will only emit the first value. The\n   * observable must be cleaned up either way, since the value might never emit; it\n   *  depends on whether the element appears in the view port.\n   */\n  isIntersected(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    return this.intersects(element, options).pipe(first((v) => v === true));\n  }\n\n  /**\n   * Indicates whenever the element intersects the view port. An optional margin\n   * is used to intersects before the element shows up in the viewport.\n   * A value is emitted each time the element intersects.\n   *\n   * This is private for now, but could be exposed as a public API\n   * to introduce additional (css) render effects to the UI.\n   */\n  private intersects(\n    element: HTMLElement,\n    options: IntersectionOptions = {}\n  ): Observable<boolean> {\n    const elementVisible$ = new Observable((observer) => {\n      const rootMargin = this.getRootMargin(options);\n      const intersectOptions = { rootMargin, threshold: options.threshold };\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        observer.next(entries);\n      }, intersectOptions);\n      intersectionObserver.observe(element);\n      return () => {\n        intersectionObserver.disconnect();\n      };\n    }).pipe(\n      flatMap((entries: IntersectionObserverEntry[]) => entries),\n      map((entry: IntersectionObserverEntry) => entry.isIntersecting),\n      distinctUntilChanged()\n    );\n\n    return elementVisible$;\n  }\n\n  private getRootMargin(options: IntersectionOptions = {}): string {\n    if (options.rootMargin) {\n      return options.rootMargin;\n    }\n    const layoutConfig = this.config as LayoutConfig;\n    if (\n      layoutConfig.deferredLoading &&\n      layoutConfig.deferredLoading.intersectionMargin\n    ) {\n      return layoutConfig.deferredLoading.intersectionMargin;\n    }\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { DeferLoadingStrategy } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { LayoutConfig } from '../config/layout-config';\nimport { IntersectionOptions } from './intersection.model';\nimport { IntersectionService } from './intersection.service';\n\n/**\n * The defer loading serivce is used to defer loading of DOM elements\n * until the elements are required for the user experience.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeferLoaderService {\n  globalLoadStrategy: DeferLoadingStrategy;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    protected config: LayoutConfig,\n    protected intersectionService: IntersectionService\n  ) {\n    this.globalLoadStrategy = config.deferredLoading\n      ? config.deferredLoading.strategy\n      : DeferLoadingStrategy.INSTANT;\n  }\n\n  /**\n   * Defer loading till the element intersects the viewport.\n   *\n   * We evaluate whether we instantly load the element for different reasons:\n   * - we run in SSR mode\n   * - there's no global strategy given\n   * - the global loading strategy is set to INSTANT loading,\n   *   and the loading strategy in the given is not set to DEFER\n   * - the loading strategy in the given options is set to INSTANT\n   */\n  load(\n    element: HTMLElement,\n    options?: IntersectionOptions\n  ): Observable<boolean> {\n    if (this.shouldLoadInstantly((options || {}).deferLoading)) {\n      return of(true);\n    } else {\n      return this.intersectionService.isIntersected(element, options);\n    }\n  }\n\n  private shouldLoadInstantly(\n    elementLoadingStrategy: DeferLoadingStrategy\n  ): boolean {\n    return (\n      isPlatformServer(this.platformId) ||\n      elementLoadingStrategy === DeferLoadingStrategy.INSTANT ||\n      (elementLoadingStrategy !== DeferLoadingStrategy.DEFER &&\n        this.globalLoadStrategy === DeferLoadingStrategy.INSTANT)\n    );\n  }\n}\n","import {\n  ComponentFactory,\n  ComponentRef,\n  Directive,\n  EmbeddedViewRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DeferLoaderService } from '../../layout/loading/defer-loader.service';\nimport { IntersectionOptions } from '../../layout/loading/intersection.model';\nimport { OutletRendererService } from './outlet-renderer.service';\nimport { OutletPosition, USE_STACKED_OUTLETS } from './outlet.model';\nimport { OutletService } from './outlet.service';\n\n@Directive({\n  selector: '[cxOutlet]',\n})\nexport class OutletDirective implements OnDestroy, OnChanges {\n  private renderedTemplate = [];\n  public renderedComponents = new Map<\n    OutletPosition,\n    Array<ComponentRef<any> | EmbeddedViewRef<any>>\n  >();\n\n  @Input() cxOutlet: string;\n\n  @Input() cxOutletContext: any;\n\n  /**\n   * Defers loading options for the the templates of this outlet.\n   */\n  @Input() cxOutletDefer: IntersectionOptions;\n\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>(true);\n\n  subscription = new Subscription();\n\n  constructor(\n    private vcr: ViewContainerRef,\n    private templateRef: TemplateRef<any>,\n    private outletService: OutletService<\n      TemplateRef<any> | ComponentFactory<any>\n    >,\n    private deferLoaderService: DeferLoaderService,\n    private outletRendererService: OutletRendererService\n  ) {}\n\n  public render(): void {\n    this.vcr.clear();\n    this.renderedTemplate = [];\n    this.renderedComponents.clear();\n    this.subscription.unsubscribe();\n    this.subscription = new Subscription();\n\n    if (this.cxOutletDefer) {\n      this.deferLoading();\n    } else {\n      this.build();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.cxOutlet) {\n      this.render();\n      this.outletRendererService.register(this.cxOutlet, this);\n    }\n  }\n\n  private deferLoading(): void {\n    this.loaded.emit(false);\n    const hostElement = this.getHostElement(this.vcr.element.nativeElement);\n    // Although the deferLoaderService might emit only once, as long as the hostElement\n    // isn't being loaded, there's no value being emitted. Therefor we need to clean up\n    // the subscription on destroy.\n    this.subscription.add(\n      this.deferLoaderService\n        .load(hostElement, this.cxOutletDefer)\n        .subscribe(() => {\n          this.build();\n          this.loaded.emit(true);\n        })\n    );\n  }\n\n  private build() {\n    this.buildOutlet(OutletPosition.BEFORE);\n    this.buildOutlet(OutletPosition.REPLACE);\n    this.buildOutlet(OutletPosition.AFTER);\n  }\n\n  private buildOutlet(position: OutletPosition): void {\n    let templates: any[] = <any[]>(\n      this.outletService.get(this.cxOutlet, position, USE_STACKED_OUTLETS)\n    );\n\n    templates = templates?.filter((el) => !this.renderedTemplate.includes(el));\n\n    if (!templates && position === OutletPosition.REPLACE) {\n      templates = [this.templateRef];\n    }\n\n    // Just in case someone extended the `OutletService` and\n    // returns a singular object.\n    if (!Array.isArray(templates)) {\n      templates = [templates];\n    }\n\n    const components = [];\n    templates.forEach((obj) => {\n      const component = this.create(obj);\n      components.push(component);\n    });\n\n    this.renderedComponents.set(position, components);\n  }\n\n  private create(tmplOrFactory: any): ComponentRef<any> | EmbeddedViewRef<any> {\n    this.renderedTemplate.push(tmplOrFactory);\n\n    if (tmplOrFactory instanceof ComponentFactory) {\n      const component = this.vcr.createComponent(tmplOrFactory);\n      return component;\n    } else if (tmplOrFactory instanceof TemplateRef) {\n      const view = this.vcr.createEmbeddedView(\n        <TemplateRef<any>>tmplOrFactory,\n        {\n          $implicit: this.cxOutletContext,\n        }\n      );\n\n      // we do not know if content is created dynamically or not\n      // so we apply change detection anyway\n      view.markForCheck();\n      return view;\n    }\n  }\n\n  /**\n   * Returns the closest `HtmlElement`, by iterating over the\n   * parent nodes of the given element.\n   *\n   * We avoid traversing the parent _elements_, as this is blocking\n   * ie11 implementations. One of the spare exclusions we make to not\n   * supporting ie11.\n   *\n   * @param element\n   */\n  private getHostElement(element: Node): HTMLElement {\n    if (element instanceof HTMLElement) {\n      return element;\n    }\n    return this.getHostElement(element.parentNode);\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OutletDirective } from './outlet.directive';\nimport { OutletService } from './outlet.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [OutletDirective],\n  providers: [OutletService],\n  exports: [OutletDirective],\n})\nexport class OutletModule {}\n","import { DOCUMENT } from '@angular/common';\nimport {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Inject,\n  Injectable,\n  RendererFactory2,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport {\n  OutletPosition,\n  OutletService,\n} from '../../../cms-structure/outlet/index';\nimport { OutletRendererService } from '../../../cms-structure/outlet/outlet-renderer.service';\nimport { LaunchOutletDialog, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class OutletRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected outletService: OutletService<ComponentFactory<any>>,\n    protected componentFactoryResolver: ComponentFactoryResolver,\n    protected outletRendererService: OutletRendererService\n  ) {\n    super(document, rendererFactory);\n  }\n\n  /**\n   * Renders the element in the configured outlet\n   *\n   * @param config\n   * @param caller\n   * @param vcr\n   */\n  render(\n    config: LaunchOutletDialog,\n    caller: LAUNCH_CALLER | string\n  ): Observable<ComponentRef<any>> {\n    if (this.shouldRender(caller, config)) {\n      const template = this.componentFactoryResolver.resolveComponentFactory(\n        config.component\n      );\n      this.outletService.add(\n        config.outlet,\n        template,\n        config.position ? config.position : OutletPosition.BEFORE\n      );\n      this.outletRendererService.render(config.outlet);\n      this.renderedCallers.push({ caller });\n\n      return this.outletRendererService.getOutletRef(config.outlet).pipe(\n        map((outletDirective) => {\n          const components = outletDirective.renderedComponents.get(\n            config.position ? config.position : OutletPosition.BEFORE\n          ) as ComponentRef<any>[];\n\n          return components\n            .reverse()\n            .find(\n              (component) => component.componentType === template.componentType\n            );\n        }),\n        tap((component) => {\n          if (config?.dialogType) {\n            this.applyClasses(component, config?.dialogType);\n          }\n        })\n      );\n    }\n  }\n\n  hasMatch(config: LaunchOutletDialog) {\n    return Boolean(config.outlet);\n  }\n\n  remove(caller: LAUNCH_CALLER | string, config: LaunchOutletDialog): void {\n    const template = this.componentFactoryResolver.resolveComponentFactory(\n      config.component\n    );\n\n    this.outletService.remove(\n      config.outlet,\n      config.position ? config.position : OutletPosition.BEFORE,\n      template\n    );\n\n    super.remove(caller, config);\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, RendererFactory2 } from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { LaunchRoute, LAUNCH_CALLER } from '../config/index';\nimport { LaunchRenderStrategy } from './launch-render.strategy';\n\n@Injectable({ providedIn: 'root' })\nexport class RoutingRenderStrategy extends LaunchRenderStrategy {\n  constructor(\n    @Inject(DOCUMENT) protected document: any,\n    protected rendererFactory: RendererFactory2,\n    protected routingService: RoutingService\n  ) {\n    super(document, rendererFactory);\n  }\n  /**\n   * Navigates to the route configured for the caller\n   */\n  render(config: LaunchRoute, _caller: LAUNCH_CALLER | string) {\n    this.routingService.go(config);\n  }\n\n  hasMatch(config: LaunchRoute) {\n    return Boolean(config.cxRoute);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { LayoutConfig } from '../config/layout-config';\nimport {\n  InlineRenderStrategy,\n  LaunchRenderStrategy,\n  OutletRenderStrategy,\n  RoutingRenderStrategy,\n} from './services/index';\n\n@NgModule({\n  providers: [\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: OutletRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: InlineRenderStrategy,\n      multi: true,\n    },\n    {\n      provide: LaunchRenderStrategy,\n      useExisting: RoutingRenderStrategy,\n      multi: true,\n    },\n  ],\n})\nexport class LaunchDialogModule {\n  static forRoot(): ModuleWithProviders<LaunchDialogModule> {\n    return {\n      ngModule: LaunchDialogModule,\n      providers: [{ provide: LayoutConfig, useExisting: Config }],\n    };\n  }\n}\n","import { ElementRef, Injectable, ViewContainerRef } from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport {\n  LaunchDialogService,\n  LAUNCH_CALLER,\n} from '../../layout/launch-dialog/index';\n\n@Injectable({ providedIn: 'root' })\nexport class AnonymousConsentLaunchDialogService {\n  constructor(protected launchDialogService: LaunchDialogService) {}\n\n  openDialog(\n    openElement?: ElementRef,\n    vcr?: ViewContainerRef\n  ): Observable<any> | undefined {\n    const component = this.launchDialogService.launch(\n      LAUNCH_CALLER.ANONYMOUS_CONSENT,\n      vcr\n    );\n\n    if (component) {\n      return combineLatest([\n        component,\n        this.launchDialogService.dialogClose,\n      ]).pipe(\n        filter(([, close]) => close && close !== undefined),\n        tap(([comp]) => {\n          openElement?.nativeElement.focus();\n          this.launchDialogService.clear(LAUNCH_CALLER.ANONYMOUS_CONSENT);\n          comp.destroy();\n        }),\n        map(([comp]) => comp)\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport abstract class BaseFocusService {}\n","import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { BaseFocusConfig } from '../keyboard-focus.model';\nimport { BaseFocusService } from './base-focus.service';\n\n/**\n * Abstract directive that provides a common interface for all focus directives:\n * - Block Focus\n * - Persist Focus\n * - Escape Focus\n * - Auto Focus\n * - Tab Focus\n * - Trap Focus\n * - Lock Focus\n */\n@Directive()\nexport abstract class BaseFocusDirective implements OnInit {\n  /**\n   * Optional configuration for the focus directive drives the behaviour of the keyboard\n   * focus directive.\n   */\n  protected config: BaseFocusConfig;\n\n  /**\n   * A default config can be provided for each directive if a specific focus directive\n   * is used directly. i.e. `<div cxAutoFocus></div>`\n   */\n  protected defaultConfig: BaseFocusConfig = {};\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected service: BaseFocusService\n  ) {}\n\n  ngOnInit() {\n    this.setDefaultConfiguration();\n    this.requiredTabindex = -1;\n  }\n\n  /**\n   * Override the (input) config if it undefined or an empty string, with the\n   * `defaultConfig`. The `defaultConfig` might be specified for each directive\n   * differently. If a specific directive is used (i.e. `cxAutoFocus`), the\n   * specific (inherited) defaultConfig will be used.\n   */\n  protected setDefaultConfiguration(): void {\n    if ((!this.config || this.config === '') && this.defaultConfig) {\n      this.config = this.defaultConfig;\n    }\n  }\n\n  /**\n   * Helper method to return the host element for the directive\n   * given by the `elementRef`.\n   */\n  protected get host(): HTMLElement {\n    return this.elementRef.nativeElement;\n  }\n\n  /**\n   * Force a tabindex on the host element if it is _requried_ to make the element\n   * focusable. If the element is focusable by nature or by a given tabindex, the\n   * `tabindex` is not applied.\n   *\n   * Buttons, active links, etc. do no need an explicit tabindex to receive focus.\n   */\n  protected set requiredTabindex(tabindex: number) {\n    if (this.requiresExplicitTabIndex) {\n      this.tabindex = tabindex;\n    }\n  }\n\n  /**\n   * Returns true if the host element does not have a tabindex defined\n   * and it also doesn't get focus by browsers nature (i.e. button or\n   * active link).\n   */\n  protected get requiresExplicitTabIndex(): boolean {\n    return (\n      this.tabindex === undefined &&\n      ['button', 'input', 'select', 'textarea'].indexOf(\n        this.host.tagName.toLowerCase()\n      ) === -1 &&\n      !(\n        this.host.tagName === 'A' &&\n        (this.host.hasAttribute('href') || this.host.hasAttribute('routerlink'))\n      )\n    );\n  }\n}\n","import { Directive, HostBinding, HostListener } from '@angular/core';\nimport { BaseFocusDirective } from '../base/base-focus.directive';\nimport { VisibleFocusConfig } from '../keyboard-focus.model';\n\n/**\n * Directive implementation that adds a CSS class to the host element\n * when the moused is used to focus an element. As soon as the keyboard\n * is used, the class is removed.\n *\n * This feature must be explicitly enabled with the `disableMouseFocus` config.\n *\n * The appearance of the visual focus depends on the CSS implementation to\n * begin with. Spartacus styles add a blue border around each focusable element.\n * This can be considered annoying by keyboard users, as they won't need such a\n * strong indication of the selected element.\n */\n@Directive() // selector: '[cxVisibleFocus]'\nexport class VisibleFocusDirective extends BaseFocusDirective {\n  protected defaultConfig: VisibleFocusConfig = {\n    disableMouseFocus: true,\n  };\n\n  // @Input('cxVisibleFocus')\n  protected config: VisibleFocusConfig;\n\n  /** Controls a css class to hide focus visible CSS rules */\n  @HostBinding('class.mouse-focus') mouseFocus = false;\n\n  @HostListener('mousedown') handleMousedown() {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = true;\n    }\n  }\n\n  @HostListener('keydown', ['$event']) handleKeydown(event: KeyboardEvent) {\n    if (this.shouldFocusVisible) {\n      this.mouseFocus = !this.isNavigating(event);\n    }\n  }\n\n  /**\n   * Indicates whether the configurations setup to disable visual focus.\n   */\n  protected get shouldFocusVisible(): boolean {\n    return this.config?.disableMouseFocus;\n  }\n\n  /**\n   * Indicates whether the event is used to navigate the storefront. Some keyboard events\n   * are used by mouse users to fill a form or interact with the OS or browser.\n   */\n  protected isNavigating(event: KeyboardEvent): boolean {\n    // when the cmd or ctrl keys are used, the user doesn't navigate the storefront\n    if (event.metaKey) {\n      return false;\n    }\n    // when the tab key is used, users are for navigating away from the current (form) element\n    if (event.code === 'Tab') {\n      return true;\n    }\n    // If the user fill in a form, we don't considering it part of storefront navigation.\n    if (['INPUT', 'TEXTAREA'].includes((event.target as HTMLElement).tagName)) {\n      return false;\n    }\n    return true;\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { BlockFocusConfig } from '../keyboard-focus.model';\nimport { VisibleFocusDirective } from '../visible/visible-focus.directive';\n\n@Directive()\n// { selector: '[cxBlockFocus]' }\nexport class BlockFocusDirective extends VisibleFocusDirective\n  implements OnInit {\n  protected defaultConfig: BlockFocusConfig = { block: true };\n\n  // @Input('cxBlockFocus')\n  protected config: BlockFocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: BaseFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.config.block) {\n      this.tabindex = -1;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BaseFocusService } from '../base/base-focus.service';\nimport { FOCUS_GROUP_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\n\nconst GLOBAL_GROUP = '_g_';\n\n/**\n * Shared service to persist the focus for an element or a group\n * of elements. The persisted element focus can be used to persist\n * the focus for a DOM tree, so that the focus remains after a repaint\n * or reoccurs when a DOM tree is \"unlocked\".\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PersistFocusService extends BaseFocusService {\n  // this is going to fail as we have sub services. They will al have their own map.\n  // We must bring this to a singleton map.\n  protected focus = new Map<string, string>();\n\n  get(group?: string): string {\n    return this.focus.get(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Persist the keyboard focus state for the given key. The focus is stored globally\n   * or for the given group.\n   */\n  set(key: string, group?: string) {\n    if (key) {\n      this.focus.set(group || GLOBAL_GROUP, key);\n    }\n  }\n\n  /**\n   * Clears the persisted keyboard focus state globally or for the given group.\n   */\n  clear(group?: string) {\n    this.focus.delete(group || GLOBAL_GROUP);\n  }\n\n  /**\n   * Returns the group for the host element based on the configured group or\n   * by the `data-cx-focus-group` attribute stored on the host.\n   */\n  getPersistenceGroup(host: HTMLElement, config?: PersistFocusConfig): string {\n    return config?.group ? config.group : host.getAttribute(FOCUS_GROUP_ATTR);\n  }\n}\n","/** The element attribute used to store the focus state */\nexport const FOCUS_ATTR = 'data-cx-focus';\n/** The element attribute used to store the focus group state */\nexport const FOCUS_GROUP_ATTR = 'data-cx-focus-group';\n\nexport const enum MOVE_FOCUS {\n  NEXT = 1,\n  PREV = -1,\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface BaseFocusConfig {}\n\nexport interface VisibleFocusConfig {\n  /**\n   * When set to true, the `mouse-focus` class is added to the host element,\n   * indicating that the element focus should not be made visible.\n   */\n  disableMouseFocus?: boolean;\n}\n\nexport interface BlockFocusConfig extends VisibleFocusConfig {\n  block?: boolean;\n}\n\nexport interface PersistFocusConfig extends BlockFocusConfig {\n  /**\n   * A key to maintain the focus of an element in case the component is\n   * recreated (which often is the case when an `*ngIf` or `*ngFor` is used).\n   */\n  key?: string;\n\n  /**\n   * Optional group identifier that can be used to persist the focus. This allows\n   * to have separate persisted focus available when the DOM is partially rebuild.\n   */\n  group?: string;\n}\n\nexport interface EscapeFocusConfig extends PersistFocusConfig {\n  focusOnEscape?: boolean;\n  /**\n   * Force an autofocus in case of double-escape\n   */\n  focusOnDoubleEscape?: boolean;\n}\n\nexport interface AutoFocusConfig extends EscapeFocusConfig {\n  /**\n   * Autofocus is enabled by default, and will try to focus an _autofocus_ element.\n   * In case the focus is explicitly set to `true`, the first accessible element\n   * is focussed in case there is no _autofocus_ element found.\n   * If the focus is set to false, autofocus will be disabled completely.\n   *\n   * If a string value is given, the autofocus will be restored based on the persisted\n   * focus group, which is driven by `PersistFocusConfig.key` and `PersistFocusConfig.group`.\n   *\n   * Defaults to `true`.\n   */\n  autofocus?: boolean | string;\n}\n\nexport interface TabFocusConfig extends AutoFocusConfig {\n  tab?: boolean | 'scroll' | string;\n}\n\n/**\n * The keyboard navigation (tab, shift-tab and up down keys) is _trapped_\n * for the nested focusable elements. This means that the focus can not\n * \"leave\" the elements. If the last element is focused, the keyboard will\n * navigate to the first element and visa versa.\n */\nexport interface TrapFocusConfig extends TabFocusConfig {\n  /** traps the focus */\n  trap?: boolean | 'start' | 'end';\n}\n\nexport interface LockFocusConfig extends TrapFocusConfig {\n  /**\n   * Indicates that the nested DOM is locked for keyboarding (`TAB`).\n   */\n  lock?: boolean;\n}\n\n// tslint:disable-next-line: no-empty-interface\nexport interface FocusConfig extends LockFocusConfig {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnInit,\n} from '@angular/core';\nimport { BlockFocusDirective } from '../block/block-focus.directive';\nimport { FOCUS_ATTR, PersistFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from './persist-focus.service';\n\n/**\n * Directive that provides persistence of the focused state. This is useful\n * when a group of focusable elements got refocused or even recreated. That\n * happens often when the DOM is constructed with an `*ngIf` or `*ngFor`.\n *\n * The focus state is based on a configured _key_, which can be passed in the\n * config input, either by using a string primitive or `PersistFocusConfig.key`:\n *\n * ```html\n * <button cxPersistFocus=\"myKey\"></button>\n * <button cxFocus=\"myKey\"></button>\n * <button [cxFocus]=\"{{key:'myKey'}\"></button>\n * ```\n *\n * The focus state can be part of a focus _group_, so that the state is shared\n * and remember for the given group. In order to detect the persistence for a\n * given element, we store the persistence key as a data attribute (`data-cx-focus`):\n *\n * ```html\n * <button data-cx-focus=\"myKey\"></button>\n * ```\n *\n * Other keyboard focus directives can read the key to understand whether the element\n * should retrieve focus.\n *\n */\n@Directive() // selector: '[cxPersistFocus]',\nexport class PersistFocusDirective extends BlockFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: PersistFocusConfig = {};\n\n  /**\n   * The persistence key can be passed directly or through the `FocusConfig.key`.\n   * While this could be considered a global key, the likeliness of conflicts\n   * is very small since the key is cleared when the focus is changed.\n   */\n  // @Input('cxPersistFocus')\n  protected config: PersistFocusConfig = {};\n\n  /**\n   * The persistence key is maintained in an element attribute for other\n   * implementations. This is needed to ensure that we can resolve the focus\n   * state in case of a repaint.\n   */\n  @HostBinding(`attr.${FOCUS_ATTR}`) attr: string;\n\n  @HostListener('focus', ['$event'])\n  handleFocus(event?: KeyboardEvent) {\n    this.service.set(this.key, this.group);\n\n    event?.preventDefault();\n    event?.stopPropagation();\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: PersistFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.attr = this.key ? this.key : undefined;\n  }\n\n  protected setDefaultConfiguration() {\n    if (typeof this.config === 'string' && this.config !== '') {\n      this.config = { key: this.config };\n    }\n    super.setDefaultConfiguration();\n  }\n\n  /**\n   * Focus the element explicitly if it was focused before.\n   */\n  ngAfterViewInit() {\n    if (this.isPersisted) {\n      this.host.focus({ preventScroll: true });\n    }\n  }\n\n  protected get isPersisted(): boolean {\n    return !!this.key && this.service.get(this.group) === this.key;\n  }\n\n  /**\n   * Returns the key for the host element, which is used to persist the\n   * focus state. This is useful in cases where the DOM is rebuild.\n   */\n  protected get key(): string {\n    return (this.config as PersistFocusConfig)?.key;\n  }\n\n  /**\n   * returns the persistence group (if any) for the focusable elements.\n   */\n  protected get group(): string {\n    return this.service.getPersistenceGroup(\n      this.host,\n      this.config as PersistFocusConfig\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SelectFocusUtility {\n  /**\n   * Query selectors used to query focusable child elements of the host element.\n   * The selectors are supplemented with `:not([disabled])` and `:not([hidden])`.\n   */\n  protected focusableSelectors: string[] = [\n    'a[href]',\n    'button',\n    '[tabindex]',\n    'input',\n    'select',\n    'textarea',\n  ];\n\n  // like to leave out the following as we don't use it, and make this list exensible.\n  //   `[contentEditable=true]`, // very unlikely to suport as we're not a business tool\n  //   `iframe`, // we really don't like iframes...\n  //   `area[href]`, // very debatable!\n\n  protected focusableSelectorSuffix = ':not([disabled]):not([hidden])';\n\n  query(host: HTMLElement, selector: string): HTMLElement[] {\n    if (!selector || selector === '') {\n      return [];\n    }\n    return Array.from(\n      host.querySelectorAll(selector) as NodeListOf<HTMLElement>\n    );\n  }\n\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    const selector =\n      typeof config?.autofocus === 'string' ? config.autofocus : '[autofocus]';\n    // fallback to first focusable\n    return (\n      this.query(host, selector).find((el) => !this.isHidden(el)) ||\n      this.findFocusable(host).find((el) => Boolean(el))\n    );\n  }\n\n  /**\n   * returns all focusable child elements of the host element. The element selectors\n   * are build from the `focusableSelectors`.\n   *\n   * @param host the `HTMLElement` used to query focusable elements\n   * @param locked indicates whether inactive (`tabindex=\"-1\"`) focusable elements should be returned\n   * @param invisible indicates whether hidden focusable elements should be returned\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    let suffix = this.focusableSelectorSuffix;\n    if (!locked) {\n      suffix += `:not([tabindex='-1'])`;\n    }\n    const selector = this.focusableSelectors\n      .map((s) => (s += suffix))\n      .join(',');\n    return this.query(host, selector).filter((el) =>\n      !invisible ? !this.isHidden(el) : Boolean(el)\n    );\n  }\n\n  /**\n   * Indicates whether the element is hidden by CSS. There are various CSS rules and\n   * HTML structures which can lead to an hidden or invisible element. An `offsetParent`\n   * of null indicates that the element or any of it's decendants is hidden (`display:none`).\n   *\n   * Oother techniques use the visibility (`visibility: hidden`), opacity (`opacity`) or\n   * phyisical location on the element itself or any of it's anchestor elements. Those\n   * technique require to work with the _computed styles_, which will cause a performance\n   * downgrade. We don't do this in the standard implementaton.\n   */\n  protected isHidden(el: HTMLElement): boolean {\n    return el.offsetParent === null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusService } from '../persist/persist-focus.service';\nimport { SelectFocusUtility } from '../services/select-focus.util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EscapeFocusService extends PersistFocusService {\n  constructor(protected selectFocusUtil: SelectFocusUtility) {\n    super();\n  }\n\n  shouldFocus(config: EscapeFocusConfig): boolean {\n    return !!config?.focusOnEscape;\n  }\n\n  handleEscape(\n    host: HTMLElement,\n    config: EscapeFocusConfig,\n    event: KeyboardEvent\n  ): void {\n    if (this.shouldFocus(config)) {\n      if (host !== event.target) {\n        host.focus({ preventScroll: true });\n        event.preventDefault();\n        event.stopPropagation();\n      } else {\n        if (config?.focusOnDoubleEscape) {\n          this.selectFocusUtil\n            .findFirstFocusable(host, { autofocus: true })\n            ?.focus();\n        }\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { EscapeFocusConfig } from '../keyboard-focus.model';\nimport { PersistFocusDirective } from '../persist/persist-focus.directive';\nimport { EscapeFocusService } from './escape-focus.service';\n\n/**\n * Directive to focus the host element whenever the `escape` key is captured.\n * UiEvents bubble up by nature, which is why the `cxEscGroup` can be used\n * on a tree of elements. Each time the escape key is used, the focus will\n * move up in the DOM tree.\n *\n */\n@Directive() // selector: '[cxEscFocus]',\nexport class EscapeFocusDirective extends PersistFocusDirective\n  implements OnInit {\n  protected defaultConfig: EscapeFocusConfig = { focusOnEscape: true };\n\n  // @Input('cxEscFocus')\n  protected config: EscapeFocusConfig;\n\n  @Output() esc = new EventEmitter<boolean>();\n\n  /**\n   * Handles the escape key event.\n   * @param event the native keyboard event which contains the escape keydown event\n   */\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    if (this.service.shouldFocus(this.config)) {\n      this.service.handleEscape(this.host, this.config, event);\n    }\n    this.esc.emit(this.service.shouldFocus(this.config));\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: EscapeFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  ngOnInit() {\n    if (this.service.shouldFocus(this.config)) {\n      this.requiredTabindex = -1;\n    }\n    super.ngOnInit();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EscapeFocusService } from '../escape/escape-focus.service';\nimport {\n  AutoFocusConfig,\n  FOCUS_ATTR,\n  PersistFocusConfig,\n} from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AutoFocusService extends EscapeFocusService {\n  /**\n   * Returns the first focusable child element of the host element.\n   */\n  findFirstFocusable(\n    host: HTMLElement,\n    config: AutoFocusConfig = { autofocus: true }\n  ): HTMLElement {\n    if (config?.autofocus === ':host') {\n      return host;\n    } else if (this.hasPersistedFocus(host, config)) {\n      return this.getPersisted(host, this.getPersistenceGroup(host, config));\n    } else {\n      return this.selectFocusUtil.findFirstFocusable(host, config) || host;\n    }\n  }\n\n  /**\n   * Indicates whether any of the focusabe child elements is focused.\n   */\n  hasPersistedFocus(host: HTMLElement, config: PersistFocusConfig): boolean {\n    return !!this.getPersisted(host, this.getPersistenceGroup(host, config));\n  }\n\n  /**\n   * Returns the element that has a persisted focus state.\n   *\n   * @param host the `HTMLElement` used to query for focusable children\n   * @param group the optional group for the persistent state, to separate different focus\n   *   groups and remain the persistence\n   */\n  protected getPersisted(host: HTMLElement, group?: string): HTMLElement {\n    if (!this.get(group)) {\n      return;\n    }\n    const focussed = Array.from(\n      host.querySelectorAll(\n        `[${FOCUS_ATTR}='${this.get(group)}']`\n      ) as NodeListOf<HTMLElement>\n    );\n    return focussed.length > 0 ? focussed[0] : null;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\nimport { EscapeFocusDirective } from '../escape/escape-focus.directive';\nimport { AutoFocusConfig } from '../keyboard-focus.model';\nimport { AutoFocusService } from './auto-focus.service';\n\n/**\n * Directive that focus the first nested _focusable_ element based on state and configuration:\n *\n * 1. focusable element that was left in a focused state (aka _persisted_ focus)\n * 2. focusable element selected by configured CSS selector (i.e. 'button[type=submit]')\n * 3. focusable element marked with the native HTML5 `autofocus` attribute\n * 4. first focusable element\n * 5. the host element, in case the configured CSS selector is `:host`.\n *\n * Example configurations:\n *\n * `<div cxAutoFocus>[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: false}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: 'button.active'}\">[...]</div>`\n *\n * `<div [cxAutoFocus]=\"{autofocus: ':host'}\">[...]</div>`\n *\n */\n@Directive() // selector: '[cxAutoFocus]'\nexport class AutoFocusDirective extends EscapeFocusDirective\n  implements AfterViewInit {\n  /** The AutoFocusDirective will be using autofocus by default  */\n  protected defaultConfig: AutoFocusConfig = { autofocus: true };\n\n  // @Input('cxAutoFocus')\n  protected config: AutoFocusConfig;\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: AutoFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Focus the element explicitly if it was focussed before.\n   */\n  ngAfterViewInit(): void {\n    if (this.shouldAutofocus) {\n      this.handleFocus();\n    }\n    if (!this.shouldAutofocus || this.hasPersistedFocus) {\n      super.ngAfterViewInit();\n    }\n  }\n\n  /**\n   * Mimic the focus without setting the actual focus on the host. The first\n   * focusable child element will be focussed.\n   */\n  handleFocus(event?: KeyboardEvent) {\n    if (this.shouldAutofocus) {\n      if (!event?.target || event.target === this.host) {\n        this.firstFocusable?.focus();\n      } else {\n        (event.target as HTMLElement).focus();\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  /**\n   * Helper function to get the first focusable child element\n   */\n  protected get hasPersistedFocus() {\n    return this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Helper function to indicate whether we should use autofocus for the\n   * child elements.\n   */\n  protected get shouldAutofocus(): boolean {\n    return !!this.config?.autofocus;\n  }\n\n  /**\n   * Helper function to get the first focusable child element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get firstFocusable(): HTMLElement {\n    return this.service.findFirstFocusable(this.host, this.config);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoFocusService } from '../autofocus/auto-focus.service';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TabFocusService extends AutoFocusService {\n  /**\n   * Moves to the next (or previous) tab.\n   */\n  moveTab(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS,\n    event: KeyboardEvent\n  ): void {\n    if (config?.tab) {\n      const next =\n        config.tab === 'scroll'\n          ? this.findNextScrollable(host, config, increment)\n          : this.findNext(host, config, increment);\n\n      next?.focus();\n\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * builds out virtual slides out of the full scrollable area, to allow\n   * for maximum flexibility for the underlying layout without using hardcoded\n   * slide sizes.\n   */\n  protected findNextScrollable(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const active = this.getActiveChild(host, config);\n\n    if (!active) {\n      return;\n    }\n    // slide count\n    const virtualSlideCount = Math.round(host.scrollWidth / host.clientWidth);\n\n    // find current virtual slide\n    const currentVirtualSlide = Math.round(\n      active.offsetLeft / (host.scrollWidth / virtualSlideCount)\n    );\n\n    let nextVirtualSlide = currentVirtualSlide + increment;\n    if (\n      increment === MOVE_FOCUS.NEXT &&\n      nextVirtualSlide >= virtualSlideCount\n    ) {\n      nextVirtualSlide = 0;\n    }\n    if (increment === MOVE_FOCUS.PREV && nextVirtualSlide < 0) {\n      nextVirtualSlide = virtualSlideCount - 1;\n    }\n\n    const firstItemOnNextSlide = this.getChildren(host, config)?.find(\n      (tab) =>\n        tab.offsetLeft >=\n        (host.scrollWidth / virtualSlideCount) * nextVirtualSlide\n    );\n\n    return firstItemOnNextSlide;\n  }\n\n  protected findNext(\n    host: HTMLElement,\n    config: TabFocusConfig,\n    increment: MOVE_FOCUS\n  ): HTMLElement {\n    const childs = this.getChildren(host, config);\n    let activeIndex = childs?.findIndex(\n      (c) => c === this.getActiveChild(host, config)\n    );\n\n    if (!activeIndex || activeIndex === -1) {\n      activeIndex = 0;\n    }\n    activeIndex += increment;\n\n    if (increment === MOVE_FOCUS.NEXT && activeIndex >= childs?.length) {\n      activeIndex = childs.length - 1;\n    }\n    if (increment === MOVE_FOCUS.PREV && activeIndex < 0) {\n      activeIndex = 0;\n    }\n    return childs ? childs[activeIndex] : undefined;\n  }\n\n  /**\n   * Returns the active focusable child element. If there's no active\n   * focusable child element, the first focusable child is returned.\n   */\n  protected getActiveChild(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement {\n    const persisted = this.getPersisted(host, config?.group);\n    if (persisted) {\n      return persisted;\n    }\n    const children = this.getChildren(host, config);\n    let index = children.findIndex((tab) => this.isActive(tab));\n    if (!index || index === -1) {\n      index = 0;\n    }\n    return children[index];\n  }\n\n  protected getChildren(\n    host: HTMLElement,\n    config: TabFocusConfig\n  ): HTMLElement[] {\n    if (typeof config.tab === 'string' && config.tab !== 'scroll') {\n      return this.selectFocusUtil.query(host, config.tab);\n    } else {\n      return this.findFocusable(host, true);\n    }\n  }\n\n  /**\n   * Returns all focusable child elements of the host element.\n   *\n   * @param host The host element is used to query child focusable elements.\n   * @param locked Indicates if locked elements (tabindex=-1) should be returned, defaults to false.\n   * @param invisible Indicates if invisible child elements should be returned, defaults to false.\n   */\n  findFocusable(\n    host: HTMLElement,\n    locked = false,\n    invisible = false\n  ): HTMLElement[] {\n    return this.selectFocusUtil.findFocusable(host, locked, invisible);\n  }\n\n  protected isActive(el: HTMLElement): boolean {\n    const child = document.activeElement;\n    const selector = child.tagName;\n\n    return (\n      el === child ||\n      !!Array.from(el.querySelectorAll(selector)).find((e) => e === child)\n    );\n  }\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { AutoFocusDirective } from '../autofocus/auto-focus.directive';\nimport { MOVE_FOCUS, TabFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from './tab-focus.service';\n\n/**\n * Directive to move the focus of (\"locked\") child elements. This is useful\n * for a nested list of tabs, carousel slides or any group of elements that\n * requires horizontal navigation.\n */\n@Directive() // selector: '[cxTabFocus]'\nexport class TabFocusDirective extends AutoFocusDirective {\n  /** `tab` defaults to true if the directive `cxTabFocus` is used. */\n  protected defaultConfig: TabFocusConfig = { tab: true };\n\n  // @Input('cxTabFocus')\n  protected config: TabFocusConfig = {};\n\n  @HostListener('keydown.arrowRight', ['$event'])\n  handleNextTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.NEXT, event);\n    }\n  }\n\n  @HostListener('keydown.arrowLeft', ['$event'])\n  handlePreviousTab(event: KeyboardEvent) {\n    if (this.config?.tab) {\n      this.service.moveTab(this.host, this.config, MOVE_FOCUS.PREV, event);\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TabFocusService\n  ) {\n    super(elementRef, service);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusService } from '../tab/tab-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TrapFocusService extends TabFocusService {\n  /**\n   * Indicates whether any of the child elements of the host are focusable.\n   *\n   * @param host `HTMLElement` that is used to query the focusable elements.\n   */\n  hasFocusableChildren(host: HTMLElement): boolean {\n    return this.findFocusable(host).length > 0;\n  }\n\n  /**\n   * Focus the next or previous element of all available focusable elements.\n   * The focus is _trapped_ in case there's no next or previous available element.\n   * The focus will automatically move the start or end of the list.\n   */\n  moveFocus(\n    host: HTMLElement,\n    config: TrapFocusConfig,\n    increment: MOVE_FOCUS,\n    event: UIEvent\n  ): void {\n    const focusable: HTMLElement[] = this.findFocusable(host);\n\n    let index = focusable.findIndex((v) => v === event.target) + increment;\n\n    const shouldMoveFocus =\n      (index >= 0 && index < focusable.length) ||\n      (index < 0 && this.getTrapStart(config.trap)) ||\n      (index >= focusable.length && this.getTrapEnd(config.trap));\n\n    if (shouldMoveFocus) {\n      if (index >= focusable.length) {\n        index = 0;\n      }\n      if (index < 0) {\n        index = focusable.length - 1;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      const el = focusable[index];\n\n      el.focus();\n    }\n  }\n\n  protected getTrapStart(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'start';\n  }\n\n  protected getTrapEnd(trap: boolean | 'start' | 'end'): boolean {\n    return trap === true || trap === 'end';\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from '@angular/core';\nimport { MOVE_FOCUS, TrapFocusConfig } from '../keyboard-focus.model';\nimport { TabFocusDirective } from '../tab/tab-focus.directive';\nimport { TrapFocusService } from './trap-focus.service';\n\n/**\n * Directive that keeps the focus inside the focussable child elements,\n * also known as a _focus trap_.\n */\n@Directive() // selector: '[cxTrapFocus]'\nexport class TrapFocusDirective extends TabFocusDirective implements OnInit {\n  protected defaultConfig: TrapFocusConfig = { trap: true };\n\n  // @Input('cxTrapFocus')\n  protected config: TrapFocusConfig = {};\n\n  @HostListener('keydown.arrowdown', ['$event'])\n  @HostListener('keydown.tab', ['$event'])\n  handleTrapDown = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.NEXT);\n    }\n  };\n\n  @HostListener('keydown.arrowup', ['$event'])\n  @HostListener('keydown.shift.tab', ['$event'])\n  handleTrapUp = (event: KeyboardEvent) => {\n    if (!!this.config.trap) {\n      this.moveFocus(event, MOVE_FOCUS.PREV);\n    }\n  };\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: TrapFocusService\n  ) {\n    super(elementRef, service);\n  }\n\n  /**\n   * Moves the focus of the element reference up or down, depending on the increment.\n   * The focus of the element is trapped to avoid it from going out of the group.\n   *\n   * @param event UIEvent that is used to get the target element. The event is blocked\n   *   from standard execution and further bubbling.\n   * @param increment indicates whether the next or previous is focussed.\n   */\n  protected moveFocus(event: UIEvent, increment: number) {\n    if (this.service.hasFocusableChildren(this.host)) {\n      this.service.moveFocus(\n        this.host,\n        this.config,\n        increment,\n        event as UIEvent\n      );\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TrapFocusService } from '../trap/trap-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LockFocusService extends TrapFocusService {}\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_GROUP_ATTR, LockFocusConfig } from '../keyboard-focus.model';\nimport { TrapFocusDirective } from '../trap/trap-focus.directive';\nimport { LockFocusService } from './lock-focus.service';\n\n/**\n * Focusable elements exclude hidden elements by default, but this contradicts with\n * unlocking (hidden) elements.\n */\nconst UNLOCK_HIDDEN_ELEMENTS = true;\n/**\n * Directive that adds persistence for focussed element in case\n * the elements are being rebuild. This happens often when change\n * detection kicks in because of new data set from the backend.\n */\n@Directive() // selector: '[cxLockFocus]'\nexport class LockFocusDirective extends TrapFocusDirective\n  implements OnInit, AfterViewInit {\n  protected defaultConfig: LockFocusConfig = { lock: true };\n\n  // @Input('cxLockFocus')\n  protected config: LockFocusConfig = {};\n\n  /**\n   * Indicates that the host is configured to use locking. This is available as a\n   * CSS class `focus-lock`.\n   */\n  @HostBinding('class.focus-lock') shouldLock: boolean;\n\n  /**\n   * Indicates that the host is locked. This is available as a CSS class `is-locked`.\n   */\n  @HostBinding('class.is-locked') isLocked: boolean;\n\n  /**\n   * Emits an event when the host is unlocked.\n   */\n  @Output() unlock = new EventEmitter<boolean>();\n\n  /**\n   * When the user selects enter or space, the focusable childs are\n   * unlocked, which means that the tabindex is set to 0.\n   */\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  handleEnter(event: KeyboardEvent) {\n    if (this.shouldLock && this.host === (event.target as HTMLElement)) {\n      this.unlockFocus(event);\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * In case any of the children elements is touched by the mouse,\n   * we unlock the group to not break the mouse-experience.\n   */\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    if (this.shouldLock && this.isLocked) {\n      this.unlockFocus(event);\n      event.stopPropagation();\n    }\n  }\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: LockFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service);\n  }\n\n  protected lockFocus() {\n    this.addTabindexToChildren(-1);\n  }\n\n  protected unlockFocus(event?: UIEvent) {\n    this.unlock.emit(true);\n    this.addTabindexToChildren(0);\n    // we focus the host if the event was triggered from a child\n    if (event?.target === this.host) {\n      // we wait a few milliseconds, mainly because firefox will otherwise apply\n      // the mouse event on the new focused child element\n      setTimeout(() => {\n        super.handleFocus(event as KeyboardEvent);\n      }, 100);\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.shouldLock = this.config?.lock;\n\n    if (this.shouldLock) {\n      this.tabindex = 0;\n\n      // Locked elements will be set to `autofocus` by default if it's not\n      // been configured. This will ensure that autofocus kicks in upon unlock.\n      if (!this.config.hasOwnProperty('autofocus')) {\n        this.config.autofocus = true;\n      }\n      // Locked elements will be set to `focusOnEscape` by default if it's not\n      // been configured. This will ensure that  the host gets locked again when\n      // `escape` is pressed.\n      if (!this.config.hasOwnProperty('focusOnEscape')) {\n        this.config.focusOnEscape = !(this.config?.focusOnEscape === false);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.shouldLock) {\n      /**\n       * If the component hosts a group of focusable children elements,\n       * we persist the group key to the children, so that they can taken this\n       * into account when they persist their focus state.\n       */\n      if (!!this.group) {\n        this.service.findFocusable(this.host).forEach((el) =>\n          // we must do this in after view init as\n          this.renderer.setAttribute(el, FOCUS_GROUP_ATTR, this.group)\n        );\n      }\n\n      if (this.shouldAutofocus) {\n        this.handleFocus();\n      }\n    }\n    super.ngAfterViewInit();\n  }\n\n  handleFocus(event?: KeyboardEvent): void {\n    if (this.shouldLock) {\n      if (this.shouldUnlockAfterAutofocus(event)) {\n        // Delay unlocking in case the host is using `ChangeDetectionStrategy.Default`\n        setTimeout(() => this.unlockFocus(event));\n      } else {\n        setTimeout(() => this.lockFocus());\n        event?.stopPropagation();\n        return;\n      }\n    }\n    super.handleFocus(event);\n  }\n\n  handleEscape(event: KeyboardEvent): void {\n    if (this.shouldLock) {\n      this.service.clear(this.config.group);\n    }\n    super.handleEscape(event);\n  }\n\n  /**\n   * When the handleFocus is called without an actual event, it's coming from Autofocus.\n   * In this case we unlock the focusable children in case there's a focusable child that\n   * was unlocked before.\n   *\n   * We keep this private to not polute the API.\n   */\n  private shouldUnlockAfterAutofocus(event?: KeyboardEvent) {\n    return !event && this.service.hasPersistedFocus(this.host, this.config);\n  }\n\n  /**\n   * Add the tabindex attribute to the focusable children elements\n   */\n  protected addTabindexToChildren(i = 0): void {\n    if (this.shouldLock) {\n      this.isLocked = i === -1;\n      if (!(this.hasFocusableChildren && i === 0) || i === 0) {\n        this.focusable.forEach((el) =>\n          this.renderer.setAttribute(el, 'tabindex', i.toString())\n        );\n      }\n    }\n  }\n\n  /**\n   * Utility method, returns all focusable children for the host element.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get hasFocusableChildren(): boolean {\n    return this.service.hasFocusableChildren(this.host);\n  }\n\n  /**\n   * Returns the focusable children of the host element. If the host element\n   * is configured to be locked, the query is restricted to child elements\n   * with a tabindex !== `-1`.\n   *\n   * We keep this private to not polute the API.\n   */\n  private get focusable(): HTMLElement[] {\n    return this.service.findFocusable(\n      this.host,\n      this.shouldLock,\n      UNLOCK_HIDDEN_ELEMENTS\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { LockFocusService } from '../lock/lock-focus.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeyboardFocusService extends LockFocusService {}\n","import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';\nimport { FocusConfig } from './keyboard-focus.model';\nimport { LockFocusDirective } from './lock/lock-focus.directive';\nimport { KeyboardFocusService } from './services/keyboard-focus.service';\n\n@Directive({\n  selector: '[cxFocus]',\n})\nexport class FocusDirective extends LockFocusDirective {\n  protected defaultConfig: FocusConfig = {};\n  // tslint:disable-next-line: no-input-rename\n  @Input('cxFocus') protected config: FocusConfig = {};\n\n  constructor(\n    protected elementRef: ElementRef,\n    protected service: KeyboardFocusService,\n    protected renderer: Renderer2\n  ) {\n    super(elementRef, service, renderer);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusDirective } from './focus.directive';\n\nconst directives = [\n  // PersistFocusDirective,\n  // VisibleFocusDirective,\n  // BlockFocusDirective,\n  // AutoFocusDirective,\n  // EscapeFocusDirective,\n  // LockFocusDirective,\n  // TrapFocusDirective,\n  // TabFocusDirective,\n  FocusDirective,\n];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...directives],\n  exports: [...directives],\n})\nexport class KeyboardFocusModule {}\n","import { Component, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { AnonymousConsentsService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-management-banner',\n  templateUrl: './anonymous-consent-management-banner.component.html',\n})\nexport class AnonymousConsentManagementBannerComponent implements OnDestroy {\n  private subscriptions = new Subscription();\n\n  bannerVisible$: Observable<\n    boolean\n  > = this.anonymousConsentsService.isBannerVisible();\n\n  constructor(\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  viewDetails(): void {\n    this.hideBanner();\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      null,\n      this.vcr\n    );\n    if (dialog) {\n      this.subscriptions.add(dialog.subscribe());\n    }\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      this.anonymousConsentsService\n        .giveAllConsents()\n        .pipe(tap(() => this.hideBanner()))\n        .subscribe()\n    );\n  }\n\n  hideBanner(): void {\n    this.anonymousConsentsService.toggleBannerDismissed(true);\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/**\n * The ltr and rtl directions can be used to configure the storefront for a certain direction, both statically\n * or dynamically.\n *\n * The HTML5 \"auto\" value is not supported in Spartacus, as it's considered to be too fragile for the global\n * direction.\n */\nexport enum DirectionMode {\n  /**\n   * Indicates Left to Right direction.\n   */\n  LTR = 'ltr',\n  /**\n   * Indicates Right to Left direction.\n   */\n  RTL = 'rtl',\n}\n\n/**\n * Contains the configuration mode for language driven directionality. The detect mode is recommended\n * for a multi-site or multi-lingual setup where the active language should dictate the direction mode.\n */\nexport interface Direction {\n  /**\n   * The default direction mode is used for the direction mode of the overall storefront. The default mode\n   * can be used for all languages, but can be further enhanced dynamically by using the language detect mode.\n   * The default mode will also be used in detect mode for those languages that are not listed in either\n   * `rtlLanguages` or `ltrLanguages`.\n   */\n  default?: DirectionMode;\n\n  /**\n   * If detect is enabled, the direction is driven by the active language. The language is compared to the\n   * list of configured `rtlLanguages` vs `ltrLanguages`. If no language is resolved, the default direction\n   * mode is used.\n   *\n   * If no direction can be resolved, the direction is removed.\n   */\n  detect?: boolean;\n\n  /**\n   * The language isoCodes that are used to detect Right to Left languages.\n   */\n  rtlLanguages?: string[];\n\n  /**\n   * The language isoCodes that are used to detect Left to Right languages.\n   */\n  ltrLanguages?: string[];\n}\n","import { IconConfig, IconResourceType } from './icon.model';\n\nexport const fontawesomeIconConfig: IconConfig = {\n  icon: {\n    symbols: {\n      SEARCH: 'fas fa-search',\n      CART: 'fas fa-shopping-cart',\n      INFO: 'fas fa-info-circle',\n      STAR: 'fas fa-star',\n      GRID: 'fas fa-th-large',\n      LIST: 'fas fa-bars',\n      CARET_DOWN: 'fas fa-angle-down',\n      CARET_RIGHT: 'fas fa-angle-right',\n      CARET_LEFT: 'fas fa-angle-left',\n      ERROR: 'fas fa-exclamation-circle',\n      WARNING: 'fas fa-exclamation-triangle',\n      SUCCESS: 'fas fa-check-circle',\n      CLOSE: 'fas fa-times',\n      VISA: 'fab fa-cc-visa',\n      MASTER_CARD: 'fab fa-cc-mastercard',\n      AMEX: 'fab fa-cc-amex',\n      DINERS_CLUB: 'fab fa-cc-diners-club',\n      CREDIT_CARD: 'fas fa-credit-card',\n      COLLAPSE: 'fas fa-minus',\n      EXPAND: 'fas fa-plus',\n      RESET: 'fas fa-times-circle',\n      CIRCLE: 'fas fa-circle',\n      HEART: 'fas fa-heart',\n      EMPTY_HEART: 'far fa-heart',\n      FILTER: 'fas fa-filter',\n    },\n    resources: [\n      {\n        type: IconResourceType.LINK,\n        url: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css',\n      },\n    ],\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\nimport { DirectionMode } from '../../../layout/direction/config/direction.model';\nimport {\n  IconConfig,\n  IconConfigResource,\n  IconOptions,\n  IconResourceType,\n  ICON_TYPE,\n} from './icon.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconLoaderService {\n  private loadedResources = [];\n  constructor(\n    protected winRef: WindowRef,\n    protected iconConfig: IconConfig,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  /**\n   * Returns an html fragment which can be added to the DOM in a safe way.\n   */\n  getHtml(type: ICON_TYPE | string): SafeHtml {\n    if (this.isResourceType(type, IconResourceType.SVG)) {\n      return this.sanitizer.bypassSecurityTrustHtml(\n        `<svg><use xlink:href=\"${this.getSvgPath(type)}\"></use></svg>`\n      );\n    }\n    if (this.isResourceType(type, IconResourceType.TEXT)) {\n      return this.sanitizer.bypassSecurityTrustHtml(this.getSymbol(type));\n    }\n  }\n\n  /**\n   * Return the direction for which the icon should mirror (ltr vs rtl). The icon direction\n   * is configurable, but optional, as only a few icons should be flipped for rtl direction.\n   */\n  getFlipDirection(type: ICON_TYPE | string): DirectionMode {\n    return this.config?.flipDirection?.[type];\n  }\n\n  /**\n   *\n   * Returns the symbol class(es) for the icon type.\n   */\n  getStyleClasses(iconType: ICON_TYPE | string): string {\n    return this.getSymbol(iconType) || '';\n  }\n\n  /**\n   * Indicates whether the given `ICON_TYPE` is configured for\n   * the given `IconResourceType`.\n   */\n  private isResourceType(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): boolean {\n    return (\n      this.config.resources &&\n      !!this.config.resources.find(\n        (res) =>\n          res.types && res.type === resourceType && res.types.includes(iconType)\n      )\n    );\n  }\n\n  /**\n   * Returns the path to the svg link. The link supports path names\n   * as well, if the config a[[s been setup to support a svg file path.\n   * Additionally, the icon prefix will be taken into account to prefix the\n   * icon IDs in the SVG.\n   */\n  private getSvgPath(iconType: ICON_TYPE | string): string {\n    const svgResource = this.config.resources.find(\n      (res) =>\n        res.type === IconResourceType.SVG &&\n        res.types &&\n        res.types.includes(iconType)\n    );\n    if (svgResource) {\n      return svgResource.url\n        ? `${svgResource.url}#${this.getSymbol(iconType)}`\n        : `#${this.getSymbol(iconType)}`;\n    }\n  }\n\n  /**\n   * Loads the resource url (if any) for the given icon.\n   * The icon will only be loaded once.\n   *\n   * NOTE: this is not working when the shadow is used as there's\n   * no head element available and the link must be loaded for every\n   * web component.\n   */\n  addLinkResource(iconType: ICON_TYPE | string): void {\n    const resource: IconConfigResource = this.findResource(\n      iconType,\n      IconResourceType.LINK\n    );\n    if (\n      resource &&\n      resource.url &&\n      !this.loadedResources.includes(resource.url)\n    ) {\n      this.loadedResources.push(resource.url);\n      const head = this.winRef.document.getElementsByTagName('head')[0];\n      const link = this.winRef.document.createElement('link');\n      link.rel = 'stylesheet';\n      link.type = 'text/css';\n      link.href = resource.url;\n      head.appendChild(link);\n    }\n  }\n\n  private findResource(\n    iconType: ICON_TYPE | string,\n    resourceType: IconResourceType\n  ): IconConfigResource {\n    if (!this.config.resources) {\n      return;\n    }\n\n    let resource = this.config.resources.find(\n      (res) =>\n        res.type === resourceType && res.types && res.types.includes(iconType)\n    );\n    // no specific resource found, let's try to find a one-size-fits-all resource\n    if (!resource) {\n      resource = this.config.resources.find(\n        (res) => (res.type === resourceType && !res.types) || res.types === []\n      );\n    }\n    return resource;\n  }\n\n  getSymbol(iconType: ICON_TYPE | string) {\n    if (this.config && this.config.symbols && this.config.symbols[iconType]) {\n      return this.config.symbols[iconType];\n    }\n  }\n\n  private get config(): IconOptions {\n    return this.iconConfig.icon;\n  }\n}\n","/**\n * Represents a page item for a pagination system. This is used\n * to store the model of each page.\n */\nexport interface PaginationItem {\n  label?: string;\n  type?: PaginationItemType;\n  /** The number is used when the type is {@link PaginationItemType.PAGE} */\n  number?: number;\n}\n\n/**\n * The item type is used to add semantic structure to the\n * PaginationItem, so that the UI understands the usage.\n */\nexport enum PaginationItemType {\n  GAP = 'gap',\n  FIRST = 'first',\n  LAST = 'last',\n  PREVIOUS = 'previous',\n  NEXT = 'next',\n  START = 'start',\n  END = 'end',\n  PAGE = 'page',\n}\n\nexport interface PaginationOptions {\n  /**\n   * The range of direct accessible pages in the pagination.\n   *\n   * `« 4 (5) 6 »`\n   *\n   * Defaults to 3.\n   */\n  rangeCount?: number;\n\n  /** Adds a link to skip to the start of the pages, defaults to false. */\n  addStart?: boolean;\n  /** A link to skip to the end of the pages, defaults to false. */\n  addEnd?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addPrevious?: boolean;\n  /** A link to the previous page, defaults to false. */\n  addNext?: boolean;\n\n  navigationPosition?: PaginationNavigationPosition;\n\n  /** A link to the first page can be added in case it is not included already, defaults to false. */\n  addFirst?: boolean;\n  /** A link to the last page can be added in case it is not included already, defaults to false. */\n  addLast?: boolean;\n\n  /**\n   * Adds a gap before and after the pages. to visualize hidden pages. Defaults to false.\n   *\n   * `1 ...  4 (5) 6 ... 18`\n   *\n   * Defaults to false.\n   */\n  addDots?: boolean;\n\n  /**\n   * If the page dots only represents a single page, we rather add the page\n   * as this would take the same amount of space. Some UX might want to use\n   * the dots for consistency reasons, which why this option is configurable.\n   *\n   * This typically happens on the 4th page (in case the range is 3):\n   * Instead of having:\n   *\n   *  `1 ...  3 (4) 5`\n   *\n   * we'd have\n   *\n   * `1 2 3 (4) 5`.\n   *\n   * Defaults to false.\n   */\n  substituteDotsForSingularPage?: boolean;\n\n  /** Custom label for the start link, defaults to `«`. */\n  startLabel?: string;\n  /** Custom label for the previous link, defaults to `‹`. */\n  previousLabel?: string;\n  /** Custom label for the next link, defaults to `›`. */\n  nextLabel?: string;\n  /** Custom label for the end link, defaults to `»`. */\n  endLabel?: string;\n  /** Custom label for the dots, defaults to `...`. */\n  dotsLabel?: string;\n}\n\nexport enum PaginationNavigationPosition {\n  ASIDE = 'aside',\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { DirectionMode } from '../../../layout/direction/config/direction.model';\nimport { IconLoaderService } from './icon-loader.service';\nimport { ICON_TYPE } from './icon.model';\n\n/**\n *\n * The icon component can be added in different ways:\n *\n * With the component selector:\n * `<cx-icon type=\"SEARCH\"></cx-icon>`\n *\n * With the attribute selector:\n * `<span cxIcon=\"STAR\"></span>`\n *\n * Additionally, content can be projected to the icon:\n *\n * `<button cxIcon=\"HAPPY\">happy label</button>`\n *\n * The above button would become (based on a TEXT resource type):\n * `<button>😊happy label</button>`\n *\n * While the content is projected, the icon itself doesn't require an\n * additional DOM node which is an advantage over the component selector.\n */\n@Component({\n  selector: 'cx-icon,[cxIcon]',\n  templateUrl: './icon.component.html',\n})\nexport class IconComponent {\n  /**\n   * The cxIcon directive is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set cxIcon(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * The type input parameter is bound to the icon type. You can feed the `ICON_TYPE` to\n   * accomplish a configurable button in the UI.\n   */\n  @Input() set type(type: ICON_TYPE) {\n    this.setIcon(type);\n  }\n\n  /**\n   * the icon provides an html fragment that is used to add SVG or text based icons.\n   */\n  icon: SafeHtml;\n\n  /**\n   * The `flip-at-rtl` class is added to the DOM for the style layer to flip the icon in RTL direction.\n   */\n  @HostBinding('class.flip-at-rtl') flipAtRtl: boolean;\n\n  /**\n   * The `flip-at-ltr` class is added to the DOM for the style layer to flip the icon in LTR direction.\n   */\n  @HostBinding('class.flip-at-ltr') flipAtLtr: boolean;\n\n  /**\n   * Maintains the applied style classes so we can remove them when the\n   * icon type changes at run time.\n   */\n  protected styleClasses: string[];\n\n  constructor(\n    protected iconLoader: IconLoaderService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected renderer: Renderer2\n  ) {}\n\n  protected setIcon(type: ICON_TYPE): void {\n    if (!type || <string>type === '') {\n      return;\n    }\n    this.icon = this.iconLoader.getHtml(type);\n    this.addStyleClasses(type);\n    this.iconLoader.addLinkResource(type);\n    this.flipIcon(type);\n  }\n\n  /**\n   * The icons supports flipping for some icons to support rtl and ltr directions.\n   */\n  protected flipIcon(type: ICON_TYPE) {\n    // TODO: this can be dropped with the next major release.\n    if (!this.iconLoader.getFlipDirection) {\n      return;\n    }\n    const iconDirection = this.iconLoader.getFlipDirection(type);\n    this.flipAtLtr = iconDirection === DirectionMode.LTR;\n    this.flipAtRtl = iconDirection === DirectionMode.RTL;\n  }\n\n  /**\n   * Adds the style classes and the link resource (if available).\n   */\n  protected addStyleClasses(type: ICON_TYPE): void {\n    this.renderer.addClass(this.host, 'cx-icon');\n\n    if (this.styleClasses) {\n      this.styleClasses.forEach((cls) =>\n        this.renderer.removeClass(this.host, cls)\n      );\n    }\n\n    this.styleClasses = this.iconLoader.getStyleClasses(type).split(' ');\n\n    this.styleClasses.forEach((cls) => {\n      if (cls !== '') {\n        this.renderer.addClass(this.host, cls);\n      }\n    });\n  }\n\n  protected get host() {\n    return this.elementRef.nativeElement;\n  }\n}\n","import { DirectionMode } from '../../../layout/direction/config/direction.model';\nimport { IconConfig } from './icon.model';\n\nexport const defaultIconConfig: IconConfig = {\n  icon: {\n    flipDirection: {\n      CARET_RIGHT: DirectionMode.RTL,\n      CARET_LEFT: DirectionMode.RTL,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultIconConfig } from './default-icon.config';\nimport { fontawesomeIconConfig } from './fontawesome-icon.config';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultIconConfig),\n    // TODO: move the opinionated fontawesome config to a recipe\n    provideDefaultConfig(fontawesomeIconConfig),\n  ],\n  exports: [IconComponent],\n})\nexport class IconModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, take, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { FocusConfig } from '../../../layout/a11y/keyboard-focus/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-dialog',\n  templateUrl: './anonymous-consent-dialog.component.html',\n})\nexport class AnonymousConsentDialogComponent implements OnInit, OnDestroy {\n  @HostBinding('attr.role') role = 'dialog';\n  @HostBinding('attr.aria-modal') modal = true;\n\n  private subscriptions = new Subscription();\n\n  showLegalDescription = true;\n  iconTypes = ICON_TYPE;\n  requiredConsents: string[] = [];\n\n  loading$: Observable<boolean>;\n  templates$: Observable<ConsentTemplate[]>;\n  consents$: Observable<AnonymousConsent[]>;\n\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: 'input[type=\"checkbox\"]',\n    focusOnEscape: true,\n  };\n\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    // Close on click outside the dialog window\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\n      this.close('Cross click');\n    }\n  }\n\n  constructor(\n    protected config: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected el: ElementRef,\n    protected launchDialogService: LaunchDialogService\n  ) {\n    if (Boolean(this.config.anonymousConsents)) {\n      this.showLegalDescription = this.config.anonymousConsents.showLegalDescriptionInDialog;\n      if (Boolean(this.config.anonymousConsents.requiredConsents)) {\n        this.requiredConsents = this.config.anonymousConsents.requiredConsents;\n      }\n    }\n  }\n\n  ngOnInit(): void {\n    this.templates$ = this.anonymousConsentsService.getTemplates();\n    this.consents$ = this.anonymousConsentsService.getConsents();\n    this.loading$ = this.anonymousConsentsService.getLoadTemplatesLoading();\n  }\n\n  close(reason?: any): void {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  rejectAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (this.anonymousConsentsService.isConsentGiven(consent)) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.withdrawConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('rejectAll');\n  }\n\n  allowAll(): void {\n    this.subscriptions.add(\n      combineLatest([this.templates$, this.consents$])\n        .pipe(\n          take(1),\n          distinctUntilChanged(),\n          tap(([templates, consents]) =>\n            templates.forEach((template) => {\n              const consent = this.getCorrespondingConsent(template, consents);\n              if (\n                (consent && consent.consentState == null) ||\n                this.anonymousConsentsService.isConsentWithdrawn(consent)\n              ) {\n                if (this.isRequiredConsent(template)) {\n                  return;\n                }\n\n                this.anonymousConsentsService.giveConsent(template.id);\n              }\n            })\n          )\n        )\n        .subscribe()\n    );\n    this.close('allowAll');\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.config.anonymousConsents) &&\n      Boolean(this.config.anonymousConsents.requiredConsents) &&\n      this.config.anonymousConsents.requiredConsents.includes(template.id)\n    );\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.anonymousConsentsService.giveConsent(template.id);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(template.id);\n    }\n  }\n\n  getCorrespondingConsent(\n    template: ConsentTemplate,\n    consents: AnonymousConsent[] = []\n  ): AnonymousConsent {\n    for (const consent of consents) {\n      if (template.id === consent.templateCode) {\n        return consent;\n      }\n    }\n    return null;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { DIALOG_TYPE } from '../../layout/launch-dialog/index';\nimport { AnonymousConsentDialogComponent } from '../../shared/components/anonymous-consents-dialog/anonymous-consent-dialog.component';\n\nexport const defaultAnonymousConsentLayoutConfig: LayoutConfig = {\n  launch: {\n    ANONYMOUS_CONSENT: {\n      inline: true,\n      component: AnonymousConsentDialogComponent,\n      dialogType: DIALOG_TYPE.DIALOG,\n    },\n  },\n};\n","import {\n  Component,\n  ElementRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';\n\n@Component({\n  selector: 'cx-anonymous-consent-open-dialog',\n  templateUrl: './anonymous-consent-open-dialog.component.html',\n})\nexport class AnonymousConsentOpenDialogComponent {\n  @ViewChild('open') openElement: ElementRef;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected anonymousConsentLaunchDialogService: AnonymousConsentLaunchDialogService\n  ) {}\n\n  openDialog(): void {\n    const dialog = this.anonymousConsentLaunchDialogService.openDialog(\n      this.openElement,\n      this.vcr\n    );\n    if (dialog) {\n      dialog.pipe(take(1)).subscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  DeferLoadingStrategy,\n  FeaturesConfigModule,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../layout/a11y/keyboard-focus/index';\nimport { AnonymousConsentManagementBannerComponent } from './banner/anonymous-consent-management-banner.component';\nimport { defaultAnonymousConsentLayoutConfig } from './default-anonymous-consent-layout.config';\nimport { AnonymousConsentOpenDialogComponent } from './open-dialog/anonymous-consent-open-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideConfig(defaultAnonymousConsentLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AnonymousConsentManagementBannerComponent: {\n          component: AnonymousConsentManagementBannerComponent,\n          deferLoading: DeferLoadingStrategy.INSTANT,\n        },\n        AnonymousConsentOpenDialogComponent: {\n          component: AnonymousConsentOpenDialogComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  exports: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n  entryComponents: [\n    AnonymousConsentManagementBannerComponent,\n    AnonymousConsentOpenDialogComponent,\n  ],\n})\nexport class AnonymousConsentManagementBannerModule {}\n","import { Component } from '@angular/core';\n\n// TODO: Improve a11y with better text appropriate to usage (example: loading cart spinner)\n\n@Component({\n  selector: 'cx-spinner',\n  templateUrl: './spinner.component.html',\n})\nexport class SpinnerComponent {\n  constructor() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { I18nModule } from '@spartacus/core';\nimport { SpinnerComponent } from './spinner.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [SpinnerComponent],\n  exports: [SpinnerComponent],\n})\nexport class SpinnerModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AnonymousConsent,\n  ANONYMOUS_CONSENT_STATUS,\n  ConsentTemplate,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-consent-management-form',\n  templateUrl: './consent-management-form.component.html',\n})\nexport class ConsentManagementFormComponent implements OnInit {\n  consentGiven = false;\n\n  @Input()\n  consentTemplate: ConsentTemplate;\n\n  @Input()\n  requiredConsents: string[] = [];\n\n  @Input()\n  consent: AnonymousConsent;\n\n  @Output()\n  consentChanged = new EventEmitter<{\n    given: boolean;\n    template: ConsentTemplate;\n  }>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    if (this.consent) {\n      this.consentGiven = Boolean(\n        this.consent.consentState === ANONYMOUS_CONSENT_STATUS.GIVEN\n      );\n    } else {\n      if (this.consentTemplate && this.consentTemplate.currentConsent) {\n        if (this.consentTemplate.currentConsent.consentWithdrawnDate) {\n          this.consentGiven = false;\n        } else if (this.consentTemplate.currentConsent.consentGivenDate) {\n          this.consentGiven = true;\n        }\n      }\n    }\n  }\n\n  onConsentChange(): void {\n    this.consentGiven = !this.consentGiven;\n\n    this.consentChanged.emit({\n      given: this.consentGiven,\n      template: this.consentTemplate,\n    });\n  }\n\n  isRequired(templateId: string): boolean {\n    return this.requiredConsents.includes(templateId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthService,\n  ConsentTemplate,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserConsentService,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concat,\n  Observable,\n  Subscription,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  scan,\n  skipWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-consent-management',\n  templateUrl: './consent-management.component.html',\n})\nexport class ConsentManagementComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private allConsentsLoading = new BehaviorSubject<boolean>(false);\n\n  templateList$: Observable<ConsentTemplate[]>;\n  loading$: Observable<boolean>;\n\n  requiredConsents: string[] = [];\n\n  constructor(\n    protected userConsentService: UserConsentService,\n    protected globalMessageService: GlobalMessageService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected authService: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.loading$ = combineLatest([\n      this.userConsentService.getConsentsResultLoading(),\n      this.userConsentService.getGiveConsentResultLoading(),\n      this.userConsentService.getWithdrawConsentResultLoading(),\n      this.authService.isUserLoggedIn(),\n      this.allConsentsLoading,\n    ]).pipe(\n      map(\n        ([\n          consentLoading,\n          giveConsentLoading,\n          withdrawConsentLoading,\n          isUserLoggedIn,\n          allConsentsLoading,\n        ]) =>\n          consentLoading ||\n          giveConsentLoading ||\n          withdrawConsentLoading ||\n          !isUserLoggedIn ||\n          allConsentsLoading\n      )\n    );\n    this.consentListInit();\n    this.giveConsentInit();\n    this.withdrawConsentInit();\n  }\n\n  private consentListInit(): void {\n    this.templateList$ = this.userConsentService.getConsents().pipe(\n      withLatestFrom(\n        this.anonymousConsentsService.getTemplates(),\n        this.authService.isUserLoggedIn()\n      ),\n      filter(\n        ([_templateList, _anonymousTemplates, isUserLoggedIn]) => isUserLoggedIn\n      ),\n      tap(([templateList, _anonymousTemplates]) => {\n        if (!this.consentsExists(templateList)) {\n          this.userConsentService.loadConsents();\n        }\n      }),\n      map(([templateList, anonymousTemplates]) => {\n        if (Boolean(this.anonymousConsentsConfig.anonymousConsents)) {\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n            )\n          ) {\n            this.requiredConsents = this.anonymousConsentsConfig.anonymousConsents.requiredConsents;\n          }\n          if (\n            Boolean(\n              this.anonymousConsentsConfig.anonymousConsents\n                .consentManagementPage\n            )\n          ) {\n            return this.hideAnonymousConsents(templateList, anonymousTemplates);\n          }\n        }\n\n        return templateList;\n      })\n    );\n  }\n\n  private hideAnonymousConsents(\n    templateList: ConsentTemplate[],\n    anonymousTemplates: ConsentTemplate[] = []\n  ): ConsentTemplate[] {\n    let hideTemplateIds: string[] = [];\n\n    if (\n      !this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .showAnonymousConsents\n    ) {\n      hideTemplateIds = anonymousTemplates.map((template) => template.id);\n      return this.userConsentService.filterConsentTemplates(\n        templateList,\n        hideTemplateIds\n      );\n    }\n\n    if (\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n          .hideConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.consentManagementPage\n        .hideConsents.length > 0\n    ) {\n      hideTemplateIds = this.anonymousConsentsConfig.anonymousConsents\n        .consentManagementPage.hideConsents;\n    }\n\n    return this.userConsentService.filterConsentTemplates(\n      templateList,\n      hideTemplateIds\n    );\n  }\n\n  private giveConsentInit(): void {\n    this.userConsentService.resetGiveConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getGiveConsentResultSuccess()\n        .subscribe((success) => this.onConsentGivenSuccess(success))\n    );\n  }\n\n  private withdrawConsentInit(): void {\n    this.userConsentService.resetWithdrawConsentProcessState();\n    this.subscriptions.add(\n      this.userConsentService\n        .getWithdrawConsentResultLoading()\n        .pipe(\n          skipWhile(Boolean),\n          withLatestFrom(\n            this.userConsentService.getWithdrawConsentResultSuccess()\n          ),\n          map(([, withdrawalSuccess]) => withdrawalSuccess),\n          tap((withdrawalSuccess) => {\n            if (withdrawalSuccess) {\n              this.userConsentService.loadConsents();\n            }\n          })\n        )\n        .subscribe((withdrawalSuccess) =>\n          this.onConsentWithdrawnSuccess(withdrawalSuccess)\n        )\n    );\n  }\n\n  private consentsExists(templateList: ConsentTemplate[]): boolean {\n    return Boolean(templateList) && templateList.length > 0;\n  }\n\n  onConsentChange({\n    given,\n    template,\n  }: {\n    given: boolean;\n    template: ConsentTemplate;\n  }): void {\n    if (given) {\n      this.userConsentService.giveConsent(template.id, template.version);\n    } else {\n      this.userConsentService.withdrawConsent(template.currentConsent.code);\n    }\n  }\n\n  private onConsentGivenSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetGiveConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.given' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  private onConsentWithdrawnSuccess(success: boolean): void {\n    if (success) {\n      this.userConsentService.resetWithdrawConsentProcessState();\n      this.globalMessageService.add(\n        { key: 'consentManagementForm.message.success.withdrawn' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  rejectAll(templates: ConsentTemplate[] = []): void {\n    const consentsToWithdraw: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentGiven(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n        consentsToWithdraw.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupWithdrawalStream(consentsToWithdraw)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupWithdrawalStream(\n    consentsToWithdraw: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getWithdrawConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const withdraw$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToWithdraw.length) {\n          this.userConsentService.withdrawConsent(\n            consentsToWithdraw[i].currentConsent.code\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = withdraw$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToWithdraw.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  allowAll(templates: ConsentTemplate[] = []): void {\n    const consentsToGive: ConsentTemplate[] = [];\n    templates.forEach((template) => {\n      if (this.userConsentService.isConsentWithdrawn(template.currentConsent)) {\n        if (this.isRequiredConsent(template)) {\n          return;\n        }\n\n        consentsToGive.push(template);\n      }\n    });\n\n    this.allConsentsLoading.next(true);\n\n    this.subscriptions.add(\n      this.setupGiveStream(consentsToGive)\n        .pipe(tap((_timesLoaded) => this.allConsentsLoading.next(false)))\n        .subscribe()\n    );\n  }\n\n  private setupGiveStream(\n    consentsToGive: ConsentTemplate[] = []\n  ): Observable<number> {\n    const loading$ = concat(\n      this.userConsentService.getGiveConsentResultLoading()\n    ).pipe(\n      distinctUntilChanged(),\n      filter((loading) => !loading)\n    );\n    const count$ = loading$.pipe(scan((acc, _value) => acc + 1, -1));\n    const giveConsent$ = count$.pipe(\n      tap((i) => {\n        if (i < consentsToGive.length) {\n          this.userConsentService.giveConsent(\n            consentsToGive[i].id,\n            consentsToGive[i].version\n          );\n        }\n      })\n    );\n    const checkTimesLoaded$ = giveConsent$.pipe(\n      filter((timesLoaded) => timesLoaded === consentsToGive.length)\n    );\n\n    return checkTimesLoaded$;\n  }\n\n  private isRequiredConsent(template: ConsentTemplate): boolean {\n    return (\n      Boolean(this.anonymousConsentsConfig.anonymousConsents) &&\n      Boolean(\n        this.anonymousConsentsConfig.anonymousConsents.requiredConsents\n      ) &&\n      this.anonymousConsentsConfig.anonymousConsents.requiredConsents.includes(\n        template.id\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.allConsentsLoading.unsubscribe();\n\n    this.userConsentService.resetGiveConsentProcessState();\n    this.userConsentService.resetWithdrawConsentProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { ConsentManagementFormComponent } from './components/consent-form/consent-management-form.component';\nimport { ConsentManagementComponent } from './components/consent-management.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ConsentManagementComponent: {\n          component: ConsentManagementComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ConsentManagementComponent, ConsentManagementFormComponent],\n  exports: [ConsentManagementComponent, ConsentManagementFormComponent],\n  entryComponents: [ConsentManagementComponent],\n})\nexport class ConsentManagementModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { ConsentManagementModule } from '../../../cms-components/myaccount/consent-management/consent-management.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/index';\nimport { SpinnerModule } from '../spinner/spinner.module';\nimport { AnonymousConsentDialogComponent } from './anonymous-consent-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    ConsentManagementModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [AnonymousConsentDialogComponent],\n  entryComponents: [AnonymousConsentDialogComponent],\n  exports: [AnonymousConsentDialogComponent],\n})\nexport class AnonymousConsentsDialogModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\nexport interface CardAction {\n  event: string;\n  name: string;\n}\n\nexport interface CardLinkAction {\n  link: string;\n  name: string;\n}\n\nexport interface Card {\n  header?: string;\n  title?: string;\n  textBold?: string;\n  text?: Array<string>;\n  img?: string;\n  actions?: Array<CardAction | CardLinkAction>;\n  deleteMsg?: string;\n}\n\n@Component({\n  selector: 'cx-card',\n  templateUrl: './card.component.html',\n})\nexport class CardComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  @Output()\n  deleteCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  setDefaultCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  sendCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  editCard: EventEmitter<number> = new EventEmitter();\n  @Output()\n  cancelCard: EventEmitter<number> = new EventEmitter();\n\n  @Input()\n  border = false;\n\n  @Input()\n  editMode = false;\n\n  @Input()\n  isDefault = false;\n\n  @Input()\n  content: Card;\n  @Input()\n  fitToContainer = false;\n\n  // ACTIONS\n\n  setEditMode(): void {\n    this.editMode = true;\n  }\n\n  cancelEdit(): void {\n    this.editMode = false;\n    this.cancelCard.emit(5);\n  }\n\n  delete(): void {\n    this.deleteCard.emit(1);\n  }\n\n  setDefault(): void {\n    this.isDefault = true;\n    this.setDefaultCard.emit(2);\n  }\n\n  send(): void {\n    this.sendCard.emit(3);\n  }\n\n  edit(): void {\n    this.editCard.emit(4);\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { CardComponent } from './card.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule],\n  declarations: [CardComponent],\n  exports: [CardComponent],\n})\nexport class CardModule {}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  constructor(private winRef: WindowRef) {}\n\n  /**\n   * The number of items per slide is calculated by the help of\n   * the item width and the available width of the host element.\n   * This appoach makes it possible to place the carousel in different\n   * layouts. Instead of using the page breakpoints, the host size is\n   * taken into account.\n   *\n   * Since there's no element resize API available, we use the\n   * window `resize` event, so that we can adjust the number of items\n   * whenever the window got resized.\n   */\n  getItemsPerSlide(\n    nativeElement: HTMLElement,\n    itemWidth: string\n  ): Observable<number> {\n    return this.winRef.resize$.pipe(\n      map(() => (nativeElement as HTMLElement).clientWidth),\n      map((totalWidth) => this.calculateItems(totalWidth, itemWidth))\n    );\n  }\n\n  /**\n   * Calculates the number of items per given hostSize.  calculated based on the given\n   * intended size in pixels or percentages. The\n   *\n   * @param availableWidth The available width in pixels for the carousel items.\n   * @param itemWidth The width per carousel item, in px or percentage.\n   */\n  private calculateItems(availableWidth: number, itemWidth: string) {\n    let calculatedItems = 0;\n    if (itemWidth.endsWith('px')) {\n      const num = itemWidth.substring(0, itemWidth.length - 2);\n      calculatedItems = availableWidth / <number>(<any>num);\n    }\n\n    if (itemWidth.endsWith('%')) {\n      const perc = itemWidth.substring(0, itemWidth.length - 1);\n      calculatedItems =\n        availableWidth / (availableWidth * (<number>(<any>perc) / 100));\n    }\n\n    return Math.floor(calculatedItems) || 1;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  isDevMode,\n  OnInit,\n  TemplateRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CarouselService } from './carousel.service';\n\n/**\n * Generic carousel component that can be used to render any carousel items,\n * such as products, images, banners, or any component. Carousel items are\n * rendered in so-called carousel slides, and the previous/next buttons as well as\n * the indicator-buttons can used to navigate the slides.\n *\n * The component uses an array of Observables (`items$`) as an input, to allow\n * for lazy loading of items.\n *\n * The number of items per slide is calculated with the `itemWidth`, which can given\n * in pixels or percentage.\n *\n * To allow for flexible rendering of items, the rendering is delegated to the\n * given `template`. This allows for maximum flexibility.\n */\n@Component({\n  selector: 'cx-carousel',\n  templateUrl: './carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CarouselComponent implements OnInit {\n  /**\n   * The title is rendered as the carousel heading.\n   */\n  @Input() title: string;\n\n  /**\n   * The items$ represent the carousel items. The items$ are\n   * observables so that the items can be loaded on demand.\n   */\n  items: Observable<any>[];\n  @Input('items')\n  set setItems(inputItems: Observable<any>[]) {\n    this.items = inputItems;\n    //Reset slider when changing products\n    this.activeSlide = 0;\n  }\n\n  /**\n   * The template is rendered for each item, so that the actual\n   * view can be given by the compoent that uses the `CarouselComponent`.\n   */\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Specifies the minimum size of the carousel item, either in px or %.\n   * This value is used for the calculation of numbers per carousel, so that\n   * the number of carousel items is dynamic. The calculation uses the `itemWidth`\n   * and the host element `clientWidth`, so that the carousel is reusable in\n   * different layouts (for example in a 50% grid).\n   */\n  @Input() itemWidth = '300px';\n\n  /**\n   * Indicates whether the visual indicators are used.\n   */\n  @Input() hideIndicators = false;\n\n  @Input() indicatorIcon = ICON_TYPE.CIRCLE;\n  @Input() previousIcon = ICON_TYPE.CARET_LEFT;\n  @Input() nextIcon = ICON_TYPE.CARET_RIGHT;\n\n  activeSlide: number;\n  size$: Observable<number>;\n\n  constructor(protected el: ElementRef, protected service: CarouselService) {}\n\n  ngOnInit() {\n    if (!this.template && isDevMode()) {\n      console.error(\n        'No template reference provided to render the carousel items for the `cx-carousel`'\n      );\n      return;\n    }\n    this.size$ = this.service\n      .getItemsPerSlide(this.el.nativeElement, this.itemWidth)\n      .pipe(tap(() => (this.activeSlide = 0)));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { BREAKPOINT, LayoutConfig } from '../config/layout-config';\n\nconst DEFAULT_BREAKPOINTS = {\n  [BREAKPOINT.xs]: 576,\n  [BREAKPOINT.sm]: 768,\n  [BREAKPOINT.md]: 992,\n  [BREAKPOINT.lg]: 1200,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreakpointService {\n  constructor(private winRef: WindowRef, private config: LayoutConfig) {}\n\n  get breakpoint$(): Observable<BREAKPOINT> {\n    if (!this.window) {\n      return of(BREAKPOINT.xs);\n    }\n    return this.winRef.resize$.pipe(\n      map((event) => this.getBreakpoint((<Window>event.target).innerWidth)),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Returns the _maximum_ size for the breakpint, given by the `LayoutConfig.breakpoints`\n   * configuration. If no configuration is available for the given breakpoint, the\n   * method will return the default values:\n   * - xs: 567\n   * - sm: 768\n   * - md: 992\n   * - lg: 1200\n   */\n  getSize(breakpoint: BREAKPOINT): number {\n    return this.config.breakpoints?.hasOwnProperty(breakpoint)\n      ? this.config.breakpoints[breakpoint]\n      : DEFAULT_BREAKPOINTS[breakpoint];\n  }\n\n  /**\n   * Returns all available breakpoints for the system.\n   */\n  get breakpoints(): BREAKPOINT[] {\n    return [\n      BREAKPOINT.xs,\n      BREAKPOINT.sm,\n      BREAKPOINT.md,\n      BREAKPOINT.lg,\n      BREAKPOINT.xl,\n    ];\n  }\n\n  /**\n   * Indicates whether the current screen size is smaller than the maximum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is smaller than the configured size of `BREAKPOINT.md`.\n   */\n  isDown(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(0, this.breakpoints.indexOf(breakpoint) + 1)\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size is larger than the minimum size of the\n   * given breakpoint.\n   *\n   * If the given breakpoint is `BREAKPOINT.md`, the method returns `true` when the\n   * window innerWidth is larger than the configured size of `BREAKPOINT.sm`.\n   */\n  isUp(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(\n      map((br) =>\n        this.breakpoints\n          .slice(this.breakpoints.indexOf(breakpoint))\n          .includes(br)\n      )\n    );\n  }\n\n  /**\n   * Indicates whether the current screen size fits to the given breakpoint\n   */\n  isEqual(breakpoint: BREAKPOINT): Observable<boolean> {\n    return this.breakpoint$.pipe(map((br) => br === breakpoint));\n  }\n\n  protected getBreakpoint(windowWidth: number): BREAKPOINT {\n    const breakpoint = this.getClosest(windowWidth);\n    return BREAKPOINT[breakpoint || BREAKPOINT.lg];\n  }\n\n  protected getClosest(windowWidth?: number): BREAKPOINT {\n    if (!windowWidth) {\n      windowWidth = this.window.innerWidth;\n    }\n\n    return windowWidth > this.getSize(BREAKPOINT.lg)\n      ? BREAKPOINT.xl\n      : this.breakpoints.find((br) => windowWidth <= this.getSize(br));\n  }\n\n  get window(): Window {\n    return this.winRef.nativeWindow;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Config, Image, OccConfig } from '@spartacus/core';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { StorefrontConfig } from '../../../storefront-config';\nimport { MediaConfig } from './media.config';\nimport { Media, MediaContainer, MediaFormatSize } from './media.model';\n\n/**\n * Service which generates media URLs. It leverage the MediaContainer and MediaFormats so\n * that URLs and sizes are generated for the same media. This helps to improve performance\n * across difference devices and layouts.\n *\n * Media formats are optional, but highly recommended. The format will help the browser to\n * identify the right media for the right experience.\n *\n * The MediaService will generate absolute URLs in case relative URLs are provided for the Media.\n * The baseUrl is read from the `occConfig.backend.media.baseUrl` or\n * `occConfig.backend.occ.baseUrl`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MediaService {\n  /**\n   * The media formats sorted by size. The media format representing the smallest\n   * size is sorted on top.\n   */\n  private _sortedFormats: { code: string; size: MediaFormatSize }[];\n  private _reversedFormats: { code: string; size: MediaFormatSize }[];\n\n  constructor(\n    @Inject(Config) protected config: StorefrontConfig,\n    /**\n     * The BreakpointService is no longer used in version 2.0 as the different size formats are\n     * driven by configuration only. There's however a change that this service will play a role\n     * in the near future, which is why we keep the constructor as-is.\n     */\n    protected breakpointService: BreakpointService\n  ) {}\n\n  /**\n   * Returns a `Media` object with the main media (`src`) and various media (`src`)\n   * for specific formats.\n   */\n  getMedia(\n    mediaContainer: MediaContainer | Image,\n    format?: string,\n    alt?: string\n  ): Media {\n    if (!mediaContainer) {\n      return;\n    }\n\n    const mainMedia: Image = mediaContainer.url\n      ? mediaContainer\n      : this.resolveMedia(mediaContainer as MediaContainer, format);\n\n    return {\n      src: this.resolveAbsoluteUrl(mainMedia?.url),\n      alt: alt || mainMedia?.altText,\n      srcset: this.resolveSrcSet(mediaContainer),\n    };\n  }\n\n  /**\n   * Creates the media formats in a logical sorted order. The map contains the\n   * format key and the format size information. We do this only once for performance\n   * benefits.\n   */\n  protected get sortedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._sortedFormats) {\n      this._sortedFormats = Object.keys(\n        (this.config as MediaConfig).mediaFormats\n      )\n        .map((key) => ({\n          code: key,\n          size: (this.config as MediaConfig).mediaFormats[key],\n        }))\n        .sort((a, b) => (a.size.width > b.size.width ? 1 : -1));\n    }\n    return this._sortedFormats;\n  }\n\n  /**\n   * Creates the media formats in a reversed sorted order.\n   */\n  protected get reversedFormats(): { code: string; size: MediaFormatSize }[] {\n    if (!this._reversedFormats) {\n      this._reversedFormats = this.sortedFormats.slice().reverse();\n    }\n    return this._reversedFormats;\n  }\n\n  /**\n   * Resolves the right media for the given format. The fo\n   */\n  protected resolveMedia(media: MediaContainer, format?: string): Image {\n    return media[this.resolveFormat(media, format)];\n  }\n\n  /**\n   * Validates the format against the given mediaContainer. If there is no format available,\n   * or if the mediaContainer doesn't contain a media for the given media, the most optimal\n   * format is resolved. If even that is not possible, the first format is returned.\n   */\n  protected resolveFormat(\n    mediaContainer: MediaContainer,\n    format?: string\n  ): string {\n    if (format && mediaContainer[format]) {\n      return format;\n    }\n    return (\n      this.resolveBestFormat(mediaContainer) || Object.keys(mediaContainer)[0]\n    );\n  }\n\n  /**\n   * Returns the media format code with the best size.\n   */\n  protected resolveBestFormat(media: MediaContainer | Image): string {\n    return this.reversedFormats.find((format) =>\n      media.hasOwnProperty(format.code)\n    )?.code;\n  }\n\n  /**\n   * Returns a set of media for the available media formats. Additionally, the congiured media\n   * format width is added to the srcset, so that browsers can select the appropriate media.\n   */\n  protected resolveSrcSet(media: MediaContainer | Image): string {\n    if (!media) {\n      return undefined;\n    }\n\n    const srcset = this.sortedFormats.reduce((set, format) => {\n      if (!!media[format.code]) {\n        if (set) {\n          set += ', ';\n        }\n        set += `${this.resolveAbsoluteUrl(media[format.code].url)} ${\n          format.size.width\n        }w`;\n      }\n      return set;\n    }, '');\n\n    return srcset === '' ? undefined : srcset;\n  }\n\n  /**\n   * Resolves the absolute URL for the given url. In most cases, this URL represents\n   * the relative URL on the backend. In that case, we prefix the url with the baseUrl.\n   */\n  protected resolveAbsoluteUrl(url: string): string {\n    if (!url) {\n      return null;\n    }\n    return url.startsWith('http') ? url : this.getBaseUrl() + url;\n  }\n\n  /**\n   * The base URL is either driven by a specific `backend.media.baseUrl`, or by the\n   * `backend.occ.baseUrl`.\n   *\n   * The `backend.media.baseUrl` can be used to load media from a different location.\n   *\n   * In Commerce Cloud, a differnt location could mean a different \"aspect\".\n   */\n  protected getBaseUrl(): string {\n    return (\n      (this.config as OccConfig).backend.media.baseUrl ||\n      (this.config as OccConfig).backend.occ.baseUrl ||\n      ''\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { Media, MediaContainer } from './media.model';\nimport { MediaService } from './media.service';\n\n@Component({\n  selector: 'cx-media',\n  templateUrl: './media.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MediaComponent implements OnChanges {\n  /**\n   * The media container can hold multiple media items, so that\n   * a specific media (by format) can be used or multiple media\n   * can be provided in a `srcset` so the browser will figure out\n   * the best media for the device.\n   */\n  @Input() container: MediaContainer;\n\n  /**\n   * if a media format is given, a media for the given format will be rendered\n   */\n  @Input() format: string;\n\n  /**\n   * A specific alt text for an image, which overrules the alt text\n   * from the container data.\n   */\n  @Input() alt: string;\n\n  /**\n   * Once the media is loaded, we emit an event.\n   */\n  @Output() loaded: EventEmitter<Boolean> = new EventEmitter<Boolean>();\n\n  /**\n   * The media contains the info for the UI to create the image. This media\n   * object might contain more info once other media types (i.e. video) is supported.\n   */\n  media: Media;\n\n  /**\n   * The `cx-media` component has an `is-initialized` class as long as the\n   * media is being initialized.\n   */\n  @HostBinding('class.is-initialized') isInitialized = false;\n\n  /**\n   * The `cx-media` component has a `is-loading` class as long as the\n   * media is loaded. Wehn the media is loaded, the `is-initialized` class\n   * is added.\n   */\n  @HostBinding('class.is-loading') isLoading = true;\n\n  /**\n   * When there's no media provided for the content, or in case an error\n   * happened during loading, we add the `is-missing` class. Visual effects\n   * can be controlled by CSS.\n   */\n  @HostBinding('class.is-missing') isMissing = false;\n\n  constructor(protected mediaService: MediaService) {}\n\n  ngOnChanges(): void {\n    this.create();\n  }\n\n  /**\n   * Creates the `Media` object\n   */\n  protected create(): void {\n    this.media = this.mediaService.getMedia(\n      this.container,\n      this.format,\n      this.alt\n    );\n    if (!this.media?.src) {\n      this.handleMissing();\n    }\n  }\n\n  /**\n   * This handler is called from the UI when the image is loaded.\n   */\n  loadHandler(): void {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = false;\n    this.loaded.emit(true);\n  }\n\n  /**\n   * Whenever an error happens during load, we mark the component\n   * with css classes to have a missing media.\n   */\n  errorHandler(): void {\n    this.handleMissing();\n  }\n\n  protected handleMissing() {\n    this.isLoading = false;\n    this.isInitialized = true;\n    this.isMissing = true;\n    this.loaded.emit(false);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { MediaComponent } from './media.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [MediaComponent],\n  exports: [MediaComponent],\n})\nexport class MediaModule {\n  static forRoot(): ModuleWithProviders<MediaModule> {\n    return {\n      ngModule: MediaModule,\n    };\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { MediaModule } from '../media/media.module';\nimport { CarouselComponent } from './carousel.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, IconModule, MediaModule, UrlModule],\n  declarations: [CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  HostBinding,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { startWith, map } from 'rxjs/operators';\n\n/**\n * This component renders form errors.\n */\n@Component({\n  selector: 'cx-form-errors',\n  templateUrl: './form-errors.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormErrorsComponent {\n  _control: FormControl;\n  errors$: Observable<string[]>;\n\n  @Input()\n  set control(control: FormControl) {\n    this._control = control;\n\n    this.errors$ = control?.statusChanges.pipe(\n      startWith({}),\n      map(() => control.errors || {}),\n      map((errors) =>\n        Object.entries(errors)\n          .filter((error) => error[1])\n          .map((error) => error[0])\n      )\n    );\n  }\n\n  get control(): FormControl {\n    return this._control;\n  }\n\n  @HostBinding('class.control-invalid') get invalid() {\n    return this.control.invalid;\n  }\n  @HostBinding('class.control-dirty') get dirty() {\n    return this.control.dirty;\n  }\n  @HostBinding('class.control-touched') get touched() {\n    return this.control.touched;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormErrorsComponent } from './form-errors.component';\nimport { I18nModule } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  declarations: [FormErrorsComponent],\n  exports: [FormErrorsComponent],\n})\nexport class FormErrorsModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { Params, Router } from '@angular/router';\n\n// private\ninterface RouteParts {\n  /** Path in the Angular-like array format */\n  path?: string[];\n\n  /** Query params */\n  queryParams?: Params;\n\n  /** Hash fragment */\n  fragment?: string;\n}\n\n/**\n * This component navigates using [routerLink] attribute when input 'url' is a relative url. Otherwise (when it's absolute), [href] is used.\n */\n@Component({\n  selector: 'cx-generic-link',\n  templateUrl: './generic-link.component.html',\n})\nexport class GenericLinkComponent implements OnChanges {\n  constructor(protected router: Router) {}\n\n  /**\n   * Pattern matching string starting with `http://` or `https://`.\n   */\n  private readonly PROTOCOL_REGEX: RegExp = /^https?:\\/\\//i;\n\n  /**\n   * Used to split url into 2 parts:\n   * 1. the path\n   * 2. query params + hash fragment\n   */\n  private readonly URL_SPLIT = /(^[^#?]*)(.*)/;\n\n  /**\n   * Parsed parts of the @Input `url`, when it's a local URL.\n   * It should not be used when the `url` is external.\n   * @see `url`\n   */\n  private routeParts: RouteParts = {};\n\n  @Input() url: string | any[];\n  @Input() target: string;\n  @Input() class: string;\n  @Input() id: string;\n  @Input() style: string;\n  @Input() title: string;\n\n  /**\n   * Returns true when the @Input `url` is a string starting with `http://` or `https://`.\n   */\n  isExternalUrl(): boolean {\n    return typeof this.url === 'string' && this.PROTOCOL_REGEX.test(this.url);\n  }\n\n  get rel() {\n    return this.target === '_blank' ? 'noopener' : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['url']) {\n      this.setUrlParts(changes['url'].currentValue);\n    }\n  }\n\n  /**\n   * The part with the path of the local url.\n   */\n  get routerUrl(): any[] {\n    return this.routeParts.path;\n  }\n\n  /**\n   * The part with the query params of the local url.\n   */\n  get queryParams(): Params {\n    return this.routeParts.queryParams;\n  }\n\n  /**\n   * The part with the hash fragment of the local url.\n   */\n  get fragment(): string {\n    return this.routeParts.fragment;\n  }\n\n  /**\n   * Parses the given url and sets the property `urlParts` accordingly.\n   */\n  private setUrlParts(url: string | any[]) {\n    if (typeof url === 'string') {\n      url = this.getAbsoluteUrl(url); // string links in CMS sometimes don't have the leading slash, so fix it here\n      this.routeParts = this.splitUrl(url as string);\n    } else {\n      this.routeParts = { path: url };\n    }\n  }\n\n  /**\n   * Parses the given string into 3 parts:\n   * - string path (wrapped in an array to be compatible with Angular syntax for the `routerLink`)\n   * - query params (as an object)\n   * - hash fragment (string)\n   */\n  private splitUrl(url: string = ''): RouteParts {\n    const { queryParams, fragment } = this.router.parseUrl(url);\n    const [, path] = url.match(this.URL_SPLIT);\n\n    // wrap path in an array, to have the Angular-like path format\n    return { path: [path], queryParams, fragment };\n  }\n\n  /**\n   * Prepends a leading slash to the given URL string, in case it doesn't have it.\n   */\n  private getAbsoluteUrl(url: string): string {\n    return url.startsWith('/') ? url : '/' + url;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { GenericLinkComponent } from './generic-link.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  declarations: [GenericLinkComponent],\n  exports: [GenericLinkComponent],\n})\nexport class GenericLinkModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n/**\n * Provides a UI to manage the count of the quantity, typically by using\n * increase and decrease functionality. The item counter expects an input `FormControl`\n * so that the state of the control can be managed outside of this component.\n */\n@Component({\n  selector: 'cx-item-counter',\n  templateUrl: './item-counter.component.html',\n  // do not use OnPush change detection strategy as we would not\n  // get updates of other form control state (disabled). We want to have a\n  // disabled state in order to ensure that the control cannot be used while\n  // the cart is updated.\n})\nexport class ItemCounterComponent implements OnInit, OnDestroy {\n  /**\n   * Holds the value of the counter, the state of the `FormControl`\n   * can be managed outside of the item counter.\n   */\n  @Input() control: FormControl;\n\n  /**\n   * This can be used in case an item has a minmum order quantity.\n   * @default 1\n   */\n  @Input() min = 1;\n\n  /**\n   * This can be used in case an item has a maximum order quantity.\n   */\n  @Input() max: number;\n\n  /**\n   * The step is used to increment the count. It is supposed to be a\n   * positive integer or float.\n   * @default 1\n   */\n  @Input() step = 1;\n\n  /**\n   * Indicates that the input can be manually set to zero,\n   * despite the fact that the input controls will be limited to\n   * the minimum. The zero value can be used to remove an item.\n   */\n  @Input() allowZero = false;\n\n  /**\n   * In readonly mode the item counter will only be shown as a label,\n   * the form controls are not rendered.\n   * Please not that readonly is different from the `disabled` form state.\n   * @default false\n   */\n  @HostBinding('class.readonly') @Input() readonly = false;\n\n  @ViewChild('qty') private input: ElementRef<HTMLInputElement>;\n\n  /**\n   * Subscription responsible for auto-correcting control's value when it's invalid.\n   */\n  private sub: Subscription;\n\n  @HostListener('click') handleClick() {\n    this.input.nativeElement.focus();\n  }\n\n  ngOnInit() {\n    this.sub = this.control.valueChanges\n      .pipe(startWith(this.control.value))\n      .subscribe((value) =>\n        this.control.setValue(this.getValidCount(value), { emitEvent: false })\n      );\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  increment() {\n    // it's too early to use the `stepUp` and `stepDown` API...\n    // let's wait for FF: https://caniuse.com/#search=stepUp\n    this.control.setValue(this.control.value + this.step);\n    this.control.markAsDirty();\n  }\n\n  decrement() {\n    this.control.setValue(this.control.value - this.step);\n    this.control.markAsDirty();\n  }\n\n  /**\n   * Validate that the given value is in between\n   * the `min` and `max` value. If the value is out\n   * of  the min/max range, it will be altered.\n   * If `allowZero` is set to true, the 0 value is ignored.\n   *\n   */\n  private getValidCount(value: number) {\n    if (value < this.min && !(value === 0 && this.allowZero)) {\n      value = this.min;\n    }\n    if (this.max && value > this.max) {\n      value = this.max;\n    }\n    return value;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ItemCounterComponent } from './item-counter.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule],\n  declarations: [ItemCounterComponent],\n  exports: [ItemCounterComponent],\n})\nexport class ItemCounterModule {}\n","import { PaginationConfig } from './pagination.config';\n\nexport const defaultPaginationConfig: PaginationConfig = {\n  pagination: {\n    addStart: true,\n    addEnd: true,\n  },\n};\n","import { PaginationOptions } from '../pagination.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PaginationConfig {\n  pagination?: PaginationOptions;\n}\n","import { Injectable } from '@angular/core';\nimport { PaginationConfig } from './config/pagination.config';\nimport {\n  PaginationItem,\n  PaginationItemType,\n  PaginationNavigationPosition,\n  PaginationOptions,\n} from './pagination.model';\n\nconst FALLBACK_PAGINATION_OPTIONS: PaginationOptions = {\n  rangeCount: 3,\n  dotsLabel: '...',\n  startLabel: '«',\n  previousLabel: '‹',\n  nextLabel: '›',\n  endLabel: '»',\n};\n\n/**\n * Builds a pagination structures based on a pageCount and current page number.\n * There are various {@link PaginationConfig} options which can be used to configure\n * the behaviour of the build. Alternatively, CSS can be used to further customise\n * the pagination.\n *\n * Examples:\n * The full blown pagination items contain the follow elements:\n *\n * `« ‹ 1 ... 4 (5) 6 ... 9 › »`\n *\n * This includes pagination items to the following pages:\n * - start page\n * - previous page\n * - first page\n * - page range\n * - last page\n * - next page\n * - end page\n *\n * All of those links are configurable, including the size of the page range.\n * The current page will always be centered in the page range to provide direct access\n * to the previous and next page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaginationBuilder {\n  constructor(protected paginationConfig: PaginationConfig) {}\n\n  /**\n   * Builds a list of `PaginationItem`. The give pageCount and current are used\n   * to build out the full pagination. There are various {@link PaginationConfig} options\n   * which can be used to configure the behaviour of the build. Alternatively, CSS\n   * can be used to further specialize visibility of the pagination.\n   *\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   * @returns An array of `PaginationItem`\n   */\n  paginate(pageCount: number, current: number): PaginationItem[] {\n    const pages: PaginationItem[] = [];\n    if (pageCount < 2) {\n      return pages;\n    }\n    this.addPages(pages, pageCount, current);\n    this.addDots(pages, pageCount);\n    this.addFirstLast(pages, pageCount);\n    this.addNavigation(pages, pageCount, current);\n\n    return pages;\n  }\n\n  /**\n   * Returns the current page with surrounding pages (based on the `config.rangeCount`).\n   * The current page is always centered to provide direct access to the previous and next page.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   */\n  protected addPages(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const start = this.getStartOfRange(pageCount, current);\n    const max = Math.min(this.config.rangeCount, pageCount);\n\n    Array.from(Array(max)).forEach((_, i) => {\n      pages.push({\n        number: i + start,\n        label: String(i + start + 1),\n        type: PaginationItemType.PAGE,\n      });\n    });\n  }\n\n  /**\n   * Adds dots before and after the given pages, if configured (defaults to true).\n   * If the dots only represent a single page, the page number is added instead of\n   * the dots, unless the configuration requires dots always.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   */\n  protected addDots(pages: PaginationItem[], pageCount: number): void {\n    if (!this.config.addDots) {\n      return;\n    }\n\n    const addFirstGap = () => {\n      const firstItemNumber = pages[0].number;\n      const gapNumber = this.config.addFirst ? 1 : 0;\n      if (firstItemNumber > gapNumber) {\n        const isGap =\n          !this.config.substituteDotsForSingularPage ||\n          firstItemNumber !== gapNumber + 1;\n        const isSubstitued =\n          this.config.addFirst &&\n          this.config.substituteDotsForSingularPage &&\n          gapNumber === 0;\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.FIRST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(gapNumber + 1),\n              type,\n            },\n            isGap ? null : { number: gapNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    const addLastGap = () => {\n      const nextPageNumber = pages[pages.length - 1].number + 1;\n      const last = pageCount - (this.config.addLast ? 2 : 1);\n      if (nextPageNumber <= last) {\n        const isSubstitued =\n          this.config.addLast &&\n          this.config.substituteDotsForSingularPage &&\n          nextPageNumber === last;\n        const isGap =\n          nextPageNumber <\n          pageCount -\n            (this.config.substituteDotsForSingularPage ? 1 : 0) -\n            (this.config.addLast ? 1 : 0);\n\n        const type = isGap\n          ? PaginationItemType.GAP\n          : isSubstitued\n          ? PaginationItemType.LAST\n          : PaginationItemType.PAGE;\n        return [\n          Object.assign(\n            {\n              label: isGap ? this.config.dotsLabel : String(nextPageNumber + 1),\n              type,\n            },\n            isGap ? null : { number: nextPageNumber }\n          ),\n        ];\n      } else return [];\n    };\n\n    pages.unshift(...addFirstGap());\n    pages.push(...addLastGap());\n  }\n\n  /**\n   * Add links to the first and last page, if configured to do so.\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   *\n   */\n  protected addFirstLast(pages: PaginationItem[], pageCount: number) {\n    if (this.config.addFirst && pages[0].number !== 0) {\n      pages.unshift({\n        number: 0,\n        label: '1',\n        type: PaginationItemType.FIRST,\n      });\n    }\n    if (\n      this.config.addLast &&\n      pages[pages.length - 1].number !== pageCount - 1\n    ) {\n      pages.push({\n        number: pageCount - 1,\n        label: String(pageCount),\n        type: PaginationItemType.LAST,\n      });\n    }\n  }\n\n  /**\n   * Add links to the start, previous, next and last page, if configured to do so.\n   * The order of the links can be configured by using the {@link PaginationConfig},\n   * using the `PaginationNavigationPosition` (`BEFORE` or `AFTER`).\n   * The `PaginationNavigationPosition` allows for 3 flavours:\n   *\n   * - by default the pagination starts with start and previous and ends with the next and end links\n   * - BEFORE – all navigation links are added in the front of the pagination list\n   * - AFTER – all navigation links are pushed to the end of the pagination list\n   *\n   * @param pages The list of page items that is used to amend\n   * @param pageCount The total number of pages\n   * @param current The current page number, 0-index based\n   *\n   */\n  protected addNavigation(\n    pages: PaginationItem[],\n    pageCount: number,\n    current: number\n  ): void {\n    const before = this.getBeforeLinks(current);\n    const after = this.getAfter(pageCount, current);\n    const pos = this.config.navigationPosition;\n    if (!pos || pos === PaginationNavigationPosition.ASIDE) {\n      pages.unshift(...before);\n      pages.push(...after);\n    } else {\n      if (pos === PaginationNavigationPosition.BEFORE) {\n        pages.unshift(...before, ...after);\n      }\n      if (pos === PaginationNavigationPosition.AFTER) {\n        pages.push(...before, ...after);\n      }\n    }\n  }\n\n  /**\n   * Returns the start and previous links, if applicable.\n   */\n  private getBeforeLinks(current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addStart) {\n      const start = () => {\n        return Object.assign(\n          {\n            label: this.config.startLabel,\n            type: PaginationItemType.START,\n          },\n          current > 0 ? { number: 0 } : null\n        );\n      };\n      list.push(start());\n    }\n    if (this.config.addPrevious) {\n      const previous = () => {\n        return Object.assign(\n          {\n            label: this.config.previousLabel,\n            type: PaginationItemType.PREVIOUS,\n          },\n          current > 0 ? { number: current - 1 } : null\n        );\n      };\n      list.push(previous());\n    }\n    return list;\n  }\n\n  /**\n   * Returns the next and end links, if applicable.\n   */\n  private getAfter(pageCount: number, current: number): PaginationItem[] {\n    const list = [];\n\n    if (this.config.addNext) {\n      const next = () => {\n        return Object.assign(\n          {\n            label: this.config.nextLabel,\n            type: PaginationItemType.NEXT,\n          },\n          current < pageCount - 1 ? { number: current + 1 } : null\n        );\n      };\n      list.push(next());\n    }\n    if (this.config.addEnd) {\n      const end = () => {\n        return Object.assign(\n          {\n            label: this.config.endLabel,\n            type: PaginationItemType.END,\n          },\n          current < pageCount - 1 ? { number: pageCount - 1 } : null\n        );\n      };\n      list.push(end());\n    }\n\n    return list;\n  }\n  /**\n   * Resolves the first page of the range we need to build.\n   * This is the page that is leading up to the range of the\n   * current page.\n   *\n   * @param pageCount The total number of pages.\n   * @param current The current page number, 0-index based.\n   */\n  private getStartOfRange(pageCount: number, current: number): number {\n    const count = this.config.rangeCount - 1;\n    // the least number of pages before and after the current\n    const delta = Math.round(count / 2);\n\n    // ensure that we start with at least the first page\n    const minStart = Math.max(0, current - delta);\n    // ensures that we start with at least 1 and do not pass the last range\n    const maxStart = Math.max(0, pageCount - count - 1);\n\n    // ensure that we get at least a full range at the end\n    return Math.min(maxStart, minStart);\n  }\n\n  private get config(): PaginationOptions {\n    return Object.assign(\n      FALLBACK_PAGINATION_OPTIONS,\n      this.paginationConfig.pagination\n    );\n  }\n}\n","export enum SiteContextType {\n  LANGUAGE = 'LANGUAGE',\n  CURRENCY = 'CURRENCY',\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { PaginationModel } from '@spartacus/core';\nimport { PaginationBuilder } from './pagination.builder';\nimport { PaginationItem, PaginationItemType } from './pagination.model';\n\n/**\n * The `PaginationComponent` is a generic component that is used for\n * all lists in Spartacus that require pagination. The component supports\n * all common features, which can be configured or hidden by CSS.\n */\n@Component({\n  selector: 'cx-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  /** The (optional) pageRoute used for the anchor links created in the pagination   */\n  @Input() pageRoute: string;\n\n  /** The (optional) query parameter which is added to the page route.  */\n  @Input() queryParam: string;\n\n  /**\n   * Whenever there's a default page specified, the routing logic\n   * will omit the page number in routeLink or parameters.\n   */\n  @Input() defaultPage;\n\n  private _pagination: PaginationModel;\n  get pagination(): PaginationModel {\n    return this._pagination;\n  }\n  @Input() set pagination(value: PaginationModel) {\n    this._pagination = value;\n    this.render(value);\n  }\n\n  @Output() viewPageEvent: EventEmitter<number> = new EventEmitter<number>();\n\n  pages: PaginationItem[] = [];\n\n  constructor(\n    private paginationBuilder: PaginationBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  private render(pagination: PaginationModel) {\n    this.pages = this.paginationBuilder.paginate(\n      pagination.totalPages,\n      pagination.currentPage\n    );\n  }\n\n  /**\n   * Inidicates whether the given item is the current item.\n   *\n   * @param item PaginationItem\n   * @returns boolean\n   */\n  isCurrent(item: PaginationItem): boolean {\n    return (\n      item.type === PaginationItemType.PAGE &&\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  /**\n   * Indicates whether the pagination item is inactive. This is used\n   * to disabled a link or set the tabindex to `-1`.\n   *\n   * Defaults to true\n   *\n   * @param item PaginationItem\n   * @returns returns -1 in case of a disabled\n   */\n  isInactive(item: PaginationItem): boolean {\n    return (\n      !item.hasOwnProperty('number') ||\n      item.number === this.pagination.currentPage\n    );\n  }\n\n  getQueryParams(item: PaginationItem): Params {\n    const queryParams = Object.assign(\n      {},\n      this.activatedRoute.snapshot.queryParams\n    );\n    if (\n      this.queryParam &&\n      item.number < this.pagination.totalPages &&\n      !this.isCurrent(item)\n    ) {\n      queryParams[this.queryParam] = item.number;\n    }\n    // omit the page number from the query parameters in case it's the default\n    // to clean up the experience and avoid unnecessary polluting of the URL\n    if (queryParams[this.queryParam] === this.defaultPage) {\n      delete queryParams[this.queryParam];\n    }\n    return queryParams;\n  }\n\n  pageChange(page: PaginationItem): void {\n    this.viewPageEvent.emit(page.number);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultPaginationConfig } from './config/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule],\n  providers: [provideDefaultConfig(defaultPaginationConfig)],\n  declarations: [PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class PaginationModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { SortModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-sorting',\n  templateUrl: './sorting.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SortingComponent {\n  @Input()\n  sortOptions: SortModel[];\n  @Input()\n  selectedOption: string;\n  @Input()\n  placeholder: string;\n  @Input()\n  sortLabels: { [code: string]: string };\n\n  @Output()\n  sortListEvent: EventEmitter<string>;\n\n  constructor() {\n    this.sortListEvent = new EventEmitter<string>();\n  }\n\n  sortList(sortCode: string): void {\n    this.sortListEvent.emit(sortCode);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { PaginationComponent, PaginationModule } from './pagination/index';\nimport { SortingComponent } from './sorting/sorting.component';\n\n@NgModule({\n  imports: [CommonModule, NgSelectModule, FormsModule, PaginationModule],\n  declarations: [SortingComponent],\n  exports: [SortingComponent, PaginationComponent],\n})\nexport class ListNavigationModule {}\n","import { MediaFormatSize } from './media.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Provides configuration specific to Media, such as images. This is used to optimize\n * rendering of the media, SEO and performance.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class MediaConfig {\n  /**\n   * Media _format_ configuration holds the size of the media's assigned to\n   * a format.\n   */\n  mediaFormats?: {\n    /**\n     * Represents the media format code, that is the key to distinguish different\n     * media in a container.\n     */\n    [format: string]: MediaFormatSize;\n  };\n}\n","import { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A reference to a newly opened modal\n *\n * @todo remove ngb dependency and create our own implementation of ModalRef\n */\nexport class ModalRef extends NgbModalRef {}\n","import { Injectable } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ModalRef } from './modal-ref';\nimport { ModalOptions } from './modal-options';\n\n/**\n * A service to handle modal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModalService {\n  private modals: ModalRef[] = [];\n  constructor(private ngbModalService: NgbModal) {}\n\n  open(content: any, options?: ModalOptions): ModalRef {\n    let activeModal: ModalRef;\n\n    activeModal = this.ngbModalService.open(content, options);\n    this.modals.push(activeModal);\n\n    return activeModal;\n  }\n\n  getActiveModal(): ModalRef {\n    const modal = this.modals[this.modals.length - 1];\n    return modal ? modal : null;\n  }\n\n  dismissActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.dismiss(reason);\n      this.modals.pop();\n    }\n  }\n\n  closeActiveModal(reason?: any): void {\n    const modal: ModalRef = this.getActiveModal();\n\n    if (modal) {\n      modal.close(reason);\n      this.modals.pop();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { Observable, timer } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * Guard that can be used in split-view based child routes. This guard\n * delays the guard to be removed with 500ms, so that any css transition can be\n * finished before the DOM is destroyed.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SplitViewDeactivateGuard implements CanDeactivate<boolean> {\n  canDeactivate(): Observable<boolean> {\n    return timer(500).pipe(map(() => true));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { ViewState } from './split/split-view.model';\n\n/**\n * Supposed to be injected in the split view component, so that the view state\n * is maintained in the context of a single split view.\n */\n@Injectable()\nexport class SplitViewService {\n  protected _views$: BehaviorSubject<any[]> = new BehaviorSubject([]);\n\n  /**\n   * Resolves the max number of visible views for the split view.\n   */\n  visibleViewCount(): Observable<number> {\n    return this._views$.pipe(\n      map((views) => {\n        const hidden = views.findIndex((view: ViewState) => view.hidden);\n        return hidden === -1 ? views.length : hidden;\n      }),\n      filter((visible) => visible > 0),\n      distinctUntilChanged()\n    );\n  }\n\n  /**\n   * Adds a view to the list of views. The view is initialized with the\n   * hide state, which defaults to false.\n   */\n  add(viewPosition: number, hide = false) {\n    if (!this.views[viewPosition]) {\n      this.views[viewPosition] = { hidden: hide };\n      this._views$.next(this.views);\n    }\n  }\n\n  /**\n   * Removes a view from the list of views.\n   */\n  remove(viewPosition: number) {\n    this._views$.next(this.views.splice(0, viewPosition));\n  }\n\n  /**\n   * Toggles the visible state for the given view. An optional\n   * force argument can be used to dictate the visibility.\n   */\n  toggle(viewPosition: number, force?: boolean) {\n    if (!this.views[viewPosition]) {\n      this.add(viewPosition, force ?? false);\n    } else {\n      this.views[viewPosition].hidden =\n        force ?? !this.views[viewPosition].hidden;\n      // Whenever a view is closing, we close all underlying views as well.\n      if (!this.views[viewPosition].hidden) {\n        this.views\n          .slice(viewPosition + 1)\n          .map((viewState) => (viewState.hidden = true));\n      }\n      this._views$.next(this.views);\n    }\n  }\n\n  /**\n   * Returns the next view number, that can be used by views to register itself.\n   */\n  generateNextPosition(): number {\n    return this.views.length;\n  }\n\n  /**\n   * Utility method that resolves all views.\n   */\n  protected get views(): ViewState[] {\n    return this._views$.value;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  OnDestroy,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SplitViewService } from '../split-view.service';\n\n/**\n * The split-view component supports an unlimited number of nested views. The component\n * is a host to those view components and doesn't add any restrictions to it's content;\n * content is projected as-is.\n *\n * ```html\n * <cx-split-view>\n *   <cx-view></cx-view>\n *   <cx-view></cx-view>\n *   <any-wrapper>\n *     <cx-view></cx-view>\n *   </any-wrapper>\n * </cx-split-view>\n * ```\n *\n * The split view component is only concerned with tracking the underlying _visible_\n * view components, so that the `lastVisibleView` can be updated accordingly. The actual\n * visibility of views is controlled by CSS. To allow for maximum flexibility, the CSS\n * implementation is using CSS variables. The `lastVisibleView` is bind to the\n * `--cx-last-visible-view` on the host, so that all descendants views will inherit the\n * property conveniently.\n */\n@Component({\n  selector: 'cx-split-view',\n  templateUrl: './split-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [SplitViewService],\n})\nexport class SplitViewComponent implements OnDestroy {\n  /**\n   * Indicates the last visible view in the range of views that is visible. This\n   * is bind to a css variable `--cx-last-visible-view` so that the experience\n   * can be fully controlled by css.\n   */\n  @HostBinding('style.--cx-last-visible-view')\n  lastVisibleView = 1;\n\n  protected subscription: Subscription = this.splitService\n    .visibleViewCount()\n    .subscribe((lastVisible: number) => (this.lastVisibleView = lastVisible));\n\n  constructor(protected splitService: SplitViewService) {}\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SplitViewService } from '../split-view.service';\n\n/**\n * The view component is part of the `SplitViewComponent`. The view\n * contains the navigable content that should be split up. It maintains\n * a view position and allows to show or hide the view.\n *\n * The ViewComponent interacts with the `SplitViewService` for handing over the\n * view state, so that the overarching `SplitViewComponent` can manage the\n * overall experience.\n */\n@Component({\n  selector: 'cx-view',\n  templateUrl: './view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewComponent implements OnInit, OnDestroy {\n  @Input()\n  @HostBinding('attr.position')\n  position: number;\n\n  /**\n   * The hidden input is used to set the initial visible state of the view.\n   * The hidden state defaults to false.\n   *\n   * The hidden input supports 2-way binding, see `hiddenChange` property.\n   */\n  @Input()\n  set hidden(hidden: boolean) {\n    this.splitService.toggle(this.viewPosition, hidden);\n  }\n\n  /**\n   * An update of the view visibility is emitted to the hiddenChange output.\n   */\n  @Output()\n  hiddenChange = new EventEmitter();\n\n  protected subscription: Subscription;\n\n  constructor(protected splitService: SplitViewService) {}\n\n  ngOnInit() {\n    this.splitService.add(this.viewPosition, this.hidden);\n\n    this.subscription = this.splitService\n      .visibleViewCount()\n      .subscribe((visible) => {\n        if (this.hidden !== this.viewPosition >= visible) {\n          this.hiddenChange.emit(this.viewPosition >= visible);\n        }\n      });\n  }\n\n  /**\n   * Toggles the visibility of the view.\n   *\n   * An optional force flag can be used to explicitly show or hide view component.\n   */\n  toggle(force?: boolean) {\n    this.splitService.toggle(this.viewPosition, force);\n  }\n\n  /**\n   * Returns the position for the view.\n   *\n   * The position is either taken from the input `position` or generated by the `SplitService`.\n   */\n  protected get viewPosition(): number {\n    if (this.position === undefined) {\n      this.position = this.splitService.generateNextPosition();\n    }\n    return this.position;\n  }\n\n  /**\n   * The view is removed from the `SplitService` so that the view no longer\n   * plays a role in the overall split view.\n   */\n  ngOnDestroy() {\n    this.splitService.remove(this.viewPosition);\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SplitViewComponent } from './split/split-view.component';\nimport { ViewComponent } from './view/view.component';\n\n/**\n * The split-view component supports an unlimited number of nested views. Nested views are rendered\n * next to each other. The views can be rendered next to each other, but the max number of visible\n * views can be limisted as well. This is configurable in the CSS layer, so that the max number of views\n * per split-view can be different for each component.\n *\n * The basic structure of the split-view component is shown below:\n *\n *\n * ```\n * <cx-split-view>\n * </cx-split-view>\n * ```\n *\n * The UX pattern used for the split-view is driven by an initial view, which gets splitted into\n * more views as soon as the user starts interacting with the initial and subsequantial views.\n * The views can be driven by routes, which means that you can navigate through the splitted views\n * by using the browser history as well as share or bookmark splitted views.\n *\n * The UI is implemented in the style layer, with only a few generic style rules. Most of the split\n * view style is driven by CSS properties, so that alternative split-view styles can be introduced\n * per page or component.\n *\n * The max number of views per split-view on mobile is limited to 1 by default, where as on tablet\n * (and higher) it is set to 2. Spartacus has a pretty narrow layout, which is why 2 is maximum,\n * but customers could alter the layout to bring in more views in the same split-view at the time.\n *\n */\n\n@NgModule({\n  declarations: [SplitViewComponent, ViewComponent],\n  imports: [CommonModule, RouterModule],\n  exports: [SplitViewComponent, ViewComponent],\n})\nexport class SplitViewModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-global-message',\n  templateUrl: './global-message.component.html',\n})\nexport class GlobalMessageComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  messages$: Observable<GlobalMessageEntities>;\n  messageType: typeof GlobalMessageType = GlobalMessageType;\n\n  constructor(protected globalMessageService: GlobalMessageService) {}\n\n  ngOnInit(): void {\n    this.messages$ = this.globalMessageService.get();\n  }\n\n  clear(type: GlobalMessageType, index: number): void {\n    this.globalMessageService.remove(type, index);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { GlobalMessageComponent } from './global-message.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule, IconModule, I18nModule],\n  declarations: [GlobalMessageComponent],\n  exports: [GlobalMessageComponent],\n})\nexport class GlobalMessageComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n/**\n * Configuration options for the Qualtrics integration, which allows you to\n * specify the qualtrics project and deployment script.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QualtricsConfig {\n  /**\n   * Holds the qualtrics integration options.\n   */\n  qualtrics?: {\n    /**\n     * Deployment script, loaded from a resource, to integrate the deployment of the qualtrics project.\n     * You would typically store the file in the local assets folder.\n     *\n     * Defaults to `assets/qualtricsIntegration.js`\n     */\n    scriptSource?: string;\n  };\n}\n","import {\n  Injectable,\n  isDevMode,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { fromEvent, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\n\nexport const QUALTRICS_EVENT_NAME = 'qsi_js_loaded';\n\n/**\n * Service to integration Qualtrics.\n *\n * The integration observes the Qualtrics API, and when available, it runs the QSI API\n * to let Qualtrics evaluate the application.\n *\n * The service supports an additional _hook_ (`isDataLoaded()`) that can be used to load application\n * data before pulling the QSI API. This is beneficial in a single page application when additional\n * data is required before the Qualtrics _creatives_ run.\n *\n * This service also supports the creation of the Qualtrics deployment script. This is optional, as\n * the script can be added in alternatives ways.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class QualtricsLoaderService {\n  /**\n   * Reference to the QSI API.\n   */\n  protected qsiApi: any;\n\n  /**\n   * QSI load event that happens when the QSI JS file is loaded.\n   */\n  private qsiLoaded$: Observable<any> = this.winRef?.nativeWindow\n    ? fromEvent(this.winRef.nativeWindow, QUALTRICS_EVENT_NAME)\n    : of();\n\n  /**\n   * Emits the Qualtrics Site Intercept (QSI) JavaScript API whenever available.\n   *\n   * The API is emitted when the JavaScript resource holding this API is fully loaded.\n   * The API is also stored locally in the service, in case it's required later on.\n   */\n  protected qsi$: Observable<any> = this.qsiLoaded$.pipe(\n    switchMap(() => this.isDataLoaded()),\n    map(() => this.winRef?.nativeWindow['QSI']),\n    filter((api) => Boolean(api)),\n    tap((qsi) => (this.qsiApi = qsi))\n  );\n\n  constructor(\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2\n  ) {\n    this.initialize();\n  }\n\n  /**\n   * Starts observing the Qualtrics integration. The integration is based on a\n   * Qualtrics specific event (`qsi_js_loaded`). As soon as this events happens,\n   * we run the API.\n   */\n  protected initialize() {\n    this.qsi$.subscribe(() => this.run());\n  }\n\n  /**\n   * Evaluates the Qualtrics project code for the application.\n   *\n   * In order to reload the evaluation in Qualtrics, the API requires to unload the API before\n   * running it again. We don't do this by default, but offer a flag to conditionally unload the API.\n   */\n  protected run(reload = false): void {\n    if (!this.qsiApi?.API) {\n      if (isDevMode()) {\n        console.log('The QSI api is not available');\n      }\n      return;\n    }\n\n    if (reload) {\n      // Removes any currently displaying creatives\n      this.qsiApi.API.unload();\n    }\n\n    // Starts the intercept code evaluation right after loading the Site Intercept\n    // code for any defined intercepts or creatives\n    this.qsiApi.API.load().done(this.qsiApi.API.run());\n  }\n\n  /**\n   * Adds the deployment script to the DOM.\n   *\n   * The script will not be added twice if it was loaded before. In that case, we use\n   * the Qualtrics API directly to _unload_ and _run_ the project.\n   */\n  addScript(scriptSource: string): void {\n    if (this.hasScript(scriptSource)) {\n      this.run(true);\n    } else {\n      const script: HTMLScriptElement = this.renderer.createElement('script');\n      script.type = 'text/javascript';\n      script.defer = true;\n      script.src = scriptSource;\n      this.renderer.appendChild(this.winRef.document.body, script);\n    }\n  }\n\n  /**\n   * This logic exist in order to let the client(s) add their own logic to wait for any kind of page data.\n   * You can observe any data in this method.\n   *\n   * Defaults to true.\n   */\n  protected isDataLoaded(): Observable<boolean> {\n    return of(true);\n  }\n\n  /**\n   * Indicates if the script is already added to the DOM.\n   */\n  protected hasScript(source?: string): boolean {\n    return !!this.winRef.document.querySelector(`script[src=\"${source}\"]`);\n  }\n\n  protected get renderer(): Renderer2 {\n    return this.rendererFactory.createRenderer(null, null);\n  }\n}\n","import { Component, isDevMode } from '@angular/core';\nimport { QualtricsConfig } from './config/qualtrics-config';\nimport { QualtricsLoaderService } from './qualtrics-loader.service';\n/**\n * Adds the Qualtrics deployment script whenever the component is loaded. The\n * deployment script is loaded from the global configuration (`qualtrics.scriptSource`).\n */\n@Component({\n  selector: 'cx-qualtrics',\n  template: ``,\n})\nexport class QualtricsComponent {\n  constructor(\n    protected qualtricsLoader: QualtricsLoaderService,\n    protected config: QualtricsConfig\n  ) {\n    if (this.config.qualtrics?.scriptSource) {\n      this.qualtricsLoader.addScript(this.config.qualtrics.scriptSource);\n    } else if (isDevMode()) {\n      console.warn(\n        `We're unable to add the Qualtrics deployment code as there is no script source defined in config.qualtrics.scriptSource.`\n      );\n    }\n  }\n}\n","import { QualtricsConfig } from './qualtrics-config';\n\nexport const defaultQualtricsConfig: QualtricsConfig = {\n  qualtrics: {},\n};\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultQualtricsConfig } from './config/default-qualtrics-config';\nimport { QualtricsComponent } from './qualtrics.component';\n\n@NgModule({\n  imports: [CommonModule, HttpClientModule],\n  declarations: [QualtricsComponent],\n  entryComponents: [QualtricsComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        QualtricsComponent: {\n          component: QualtricsComponent,\n        },\n      },\n    }),\n    provideDefaultConfig(defaultQualtricsConfig),\n  ],\n})\nexport class QualtricsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-language-currency-selector',\n  template: `\n    <cx-site-context-selector context=\"language\"></cx-site-context-selector>\n    <cx-site-context-selector context=\"currency\"></cx-site-context-selector>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LanguageCurrencyComponent {}\n","import { Observable } from 'rxjs';\nimport { CmsComponent } from '@spartacus/core';\n\nexport abstract class CmsComponentData<T extends CmsComponent> {\n  uid: string;\n  data$: Observable<T>;\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport {\n  CmsSiteContextSelectorComponent,\n  ContextServiceMap,\n  CURRENCY_CONTEXT_ID,\n  LANGUAGE_CONTEXT_ID,\n  SiteContext,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, take } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SiteContextType } from './site-context.model';\n\nconst LABELS = {\n  [LANGUAGE_CONTEXT_ID]: 'Language',\n  [CURRENCY_CONTEXT_ID]: 'Currency',\n};\n\n@Injectable()\nexport class SiteContextComponentService {\n  constructor(\n    @Optional()\n    protected componentData: CmsComponentData<CmsSiteContextSelectorComponent>,\n    private contextServiceMap: ContextServiceMap,\n    protected injector: Injector\n  ) {}\n\n  getItems(context?: SiteContextType): Observable<any> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getAll()),\n      switchMap((items) =>\n        this.getContext(context).pipe(\n          switchMap((ctx) => {\n            const itemsCopy = [];\n            for (const item of items) {\n              itemsCopy.push({\n                ...item,\n                label: this.getOptionLabel(item, ctx),\n              });\n            }\n            return of(itemsCopy);\n          })\n        )\n      )\n    );\n  }\n\n  getActiveItem(context?: SiteContextType): Observable<string> {\n    return this.getService(context).pipe(\n      switchMap((service: SiteContext<any>) => service.getActive())\n    );\n  }\n\n  getLabel(context?: SiteContextType): Observable<any> {\n    return this.getContext(context).pipe(\n      map((ctx) => {\n        return LABELS[ctx];\n      })\n    );\n  }\n\n  setActive(value: string, context?: SiteContextType): void {\n    this.getService(context)\n      .pipe(take(1))\n      .subscribe((service) => {\n        service.setActive(value);\n      });\n  }\n\n  protected getService(\n    context?: SiteContextType\n  ): Observable<SiteContext<any>> {\n    return this.getContext(context).pipe(\n      map((ctx: string) => (ctx ? this.getInjectedService(ctx) : undefined)),\n      filter((s) => !!s)\n    );\n  }\n\n  protected getContext(context?: SiteContextType): Observable<string> {\n    if (context) {\n      return of(context);\n    } else if (this.componentData) {\n      return this.componentData.data$.pipe(\n        map((data) => data?.context),\n        map((ctx) => {\n          switch (ctx) {\n            case 'LANGUAGE':\n              return LANGUAGE_CONTEXT_ID;\n            case 'CURRENCY':\n              return CURRENCY_CONTEXT_ID;\n            default:\n              return ctx;\n          }\n        })\n      );\n    }\n  }\n\n  protected getInjectedService(context: string): SiteContext<any> {\n    return this.injector.get<SiteContext<any>>(\n      this.contextServiceMap[context],\n      null\n    );\n  }\n\n  protected getOptionLabel(item: any, context?: string): string {\n    switch (context) {\n      case LANGUAGE_CONTEXT_ID:\n        return item.nativeName;\n      case CURRENCY_CONTEXT_ID:\n        return item.symbol + ' ' + item.isocode;\n      default:\n        return item.isocode;\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { SiteContext } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../icon/icon.model';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextType } from './site-context.model';\n\n@Component({\n  selector: 'cx-site-context-selector',\n  templateUrl: './site-context-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SiteContextSelectorComponent {\n  siteContextService: SiteContext<any>;\n  iconTypes = ICON_TYPE;\n  /**\n   * the context type can be set as an input. If the context is\n   * not given, the context will be loaded from the backend.\n   */\n  @Input() context: SiteContextType;\n\n  constructor(private componentService: SiteContextComponentService) {}\n\n  get items$(): Observable<any> {\n    return this.componentService.getItems(this.context);\n  }\n\n  get activeItem$(): Observable<string> {\n    return this.componentService.getActiveItem(this.context);\n  }\n\n  set active(value: string) {\n    this.componentService.setActive(value, this.context);\n  }\n\n  get label$(): Observable<any> {\n    return this.componentService.getLabel(this.context);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  ContextServiceMap,\n  provideDefaultConfig,\n  SiteContextModule,\n} from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { IconModule } from '../icon/index';\nimport { LanguageCurrencyComponent } from './language-currency.component';\nimport { SiteContextComponentService } from './site-context-component.service';\nimport { SiteContextSelectorComponent } from './site-context-selector.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, SiteContextModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSSiteContextComponent: {\n          component: SiteContextSelectorComponent,\n          providers: [\n            {\n              provide: SiteContextComponentService,\n              useClass: SiteContextComponentService,\n              deps: [CmsComponentData, ContextServiceMap, Injector],\n            },\n          ],\n        },\n        LanguageCurrencyComponent: {\n          component: LanguageCurrencyComponent,\n        },\n      },\n    }),\n    SiteContextComponentService,\n  ],\n  declarations: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  entryComponents: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n  exports: [SiteContextSelectorComponent, LanguageCurrencyComponent],\n})\nexport class SiteContextSelectorModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnInit,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../cms-components/misc/index';\n\n@Component({\n  selector: 'cx-star-rating',\n  templateUrl: './star-rating.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StarRatingComponent implements OnInit {\n  /**\n   * The rating component can be used in disabled mode,\n   * so that the interation is not provided.\n   */\n  @Input() @HostBinding('attr.disabled') disabled = false;\n\n  /**\n   * The rating will be used to render some colorful stars in the UI.\n   */\n  @Input() rating: number;\n\n  /**\n   * Emits the given rating when the user clicks on a star.\n   */\n  // tslint:disable-next-line:no-output-native\n  @Output() change = new EventEmitter<number>();\n\n  private initialRate = 0;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(protected el: ElementRef, protected renderer: Renderer2) {}\n\n  ngOnInit(): void {\n    this.setRate(this.rating, true);\n  }\n\n  setRate(value: number, force?: boolean): void {\n    if (!this.disabled || force) {\n      this.renderer.setAttribute(\n        this.el.nativeElement,\n        'style',\n        `--star-fill:${value || this.initialRate};`\n      );\n    }\n  }\n\n  saveRate(rating: number): void {\n    if (this.disabled) {\n      return;\n    }\n    this.initialRate = rating;\n    this.setRate(rating);\n    this.change.emit(rating);\n  }\n\n  setRateOnEvent(event: any, rating: number) {\n    if (event.code === 'Space') {\n      event.preventDefault();\n      this.setRate(rating);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IconModule } from '../../../cms-components/misc/index';\nimport { StarRatingComponent } from './star-rating.component';\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  declarations: [StarRatingComponent],\n  exports: [StarRatingComponent],\n})\nexport class StarRatingModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { BREAKPOINT } from '../../../../layout/config/layout-config';\nimport { TableStructureConfiguration } from '../table.model';\n\n/**\n * Helper configuration to introduce a breakpoint specific table configuration.\n */\nexport interface TableConfiguration extends TableStructureConfiguration {\n  breakpoint?: BREAKPOINT;\n}\n\n/**\n * The `TableConfig` provides table configurations. The configuration allows for a\n * an optional breakpoint specific structure, so a dedicated table structure per\n * screen size can be generated (see `TableService`).\n *\n * The string based key is used to define a configuration for a specific type. The type\n * binds to a specific component, such as the cost-center table. The various table types\n * should be exposed by feature modules, to ease the configuration.\n *\n * The `TableConfiguration` is added in an array, so that any opinionated default configurations\n * can be replaced by customer configurations.\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class TableConfig {\n  table: {\n    [key: string]: TableConfiguration[];\n  };\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  isDevMode,\n  Output,\n} from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\nimport { Table, TableHeader } from './table.model';\n\n/**\n * The table component provides a generic DOM structure based on the `dataset` input.\n * The `Table` dataset contains both a type, table structure, table data and controls\n * for pagination and sorting.\n *\n * The table component only supports horizontal table structure.\n *\n * The implementation is fairly \"dumb\" and only provides the following features:\n * - Use outlet for table headers (`<th>`) and cells (`<td>`).\n * - Localizing table headers, using the `I18nModule`.\n * - Sorting table columns.\n * - Add CSS classes on each cell to\n *\n * Al features are optional.\n *\n * By default, the headers and columns are rendered with an outlet template. The template\n * reference is generated by concatenating the table _type_ and table _label key_.\n * The following snippet shows an outlet generated for the table type \"cost-center\" with\n * a label \"name\":\n *\n * ```\n * <th>\n *   <template cxOutlet=\"tbl.cost-center.header.name\">\n *     [localized label is generated here]\n *   </template>\n * </th>\n * ```\n *\n * Similarly, the `<td>` is generated with the outlet template reference `tbl.cost-center.data.name`.\n *\n * This allows container components (and customers) to further customize the table rendering.\n *\n *\n */\n@Component({\n  selector: 'cx-table',\n  templateUrl: './table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableComponent {\n  @HostBinding('attr.cx-table-type') tableType: string;\n\n  protected _dataset: Table;\n  @Input()\n  set dataset(dataset: Table) {\n    this._dataset = dataset;\n    this.addTableDebugInfo();\n  }\n  get dataset(): Table {\n    return this._dataset;\n  }\n\n  /**\n   * The paginateEvent is triggered when a new page is required. This includes sorting.\n   */\n  @Output() paginateEvent: EventEmitter<PaginationModel> = new EventEmitter();\n\n  /**\n   * Returns the configured data value by the label key.\n   * If there's no headerKey available, or no corresponding value, the\n   * first value in the data row is returned.\n   */\n  getDataValue(dataRow: any, headerKey: string, index: number): string {\n    return dataRow[headerKey] || Object.values(dataRow)[index];\n  }\n\n  /**\n   * Sorts the table by emitting the pagination to the container/host component.\n   */\n  sort(header: TableHeader) {\n    if (header.sortCode) {\n      this.paginateEvent.emit({\n        ...this.dataset.pagination,\n        sort: header.sortCode,\n      });\n    }\n  }\n\n  /**\n   * Generates the table type into the UI in devMode, so that developers\n   * can easily get the notion of the table type.\n   */\n  protected addTableDebugInfo() {\n    if (isDevMode) {\n      this.tableType = this.dataset?.structure?.type;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { TableComponent } from './table.component';\n\n/**\n * The TableModule provides a table component that is driven by (responsible) configuration.\n */\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  declarations: [TableComponent],\n  exports: [TableComponent],\n})\nexport class TableModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { TableConfig } from './config/table.config';\nimport { TableStructure, TableStructureConfiguration } from './table.model';\n\n/**\n * Responsive table service.\n *\n * The `TableService` is used to generate a `TableStructure` based on configuration. The table\n * structure configuration allows for breakpoint specific configuration, so that the table\n * experience can be differentiated various screen sizes.\n *\n * The table structure configuration is driven by a table type. The various supported\n * table types are exposed in feature libraries.\n *\n * If there is no table configuration for the given type found, a table header structure\n * is generated based on the actual data or randomly (in case no data is passed in) by\n * generating 5 headers. In case of a generated header, we warn the developer in devMode that\n * there is no configuration available.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TableService {\n  constructor(\n    protected breakpointService: BreakpointService,\n    protected config: TableConfig\n  ) {}\n\n  /**\n   * Builds the table structure. The table structure can be created by the help of\n   * the `tableType`. The `tableType` can be used in the configuration `TableConfig`,\n   * so that the table headers can be defined.\n   */\n  buildStructure(\n    tableType: string,\n    data$?: Observable<any>\n  ): Observable<TableStructure> {\n    if (this.hasTableConfig(tableType)) {\n      return this.buildStructureFromConfig(tableType);\n    } else {\n      if (data$) {\n        return this.buildStructureFromData(tableType, data$);\n      } else {\n        return this.buildRandomStructure(tableType);\n      }\n    }\n  }\n\n  /**\n   * Returns the table structure by configuration. The configuration can be\n   * breakpoint-driven, which means that an alternative header structure can\n   * be created per screen size.\n   *\n   * The breakpoint is resolved by teh `BreakpointService`.\n   */\n  protected buildStructureFromConfig(type: string): Observable<TableStructure> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => ({ ...this.getTableConfig(type, breakpoint), type }))\n    );\n  }\n\n  /**\n   * This method generates a table structure by the help of the first data row.\n   */\n  protected buildStructureFromData(\n    type: string,\n    data$: Observable<any>\n  ): Observable<TableStructure> {\n    this.warn(\n      `No table configuration found to render table with type \"${type}\". The table header for \"${type}\" is generated by the help of the first data item`\n    );\n    return data$.pipe(\n      map((data: any[]) => {\n        const headers = Object.keys(data?.[0]).map((key) => ({\n          key,\n          label: key,\n        }));\n        return {\n          type: type,\n          headers,\n        } as TableStructure;\n      })\n    );\n  }\n\n  /**\n   * As a last resort, the table structure is randomly created. We add 5 unknown headers\n   * and use the `hideHeader` to avoid the unknown headers to be rendered.\n   */\n  protected buildRandomStructure(type: string): Observable<TableStructure> {\n    this.warn(\n      `No data available for \"${type}\", a random structure is generated (with hidden table headers).`\n    );\n\n    return of({\n      type,\n      headers: [\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n        { key: 'unknown' },\n      ],\n      hideHeader: true,\n    });\n  }\n\n  /**\n   * Finds the best applicable table configuration for the given type\n   * and breakpoint. If there is no configuration available for the breakpoint,\n   * the best match will be returned, using mobile first approach.\n   *\n   * If there is no match for any breakpoint, the fallback is a configuration\n   * without the notion of a breakpoint. Otherwise we fallback to the first\n   * available config.\n   */\n  protected getTableConfig(\n    type: string,\n    breakpoint: BREAKPOINT\n  ): TableStructureConfiguration {\n    const tableConfig = this.config.table[type];\n\n    // find all relevant breakpoints\n    const current = this.breakpointService.breakpoints.indexOf(breakpoint);\n    const relevant = this.breakpointService.breakpoints\n      .slice(0, current + 1)\n      .reverse();\n\n    const bestMatch: BREAKPOINT = relevant.find(\n      (br) => !!tableConfig.find((structure) => structure.breakpoint === br)\n    );\n\n    return bestMatch\n      ? tableConfig.find((config) => config.breakpoint === bestMatch)\n      : tableConfig.find((structure) => !structure.breakpoint) ||\n          tableConfig[0];\n  }\n\n  protected hasTableConfig(tableType: string): boolean {\n    return !!this.config.table?.[tableType];\n  }\n\n  /**\n   * Prints a convenient message in the console to increase developer experience.\n   */\n  private warn(message) {\n    if (isDevMode) {\n      console.warn(message);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class ViewConfig {\n  view?: {\n    /**\n     * Configurations related to the view of the application\n     */\n    infiniteScroll?: {\n      active?: boolean;\n      productLimit?: number;\n      showMoreButton?: boolean;\n    };\n  };\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({})\nexport class ViewConfigModule {\n  static forRoot(): ModuleWithProviders<ViewConfigModule> {\n    return {\n      ngModule: ViewConfigModule,\n      providers: [\n        provideDefaultConfig({\n          view: {},\n        }),\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService\n      .getRouterState()\n      .pipe(map((routingData) => routingData.state.params.orderCode));\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CheckoutService,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../../cms-components/myaccount/order/order-details/order-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PromotionService {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected checkoutService: CheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  getOrderPromotions(\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.getOrderPromotionsFromCart();\n      case PromotionLocation.Checkout:\n        return this.getOrderPromotionsFromCheckout();\n      case PromotionLocation.Order:\n        return this.getOrderPromotionsFromOrder();\n      default:\n        return of([]);\n    }\n  }\n\n  getOrderPromotionsFromCart(): Observable<PromotionResult[]> {\n    return this.activeCartService\n      .getActive()\n      .pipe(map((cart) => this.getOrderPromotionsFromCartHelper(cart)));\n  }\n\n  private getOrderPromotionsFromCartHelper(cart: Cart): PromotionResult[] {\n    const potentialPromotions = [];\n    potentialPromotions.push(...(cart.potentialOrderPromotions || []));\n\n    const appliedPromotions = [];\n    appliedPromotions.push(...(cart.appliedOrderPromotions || []));\n\n    return [...potentialPromotions, ...appliedPromotions];\n  }\n\n  getOrderPromotionsFromCheckout(): Observable<PromotionResult[]> {\n    return this.checkoutService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  getOrderPromotionsFromOrder(): Observable<PromotionResult[]> {\n    return this.orderDetailsService\n      .getOrderDetails()\n      .pipe(map((order) => this.getOrderPromotionsFromOrderHelper(order)));\n  }\n\n  private getOrderPromotionsFromOrderHelper(order: Order): PromotionResult[] {\n    const appliedOrderPromotions = [];\n    appliedOrderPromotions.push(...(order.appliedOrderPromotions || []));\n\n    return appliedOrderPromotions;\n  }\n\n  getProductPromotionForEntry(\n    item: OrderEntry,\n    promotionLocation: PromotionLocation\n  ): Observable<PromotionResult[]> {\n    switch (promotionLocation) {\n      case PromotionLocation.ActiveCart:\n        return this.activeCartService\n          .getActive()\n          .pipe(\n            map((cart) =>\n              this.getProductPromotion(\n                item,\n                cart.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Checkout:\n        return this.checkoutService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n      case PromotionLocation.Order:\n        return this.orderDetailsService\n          .getOrderDetails()\n          .pipe(\n            map((order) =>\n              this.getProductPromotion(\n                item,\n                order.appliedProductPromotions || []\n              )\n            )\n          );\n    }\n  }\n\n  private getProductPromotion(\n    item: OrderEntry,\n    promotions: PromotionResult[]\n  ): PromotionResult[] {\n    const entryPromotions: PromotionResult[] = [];\n    if (promotions && promotions.length > 0) {\n      for (const promotion of promotions) {\n        if (\n          promotion.description &&\n          promotion.consumedEntries &&\n          promotion.consumedEntries.length > 0\n        ) {\n          for (const consumedEntry of promotion.consumedEntries) {\n            if (this.isConsumedByEntry(consumedEntry, item)) {\n              entryPromotions.push(promotion);\n            }\n          }\n        }\n      }\n    }\n    return entryPromotions;\n  }\n\n  private isConsumedByEntry(consumedEntry: any, entry: any): boolean {\n    const consumedEntryNumber = consumedEntry.orderEntryNumber;\n    if (entry.entries && entry.entries.length > 0) {\n      for (const subEntry of entry.entries) {\n        if (subEntry.entryNumber === consumedEntryNumber) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return consumedEntryNumber === entry.entryNumber;\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, FormGroup } from '@angular/forms';\nimport { EMAIL_PATTERN, PASSWORD_PATTERN } from '@spartacus/core';\n\nexport class CustomFormValidators {\n  /**\n   * Checks control's value with predefined email regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidEmail' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailValidator(control: AbstractControl): ValidationErrors | null {\n    const email = control.value as string;\n\n    return !email.length || email.match(EMAIL_PATTERN)\n      ? null\n      : { cxInvalidEmail: true };\n  }\n\n  /**\n   * Checks control's value with predefined password regexp\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxInvalidPassword' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.value as string;\n\n    return !password.length || password.match(PASSWORD_PATTERN)\n      ? null\n      : { cxInvalidPassword: true };\n  }\n\n  /**\n   * Checks if control's value is between 1 and 5\n   *\n   * NOTE: Use it as a control validator\n   *\n   * @static\n   * @param {AbstractControl} control\n   * @returns {(ValidationErrors | null)} Uses 'cxStarRatingEmpty' validator error\n   * @memberof CustomFormValidators\n   */\n  static starRatingEmpty(control: AbstractControl): ValidationErrors | null {\n    const rating = control.value as number;\n\n    return rating >= 1 && rating <= 5 ? null : { cxStarRatingEmpty: true };\n  }\n\n  /**\n   * Checks if two password controls match\n   *\n   * NOTE: Use it as a form validator and pass password control names as parameters\n   *\n   * @static\n   * @param {string} password First password control name\n   * @param {string} passwordConfirmation Second password control name\n   * @returns Uses 'cxPasswordsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static passwordsMustMatch(\n    password: string,\n    passwordConfirmation: string\n  ): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        password,\n        passwordConfirmation,\n        'cxPasswordsMustMatch'\n      );\n\n    return validator;\n  }\n\n  /**\n   * Checks if two email controls match\n   *\n   * NOTE: Use it as a form validator and pass email control names as parameters\n   *\n   * @static\n   * @param {string} email First email control name\n   * @param {string} emailConfirmation Second email control name\n   * @returns Uses 'cxEmailsMustMatch' validator error\n   * @memberof CustomFormValidators\n   */\n  static emailsMustMatch(email: string, emailConfirmation: string): any {\n    const validator = (formGroup: FormGroup) =>\n      controlsMustMatch(\n        formGroup,\n        email,\n        emailConfirmation,\n        'cxEmailsMustMatch'\n      );\n\n    return validator;\n  }\n}\n\n/**\n * Generic function for validators, which checks if two passed controls match.\n *\n * @param formGroup\n * @param firstControlName First control to check\n * @param secondControlName Second control to check\n * @param errorName Error which will be returned by validator\n */\nexport function controlsMustMatch(\n  formGroup: FormGroup,\n  firstControlName: string,\n  secondControlName: string,\n  errorName: string\n): void {\n  const firstControl = formGroup.controls[firstControlName];\n  const secondControl = formGroup.controls[secondControlName];\n\n  if (secondControl.errors && !secondControl.errors[errorName]) {\n    return;\n  }\n\n  secondControl.setErrors(\n    firstControl.value !== secondControl.value ? { [errorName]: true } : null\n  );\n}\n","import { Title } from '@spartacus/core';\n\nexport const titleScores = {\n  mr: 1,\n  mrs: 2,\n  miss: 3,\n  ms: 4,\n  dr: 5,\n  rev: 6,\n};\n\nexport function sortTitles(title1: Title, title2: Title) {\n  if (!titleScores[title1.code] || !titleScores[title2.code]) {\n    return 1;\n  } else {\n    return titleScores[title1.code] - titleScores[title2.code];\n  }\n}\n","import {\n  Compiler,\n  Injectable,\n  InjectFlags,\n  Injector,\n  NgModuleFactory,\n  NgModuleRef,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CMSComponentConfig,\n  CmsComponentMapping,\n  CmsConfig,\n  ConfigChunk,\n  ConfigInitializerService,\n  configurationFactory,\n  DefaultConfigChunk,\n  FeatureModuleConfig,\n} from '@spartacus/core';\nimport {\n  combineLatest,\n  defer,\n  forkJoin,\n  from,\n  merge,\n  Observable,\n  of,\n  queueScheduler,\n} from 'rxjs';\nimport {\n  map,\n  observeOn,\n  pluck,\n  shareReplay,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\ninterface FeatureInstance extends FeatureModuleConfig {\n  moduleRef?: NgModuleRef<any>;\n  depsModules?: any[];\n  componentsMappings?: CMSComponentConfig;\n}\n\n/**\n * Service responsible for resolving cms config based feature modules.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FeatureModulesService implements OnDestroy {\n  // feature modules configuration\n  private featureModulesConfig?: {\n    [featureName: string]: FeatureModuleConfig;\n  };\n\n  // maps componentType to feature\n  private componentFeatureMap: Map<string, string> = new Map();\n\n  /*\n   * Contains either FeatureInstance or FeatureInstance resolver for not yet\n   * resolved feature modules\n   */\n  private features: Map<string, Observable<FeatureInstance>> = new Map();\n\n  private dependencyModules = new Map<any, NgModuleRef<any>>();\n\n  constructor(\n    protected configInitializer: ConfigInitializerService,\n    protected compiler: Compiler,\n    protected injector: Injector\n  ) {\n    this.initFeatureMap();\n  }\n\n  private async initFeatureMap(): Promise<void> {\n    const config: CmsConfig = await this.configInitializer.getStableConfig(\n      'featureModules'\n    );\n\n    this.featureModulesConfig = config.featureModules ?? {};\n\n    for (const [featureName, featureConfig] of Object.entries(\n      this.featureModulesConfig\n    )) {\n      if (featureConfig?.cmsComponents?.length) {\n        for (const component of featureConfig.cmsComponents) {\n          this.componentFeatureMap.set(component, featureName);\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if there is feature module configuration that covers specified\n   * component type\n   */\n  hasFeatureFor(componentType: string): boolean {\n    return this.componentFeatureMap.has(componentType);\n  }\n\n  /**\n   * Return full CmsComponent mapping defined in feature module\n   */\n  getCmsMapping(componentType: string): Observable<CmsComponentMapping> {\n    const feature = this.componentFeatureMap.get(componentType);\n\n    return this.resolveFeature(feature).pipe(\n      map(\n        (featureInstance) => featureInstance.componentsMappings[componentType]\n      )\n    );\n  }\n\n  /**\n   * Get all injectors for feature and its dependencies\n   *\n   * As it's a synchronous method, it works only for already resolved features,\n   * returning undefined otherwise\n   */\n  getInjectors(componentType: string): Injector[] | undefined {\n    const feature = this.componentFeatureMap.get(componentType);\n    let injectors;\n\n    // we are returning injectors only for already resolved features\n    this.features\n      .get(feature)\n      ?.subscribe((featureInstance) => {\n        injectors = [\n          // feature module injector\n          featureInstance.moduleRef.injector,\n          // injectors from dependency modules\n          ...featureInstance.depsModules.map(\n            (module) => this.dependencyModules.get(module).injector\n          ),\n        ];\n      })\n      .unsubscribe();\n    return injectors;\n  }\n\n  /**\n   * Resolve feature based on feature name, if feature was not yet resolved\n   *\n   * It will first resolve all module dependencies if defined\n   */\n  private resolveFeature(featureName: string): Observable<FeatureInstance> {\n    return defer(() => {\n      if (!this.features.has(featureName)) {\n        const featureConfig = this.featureModulesConfig[featureName];\n\n        if (!featureConfig?.module) {\n          throw new Error(\n            'No module defined for Feature Module ' + featureName\n          );\n        }\n\n        // resolve dependencies first (if any)\n        const depsResolve = featureConfig.dependencies?.length\n          ? forkJoin(\n              featureConfig.dependencies.map((depModuleFunc) =>\n                this.resolveDependencyModule(depModuleFunc)\n              )\n            )\n          : of(undefined);\n\n        this.features.set(\n          featureName,\n          depsResolve.pipe(\n            switchMap((deps) => this.resolveFeatureModule(featureConfig, deps)),\n            shareReplay()\n          )\n        );\n      }\n\n      return this.features.get(featureName);\n    });\n  }\n\n  /**\n   * Initialize feature module by returning feature instance\n   */\n  private resolveFeatureModule(\n    featureConfig: FeatureModuleConfig,\n    depsModules: any[] = []\n  ): Observable<FeatureInstance> {\n    return this.resolveModuleFactory(featureConfig?.module).pipe(\n      map(([moduleFactory]) => {\n        const moduleRef = moduleFactory.create(this.injector);\n\n        const featureInstance: FeatureInstance = {\n          ...featureConfig,\n          moduleRef,\n          depsModules,\n          componentsMappings: {},\n        };\n\n        // resolve configuration for feature module\n        const resolvedConfiguration = this.resolveFeatureConfiguration(\n          moduleRef.injector\n        );\n\n        // extract cms components configuration from feature config\n        for (const componentType of featureInstance.cmsComponents) {\n          featureInstance.componentsMappings[componentType] =\n            resolvedConfiguration.cmsComponents[componentType];\n        }\n        return featureInstance;\n      })\n    );\n  }\n\n  /**\n   * Returns configuration provided in feature module\n   */\n  private resolveFeatureConfiguration(featureInjector: Injector): CmsConfig {\n    // get config chunks from feature lib\n    const featureConfigChunks = featureInjector.get<any[]>(\n      ConfigChunk,\n      [],\n      InjectFlags.Self\n    );\n    // get default config chunks from feature lib\n    const featureDefaultConfigChunks = featureInjector.get<any[]>(\n      DefaultConfigChunk,\n      [],\n      InjectFlags.Self\n    );\n\n    return configurationFactory(\n      featureConfigChunks,\n      featureDefaultConfigChunks\n    ) as CmsConfig;\n  }\n\n  /**\n   * Resolves dependency module and initializes single module instance\n   */\n  private resolveDependencyModule(\n    moduleFunc: () => Promise<any>\n  ): Observable<any> {\n    // We grab moduleFactory symbol from module function and if there is no\n    // such a module created yet, we create it and store it in a\n    // dependencyModules map\n    return this.resolveModuleFactory(moduleFunc).pipe(\n      tap(([moduleFactory, module]) => {\n        if (!this.dependencyModules.has(module)) {\n          const moduleRef = moduleFactory.create(this.injector);\n          this.dependencyModules.set(module, moduleRef);\n        }\n      }),\n      pluck(1)\n    );\n  }\n\n  /**\n   * Resolve any Angular module from an function that return module or moduleFactory\n   */\n  private resolveModuleFactory(\n    moduleFunc: () => Promise<any>\n  ): Observable<[NgModuleFactory<any>, any]> {\n    return from(moduleFunc()).pipe(\n      switchMap((module) =>\n        module instanceof NgModuleFactory\n          ? (of([module, module]) as Observable<[NgModuleFactory<any>, any]>)\n          : combineLatest([\n              // using compiler here is for jit compatibility, there is no overhead\n              // for aot production builds as it will be stubbed\n              from(this.compiler.compileModuleAsync(module as any)),\n              of(module),\n            ])\n      ),\n      observeOn(queueScheduler)\n    );\n  }\n\n  ngOnDestroy(): void {\n    // clean up all initialized features\n    merge(...Array.from(this.features.values())).subscribe((featureInstance) =>\n      featureInstance.moduleRef?.destroy()\n    );\n\n    // clean up all initialized dependency modules\n    this.dependencyModules.forEach((dependency) => dependency.destroy());\n  }\n}\n","import { Inject, Injectable, Injector, PLATFORM_ID } from '@angular/core';\nimport {\n  CmsComponentMapping,\n  CmsConfig,\n  deepMerge,\n  DeferLoadingStrategy,\n} from '@spartacus/core';\nimport { Route } from '@angular/router';\nimport { isPlatformServer } from '@angular/common';\nimport { defer, forkJoin, Observable, of } from 'rxjs';\nimport { mapTo, share, tap } from 'rxjs/operators';\nimport { FeatureModulesService } from './feature-modules.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsComponentsService {\n  private missingComponents: string[] = [];\n  private mappings: { [componentType: string]: CmsComponentMapping } = {};\n\n  // contains\n  private mappingResolvers: Map<\n    string,\n    Observable<CmsComponentMapping>\n  > = new Map();\n\n  /**\n   * @deprecated since 2.1\n   * constructor(config: CmsConfig, platformId: Object);\n   */\n  constructor(\n    protected config: CmsConfig,\n    @Inject(PLATFORM_ID) protected platformId: Object,\n    protected featureModules?: FeatureModulesService\n  ) {}\n\n  /**\n   * Should be called to make sure all component mappings are determined,\n   * especially lazy loaded ones.\n   *\n   * It's recommended way to make sure all other methods of CmsComponentService\n   * will be able to work synchronously for asked component types and avoid risk\n   * of potential errors that could be thrown otherwise.\n   */\n  determineMappings(componentTypes: string[]): Observable<string[]> {\n    return defer(() => {\n      // we use defer, to be sure the logic below used to compose final observable\n      // will be executed at subscription time (with up to date state at the time,\n      // when it will be needed)\n      const featureResolvers = [];\n\n      for (const componentType of componentTypes) {\n        if (!this.mappings[componentType]) {\n          const staticConfig = this.config.cmsComponents[componentType];\n\n          // check if this component type is managed by feature module\n          if (this.featureModules.hasFeatureFor(componentType)) {\n            featureResolvers.push(\n              // we delegate populating this.mappings to feature resolver\n              this.getFeatureMappingResolver(componentType, staticConfig)\n            );\n          } else {\n            // simply use only static config\n            this.mappings[componentType] = staticConfig;\n          }\n        }\n      }\n\n      if (featureResolvers.length) {\n        return forkJoin(featureResolvers).pipe(mapTo(componentTypes));\n      } else {\n        return of(componentTypes);\n      }\n    });\n  }\n\n  private getFeatureMappingResolver(\n    componentType: string,\n    staticConfig?: CmsComponentMapping\n  ): Observable<CmsComponentMapping> {\n    if (!this.mappingResolvers.has(componentType)) {\n      const mappingResolver$ = this.featureModules\n        .getCmsMapping(componentType)\n        .pipe(\n          tap((featureComponentMapping) => {\n            // We treat cms mapping configuration from a feature as a default,\n            // that can be overridden by app/static configuration\n            this.mappings[componentType] = deepMerge(\n              {},\n              featureComponentMapping,\n              staticConfig\n            );\n            this.mappingResolvers.delete(componentType);\n          }),\n          share()\n        );\n      this.mappingResolvers.set(componentType, mappingResolver$);\n    }\n    return this.mappingResolvers.get(componentType);\n  }\n\n  getInjectors(componentType: string): Injector[] {\n    return (\n      (this.featureModules.hasFeatureFor(componentType) &&\n        this.featureModules.getInjectors(componentType)) ??\n      []\n    );\n  }\n\n  /**\n   * Return collection of component mapping configuration for specified list of\n   * component types.\n   *\n   * If component mapping can't be determined synchronously, for example, lazy\n   * loaded one, it will throw an error.\n   *\n   * To make sure component mapping is available, determineMappings()\n   * should be called and completed first.\n   */\n  getMapping(componentType: string): CmsComponentMapping {\n    const componentConfig =\n      this.mappings[componentType] ??\n      this.config.cmsComponents?.[componentType];\n\n    if (!componentConfig) {\n      if (!this.missingComponents.includes(componentType)) {\n        this.missingComponents.push(componentType);\n        console.warn(\n          `No component implementation found for the CMS component type '${componentType}'.\\n`,\n          `Make sure you implement a component and register it in the mapper.`\n        );\n      }\n    }\n\n    return componentConfig;\n  }\n\n  /**\n   * Checks, if component should be rendered as some components\n   * could be disabled for server side renderings\n   */\n  shouldRender(componentType: string): boolean {\n    const isSSR = isPlatformServer(this.platformId);\n    return !(isSSR && this.getMapping(componentType)?.disableSSR);\n  }\n\n  /**\n   * Return DeferLoadingStrategy for component type.\n   */\n  getDeferLoadingStrategy(componentType: string): DeferLoadingStrategy {\n    return this.config.cmsComponents?.[componentType]?.deferLoading;\n  }\n\n  /**\n   * Get cms driven child routes for components\n   */\n  getChildRoutes(componentTypes: string[]): Route[] {\n    const routes = [];\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        routes.push(...(this.getMapping(componentType)?.childRoutes ?? []));\n      }\n    }\n    return routes;\n  }\n\n  /**\n   * Get cms driven guards for components\n   */\n  getGuards(componentTypes: string[]): any[] {\n    const guards = new Set<any>();\n    for (const componentType of componentTypes) {\n      this.getMapping(componentType)?.guards?.forEach((guard) =>\n        guards.add(guard)\n      );\n    }\n    return Array.from(guards);\n  }\n\n  /**\n   * Get i18n keys associated with components\n   */\n  getI18nKeys(componentTypes: string[]): string[] {\n    const i18nKeys = new Set<string>();\n    for (const componentType of componentTypes) {\n      if (this.shouldRender(componentType)) {\n        this.getMapping(componentType)?.i18nKeys?.forEach((key) =>\n          i18nKeys.add(key)\n        );\n      }\n    }\n    return Array.from(i18nKeys);\n  }\n}\n","import {\n  AbstractType,\n  InjectFlags,\n  InjectionToken,\n  Injector,\n  Type,\n} from '@angular/core';\n\nconst NOT_FOUND_SYMBOL = {};\n\n/**\n * CombinedInjector is able to combine more than one injector together in a way\n * that main injector is supported by complementary injectors.\n *\n * Should be used as a parent injector for components, when we want to have access\n * to both providers from component hierarchical injectors and providers from any\n * number of additional injectors (lazy loaded modules for example).\n */\nexport class CombinedInjector implements Injector {\n  /**\n   * @param mainInjector Component hierarchical injector\n   * @param complementaryInjectors Additional injector that will be taken into an account when resolving dependencies\n   */\n  constructor(\n    private mainInjector: Injector,\n    private complementaryInjectors: Injector[]\n  ) {}\n\n  get<T>(\n    token: Type<T> | InjectionToken<T> | AbstractType<T>,\n    notFoundValue?: T,\n    flags?: InjectFlags\n  ): T;\n  get(token: any, notFoundValue?: any): any;\n  get(token, notFoundValue?: any, flags?: InjectFlags): any {\n    // tslint:disable-next-line:no-bitwise\n    if (flags & InjectFlags.Self) {\n      if (notFoundValue !== undefined) {\n        return notFoundValue;\n      }\n      throw new Error(\n        \"CombinedInjector should be used as a parent injector / doesn't support self dependencies\"\n      );\n    }\n\n    for (const injector of [\n      this.mainInjector,\n      ...this.complementaryInjectors,\n    ]) {\n      // First we are resolving providers provided at Self level in all injectors,\n      // starting with main injector and going through complementary ones...\n      const service = injector.get(token, NOT_FOUND_SYMBOL, InjectFlags.Self);\n      if (service !== NOT_FOUND_SYMBOL) {\n        return service;\n      }\n    }\n    // ...and then fallback to main injector passing the flag\n    return this.mainInjector.get(token, notFoundValue, flags);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CmsComponentData } from '../../model';\nimport { CmsComponent, CmsService } from '@spartacus/core';\nimport { CmsComponentsService } from '../../../services/cms-components.service';\nimport { CombinedInjector } from '../../../../shared/utils/combined-injector';\n\n/**\n * Used to prepare injector for CMS components.\n *\n * Injector will take into account configured providers and provides CmsComponentData\n * for specified component's uid\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsInjectorService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  private getCmsData<T extends CmsComponent>(\n    uid: string,\n    parentInjector?: Injector\n  ): CmsComponentData<T> {\n    return {\n      uid: uid,\n      data$: (parentInjector ?? this.injector)\n        .get(CmsService)\n        .getComponentData<T>(uid),\n    };\n  }\n\n  public getInjector(\n    type: string,\n    uid: string,\n    parentInjector?: Injector\n  ): Injector {\n    const configProviders =\n      this.cmsComponentsService.getMapping(type)?.providers ?? [];\n\n    const complementaryInjectors = this.cmsComponentsService.getInjectors(type);\n\n    if (complementaryInjectors?.length) {\n      parentInjector = new CombinedInjector(\n        parentInjector ?? this.injector,\n        complementaryInjectors\n      );\n    }\n\n    return Injector.create({\n      providers: [\n        {\n          provide: CmsComponentData,\n          useValue: this.getCmsData(uid),\n        },\n        ...configProviders,\n      ],\n      parent: parentInjector ?? this.injector,\n    });\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Applicable, CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * ComponentHandler implementations can be used for instantiating and launching\n * different types of CMS mapped components\n */\nexport abstract class ComponentHandler implements Applicable {\n  /**\n   * Returns component resource - an observable stream used to launch and dispose\n   * component.\n   *\n   * Instantiate and launch component by subscribing to launcher.\n   * Successful component launch will be followed by emission of ElementRef\n   * (and in case of native Angular component, also ComponentRef).\n   * Unsubscribing from the launcher will remove and tear down the component.\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  abstract launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }>;\n\n  abstract hasMatch(componentMapping: CmsComponentMapping): boolean;\n  abstract getPriority?(): Priority;\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Inject,\n  Injectable,\n  Injector,\n  isDevMode,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from '../handlers/component-handler';\nimport { CmsComponentMapping, resolveApplicable } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Responsible for obtaining component handler for specified component mapping\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComponentHandlerService {\n  constructor(\n    @Optional()\n    @Inject(ComponentHandler)\n    protected handlers: ComponentHandler[]\n  ) {}\n\n  protected invalidMappings = new Set<CmsComponentMapping>();\n\n  /**\n   * Get best matching component handler\n   *\n   * @param componentMapping\n   */\n  protected resolve(componentMapping: CmsComponentMapping): ComponentHandler {\n    const handler = resolveApplicable(this.handlers, [componentMapping]);\n\n    if (isDevMode() && !handler) {\n      if (!this.invalidMappings.has(componentMapping)) {\n        this.invalidMappings.add(componentMapping);\n        console.warn(\n          \"Can't resolve handler for component mapping: \",\n          componentMapping\n        );\n      }\n    }\n\n    return handler;\n  }\n\n  /**\n   * Get launcher for specified component mapping\n   *\n   * @param componentMapping\n   * @param viewContainerRef\n   * @param elementInjector\n   */\n  getLauncher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return this.resolve(componentMapping)?.launcher(\n      componentMapping,\n      viewContainerRef,\n      elementInjector\n    );\n  }\n}\n","import {\n  ChangeDetectorRef,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ContentSlotComponentData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CmsComponentsService } from '../../services/cms-components.service';\nimport { CmsInjectorService } from './services/cms-injector.service';\nimport { ComponentHandlerService } from './services/component-handler.service';\n\n/**\n * Directive used to facilitate instantiation of CMS driven dynamic components\n */\n@Directive({\n  selector: '[cxComponentWrapper]',\n})\nexport class ComponentWrapperDirective implements OnInit, OnDestroy {\n  @Input() cxComponentWrapper: ContentSlotComponentData;\n\n  /**\n   * @deprecated since 2.0\n   *\n   * This property in unsafe, i.e.\n   * - cmpRef can be set later because of lazy loading or deferred loading\n   * - cmpRef can be not set at all if for example, web components are used as cms components\n   */\n  cmpRef?: ComponentRef<any>;\n\n  private launcherResource?: Subscription;\n\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected componentHandler: ComponentHandlerService,\n    protected cmsInjector: CmsInjectorService\n  ) {}\n\n  ngOnInit() {\n    this.cmsComponentsService\n      .determineMappings([this.cxComponentWrapper.flexType])\n      .subscribe(() => {\n        if (\n          this.cmsComponentsService.shouldRender(\n            this.cxComponentWrapper.flexType\n          )\n        ) {\n          this.launchComponent();\n        }\n      });\n  }\n\n  private launchComponent() {\n    const componentMapping = this.cmsComponentsService.getMapping(\n      this.cxComponentWrapper.flexType\n    );\n\n    if (!componentMapping) {\n      return;\n    }\n\n    this.launcherResource = this.componentHandler\n      .getLauncher(\n        componentMapping,\n        this.vcr,\n        this.cmsInjector.getInjector(\n          this.cxComponentWrapper.flexType,\n          this.cxComponentWrapper.uid,\n          this.injector\n        )\n      )\n      ?.subscribe(({ elementRef, componentRef }) => {\n        this.cmpRef = componentRef;\n        this.decorate(elementRef);\n        this.injector.get(ChangeDetectorRef).markForCheck();\n      });\n  }\n\n  private decorate(elementRef: ElementRef): void {\n    this.dynamicAttributeService.addDynamicAttributes(\n      elementRef.nativeElement,\n      this.renderer,\n      { componentData: this.cxComponentWrapper }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.launcherResource) {\n      this.launcherResource.unsubscribe();\n    }\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ComponentHandler } from './component-handler';\nimport { Observable } from 'rxjs';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\n\n/**\n * Default component handler used for dynamically launching cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DefaultComponentHandler implements ComponentHandler {\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return typeof componentMapping.component === 'function';\n  }\n\n  getPriority(): Priority {\n    return Priority.FALLBACK;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return new Observable<{\n      elementRef: ElementRef;\n      componentRef?: ComponentRef<any>;\n    }>((subscriber) => {\n      let componentRef: ComponentRef<any>;\n\n      const injector = elementInjector ?? viewContainerRef.injector;\n\n      const dispose = () => {\n        if (componentRef) {\n          componentRef.destroy();\n        }\n      };\n\n      const factory = this.getComponentFactory(\n        injector,\n        componentMapping.component\n      );\n\n      if (factory) {\n        componentRef = viewContainerRef.createComponent(\n          factory,\n          undefined,\n          injector\n        );\n        subscriber.next({ elementRef: componentRef.location, componentRef });\n      }\n\n      return dispose;\n    });\n  }\n\n  protected getComponentFactory(injector: Injector, component: any): any {\n    if (!component) {\n      return null;\n    }\n    const factory = injector\n      .get(ComponentFactoryResolver)\n      .resolveComponentFactory(component);\n\n    return factory;\n  }\n}\n","import {\n  ComponentRef,\n  ElementRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n} from '@angular/core';\nimport { CmsComponentMapping, Priority } from '@spartacus/core';\nimport { from, Observable } from 'rxjs';\nimport { DefaultComponentHandler } from './default-component.handler';\nimport { switchMap } from 'rxjs/operators';\nimport { ComponentHandler } from './component-handler';\n\n/**\n * Lazy component handler used for launching lazy loaded cms components implemented\n * as native Angular components.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LazyComponentHandler implements ComponentHandler {\n  constructor(protected defaultHandler: DefaultComponentHandler) {}\n\n  /**\n   * We want to mach dynamic import signature () => import('')\n   */\n  hasMatch(componentMapping: CmsComponentMapping): boolean {\n    return (\n      typeof componentMapping.component === 'function' &&\n      this.isNotClass(componentMapping.component)\n    );\n  }\n\n  private isNotClass(symbol: any): boolean {\n    const signature = symbol.toString().substr(0, 20).replace(' ', '');\n    return signature.startsWith('function()') || signature.startsWith('()=>');\n  }\n\n  getPriority(): Priority {\n    return Priority.LOW;\n  }\n\n  launcher(\n    componentMapping: CmsComponentMapping,\n    viewContainerRef: ViewContainerRef,\n    elementInjector?: Injector\n  ): Observable<{ elementRef: ElementRef; componentRef?: ComponentRef<any> }> {\n    return from(componentMapping.component()).pipe(\n      switchMap((component) =>\n        this.defaultHandler.launcher(\n          { ...componentMapping, component },\n          viewContainerRef,\n          elementInjector\n        )\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ComponentWrapperDirective } from './component-wrapper.directive';\nimport { ComponentHandler } from './handlers/component-handler';\nimport { DefaultComponentHandler } from './handlers/default-component.handler';\nimport { LazyComponentHandler } from './handlers/lazy-component.handler';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: ComponentHandler,\n      useExisting: DefaultComponentHandler,\n      multi: true,\n    },\n    {\n      provide: ComponentHandler,\n      useExisting: LazyComponentHandler,\n      multi: true,\n    },\n  ],\n  declarations: [ComponentWrapperDirective],\n  exports: [ComponentWrapperDirective],\n})\nexport class PageComponentModule {}\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { WindowRef } from '@spartacus/core';\nimport { LAUNCH_CALLER } from '../../../layout/launch-dialog/config/index';\nimport { LaunchDialogService } from '../../../layout/launch-dialog/services/launch-dialog.service';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    return (\n      this.winRef.localStorage &&\n      this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) === 'true'\n    );\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.launchDialogService.launch(LAUNCH_CALLER.ASM);\n  }\n}\n","export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '../../cms-structure/page/component/page-component.module';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService) {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","export enum CheckoutStepType {\n  SHIPPING_ADDRESS = 'shippingAddress',\n  DELIVERY_MODE = 'deliveryMode',\n  PAYMENT_DETAILS = 'paymentDetails',\n  REVIEW_ORDER = 'reviewOrder',\n}\n\nexport interface CheckoutStep {\n  id: string;\n  name: string;\n  routeName: string;\n  type: Array<CheckoutStepType>;\n}\n","import { CheckoutStep } from '../model/checkout-step.model';\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\nexport enum DeliveryModePreferences {\n  FREE = 'FREE',\n  LEAST_EXPENSIVE = 'LEAST_EXPENSIVE', // but not free\n  MOST_EXPENSIVE = 'MOST_EXPENSIVE',\n}\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CheckoutConfig {\n  checkout?: {\n    /**\n     * Set checkout steps as ordered array of pages.\n     */\n    steps?: Array<CheckoutStep>;\n    /**\n     * Allow for express checkout when default shipping method and payment method are available.\n     */\n    express?: boolean;\n    /**\n     * Default delivery mode for i.a. express checkout. Set preferences in order with general preferences (eg. DeliveryModePreferences.LEAST_EXPENSIVE) or specific delivery codes.\n     */\n    defaultDeliveryMode?: Array<DeliveryModePreferences | string>;\n    /**\n     * Allow for guest checkout.\n     */\n    guest?: boolean;\n  };\n}\n","import { Injectable } from '@angular/core';\nimport {\n  AsmAuthService,\n  AuthService,\n  RoutingService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmComponentService {\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected routingService: RoutingService,\n    protected winRef: WindowRef\n  ) {}\n\n  logoutCustomerSupportAgentAndCustomer(): void {\n    this.authService\n      .getUserToken()\n      .pipe(take(1))\n      .subscribe((token) => {\n        if (this.asmAuthService.isCustomerEmulationToken(token)) {\n          this.logoutCustomer();\n        }\n        this.asmAuthService.logoutCustomerSupportAgent();\n      });\n  }\n\n  logoutCustomer(): void {\n    this.authService.logout();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  isCustomerEmulationSessionInProgress(): Observable<boolean> {\n    return this.authService\n      .getUserToken()\n      .pipe(\n        mergeMap((userToken) =>\n          of(this.asmAuthService.isCustomerEmulationToken(userToken))\n        )\n      );\n  }\n\n  /**\n   * We're currently only removing the persisted storage in the browser\n   * to ensure the ASM experience isn't loaded on the next visit. There are a few\n   * optimsiations we could think of:\n   * - drop the `asm` parameter from the URL, in case it's still there\n   * - remove the generated UI from the DOM (outlets currently do not support this)\n   */\n  unload() {\n    if (this.winRef.localStorage) {\n      this.winRef.localStorage.removeItem(ASM_ENABLED_LOCAL_STORAGE_KEY);\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AsmAuthService,\n  AsmService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  User,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-main-ui',\n  templateUrl: './asm-main-ui.component.html',\n  styleUrls: ['./asm-main-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmMainUiComponent implements OnInit {\n  csAgentToken$: Observable<UserToken>;\n  csAgentTokenLoading$: Observable<boolean>;\n  customer$: Observable<User>;\n  isCollapsed$: Observable<boolean>;\n\n  @HostBinding('class.hidden') disabled = false;\n\n  private startingCustomerSession = false;\n\n  constructor(\n    protected authService: AuthService,\n    protected asmAuthService: AsmAuthService,\n    protected userService: UserService,\n    protected asmComponentService: AsmComponentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected asmService: AsmService\n  ) {}\n\n  ngOnInit(): void {\n    this.csAgentToken$ = this.asmAuthService.getCustomerSupportAgentToken();\n    this.csAgentTokenLoading$ = this.asmAuthService.getCustomerSupportAgentTokenLoading();\n    this.customer$ = this.authService.getUserToken().pipe(\n      switchMap((token) => {\n        if (token && !!token.access_token) {\n          this.handleCustomerSessionStartRedirection(token);\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n    this.isCollapsed$ = this.asmService\n      .getAsmUiState()\n      .pipe(map((uiState) => uiState.collapsed));\n  }\n\n  private handleCustomerSessionStartRedirection(token: UserToken): void {\n    if (\n      this.startingCustomerSession &&\n      this.asmAuthService.isCustomerEmulationToken(token)\n    ) {\n      this.startingCustomerSession = false;\n      this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.routingService.go('/');\n    }\n  }\n\n  loginCustomerSupportAgent({\n    userId,\n    password,\n  }: {\n    userId: string;\n    password: string;\n  }): void {\n    this.asmAuthService.authorizeCustomerSupportAgent(userId, password);\n  }\n\n  logout(): void {\n    this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n  }\n\n  startCustomerEmulationSession({ customerId }: { customerId: string }): void {\n    this.asmAuthService\n      .getCustomerSupportAgentToken()\n      .pipe(take(1))\n      .subscribe((customerSupportAgentToken) =>\n        this.asmAuthService.startCustomerEmulationSession(\n          customerSupportAgentToken,\n          customerId\n        )\n      )\n      .unsubscribe();\n    this.startingCustomerSession = true;\n  }\n\n  hideUi(): void {\n    this.disabled = true;\n    this.asmComponentService.unload();\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AsmConfig, AuthService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-asm-session-timer',\n  templateUrl: './asm-session-timer.component.html',\n  styleUrls: ['./asm-session-timer.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmSessionTimerComponent implements OnInit, OnDestroy {\n  private subscriptions = new Subscription();\n  private interval: any;\n  private maxStartDelayInSeconds = 60000;\n  timeLeft: number;\n\n  constructor(\n    private config: AsmConfig,\n    private asmComponentService: AsmComponentService,\n    private authService: AuthService,\n    private routingService: RoutingService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.timeLeft = this.getTimerStartDelayInSeconds();\n    this.interval = setInterval(() => {\n      if (this.timeLeft > 0) {\n        this.timeLeft--;\n      } else {\n        clearInterval(this.interval);\n        this.asmComponentService.logoutCustomerSupportAgentAndCustomer();\n      }\n      this.changeDetectorRef.markForCheck();\n    }, 1000);\n\n    this.resetOnNavigate();\n    this.resetOnCustomerSessionChange();\n  }\n\n  private resetOnNavigate(): void {\n    this.subscriptions.add(\n      this.routingService.isNavigating().subscribe((isNavigating) => {\n        if (isNavigating) {\n          this.resetTimer();\n        }\n      })\n    );\n  }\n\n  private resetOnCustomerSessionChange(): void {\n    this.subscriptions.add(\n      this.authService\n        .getOccUserId()\n        .pipe(distinctUntilChanged())\n        .subscribe(() => this.resetTimer())\n    );\n  }\n\n  resetTimer(): void {\n    if (this.timeLeft > 0) {\n      this.timeLeft = this.getTimerStartDelayInSeconds();\n    }\n  }\n\n  private getTimerStartDelayInSeconds(): number {\n    if (\n      this.config.asm.agentSessionTimer.startingDelayInSeconds >\n      this.maxStartDelayInSeconds\n    ) {\n      return this.maxStartDelayInSeconds;\n    } else {\n      return this.config.asm.agentSessionTimer.startingDelayInSeconds;\n    }\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'formatTimer',\n})\nexport class FormatTimerPipe implements PipeTransform {\n  transform(totalSeconds: number): string {\n    if (totalSeconds < 0) {\n      totalSeconds = 0;\n    }\n    const minutes: number = Math.floor(totalSeconds / 60);\n    const seconds: number = totalSeconds % 60;\n    let zeroPaddedMinutes: string;\n    if (minutes < 10) {\n      zeroPaddedMinutes = ('00' + minutes).slice(-2);\n    } else {\n      zeroPaddedMinutes = minutes + '';\n    }\n    const zeroPaddedSeconds: string = ('00' + seconds).slice(-2);\n    return `${zeroPaddedMinutes}:${zeroPaddedSeconds}`;\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { AsmService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-asm-toggle-ui',\n  templateUrl: './asm-toggle-ui.component.html',\n  styleUrls: ['./asm-toggle-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AsmToggleUiComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  isCollapsed: boolean;\n\n  constructor(protected asmService: AsmService) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      this.asmService.getAsmUiState().subscribe((uiState) => {\n        this.isCollapsed = uiState.collapsed;\n      })\n    );\n  }\n\n  toggleUi(): void {\n    this.asmService.updateAsmUiState({ collapsed: !this.isCollapsed });\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'cx-csagent-login-form',\n  templateUrl: './csagent-login-form.component.html',\n  styleUrls: ['./csagent-login-form.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CSAgentLoginFormComponent implements OnInit {\n  csAgentLoginForm: FormGroup;\n\n  @Input()\n  csAgentTokenLoading = false;\n\n  @Output()\n  submitEvent = new EventEmitter<{ userId: string; password: string }>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.csAgentLoginForm = this.fb.group({\n      userId: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.csAgentLoginForm.valid) {\n      this.submitEvent.emit({\n        userId: this.csAgentLoginForm.get('userId').value,\n        password: this.csAgentLoginForm.get('password').value,\n      });\n    } else {\n      this.csAgentLoginForm.markAllAsTouched();\n    }\n  }\n}\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { User, UserService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { AsmComponentService } from '../services/asm-component.service';\n\n@Component({\n  selector: 'cx-customer-emulation',\n  templateUrl: './customer-emulation.component.html',\n  styleUrls: ['./customer-emulation.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class CustomerEmulationComponent implements OnInit, OnDestroy {\n  customer: User;\n  isCustomerEmulationSessionInProgress$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  constructor(\n    protected asmComponentService: AsmComponentService,\n    protected userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.userService.get().subscribe((user) => (this.customer = user))\n    );\n    this.isCustomerEmulationSessionInProgress$ = this.asmComponentService.isCustomerEmulationSessionInProgress();\n  }\n\n  logoutCustomer() {\n    this.asmComponentService.logoutCustomer();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  AsmConfig,\n  AsmService,\n  CustomerSearchPage,\n  User,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-customer-selection',\n  templateUrl: './customer-selection.component.html',\n  styleUrls: ['./customer-selection.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  // tslint:disable-next-line:no-host-metadata-property\n  host: {\n    '(document:click)': 'onDocumentClick($event)',\n  },\n})\nexport class CustomerSelectionComponent implements OnInit, OnDestroy {\n  customerSelectionForm: FormGroup;\n  private subscription = new Subscription();\n  searchResultsLoading$: Observable<boolean>;\n  searchResults: Observable<CustomerSearchPage>;\n  selectedCustomer: User;\n\n  @Output()\n  submitEvent = new EventEmitter<{ customerId: string }>();\n\n  @ViewChild('resultList') resultList: ElementRef;\n  @ViewChild('searchTerm') searchTerm: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n    private asmService: AsmService,\n    private config: AsmConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.customerSelectionForm = this.fb.group({\n      searchTerm: ['', Validators.required],\n    });\n    this.asmService.customerSearchReset();\n    this.searchResultsLoading$ = this.asmService.getCustomerSearchResultsLoading();\n    this.searchResults = this.asmService.getCustomerSearchResults();\n\n    this.subscription.add(\n      this.customerSelectionForm.controls.searchTerm.valueChanges\n        .pipe(debounceTime(300))\n        .subscribe((searchTermValue) => {\n          this.handleSearchTerm(searchTermValue);\n        })\n    );\n  }\n\n  private handleSearchTerm(searchTermValue: string) {\n    if (\n      Boolean(this.selectedCustomer) &&\n      searchTermValue !== this.selectedCustomer.name\n    ) {\n      this.selectedCustomer = undefined;\n    }\n    if (Boolean(this.selectedCustomer)) {\n      return;\n    }\n    this.asmService.customerSearchReset();\n    if (searchTermValue.trim().length >= 3) {\n      this.asmService.customerSearch({\n        query: searchTermValue,\n        pageSize: this.config.asm.customerSearch.maxResults,\n      });\n    }\n  }\n\n  selectCustomerFromList(customer: User) {\n    this.selectedCustomer = customer;\n    this.customerSelectionForm.controls.searchTerm.setValue(\n      this.selectedCustomer.name\n    );\n    this.asmService.customerSearchReset();\n  }\n\n  onSubmit(): void {\n    if (this.customerSelectionForm.valid && Boolean(this.selectedCustomer)) {\n      this.submitEvent.emit({ customerId: this.selectedCustomer.customerId });\n    } else {\n      this.customerSelectionForm.markAllAsTouched();\n    }\n  }\n\n  onDocumentClick(event) {\n    if (Boolean(this.resultList)) {\n      if (\n        this.resultList.nativeElement.contains(event.target) ||\n        this.searchTerm.nativeElement.contains(event.target)\n      ) {\n        return;\n      } else {\n        this.asmService.customerSearchReset();\n      }\n    }\n  }\n\n  closeResults() {\n    this.asmService.customerSearchReset();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.asmService.customerSearchReset();\n  }\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\n\nexport const defaultAsmLayoutConfig: LayoutConfig = {\n  launch: {\n    ASM: {\n      outlet: 'cx-storefront',\n      component: AsmMainUiComponent,\n    },\n  },\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AsmModule as AsmCoreModule,\n  I18nModule,\n  provideConfig,\n} from '@spartacus/core';\nimport { FormErrorsModule } from '../../shared/index';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmMainUiComponent } from './asm-main-ui/asm-main-ui.component';\nimport { AsmSessionTimerComponent } from './asm-session-timer/asm-session-timer.component';\nimport { FormatTimerPipe } from './asm-session-timer/format-timer.pipe';\nimport { AsmToggleUiComponent } from './asm-toggle-ui/asm-toggle-ui.component';\nimport { CSAgentLoginFormComponent } from './csagent-login-form/csagent-login-form.component';\nimport { CustomerEmulationComponent } from './customer-emulation/customer-emulation.component';\nimport { CustomerSelectionComponent } from './customer-selection/customer-selection.component';\nimport { defaultAsmLayoutConfig } from './default-asm-layout.config';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    AsmCoreModule.forRoot(),\n    AsmLoaderModule,\n    FormErrorsModule,\n  ],\n  declarations: [\n    AsmMainUiComponent,\n    CSAgentLoginFormComponent,\n    CustomerSelectionComponent,\n    AsmSessionTimerComponent,\n    FormatTimerPipe,\n    CustomerEmulationComponent,\n    AsmToggleUiComponent,\n  ],\n  providers: [provideConfig(defaultAsmLayoutConfig)],\n  entryComponents: [AsmMainUiComponent],\n})\nexport class AsmModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductScope,\n  ProductService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CurrentProductService {\n  constructor(\n    private routingService: RoutingService,\n    private productService: ProductService\n  ) {}\n\n  protected readonly DEFAULT_PRODUCT_SCOPE = ProductScope.DETAILS;\n\n  /**\n   * Will emit current product or null, if there is no current product (i.e. we are not on PDP)\n   *\n   * @param scopes\n   */\n  getProduct(\n    scopes?: (ProductScope | string)[] | ProductScope | string\n  ): Observable<Product | null> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.state.params['productCode']),\n      switchMap((productCode: string) => {\n        return productCode\n          ? this.productService.get(\n              productCode,\n              scopes || this.DEFAULT_PRODUCT_SCOPE\n            )\n          : of(null);\n      }),\n      filter((x) => x !== undefined),\n      distinctUntilChanged()\n    );\n  }\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  Cart,\n  ActiveCartService,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-added-to-cart-dialog',\n  templateUrl: './added-to-cart-dialog.component.html',\n})\nexport class AddedToCartDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  entry$: Observable<OrderEntry>;\n  cart$: Observable<Cart>;\n  loaded$: Observable<boolean>;\n  increment: boolean;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  quantity = 0;\n  modalIsOpen = false;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  form: FormGroup = new FormGroup({});\n\n  private quantityControl$: Observable<FormControl>;\n\n  constructor(\n    protected modalService: ModalService,\n    protected cartService: ActiveCartService,\n    protected promotionService: PromotionService\n  ) {}\n  /**\n   * Returns an observable formControl with the quantity of the cartEntry,\n   * but also updates the entry in case of a changed value.\n   * The quantity can be set to zero in order to remove the entry.\n   */\n  getQuantityControl(): Observable<FormControl> {\n    if (!this.quantityControl$) {\n      this.quantityControl$ = this.entry$.pipe(\n        filter((e) => !!e),\n        map((entry) => this.getFormControl(entry)),\n        switchMap(() =>\n          this.form.valueChanges.pipe(\n            // tslint:disable-next-line:deprecation\n            startWith(null),\n            tap((valueChange) => {\n              if (valueChange) {\n                this.cartService.updateEntry(\n                  valueChange.entryNumber,\n                  valueChange.quantity\n                );\n                if (valueChange.quantity === 0) {\n                  this.dismissModal('Removed');\n                }\n              } else {\n                this.form.markAsPristine();\n              }\n            })\n          )\n        ),\n        map(() => <FormControl>this.form.get('quantity'))\n      );\n    }\n    return this.quantityControl$;\n  }\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  private getFormControl(entry: OrderEntry): FormControl {\n    if (!this.form.get('quantity')) {\n      const quantity = new FormControl(entry.quantity, { updateOn: 'blur' });\n      this.form.addControl('quantity', quantity);\n\n      const entryNumber = new FormControl(entry.entryNumber);\n      this.form.addControl('entryNumber', entryNumber);\n    }\n    return <FormControl>this.form.get('quantity');\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActiveCartService, OrderEntry, Product } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalRef } from '../../../shared/components/modal/modal-ref';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { CurrentProductService } from '../../product/current-product.service';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@Component({\n  selector: 'cx-add-to-cart',\n  templateUrl: './add-to-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToCartComponent implements OnInit, OnDestroy {\n  @Input() productCode: string;\n  @Input() showQuantity = true;\n\n  /**\n   * As long as we do not support #5026, we require product input, as we need\n   *  a reference to the product model to fetch the stock data.\n   */\n  @Input() product: Product;\n\n  maxQuantity: number;\n  modalRef: ModalRef;\n\n  hasStock = false;\n  quantity = 1;\n  increment = false;\n  cartEntry$: Observable<OrderEntry>;\n\n  subscription: Subscription;\n\n  addToCartForm = new FormGroup({\n    quantity: new FormControl(1),\n  });\n\n  constructor(\n    protected modalService: ModalService,\n    protected currentProductService: CurrentProductService,\n    private cd: ChangeDetectorRef,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.product) {\n      this.productCode = this.product.code;\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      this.setStockInfo(this.product);\n      this.cd.markForCheck();\n    } else if (this.productCode) {\n      this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n      // force hasStock and quantity for the time being, as we do not have more info:\n      this.quantity = 1;\n      this.hasStock = true;\n      this.cd.markForCheck();\n    } else {\n      this.subscription = this.currentProductService\n        .getProduct()\n        .pipe(filter(Boolean))\n        .subscribe((product: Product) => {\n          this.productCode = product.code;\n          this.setStockInfo(product);\n          this.cartEntry$ = this.activeCartService.getEntry(this.productCode);\n          this.cd.markForCheck();\n        });\n    }\n  }\n\n  private setStockInfo(product: Product): void {\n    this.quantity = 1;\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n    if (this.hasStock && product.stock.stockLevel) {\n      this.maxQuantity = product.stock.stockLevel;\n    }\n  }\n\n  updateCount(value: number): void {\n    this.quantity = value;\n  }\n\n  addToCart() {\n    const quantity = this.addToCartForm.get('quantity').value;\n    if (!this.productCode || quantity <= 0) {\n      return;\n    }\n    // check item is already present in the cart\n    // so modal will have proper header text displayed\n    this.activeCartService\n      .getEntry(this.productCode)\n      .subscribe((entry) => {\n        if (entry) {\n          this.increment = true;\n        }\n        this.openModal();\n        this.activeCartService.addEntry(this.productCode, quantity);\n        this.increment = false;\n      })\n      .unsubscribe();\n  }\n\n  private openModal() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(AddedToCartDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.entry$ = this.cartEntry$;\n    modalInstance.cart$ = this.activeCartService.getActive();\n    modalInstance.loaded$ = this.activeCartService.isStable();\n    modalInstance.quantity = this.quantity;\n    modalInstance.increment = this.increment;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Promotion } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-promotions',\n  templateUrl: './promotions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PromotionsComponent {\n  @Input()\n  promotions: Promotion[];\n\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PromotionsComponent } from './promotions.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PromotionsComponent],\n  exports: [PromotionsComponent],\n})\nexport class PromotionsModule {}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Voucher, CartVoucherService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-applied-coupons',\n  templateUrl: './applied-coupons.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppliedCouponsComponent {\n  @Input()\n  vouchers: Voucher[];\n  @Input()\n  cartIsLoading = false;\n  @Input()\n  isReadOnly = false;\n\n  iconTypes = ICON_TYPE;\n\n  constructor(private cartVoucherService: CartVoucherService) {}\n\n  public get sortedVouchers(): Voucher[] {\n    this.vouchers = this.vouchers || [];\n    return this.vouchers.slice().sort((a, b) => {\n      return a.code.localeCompare(b.code);\n    });\n  }\n\n  removeVoucher(voucherId: string) {\n    this.cartVoucherService.removeVoucher(voucherId);\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveCartService,\n  Cart,\n  CartVoucherService,\n  CustomerCoupon,\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-coupon',\n  templateUrl: './cart-coupon.component.html',\n})\nexport class CartCouponComponent implements OnInit, OnDestroy {\n  MAX_CUSTOMER_COUPON_PAGE = 100;\n  couponForm: FormGroup;\n  cartIsLoading$: Observable<boolean>;\n  cart$: Observable<Cart>;\n  cartId: string;\n  applicableCoupons: CustomerCoupon[];\n\n  private ignoreCloseEvent = false;\n\n  private subscription = new Subscription();\n\n  couponBoxIsActive = false;\n\n  constructor(\n    protected cartVoucherService: CartVoucherService,\n    protected formBuilder: FormBuilder,\n    protected customerCouponService: CustomerCouponService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    if (this.customerCouponService) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n    }\n\n    this.cart$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.getActiveCartId(),\n      this.customerCouponService.getCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      ),\n    ]).pipe(\n      tap(\n        ([cart, activeCardId, customerCoupons]: [\n          Cart,\n          string,\n          CustomerCouponSearchResult\n        ]) => {\n          this.cartId = activeCardId;\n          this.getApplicableCustomerCoupons(cart, customerCoupons.coupons);\n        }\n      ),\n      map(([cart]: [Cart, string, CustomerCouponSearchResult]) => cart)\n    );\n\n    this.cartIsLoading$ = this.activeCartService\n      .isStable()\n      .pipe(map((loaded) => !loaded));\n\n    this.cartVoucherService.resetAddVoucherProcessingState();\n\n    this.couponForm = this.formBuilder.group({\n      couponCode: ['', [Validators.required]],\n    });\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService\n        .getAddVoucherResultSuccess()\n        .subscribe((success) => {\n          this.onSuccess(success);\n        })\n    );\n\n    // TODO(#7241): Replace process subscriptions with event listeners and drop process for ADD_VOUCHER\n    this.subscription.add(\n      this.cartVoucherService.getAddVoucherResultError().subscribe((error) => {\n        this.onError(error);\n      })\n    );\n  }\n\n  protected onError(error: boolean) {\n    if (error) {\n      this.customerCouponService.loadCustomerCoupons(\n        this.MAX_CUSTOMER_COUPON_PAGE\n      );\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  onSuccess(success: boolean) {\n    if (success) {\n      this.couponForm.reset();\n      this.cartVoucherService.resetAddVoucherProcessingState();\n    }\n  }\n\n  protected getApplicableCustomerCoupons(\n    cart: Cart,\n    coupons: CustomerCoupon[]\n  ): void {\n    this.applicableCoupons = coupons || [];\n    if (cart.appliedVouchers) {\n      cart.appliedVouchers.forEach((appliedVoucher) => {\n        this.applicableCoupons = this.applicableCoupons.filter(\n          (coupon) => coupon.couponId !== appliedVoucher.code\n        );\n      });\n    }\n  }\n\n  applyVoucher(): void {\n    if (this.couponForm.valid) {\n      this.cartVoucherService.addVoucher(\n        this.couponForm.value.couponCode,\n        this.cartId\n      );\n    } else {\n      this.couponForm.markAllAsTouched();\n    }\n  }\n\n  applyCustomerCoupon(couponId: string): void {\n    this.cartVoucherService.addVoucher(couponId, this.cartId);\n    this.couponBoxIsActive = false;\n  }\n\n  close(event: UIEvent): void {\n    if (!this.ignoreCloseEvent) {\n      this.couponBoxIsActive = false;\n      if (event && event.target) {\n        (<HTMLElement>event.target).blur();\n      }\n    }\n    this.ignoreCloseEvent = false;\n  }\n\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.cartVoucherService.resetAddVoucherProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { AppliedCouponsComponent } from './applied-coupons/applied-coupons.component';\nimport { CartCouponComponent } from './cart-coupon.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  declarations: [CartCouponComponent, AppliedCouponsComponent],\n  exports: [CartCouponComponent, AppliedCouponsComponent],\n  imports: [\n    CommonModule,\n    NgSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n    I18nModule,\n    IconModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartApplyCouponComponent: {\n          component: CartCouponComponent,\n        },\n      },\n    }),\n  ],\n\n  entryComponents: [CartCouponComponent],\n})\nexport class CartCouponModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport {\n  ActiveCartService,\n  ConsignmentEntry,\n  PromotionLocation,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport {\n  CartItemComponentOptions,\n  Item,\n} from '../cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-item-list',\n  templateUrl: './cart-item-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemListComponent {\n  @Input() readonly = false;\n\n  @Input() hasHeader = true;\n\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  private _items: Item[] = [];\n  form: FormGroup;\n\n  @Input('items')\n  // TODO: currently we're getting a new array of items if the cart changes.\n  // pretty annoying as it forces a repaint on the screen,\n  // which is noticable in the UI.\n  set items(items: Item[]) {\n    this.resolveItems(items);\n    this.createForm();\n  }\n  get items(): Item[] {\n    return this._items;\n  }\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  @Input('cartIsLoading') set setLoading(value: boolean) {\n    if (!this.readonly) {\n      // Whenver the cart is loading, we disable the complete form\n      // to avoid any user interaction with the cart.\n      value\n        ? this.form.disable({ emitEvent: false })\n        : this.form.enable({ emitEvent: false });\n    }\n  }\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  /**\n   * The items we're getting form the input do not have a consistent model.\n   * In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.\n   */\n  private resolveItems(items: Item[]): void {\n    if (items.every((item) => item.hasOwnProperty('orderEntry'))) {\n      this._items = items.map((consignmentEntry) => {\n        const entry = Object.assign(\n          {},\n          (consignmentEntry as ConsignmentEntry).orderEntry\n        );\n        entry.quantity = consignmentEntry.quantity;\n        return entry;\n      });\n    } else {\n      this._items = items;\n    }\n  }\n\n  private createForm(): void {\n    this.form = new FormGroup({});\n    this._items.forEach((item) => {\n      const { code } = item.product;\n      const group = new FormGroup({\n        entryNumber: new FormControl((<any>item).entryNumber),\n        quantity: new FormControl(item.quantity, { updateOn: 'blur' }),\n      });\n      if (!item.updateable || this.readonly) {\n        group.disable();\n      }\n      this.form.addControl(code, group);\n    });\n  }\n\n  removeEntry(item: Item): void {\n    if (this.selectiveCartService && this.options.isSaveForLater) {\n      this.selectiveCartService.removeEntry(item);\n    } else {\n      this.activeCartService.removeEntry(item);\n    }\n    delete this.form.controls[item.product.code];\n  }\n\n  getControl(item: Item): Observable<FormGroup> {\n    return this.form.get(item.product.code).valueChanges.pipe(\n      // tslint:disable-next-line:deprecation\n      startWith(null),\n      map((value) => {\n        if (value && this.selectiveCartService && this.options.isSaveForLater) {\n          this.selectiveCartService.updateEntry(\n            value.entryNumber,\n            value.quantity\n          );\n        } else if (value) {\n          this.activeCartService.updateEntry(value.entryNumber, value.quantity);\n        }\n      }),\n      map(() => <FormGroup>this.form.get(item.product.code))\n    );\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { PromotionLocation, PromotionResult } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\nexport interface Item {\n  product?: any;\n  quantity?: any;\n  basePrice?: any;\n  totalPrice?: any;\n  updateable?: boolean;\n}\n\nexport interface CartItemComponentOptions {\n  isSaveForLater?: boolean;\n  optionalBtn?: any;\n}\n\n@Component({\n  selector: 'cx-cart-item',\n  templateUrl: './cart-item.component.html',\n})\nexport class CartItemComponent implements OnInit {\n  @Input() compact = false;\n  @Input() item: Item;\n  @Input() readonly = false;\n  @Input() quantityControl: FormControl;\n\n  @Output() view = new EventEmitter<any>();\n\n  @Input() promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  // TODO: evaluate whether this is generic enough\n  @Input() options: CartItemComponentOptions = {\n    isSaveForLater: false,\n    optionalBtn: null,\n  };\n\n  appliedProductPromotions$: Observable<PromotionResult[]>;\n\n  constructor(protected promotionService: PromotionService) {}\n\n  ngOnInit() {\n    this.appliedProductPromotions$ = this.promotionService.getProductPromotionForEntry(\n      this.item,\n      this.promotionLocation\n    );\n  }\n\n  isProductOutOfStock(product: any) {\n    // TODO Move stocklevelstatuses across the app to an enum\n    return (\n      product &&\n      product.stock &&\n      product.stock.stockLevelStatus === 'outOfStock'\n    );\n  }\n\n  removeItem() {\n    this.quantityControl.setValue(0);\n    this.quantityControl.markAsDirty();\n  }\n\n  viewItem() {\n    this.view.emit();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Cart } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-summary',\n  templateUrl: './order-summary.component.html',\n})\nexport class OrderSummaryComponent {\n  @Input()\n  cart: Cart;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FeaturesConfigModule, I18nModule, UrlModule } from '@spartacus/core';\nimport { ItemCounterModule } from '../../../shared/components/item-counter/item-counter.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartItemListComponent } from './cart-item-list/cart-item-list.component';\nimport { CartItemComponent } from './cart-item/cart-item.component';\nimport { OrderSummaryComponent } from './order-summary/order-summary.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    CartCouponModule,\n    ReactiveFormsModule,\n    UrlModule,\n    NgbModule,\n    PromotionsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n  ],\n  declarations: [\n    CartItemComponent,\n    OrderSummaryComponent,\n    CartItemListComponent,\n  ],\n  exports: [CartItemComponent, CartItemListComponent, OrderSummaryComponent],\n})\nexport class CartSharedModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ItemCounterModule, SpinnerModule } from '../../../shared/index';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from './../cart-shared/cart-shared.module';\nimport { AddToCartComponent } from './add-to-cart.component';\nimport { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    CartSharedModule,\n    RouterModule,\n    SpinnerModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    UrlModule,\n    IconModule,\n    I18nModule,\n    ItemCounterModule,\n    KeyboardFocusModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductAddToCartComponent: {\n          component: AddToCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToCartComponent, AddedToCartDialogComponent],\n  entryComponents: [AddToCartComponent, AddedToCartDialogComponent],\n  exports: [AddToCartComponent, AddedToCartDialogComponent],\n})\nexport class AddToCartModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  AuthService,\n  Cart,\n  OrderEntry,\n  PromotionLocation,\n  PromotionResult,\n  RoutingService,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { PromotionService } from '../../../shared/services/promotion/promotion.service';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-cart-details',\n  templateUrl: './cart-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartDetailsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  loggedIn = false;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n  promotions$: Observable<PromotionResult[]>;\n  selectiveCartEnabled: boolean;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected promotionService: PromotionService,\n    protected selectiveCartService: SelectiveCartService,\n    protected authService: AuthService,\n    protected routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.promotions$ = this.promotionService.getOrderPromotionsFromCart();\n\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n\n    this.selectiveCartEnabled = this.selectiveCartService.isEnabled();\n\n    this.cartLoaded$ = combineLatest([\n      this.activeCartService.isStable(),\n      this.selectiveCartEnabled\n        ? this.selectiveCartService.getLoaded()\n        : of(false),\n      this.authService.isUserLoggedIn(),\n    ]).pipe(\n      tap(([, , loggedIn]) => (this.loggedIn = loggedIn)),\n      map(([cartLoaded, sflLoaded, loggedIn]) =>\n        loggedIn && this.selectiveCartEnabled\n          ? cartLoaded && sflLoaded\n          : cartLoaded\n      )\n    );\n\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  saveForLater(item: Item) {\n    if (this.loggedIn) {\n      this.activeCartService.removeEntry(item);\n      this.selectiveCartService.addEntry(item.product.code, item.quantity);\n    } else {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PromotionsModule } from '../../checkout/components/promotions/promotions.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartDetailsComponent } from './cart-details.component';\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CommonModule,\n    CartCouponModule,\n    RouterModule,\n    UrlModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartComponent: {\n          component: CartDetailsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartDetailsComponent],\n  exports: [CartDetailsComponent],\n  entryComponents: [CartDetailsComponent],\n})\nexport class CartDetailsModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { ActiveCartService, Cart, RoutingService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          this.routingService.go({ cxRoute: 'home' });\n          return false;\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActiveCartService, Cart, SelectiveCartService } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PageLayoutHandler } from '../../cms-structure/page/page-layout/page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageLayoutHandler implements PageLayoutHandler {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  handle(\n    slots$: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string\n  ) {\n    if (pageTemplate === 'CartPageTemplate' && !section) {\n      return combineLatest([\n        slots$,\n        this.activeCartService.getActive(),\n        this.selectiveCartService.isEnabled()\n          ? this.selectiveCartService.getCart()\n          : of({} as Cart),\n        this.activeCartService.getLoading(),\n      ]).pipe(\n        map(([slots, cart, selectiveCart, loadingCart]) => {\n          const exclude = (arr, args) =>\n            arr.filter((item) => args.every((arg) => arg !== item));\n          return Object.keys(cart).length === 0 && loadingCart\n            ? exclude(slots, [\n                'TopContent',\n                'CenterRightContentSlot',\n                'EmptyCartMiddleContent',\n              ])\n            : cart.totalItems\n            ? exclude(slots, ['EmptyCartMiddleContent'])\n            : selectiveCart.totalItems\n            ? exclude(slots, [\n                'EmptyCartMiddleContent',\n                'CenterRightContentSlot',\n              ])\n            : exclude(slots, ['TopContent', 'CenterRightContentSlot']);\n        })\n      );\n    }\n    return slots$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActiveCartService, Cart, OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cart-totals',\n  templateUrl: './cart-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartTotalsComponent implements OnInit {\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n\n  constructor(protected activeCartService: ActiveCartService) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartCouponModule } from '../cart-coupon/cart-coupon.module';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { CartTotalsComponent } from './cart-totals.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    CartSharedModule,\n    I18nModule,\n    CartCouponModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CartTotalsComponent: {\n          component: CartTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CartTotalsComponent],\n  exports: [CartTotalsComponent],\n  entryComponents: [CartTotalsComponent],\n})\nexport class CartTotalsModule {}\n","import { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\nexport const PAGE_LAYOUT_HANDLER = new InjectionToken<PageLayoutHandler[]>(\n  'PageLayoutHandler'\n);\n\nexport interface PageLayoutHandler {\n  handle(\n    slots: Observable<string[]>,\n    pageTemplate?: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): Observable<string[]>;\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-mini-cart',\n  templateUrl: './mini-cart.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MiniCartComponent {\n  iconTypes = ICON_TYPE;\n\n  quantity$: Observable<number> = this.activeCartService.getActive().pipe(\n    startWith({ deliveryItemsQuantity: 0 }),\n    map((cart) => cart.deliveryItemsQuantity || 0)\n  );\n\n  total$: Observable<string> = this.activeCartService.getActive().pipe(\n    filter((cart) => !!cart.totalPrice),\n    map((cart) => cart.totalPrice.formattedValue)\n  );\n\n  constructor(protected activeCartService: ActiveCartService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../../cms-components/misc/icon/icon.module';\nimport { MiniCartComponent } from './mini-cart.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, IconModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MiniCartComponent: {\n          component: MiniCartComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [MiniCartComponent],\n  exports: [MiniCartComponent],\n  entryComponents: [MiniCartComponent],\n})\nexport class MiniCartModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  AuthService,\n  OrderEntry,\n  Product,\n  WishListService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';\nimport { CurrentProductService } from '../../product/current-product.service';\n\n@Component({\n  selector: 'cx-add-to-wishlist',\n  templateUrl: './add-to-wish-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddToWishListComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct().pipe(\n    filter((product) => Boolean(product)),\n    tap((product) => this.setStockInfo(product))\n  );\n\n  wishListEntries$: Observable<\n    OrderEntry[]\n  > = this.wishListService.getWishList().pipe(\n    filter((wishlist) => Boolean(wishlist)),\n    map((wishList) => wishList.entries)\n  );\n\n  userLoggedIn$: Observable<boolean> = this.authService.isUserLoggedIn();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  hasStock = false;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    protected wishListService: WishListService,\n    protected currentProductService: CurrentProductService,\n    protected authService: AuthService\n  ) {}\n\n  add(product: Product): void {\n    this.wishListService.addEntry(product.code);\n  }\n\n  remove(entry: OrderEntry): void {\n    this.wishListService.removeEntry(entry);\n  }\n\n  getProductInWishList(product: Product, entries: OrderEntry[]): OrderEntry {\n    const item = entries.find((entry) => entry.product.code === product.code);\n    return item;\n  }\n\n  private setStockInfo(product: Product): void {\n    this.hasStock =\n      product.stock && product.stock.stockLevelStatus !== 'outOfStock';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { AddToWishListComponent } from './add-to-wish-list.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, IconModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AddToWishListComponent: {\n          component: AddToWishListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [AddToWishListComponent],\n  entryComponents: [AddToWishListComponent],\n  exports: [AddToWishListComponent],\n})\nexport class AddToWishListModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  CmsParagraphComponent,\n  CmsService,\n  OrderEntry,\n  SelectiveCartService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Item } from '../cart-shared/cart-item/cart-item.component';\n\n@Component({\n  selector: 'cx-save-for-later',\n  templateUrl: './save-for-later.component.html',\n})\nexport class SaveForLaterComponent implements OnInit {\n  saveForLater$: Observable<Cart>;\n  cart$: Observable<Cart>;\n  entries$: Observable<OrderEntry[]>;\n  cartLoaded$: Observable<boolean>;\n  data$: Observable<CmsParagraphComponent>;\n  isCartEmpty$: Observable<boolean>;\n\n  constructor(\n    protected cmsService: CmsService,\n    protected cartService: ActiveCartService,\n    protected selectiveCartService: SelectiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isCartEmpty$ = this.cartService\n      .getActive()\n      .pipe(map((cart) => !(cart && cart.totalItems && cart.totalItems > 0)));\n    this.saveForLater$ = this.selectiveCartService.getCart();\n    this.entries$ = this.selectiveCartService\n      .getEntries()\n      .pipe(filter((entries) => entries.length > 0));\n    this.cartLoaded$ = combineLatest([\n      this.cartService.isStable(),\n      this.selectiveCartService.getLoaded(),\n    ]).pipe(map(([cartLoaded, sflLoaded]) => cartLoaded && sflLoaded));\n    this.data$ = this.cmsService.getComponentData(\n      'EmptyCartParagraphComponent'\n    );\n  }\n\n  moveToCart(item: Item) {\n    this.selectiveCartService.removeEntry(item);\n    this.cartService.addEntry(item.product.code, item.quantity);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../cart-shared/cart-shared.module';\nimport { SaveForLaterComponent } from './save-for-later.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        SaveForLaterComponent: {\n          component: SaveForLaterComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SaveForLaterComponent],\n  exports: [SaveForLaterComponent],\n  entryComponents: [SaveForLaterComponent],\n})\nexport class SaveForLaterModule {}\n","import { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { CartModule } from '@spartacus/core';\nimport { PAGE_LAYOUT_HANDLER } from '../../cms-structure/page/page-layout/page-layout-handler';\nimport { AddToCartModule } from './add-to-cart/add-to-cart.module';\nimport { CartDetailsModule } from './cart-details/cart-details.module';\nimport { CartPageLayoutHandler } from './cart-page-layout-handler';\nimport { CartSharedModule } from './cart-shared/cart-shared.module';\nimport { CartTotalsModule } from './cart-totals/cart-totals.module';\nimport { MiniCartModule } from './mini-cart/mini-cart.module';\nimport { AddToWishListModule } from './add-to-wishlist/add-to-wish-list.module';\nimport { SaveForLaterModule } from './save-for-later/save-for-later.module';\n@NgModule({\n  imports: [\n    NgbModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    SaveForLaterModule,\n  ],\n  exports: [\n    AddToWishListModule,\n    CartDetailsModule,\n    CartTotalsModule,\n    CartSharedModule,\n    AddToCartModule,\n    MiniCartModule,\n    CartModule,\n    SaveForLaterModule,\n  ],\n  declarations: [],\n  providers: [\n    {\n      provide: PAGE_LAYOUT_HANDLER,\n      useExisting: CartPageLayoutHandler,\n      multi: true,\n    },\n  ],\n})\nexport class CartComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SkipLinkConfig {\n  skipLinks?: SkipLink[];\n}\n\nexport abstract class SkipLink {\n  key: string;\n  i18nKey: string;\n  target?: HTMLElement;\n  position?: SkipLinkScrollPosition;\n}\n\nexport enum SkipLinkScrollPosition {\n  BEFORE = 'BEFORE',\n  AFTER = 'AFTER',\n}\n","import { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfig, DeliveryModePreferences } from './checkout-config';\n\nexport const defaultCheckoutConfig: CheckoutConfig = {\n  checkout: {\n    steps: [\n      {\n        id: 'shippingAddress',\n        name: 'checkoutProgress.shippingAddress',\n        routeName: 'checkoutShippingAddress',\n        type: [CheckoutStepType.SHIPPING_ADDRESS],\n      },\n      {\n        id: 'deliveryMode',\n        name: 'checkoutProgress.deliveryMode',\n        routeName: 'checkoutDeliveryMode',\n        type: [CheckoutStepType.DELIVERY_MODE],\n      },\n      {\n        id: 'paymentDetails',\n        name: 'checkoutProgress.paymentDetails',\n        routeName: 'checkoutPaymentDetails',\n        type: [CheckoutStepType.PAYMENT_DETAILS],\n      },\n      {\n        id: 'reviewOrder',\n        name: 'checkoutProgress.reviewOrder',\n        routeName: 'checkoutReviewOrder',\n        type: [CheckoutStepType.REVIEW_ORDER],\n      },\n    ],\n    express: false,\n    defaultDeliveryMode: [DeliveryModePreferences.FREE],\n    guest: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeliveryMode, RoutingConfigService } from '@spartacus/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '../config/checkout-config';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  steps: CheckoutStep[] = this.checkoutConfig.checkout.steps;\n  private express: boolean = this.checkoutConfig.checkout.express;\n  private guest: boolean = this.checkoutConfig.checkout.guest;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout.defaultDeliveryMode || [];\n\n  constructor(\n    private checkoutConfig: CheckoutConfig,\n    private routingConfigService: RoutingConfigService\n  ) {}\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep {\n    return this.steps[this.getCheckoutStepIndex('type', currentStepType)];\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string {\n    return this.getCheckoutStep(currentStepType).routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.steps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex + 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex + 1].routeName)\n      : null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    return stepIndex >= 0 && this.steps[stepIndex - 1]\n      ? this.getStepUrlFromStepRoute(this.steps[stepIndex - 1].routeName)\n      : null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl: string = this.getStepUrlFromActivatedRoute(\n      activatedRoute\n    );\n\n    let stepIndex: number;\n    let index = 0;\n    for (const step of this.steps) {\n      if (\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n      ) {\n        stepIndex = index;\n      } else {\n        index++;\n      }\n    }\n\n    return stepIndex >= 0 ? stepIndex : null;\n  }\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n      return 1;\n    } else if (\n      deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n    ) {\n      return -1;\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string {\n    return this.routingConfigService.getRouteConfig(stepRoute).paths[0];\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.steps.findIndex((step: CheckoutStep) => step[key].includes(value))\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  RoutingService,\n  User,\n  UserToken,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return combineLatest([\n      this.authService.getUserToken(),\n      this.activeCartService.getAssignedUser(),\n    ]).pipe(\n      map(([token, user]: [UserToken, User]) => {\n        if (!token.access_token) {\n          if (this.activeCartService.isGuestCart()) {\n            return Boolean(user);\n          }\n          if (this.checkoutConfigService.isGuestCheckout()) {\n            this.routingService.go({ cxRoute: 'login' }, { forced: true });\n          } else {\n            this.routingService.go({ cxRoute: 'login' });\n          }\n          this.authRedirectService.reportAuthGuard();\n        }\n        return !!token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  OCC_USER_ID_ANONYMOUS,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = this.activeCartService.getActive().pipe(\n      map((cartData) => {\n        if (\n          (cartData.user && cartData.user.uid === OCC_USER_ID_ANONYMOUS) ||\n          this.activeCartService.isGuestCart()\n        ) {\n          return cartData.guid;\n        }\n        return cartData.code;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { combineLatest, of, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap, debounceTime } from 'rxjs/operators';\n\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n  UserPaymentService,\n  PaymentDetails,\n  DeliveryMode,\n  CheckoutPaymentService,\n  StateUtils,\n} from '@spartacus/core';\nimport { CheckoutConfigService } from './checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                    !setDeliveryAddressProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, paymentMethodsLoadedSuccess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, success]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([payments, , setPaymentDetailsProcess]: [\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    (setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                    !setPaymentDetailsProcessState.loading\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => supportedDeliveryModeStatus.success\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode = this.checkoutConfigService.getPreferredDeliveryMode(\n                      deliveryModes\n                    );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(\n                        ([deliveryMode, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (\n                            deliveryMode &&\n                            !(\n                              deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error ||\n                              deliveryModeLoadingStatus.loading\n                            )\n                          ) {\n                            this.checkoutDeliveryService.setDeliveryMode(\n                              deliveryMode\n                            );\n                          }\n                        }\n                      ),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            (deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                            !deliveryModeLoadingStatus.loading\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      )\n    );\n  }\n\n  protected resetCheckoutProcesses() {\n    this.checkoutDeliveryService.resetSetDeliveryAddressProcess();\n    this.checkoutPaymentService.resetSetPaymentDetailsProcess();\n    this.checkoutDeliveryService.resetSetDeliveryModeProcess();\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.resetCheckoutProcesses();\n    return combineLatest([this.deliveryModeSet$, this.paymentMethodSet$]).pipe(\n      map(([deliveryModeSet, paymentMethodSet]) =>\n        Boolean(deliveryModeSet && paymentMethodSet)\n      )\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutConfigService.getFirstCheckoutStepRoute()\n        ).paths[0]\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          return expressCheckoutPossible\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(\n                    this.checkoutConfigService.getCheckoutStepRoute(\n                      CheckoutStepType.REVIEW_ORDER\n                    )\n                  ).paths[0]\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  templateUrl: './checkout-orchestrator.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  entryComponents: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  entryComponents: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n})\nexport class CheckoutProgressMobileBottomComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit() {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  entryComponents: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  ActiveCartService,\n  Cart,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutConfig } from '../../../config/checkout-config';\nimport { CheckoutStep } from '../../../model/checkout-step.model';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  cart$: Observable<Cart>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.cart$ = this.activeCartService.getActive();\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  entryComponents: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { RoutingService, RoutingConfigService } from '@spartacus/core';\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { CheckoutConfig } from '../../config/checkout-config';\nimport { CheckoutStep } from '../../model/checkout-step.model';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent implements OnInit {\n  constructor(\n    protected config: CheckoutConfig,\n    protected routingService: RoutingService,\n    protected routingConfigService: RoutingConfigService\n  ) {}\n\n  steps: Array<CheckoutStep>;\n  routerState$: Observable<any>;\n  activeStepIndex: number;\n  activeStepUrl: string;\n\n  ngOnInit(): void {\n    this.steps = this.config.checkout.steps;\n    this.routerState$ = this.routingService.getRouterState().pipe(\n      tap((router) => {\n        this.activeStepUrl = router.state.context.id;\n\n        this.steps.forEach((step, index) => {\n          const routeUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths[0]\n          }`;\n          if (routeUrl === this.activeStepUrl) {\n            this.activeStepIndex = index;\n          }\n        });\n      })\n    );\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { defaultCheckoutConfig } from '../../config/default-checkout-config';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent],\n  entryComponents: [CheckoutProgressComponent],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(defaultCheckoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { Address, RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShippingAddressSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.SHIPPING_ADDRESS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.SHIPPING_ADDRESS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getDeliveryAddress()\n      .pipe(\n        map((deliveryAddress: Address) =>\n          deliveryAddress && Object.keys(deliveryAddress).length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryService,\n  DeliveryMode,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  currentDeliveryModeId: string;\n  checkoutStepUrlNext: string;\n  checkoutStepUrlPrevious: string;\n  private allowRedirect = false;\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryService,\n    private routingService: RoutingService,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService.getSupportedDeliveryModes();\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map((deliveryMode: DeliveryMode) =>\n                deliveryMode && deliveryMode.code ? deliveryMode.code : null\n              )\n            )\n        )\n      )\n      .subscribe(([deliveryModes, code]: [DeliveryMode[], string]) => {\n        if (!code && deliveryModes && deliveryModes.length) {\n          code = this.checkoutConfigService.getPreferredDeliveryMode(\n            deliveryModes\n          );\n        }\n        if (\n          this.allowRedirect &&\n          !!code &&\n          code === this.currentDeliveryModeId\n        ) {\n          this.routingService.go(this.checkoutStepUrlNext);\n        }\n        if (code) {\n          this.mode.controls['deliveryModeId'].setValue(code);\n          if (code !== this.currentDeliveryModeId) {\n            this.checkoutDeliveryService.setDeliveryMode(code);\n          }\n        }\n        this.currentDeliveryModeId = code;\n      });\n  }\n\n  changeMode(code: string): void {\n    if (code !== this.currentDeliveryModeId) {\n      this.checkoutDeliveryService.setDeliveryMode(code);\n      this.currentDeliveryModeId = code;\n    }\n  }\n\n  next(): void {\n    this.allowRedirect = true;\n    if (this.mode.valid && this.mode.value) {\n      if (!this.currentDeliveryModeId) {\n        this.currentDeliveryModeId = this.mode.value.deliveryModeId;\n      }\n      this.checkoutDeliveryService.setDeliveryMode(this.currentDeliveryModeId);\n    }\n  }\n\n  back(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  entryComponents: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeliveryModeSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.DELIVERY_MODE\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.DELIVERY_MODE} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { Address } from '@spartacus/core';\nimport { ModalService } from '../../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../misc/icon/index';\n\n@Component({\n  selector: 'cx-suggested-addresses-dialog',\n  templateUrl: './suggested-addresses-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SuggestedAddressDialogComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  constructor(protected modalService: ModalService) {}\n\n  @Input()\n  suggestedAddresses: Address[];\n  @Input()\n  enteredAddress: Address;\n\n  selectedAddress: Address;\n\n  ngOnInit(): void {\n    this.selectedAddress = this.suggestedAddresses.length\n      ? this.suggestedAddresses[0]\n      : this.enteredAddress;\n  }\n\n  closeModal(reason?: any): void {\n    this.modalService.closeActiveModal(reason);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../../shared/components/card/card.component'; // tslint:disable-line\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../misc/icon/index';\nimport { SuggestedAddressDialogComponent } from '../../shipping-address/address-form/suggested-addresses-dialog/suggested-addresses-dialog.component'; // tslint:disable-line\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private addressVerifySub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ = this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          address?.country &&\n          !!countries.filter(\n            (country: Country): boolean =>\n              country.isocode === address.country.isocode\n          ).length\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.next();\n        } else if (results.decision === 'REJECT') {\n          this.globalMessageService.add(\n            { key: 'addressForm.invalidAddress' },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment = !this.paymentForm.value\n      .defaultPayment;\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    };\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.checkoutDeliveryService.verifyAddress(this.billingAddressForm.value);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode').setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { CardModule } from '../../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../../shared/components/spinner/spinner.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { PaymentFormComponent } from './payment-form.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  entryComponents: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  CheckoutService,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  RoutingService,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { ICON_TYPE } from '../../../misc/icon';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n  protected checkoutStepUrlNext: string;\n  protected checkoutStepUrlPrevious: string;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutStepUrlNext = this.checkoutConfigService.getNextCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutStepUrlPrevious = this.checkoutConfigService.getPreviousCheckoutStepUrl(\n      this.activatedRoute\n    );\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.routingService.go(this.checkoutStepUrlNext);\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber, cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType.code),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  goNext(): void {\n    this.routingService.go(this.checkoutStepUrlNext);\n  }\n\n  goPrevious(): void {\n    this.routingService.go(this.checkoutStepUrlPrevious);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  entryComponents: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CheckoutService, RoutingService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  placeOrderSubscription: Subscription;\n\n  checkoutSubmitForm: FormGroup = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid) {\n      this.checkoutService.placeOrder();\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.placeOrderSubscription = this.checkoutService\n      .getOrderDetails()\n      .pipe(filter((order) => Object.keys(order).length !== 0))\n      .subscribe(() => {\n        this.routingService.go({ cxRoute: 'orderConfirmation' });\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.placeOrderSubscription) {\n      this.placeOrderSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../cart/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PlaceOrderComponent } from './place-order.component';\nimport { FormErrorsModule } from '../../../../shared/index';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  entryComponents: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CheckoutStep, CheckoutStepType } from '../model/checkout-step.model';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentDetailsSetGuard implements CanActivate {\n  constructor(\n    private checkoutDetailsService: CheckoutDetailsService,\n    private checkoutConfigService: CheckoutConfigService,\n    private routingConfigService: RoutingConfigService,\n    private router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    const checkoutStep: CheckoutStep = this.checkoutConfigService.getCheckoutStep(\n      CheckoutStepType.PAYMENT_DETAILS\n    );\n\n    if (!checkoutStep && isDevMode()) {\n      console.warn(\n        `Missing step with type ${CheckoutStepType.PAYMENT_DETAILS} in checkout configuration.`\n      );\n    }\n\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.router.parseUrl(\n                checkoutStep &&\n                  this.routingConfigService.getRouteConfig(\n                    checkoutStep.routeName\n                  ).paths[0]\n              )\n        )\n      );\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  Cart,\n  ActiveCartService,\n  CheckoutDeliveryService,\n  CheckoutPaymentService,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  TranslationService,\n  UserAddressService,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutStepType } from '../../model/index';\nimport { CheckoutConfigService } from '../../services/index';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent implements OnInit {\n  checkoutStepType = CheckoutStepType;\n  entries$: Observable<OrderEntry[]>;\n  cart$: Observable<Cart>;\n  deliveryMode$: Observable<DeliveryMode>;\n  countryName$: Observable<string>;\n  deliveryAddress$: Observable<Address>;\n  paymentDetails$: Observable<PaymentDetails>;\n  orderPromotions$: Observable<PromotionResult[]>;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutPaymentService: CheckoutPaymentService,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.cart$ = this.activeCartService.getActive();\n    this.entries$ = this.activeCartService.getEntries();\n    this.deliveryAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.paymentDetails$ = this.checkoutPaymentService.getPaymentDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n\n    this.deliveryMode$ = this.checkoutDeliveryService\n      .getSelectedDeliveryMode()\n      .pipe(\n        tap((selected: DeliveryMode) => {\n          if (selected === null) {\n            this.checkoutDeliveryService.loadSupportedDeliveryModes();\n          }\n        })\n      );\n\n    this.countryName$ = this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address.country.isocode)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress.country.isocode;\n        }\n\n        let region = '';\n        if (deliveryAddress.region && deliveryAddress.region.isocode) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [deliveryMode.description],\n        };\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string {\n    const step = this.checkoutConfigService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartSharedModule } from '../../../../cms-components/cart/cart-shared/cart-shared.module';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeSetGuard } from '../../guards/delivery-mode-set.guard';\nimport { PaymentDetailsSetGuard } from '../../guards/payment-details-set.guard';\nimport { ShippingAddressSetGuard } from '../../guards/shipping-address-set.guard';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\nimport { PromotionsModule } from '../promotions/promotions.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            ShippingAddressSetGuard,\n            DeliveryModeSetGuard,\n            PaymentDetailsSetGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  entryComponents: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  Address,\n  AddressValidation,\n  CheckoutDeliveryService,\n  Country,\n  ErrorModel,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  Title,\n  UserAddressService,\n  UserService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../shared/components/modal/index';\nimport { sortTitles } from '../../../../../shared/utils/forms/title-utils';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\n\n@Component({\n  selector: 'cx-address-form',\n  templateUrl: './address-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AddressFormComponent implements OnInit, OnDestroy {\n  countries$: Observable<Country[]>;\n  titles$: Observable<Title[]>;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  addresses$: Observable<Address[]>;\n\n  @Input()\n  addressData: Address;\n\n  @Input()\n  actionBtnLabel: string;\n\n  @Input()\n  cancelBtnLabel: string;\n\n  @Input()\n  setAsDefaultField = true;\n\n  @Input()\n  showTitleCode: boolean;\n\n  @Input()\n  showCancelBtn = true;\n\n  @Output()\n  submitAddress = new EventEmitter<any>();\n\n  @Output()\n  backToAddress = new EventEmitter<any>();\n\n  addressVerifySub: Subscription;\n  regionsSub: Subscription;\n  suggestedAddressModalRef: ModalRef;\n\n  addressForm: FormGroup = this.fb.group({\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n    phone: '',\n    defaultAddress: [false],\n  });\n\n  constructor(\n    protected fb: FormBuilder,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected userService: UserService,\n    protected userAddressService: UserAddressService,\n    protected globalMessageService: GlobalMessageService,\n    protected modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    // Fetching countries\n    this.countries$ = this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries: Country[]) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n\n    // Fetching titles\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles: Title[]) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        titles.sort(sortTitles);\n        const noneTitle = { code: '', name: 'Title' };\n        return [noneTitle, ...titles];\n      })\n    );\n\n    // Fetching regions\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions: Region[]) => {\n        const regionControl = this.addressForm.get('region.isocode');\n        if (regions && regions.length > 0) {\n          regionControl.enable();\n        } else {\n          regionControl.disable();\n        }\n      })\n    );\n\n    // verify the new added address\n    this.addressVerifySub = this.checkoutDeliveryService\n      .getAddressVerificationResults()\n      .subscribe((results: AddressValidation) => {\n        if (results.decision === 'FAIL') {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'ACCEPT') {\n          this.submitAddress.emit(this.addressForm.value);\n        } else if (results.decision === 'REJECT') {\n          // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n          if (\n            results.errors.errors.some(\n              (error: ErrorModel) => error.subject === 'titleCode'\n            )\n          ) {\n            this.globalMessageService.add(\n              { key: 'addressForm.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          } else {\n            this.globalMessageService.add(\n              { key: 'addressForm.invalidAddress' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n        } else if (results.decision === 'REVIEW') {\n          this.openSuggestedAddress(results);\n        }\n      });\n\n    if (this.addressData && Object.keys(this.addressData).length !== 0) {\n      this.addressForm.patchValue(this.addressData);\n\n      this.countrySelected(this.addressData.country);\n      if (this.addressData.region) {\n        this.regionSelected(this.addressData.region);\n      }\n    }\n\n    this.addresses$ = this.userAddressService.getAddresses();\n  }\n\n  countrySelected(country: Country): void {\n    this.addressForm['controls'].country['controls'].isocode.setValue(\n      country.isocode\n    );\n    this.selectedCountry$.next(country.isocode);\n  }\n\n  regionSelected(region: Region): void {\n    this.addressForm['controls'].region['controls'].isocode.setValue(\n      region.isocode\n    );\n  }\n\n  toggleDefaultAddress(): void {\n    this.addressForm['controls'].defaultAddress.setValue(\n      this.addressForm.value.defaultAddress\n    );\n  }\n\n  back(): void {\n    this.backToAddress.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.addressForm.valid) {\n      if (this.addressForm.get('region').value.isocode) {\n        this.regionsSub = this.regions$.pipe(take(1)).subscribe((regions) => {\n          const obj = regions.find(\n            (region) =>\n              region.isocode ===\n              this.addressForm.controls['region'].value.isocode\n          );\n          Object.assign(this.addressForm.value.region, {\n            isocodeShort: obj.isocodeShort,\n          });\n        });\n      }\n\n      if (this.addressForm.dirty) {\n        this.checkoutDeliveryService.verifyAddress(this.addressForm.value);\n      } else {\n        // address form value not changed\n        // ignore duplicate address\n        this.submitAddress.emit(undefined);\n      }\n    } else {\n      this.addressForm.markAllAsTouched();\n    }\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress = this.addressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then((address) => {\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          if (address) {\n            address = Object.assign(\n              {\n                titleCode: this.addressForm.value.titleCode,\n                phone: this.addressForm.value.phone,\n                selected: true,\n              },\n              address\n            );\n            this.submitAddress.emit(address);\n          }\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.checkoutDeliveryService.clearAddressVerificationResults();\n          const address = Object.assign(\n            {\n              selected: true,\n            },\n            this.addressForm.value\n          );\n          this.submitAddress.emit(address);\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  ngOnDestroy() {\n    this.checkoutDeliveryService.clearAddressVerificationResults();\n\n    if (this.addressVerifySub) {\n      this.addressVerifySub.unsubscribe();\n    }\n\n    if (this.regionsSub) {\n      this.regionsSub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../misc/icon/index';\nimport { AddressFormComponent } from './address-form.component';\nimport { SuggestedAddressDialogComponent } from './suggested-addresses-dialog/suggested-addresses-dialog.component';\nimport { FormErrorsModule } from '../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    NgSelectModule,\n    IconModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  declarations: [AddressFormComponent, SuggestedAddressDialogComponent],\n  entryComponents: [SuggestedAddressDialogComponent],\n  exports: [AddressFormComponent, SuggestedAddressDialogComponent],\n})\nexport class AddressFormModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsLoadedGuard implements CanActivate {\n  constructor(private checkoutDetailsService: CheckoutDetailsService) {}\n\n  canActivate(): Observable<boolean> {\n    return this.checkoutDetailsService.getCheckoutDetailsLoaded$;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  ActiveCartService,\n  Address,\n  CheckoutDeliveryService,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, take, filter } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit {\n  existingAddresses$: Observable<Address[]>;\n  newAddressFormManuallyOpened = false;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<CardWithAddress[]>;\n  selectedAddress$: Observable<Address>;\n  forceLoader = false; // this helps with smoother steps transition\n  isGuestCheckout = false;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected routingService: RoutingService,\n    protected checkoutDeliveryService: CheckoutDeliveryService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.userAddressService.getAddressesLoading();\n    this.existingAddresses$ = this.userAddressService.getAddresses();\n    this.selectedAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n\n    this.cards$ = combineLatest([\n      this.existingAddresses$,\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          addresses,\n          selected,\n          textDefaultShippingAddress,\n          textShipToThisAddress,\n          textSelected,\n        ]) => {\n          // Select default address if none selected\n          if (\n            addresses.length &&\n            (!selected || Object.keys(selected).length === 0)\n          ) {\n            const defaultAddress = addresses.find(\n              (address) => address.defaultAddress\n            );\n            selected = defaultAddress;\n            this.selectAddress(defaultAddress);\n          }\n          return addresses.map((address) => {\n            const card = this.getCardContent(\n              address,\n              selected,\n              textDefaultShippingAddress,\n              textShipToThisAddress,\n              textSelected\n            );\n            return {\n              address,\n              card,\n            };\n          });\n        }\n      )\n    );\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userAddressService.loadAddresses();\n    } else {\n      this.isGuestCheckout = true;\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    };\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    this.selectedAddress$\n      .pipe(\n        filter((selected) => !!selected?.shippingAddress),\n        take(1)\n      )\n      .subscribe(() => this.goNext());\n\n    this.forceLoader = true;\n\n    this.existingAddresses$.pipe(take(1)).subscribe((addresses) => {\n      addresses.includes(address)\n        ? this.selectAddress(address)\n        : this.checkoutDeliveryService.createAndSetAddress(address);\n    });\n  }\n\n  showNewAddressForm(): void {\n    this.newAddressFormManuallyOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.newAddressFormManuallyOpened = false;\n    if (goPrevious) {\n      this.goPrevious();\n    }\n  }\n\n  goNext(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getNextCheckoutStepUrl(this.activatedRoute)\n    );\n  }\n\n  goPrevious(): void {\n    this.routingService.go(\n      this.checkoutConfigService.getPreviousCheckoutStepUrl(\n        this.activatedRoute\n      ) || 'cart'\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\n// tslint:disable-next-line:max-line-length\nimport { CheckoutProgressMobileBottomModule } from '../checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\nimport { CheckoutProgressMobileTopModule } from '../checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CartNotEmptyGuard } from './../../../../cms-components/cart/cart-not-empty.guard';\nimport { AddressFormModule } from './address-form/address-form.module';\nimport { CheckoutDetailsLoadedGuard } from '../../guards/checkout-details-loaded.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [\n            CheckoutAuthGuard,\n            CartNotEmptyGuard,\n            CheckoutDetailsLoadedGuard,\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  entryComponents: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// tslint:disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { PromotionsModule } from './components/promotions/promotions.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    PromotionsModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n  ],\n})\nexport class CheckoutComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  canActivate(): Observable<boolean> {\n    return this.authService.getUserToken().pipe(\n      map((token) => {\n        if (token.access_token) {\n          this.routingService.go({ cxRoute: 'home' });\n        } else if (this.activeCartService.isGuestCart()) {\n          this.routingService.go({ cxRoute: 'cart' });\n          return false;\n        }\n        return !token.access_token;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { KeyboardFocusService } from '../../keyboard-focus/services/keyboard-focus.service';\nimport { SkipLink, SkipLinkConfig } from '../config/skip-link.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkipLinkService {\n  private skipLinks$ = new BehaviorSubject<SkipLink[]>([]);\n\n  constructor(\n    protected config: SkipLinkConfig,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  getSkipLinks(): Observable<SkipLink[]> {\n    return this.skipLinks$;\n  }\n\n  add(key: string, target: HTMLElement): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      const existing: SkipLink[] = this.skipLinks$.value;\n      existing.splice(this.getSkipLinkIndexInArray(key), 0, {\n        target,\n        i18nKey: found.i18nKey,\n        position: found.position,\n        key,\n      });\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  remove(key: string): void {\n    const found: SkipLink = this.config.skipLinks.find(\n      (skipLink) => skipLink.key === key\n    );\n\n    if (found) {\n      let existing: SkipLink[] = this.skipLinks$.value;\n      existing = existing.filter((skipLink) => skipLink.key !== key);\n      this.skipLinks$.next(existing);\n    }\n  }\n\n  scrollToTarget(skipLink: SkipLink): void {\n    const target =\n      skipLink.target instanceof HTMLElement\n        ? skipLink.target\n        : (skipLink.target as Element).parentElement;\n\n    // focus first focusable element in the\n    const firstFocusable =\n      this.keyboardFocusService.findFirstFocusable(target) || target;\n\n    // we force a tabindex if not available, to ensure we can focus into the element\n    const hasTabindex = firstFocusable.hasAttribute('tabindex');\n    if (!hasTabindex) {\n      firstFocusable.setAttribute('tabindex', '-1');\n    }\n\n    firstFocusable.focus();\n\n    // drop the tmp tabindex\n    if (!hasTabindex) {\n      firstFocusable.removeAttribute('tabindex');\n    }\n  }\n\n  protected getSkipLinkIndexInArray(key: string): number {\n    let index: number = this.config.skipLinks.findIndex(\n      (skipLink) => skipLink.key === key\n    );\n\n    while (index > 0) {\n      index--;\n      const previous: SkipLink = this.config.skipLinks[index];\n      if (previous) {\n        const existing: SkipLink[] = this.skipLinks$.value;\n        const found: number = existing.findIndex(\n          (skipLink) => skipLink.key === previous.key\n        );\n        if (found > -1) {\n          return found + 1;\n        }\n      }\n    }\n    return 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SkipLink } from '../config/skip-link.config';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Component({\n  selector: 'cx-skip-link',\n  templateUrl: './skip-link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkipLinkComponent {\n  skipLinks$: Observable<SkipLink[]> = this.skipLinkService.getSkipLinks();\n\n  constructor(private skipLinkService: SkipLinkService) {}\n\n  scrollToTarget(skipLink: SkipLink): void {\n    this.skipLinkService.scrollToTarget(skipLink);\n  }\n}\n","import { SkipLinkConfig } from './skip-link.config';\n\nexport const defaultSkipLinkConfig: SkipLinkConfig = {\n  skipLinks: [\n    {\n      key: 'cx-header',\n      i18nKey: 'skipLink.labels.header',\n    },\n    {\n      key: 'cx-main',\n      i18nKey: 'skipLink.labels.main',\n    },\n    { key: 'cx-footer', i18nKey: 'skipLink.labels.footer' },\n  ],\n};\n","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { SkipLinkService } from '../service/skip-link.service';\n\n@Directive({\n  selector: '[cxSkipLink]',\n})\nexport class SkipLinkDirective implements OnInit, OnDestroy {\n  @Input() cxSkipLink: string;\n\n  constructor(\n    protected elementRef: ElementRef<HTMLElement>,\n    protected skipLinkService: SkipLinkService\n  ) {}\n\n  ngOnInit(): void {\n    this.skipLinkService.add(this.cxSkipLink, this.elementRef.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this.skipLinkService.remove(this.cxSkipLink);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModule,\n} from '@angular/core';\nimport {\n  ConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { OutletPosition } from '../../../cms-structure/outlet/outlet.model';\nimport { OutletService } from '../../../cms-structure/outlet/outlet.service';\nimport { KeyboardFocusModule } from '../keyboard-focus/keyboard-focus.module';\nimport { SkipLinkComponent } from './component/skip-link.component';\nimport { defaultSkipLinkConfig } from './config/default-skip-link.config';\nimport { SkipLinkDirective } from './directive/skip-link.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(defaultSkipLinkConfig),\n    KeyboardFocusModule,\n  ],\n  declarations: [SkipLinkComponent, SkipLinkDirective],\n  exports: [SkipLinkDirective],\n  entryComponents: [SkipLinkComponent],\n\n  providers: [\n    provideDefaultConfig(defaultSkipLinkConfig),\n    {\n      provide: APP_INITIALIZER,\n      useFactory: skipLinkFactory,\n      deps: [ComponentFactoryResolver, OutletService],\n      multi: true,\n    },\n  ],\n})\nexport class SkipLinkModule {}\n\n/**\n * Adds the skip link component before the cx-storefront.\n */\nexport function skipLinkFactory(\n  componentFactoryResolver: ComponentFactoryResolver,\n  outletService: OutletService\n) {\n  const isReady = () => {\n    const factory = componentFactoryResolver.resolveComponentFactory(\n      SkipLinkComponent\n    );\n    outletService.add('cx-storefront', <any>factory, OutletPosition.BEFORE);\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\nimport { Direction } from './direction.model';\n\n/**\n * The direction config provides an easy way to configure \"ltr\" versus \"rtl\" direction\n * for the storefront. The direction can be configured to detect the direction by language.\n *\n * The following configuration detects rtl languages by isoCode for Arabic and Hebrew:\n *\n * ```typescript\n * direction: {\n *   detect: true,\n *   default: DirectionMode.LTR,\n *   rtlLanguages: ['ar', 'he']\n * }\n * ```\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class DirectionConfig {\n  direction?: Direction;\n}\n","import { DirectionConfig } from './direction.config';\nimport { DirectionMode } from './direction.model';\n\nexport const defaultDirectionConfig: DirectionConfig = {\n  direction: {\n    detect: true,\n    default: DirectionMode.LTR,\n    // we're not polluting the system with all defaults for ltr, but add 2 common used\n    // languages (hebrew and arabic) to easily demo directionality\n    // see https://meta.wikimedia.org/wiki/Template:List_of_language_names_ordered_by_code\n    rtlLanguages: ['he', 'ar'],\n  },\n};\n","import { Injectable, OnDestroy } from '@angular/core';\nimport {\n  ConfigInitializerService,\n  LanguageService,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { DirectionConfig } from './config/direction.config';\nimport { Direction, DirectionMode } from './config/direction.model';\n\n/**\n * The `DirectionService` can be used to add the direction to the overall storefront or individual elements.\n * By default, the direction is added to the `html` element (i.e. `<html dir=\"ltr\">`). The API of this service\n * does however provide methods to add direction to individual elements if needed.\n *\n * The direction is configurable and allows for language driven direction configuration.\n *\n * To react to the active language, the service subscribes to the active language in the initialize method. This\n * is called from an APP_INITIALIZER method and should only happen once.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DirectionService implements OnDestroy {\n  protected config: Direction;\n  protected startsDetecting = false;\n\n  protected subscription = new Subscription();\n\n  constructor(\n    protected configInit: ConfigInitializerService,\n    protected languageService: LanguageService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Initializes the layout direction for the storefront.\n   */\n  initialize(): Promise<void> {\n    return this.configInit\n      .getStableConfig('direction')\n      .then((config: DirectionConfig) => {\n        this.config = config?.direction;\n        if (this.config?.detect) {\n          this.detect();\n        } else {\n          this.setDirection(\n            this.winRef.document.documentElement,\n            this.config?.default\n          );\n        }\n      });\n  }\n\n  /**\n   * Observes the _active_ language and set the required direction for the given language.\n   * The method is guarded to ensure that the active language is observed only once.\n   */\n  protected detect() {\n    if (this.startsDetecting) {\n      return;\n    }\n    this.subscription.add(\n      this.languageService\n        .getActive()\n        .subscribe((isoCode: string) =>\n          this.setDirection(\n            this.winRef.document.documentElement,\n            this.getDirection(isoCode)\n          )\n        )\n    );\n    this.startsDetecting = true;\n  }\n\n  /**\n   * Sets the direction attribute for the given element. If the direction is undefined, the `dir`\n   * attribute is removed.\n   */\n  setDirection(el: HTMLElement, direction: DirectionMode): void {\n    if (direction) {\n      el.setAttribute('dir', direction);\n    } else {\n      el.removeAttribute('dir');\n    }\n  }\n\n  /**\n   * Gets the `DirectionMode` for the given language isoCode. The language isoCode is compared\n   * to the configured list of languages(`direction.rtlLanguages` vs `direction.ltrLanguages`).\n   *\n   * If no language is given, or no language mapping could be found, we fallback to the default\n   * `direction.mode`.\n   */\n  getDirection(language?: string): DirectionMode {\n    if (language && this.config?.rtlLanguages?.includes(language)) {\n      return DirectionMode.RTL;\n    }\n    if (language && this.config?.ltrLanguages?.includes(language)) {\n      return DirectionMode.LTR;\n    }\n    return this.config?.default;\n  }\n\n  ngOnDestroy(): void {\n    // Cleans up the subscription, to avoid memory leaks in SSR.\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { FeatureConfigService, provideDefaultConfig } from '@spartacus/core';\nimport { defaultDirectionConfig } from './config/default-direction.config';\nimport { DirectionService } from './direction.service';\n\nexport function initHtmlDirAttribute(\n  directionService: DirectionService,\n  featureConfigService: FeatureConfigService\n) {\n  const result = () => {\n    if (featureConfigService.isLevel('2.1')) {\n      return directionService.initialize();\n    }\n  };\n  return result;\n}\n\n/**\n * Provides a configuration and APP_INITIALIZER to add the correct (language drive) html direction.\n */\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      useFactory: initHtmlDirAttribute,\n      deps: [DirectionService, FeatureConfigService],\n    },\n    provideDefaultConfig(defaultDirectionConfig),\n  ],\n})\nexport class DirectionModule {}\n","import { Injectable } from '@angular/core';\nimport { NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HamburgerMenuService {\n  isExpanded: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  constructor(router: Router) {\n    router.events\n      .pipe(filter((event) => event instanceof NavigationStart))\n      .subscribe(() => {\n        this.toggle(true);\n      });\n  }\n\n  /**\n   * toggles the expand state of the hamburger menu\n   */\n  toggle(forceCollapse?: boolean): void {\n    if (forceCollapse) {\n      this.isExpanded.next(false);\n    } else {\n      this.isExpanded.next(!this.isExpanded.value);\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HamburgerMenuService } from './hamburger-menu.service';\n\n@Component({\n  selector: 'cx-hamburger-menu',\n  templateUrl: './hamburger-menu.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HamburgerMenuComponent {\n  constructor(private hamburgerMenuService: HamburgerMenuService) {}\n\n  toggle(): void {\n    this.hamburgerMenuService.toggle();\n  }\n\n  get isExpanded(): Observable<boolean> {\n    return this.hamburgerMenuService.isExpanded;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { HamburgerMenuComponent } from './hamburger-menu.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        HamburgerMenuComponent: {\n          component: HamburgerMenuComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [HamburgerMenuComponent],\n  exports: [HamburgerMenuComponent],\n  entryComponents: [HamburgerMenuComponent],\n})\nexport class HamburgerMenuModule {}\n","import { NgModule } from '@angular/core';\nimport { OutletRefModule } from '../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { DirectionModule } from './direction/direction.module';\nimport { LaunchDialogModule } from './launch-dialog/index';\n\n@NgModule({\n  imports: [OutletRefModule, LaunchDialogModule.forRoot(), DirectionModule],\n  exports: [OutletRefModule],\n})\nexport class LayoutModule {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport {\n  CmsService,\n  ContentSlotComponentData,\n  ContentSlotData,\n  DynamicAttributeService,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { IntersectionOptions } from '../../../layout/loading/intersection.model';\nimport { CmsComponentsService } from '../../services/cms-components.service';\n\n/**\n * The `PageSlotComponent` is used to render the CMS page slot and it's components.\n *\n * The Page slot host element will be supplemented with css classes so that the layout\n * can be fully controlled by customers:\n * - The page slot _position_ is added as a css class by default.\n * - The `cx-pending` is added for as long as the slot hasn't start loading.\n * - The `page-fold` style class is added for the page slot which is configured as the page fold.\n */\n@Component({\n  selector: 'cx-page-slot,[cx-page-slot]',\n  templateUrl: './page-slot.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageSlotComponent implements OnInit, OnDestroy {\n  /**\n   * The position represents the unique key for a page slot on a single page, but can\n   * be reused cross pages.\n   *\n   * The position is used to find the CMS components for the page slot. It is also\n   * added as an additional CSS class so that layoutt can be applied.\n   */\n  @Input() set position(value: string) {\n    this.position$.next(value);\n  }\n  get position(): string {\n    return this.position$.value;\n  }\n\n  /**\n   * Maintains css classes introduced by the host and adds additional classes.\n   */\n  @Input() @HostBinding() class: string;\n\n  /**\n   * Indicates that the page slot is the last page slot above the fold.\n   */\n  @HostBinding('class.page-fold') @Input() isPageFold = false;\n\n  /**\n   * Indicates that the components of the page slot haven't been loaded as long\n   * as the isPending state is true.\n   */\n  @HostBinding('class.cx-pending') isPending = true;\n\n  /**\n   * Indicates that the page slot doesn't contain any components. This is no\n   * longer used in spartacus, but kept for backwards compatibility.\n   */\n  @HostBinding('class.has-components') @Input() hasComponents = false;\n\n  protected position$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n  components: ContentSlotComponentData[];\n\n  protected slot$: Observable<ContentSlotData> = this.position$.pipe(\n    switchMap((position) => this.cmsService.getContentSlot(position)),\n    distinctUntilChanged(this.isDistinct)\n  );\n\n  /** Observes the components for the given page slot. */\n  components$: Observable<ContentSlotComponentData[]> = this.slot$.pipe(\n    map((slot) => slot?.components ?? [])\n  );\n\n  protected subscription: Subscription = new Subscription();\n\n  /** Keeps track of the pending components that must be loaded for the page slot */\n  private pendingComponentCount = 0;\n\n  /** Tracks the last used position, in case the page slot is used dynamically */\n  private lastPosition: string;\n  constructor(\n    protected cmsService: CmsService,\n    protected dynamicAttributeService: DynamicAttributeService,\n    protected renderer: Renderer2,\n    protected elementRef: ElementRef,\n    protected cmsComponentsService: CmsComponentsService,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.slot$.pipe(tap((slot) => this.decorate(slot))).subscribe((value) => {\n        this.components = value?.components || [];\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  protected decorate(slot: ContentSlotData): void {\n    let cls = this.class || '';\n\n    if (this.lastPosition && cls.indexOf(this.lastPosition) > -1) {\n      cls = cls.replace(this.lastPosition, '');\n    }\n    if (this.position$.value) {\n      cls += ` ${this.position$.value}`;\n      this.lastPosition = this.position$.value;\n    }\n\n    // host bindings\n    this.pending = slot?.components?.length || 0;\n    this.hasComponents = slot?.components?.length > 0;\n    if (cls && cls !== this.class) {\n      this.class = cls;\n    }\n\n    this.addSmartEditSlotClass(slot);\n  }\n\n  /**\n   * Sets the pending count for the page slot components. Once all pending components are\n   * loaded, the `isPending` flag is updated, so that the associated class can be updated\n   */\n  protected set pending(count: number) {\n    this.pendingComponentCount = count;\n    this.isPending = this.pendingComponentCount > 0;\n  }\n\n  protected get pending(): number {\n    return this.pendingComponentCount;\n  }\n\n  /*\n   * Is triggered when a component is added to the view. This is used to\n   * update the pending count\n   */\n  isLoaded(loadState: boolean) {\n    if (loadState) {\n      this.pending--;\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * The `DeferLoadingStrategy` indicates whether the component should be\n   * rendered instantly or whether it should be deferred.\n   */\n  getComponentDeferOptions(componentType: string): IntersectionOptions {\n    const deferLoading = this.cmsComponentsService.getDeferLoadingStrategy(\n      componentType\n    );\n    return { deferLoading };\n  }\n\n  protected isDistinct(old: ContentSlotData, current: ContentSlotData) {\n    return (\n      current.components &&\n      old.components?.length === current.components.length &&\n      !old.components.find(\n        (el, index) => el.uid !== current.components[index].uid\n      )\n    );\n  }\n\n  private addSmartEditSlotClass(slot: ContentSlotData): void {\n    if (slot) {\n      this.dynamicAttributeService.addDynamicAttributes(\n        this.elementRef.nativeElement,\n        this.renderer,\n        { slotData: slot }\n      );\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageComponentModule } from '../component/page-component.module';\nimport { PageSlotComponent } from './page-slot.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageComponentModule],\n  providers: [],\n  declarations: [PageSlotComponent],\n  exports: [PageSlotComponent],\n})\nexport class PageSlotModule {}\n","import { Inject, Injectable, isDevMode, Optional } from '@angular/core';\nimport { CmsService, Page } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport {\n  BREAKPOINT,\n  LayoutConfig,\n  LayoutSlotConfig,\n  SlotConfig,\n} from '../../../layout/config/layout-config';\nimport { PageLayoutHandler, PAGE_LAYOUT_HANDLER } from './page-layout-handler';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageLayoutService {\n  constructor(\n    private cms: CmsService,\n    private config: LayoutConfig,\n    private breakpointService: BreakpointService,\n    @Optional()\n    @Inject(PAGE_LAYOUT_HANDLER)\n    private handlers: PageLayoutHandler[]\n  ) {}\n\n  // Prints warn messages for missing layout configs.\n  // The warnings are only printed once per config\n  // to not pollute the console log.\n  private warnLogMessages = {};\n  private logSlots = {};\n\n  getSlots(section?: string): Observable<string[]> {\n    return combineLatest([this.page$, this.breakpointService.breakpoint$]).pipe(\n      map(([page, breakpoint]) => {\n        const pageTemplate = page.template;\n        const slots = this.resolveSlots(page, section, breakpoint);\n        return { slots, pageTemplate, breakpoint };\n      }),\n      switchMap(({ slots, pageTemplate, breakpoint }) => {\n        let result = of(slots);\n        for (const handler of this.handlers || []) {\n          result = handler.handle(result, pageTemplate, section, breakpoint);\n        }\n        return result;\n      }),\n      distinctUntilChanged((a, b) => {\n        if (a.length !== b.length) {\n          return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n          if (a[i] !== b[i]) {\n            return false;\n          }\n        }\n        return true;\n      })\n    );\n  }\n\n  /**\n   * Returns an observable with the last page slot above-the-fold\n   * for the given pageTemplate / breakpoint.\n   *\n   * The page fold is configurable in the `LayoutConfig` for each page layout.\n   */\n  getPageFoldSlot(pageTemplate: string): Observable<string> {\n    return this.breakpointService.breakpoint$.pipe(\n      map((breakpoint) => {\n        if (!this.config.layoutSlots) {\n          // no layout config available\n          return null;\n        }\n        const pageTemplateConfig = this.config.layoutSlots[pageTemplate];\n        const config = this.getResponsiveSlotConfig(\n          <LayoutSlotConfig>pageTemplateConfig,\n          'pageFold',\n          breakpoint\n        );\n        return config ? config.pageFold : null;\n      })\n    );\n  }\n\n  private resolveSlots(page, section, breakpoint): string[] {\n    const config = this.getSlotConfig(\n      page.template,\n      'slots',\n      section,\n      breakpoint\n    );\n    if (config && config.slots) {\n      const pageSlots = Object.keys(page.slots);\n      return config.slots.filter((slot) => pageSlots.includes(slot));\n    } else if (!section) {\n      this.logMissingLayoutConfig(page);\n      return Object.keys(page.slots);\n    } else {\n      this.logMissingLayoutConfig(page, section);\n      return [];\n    }\n  }\n\n  get page$(): Observable<Page> {\n    return this.cms.getCurrentPage().pipe(filter((page) => !!page));\n  }\n\n  get templateName$(): Observable<string> {\n    return this.page$.pipe(\n      filter((page) => !!page.template),\n      map((page: Page) => page.template)\n    );\n  }\n\n  /**\n   * load slots from the layout configuration. The breakpoint is used\n   * to load a specific configuration for the given breakpoint. If there's\n   * no configuration available for the given breakpoint the default slot\n   * configuration is returned.\n   */\n  protected getSlotConfig(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    if (!this.config.layoutSlots) {\n      return null;\n    }\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (section) {\n      return this.getSlotConfigForSection(\n        templateUid,\n        configAttribute,\n        section,\n        breakpoint\n      );\n    }\n\n    if (pageTemplateConfig) {\n      return this.getResponsiveSlotConfig(\n        <LayoutSlotConfig>pageTemplateConfig,\n        configAttribute,\n        breakpoint\n      );\n    }\n  }\n\n  protected getSlotConfigForSection(\n    templateUid: string,\n    configAttribute: string,\n    section?: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    const pageTemplateConfig = this.config.layoutSlots[templateUid];\n\n    if (!pageTemplateConfig) {\n      return null;\n    }\n\n    // if there's no section config on the page layout\n    // we fall back to the global section config\n    const sectionConfig = pageTemplateConfig[section]\n      ? pageTemplateConfig[section]\n      : this.config.layoutSlots[section];\n\n    if (!sectionConfig) {\n      return null;\n    }\n\n    const responsiveConfig = this.getResponsiveSlotConfig(\n      <LayoutSlotConfig>sectionConfig,\n      configAttribute,\n      breakpoint\n    );\n\n    if (responsiveConfig.hasOwnProperty(configAttribute)) {\n      return responsiveConfig;\n    } else if (pageTemplateConfig[section].hasOwnProperty(configAttribute)) {\n      return pageTemplateConfig[section];\n    } else if (this.config.layoutSlots[section]) {\n      return <SlotConfig>this.config.layoutSlots[section];\n    }\n  }\n\n  /**\n   * Returns a list of slots for a breakpoint specific configuratoin\n   * If there's no specific configuration for the breakpoint,\n   * the closest available configuration will be returned.\n   */\n  protected getResponsiveSlotConfig(\n    layoutSlotConfig: LayoutSlotConfig,\n    configAttribute: string,\n    breakpoint?: BREAKPOINT\n  ): SlotConfig {\n    let slotConfig = <SlotConfig>layoutSlotConfig;\n\n    // fallback to default slot config\n    if (!layoutSlotConfig || !breakpoint) {\n      return slotConfig;\n    }\n\n    // we have a config for the specific breakpoint\n    if (\n      layoutSlotConfig[breakpoint] &&\n      layoutSlotConfig[breakpoint].hasOwnProperty(configAttribute)\n    ) {\n      return <SlotConfig>layoutSlotConfig[breakpoint];\n    }\n\n    // find closest config\n    const all = this.breakpointService.breakpoints;\n\n    for (const br of all.splice(0, all.indexOf(breakpoint))) {\n      if (\n        layoutSlotConfig[br] &&\n        layoutSlotConfig[br].hasOwnProperty(configAttribute)\n      ) {\n        slotConfig = <SlotConfig>layoutSlotConfig[br];\n      }\n    }\n    return slotConfig;\n  }\n\n  /**\n   * In order to help developers, we print some detailed log information in\n   * case there's no layout configuration available for the given page template\n   * or section. Additionally, the slot positions are printed in the console\n   * in a format that can be copied / paste to the configuration.\n   */\n  private logMissingLayoutConfig(page: Page, section?: string): void {\n    if (!isDevMode()) {\n      return;\n    }\n    if (!this.logSlots[page.template]) {\n      // the info log is not printed in production\n      // tslint:disable-next-line: no-console\n      console.info(\n        `Available CMS page slots: '${Object.keys(page.slots).join(`','`)}'`\n      );\n      this.logSlots[page.template] = true;\n    }\n\n    const cacheKey = section || page.template;\n    if (!this.warnLogMessages[cacheKey]) {\n      console.warn(\n        `No layout config found for ${cacheKey}, you can configure a 'LayoutConfig' to control the rendering of page slots.`\n      );\n      this.warnLogMessages[cacheKey] = true;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  Renderer2,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, switchMap, tap } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n@Component({\n  selector: 'cx-page-layout',\n  templateUrl: './page-layout.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PageLayoutComponent {\n  @Input() set section(value: string) {\n    this.section$.next(value);\n  }\n  readonly section$: BehaviorSubject<string> = new BehaviorSubject(undefined);\n  readonly templateName$: Observable<string> = this.pageLayoutService\n    .templateName$;\n\n  readonly layoutName$: Observable<string> = this.section$.pipe(\n    switchMap((section) => (section ? of(section) : this.templateName$)),\n    tap((name) => {\n      this.styleClass = name;\n    })\n  );\n\n  readonly slots$: Observable<string[]> = this.section$.pipe(\n    switchMap((section) => this.pageLayoutService.getSlots(section))\n  );\n\n  readonly pageFoldSlot$: Observable<string> = this.templateName$.pipe(\n    switchMap((templateName) =>\n      this.pageLayoutService.getPageFoldSlot(templateName)\n    ),\n    distinctUntilChanged()\n  );\n\n  private currentClass;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private pageLayoutService: PageLayoutService\n  ) {}\n\n  set styleClass(cls: string) {\n    if (this.currentClass) {\n      this.renderer.removeClass(this.el.nativeElement, this.currentClass);\n    }\n    this.renderer.addClass(this.el.nativeElement, cls);\n    this.currentClass = cls;\n  }\n}\n","import { ComponentRef, Injectable, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { PageLayoutService } from './page-layout.service';\n\n/**\n * Service that adds the page template as a className to the application root element. If the root\n * element is cx-storefront, the resulting DOM would look like:\n *\n * ```html\n * <cx-storefront class=\"LandingPageTemplate\">\n *  [...]\n * <cx-storefront>\n * ```\n */\n@Injectable({ providedIn: 'root' })\nexport class PageTemplateStyleService implements OnDestroy {\n  /**\n   * Keeps the subscriptions for this service so that we can unsubscribe on destroy.\n   */\n  protected subscription = new Subscription();\n\n  /**\n   * Holds the current page template, so we can remove previous page templates from the element classList.\n   */\n  protected currentTemplate: string;\n\n  constructor(protected pageLayoutService: PageLayoutService) {}\n\n  initialize(ref: ComponentRef<any>): void {\n    const el: HTMLElement = ref.location.nativeElement;\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(distinctUntilChanged())\n        .subscribe((template) => this.addStyleClass(el, template))\n    );\n  }\n\n  /**\n   * Adds the page template as a style class to the given element. If any page template\n   * was added before, we clean it up.\n   */\n  protected addStyleClass(el: HTMLElement, template: string): void {\n    // clean up previous template class binding\n    if (this.currentTemplate) {\n      el.classList?.remove(this.currentTemplate);\n    }\n    if (template) {\n      this.currentTemplate = template;\n      el.classList.add(this.currentTemplate);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_BOOTSTRAP_LISTENER, ComponentRef, NgModule } from '@angular/core';\nimport { FeatureConfigService } from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { OutletModule } from '../../outlet/outlet.module';\nimport { PageLayoutComponent } from './page-layout.component';\nimport { PageTemplateStyleService } from './page-template-style.service';\n\nexport function initPageTemplateStyle(\n  service: PageTemplateStyleService,\n  featureConfigService: FeatureConfigService\n) {\n  const result = (componentRef: ComponentRef<any>) => {\n    if (featureConfigService.isLevel('2.1')) {\n      service.initialize(componentRef);\n    }\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule, OutletModule, PageSlotModule],\n  declarations: [PageLayoutComponent],\n  exports: [PageLayoutComponent],\n\n  providers: [\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      multi: true,\n      useFactory: initPageTemplateStyle,\n      deps: [PageTemplateStyleService, FeatureConfigService],\n    },\n  ],\n})\nexport class PageLayoutModule {}\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class PWAModuleConfig {\n  pwa?: {\n    enabled?: boolean;\n    addToHomeScreen?: boolean;\n  };\n}\n\nexport const defaultPWAModuleConfig: PWAModuleConfig = {\n  pwa: {\n    enabled: false,\n    addToHomeScreen: false,\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PWAModuleConfig } from '../pwa.module-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddToHomeScreenService {\n  protected deferredEvent: any;\n\n  protected canPrompt = new BehaviorSubject<boolean>(false);\n\n  canPrompt$: Observable<boolean> = this.canPrompt.asObservable();\n\n  constructor(\n    protected config: PWAModuleConfig,\n    protected globalMessageService: GlobalMessageService,\n    protected winRef: WindowRef\n  ) {\n    if (this.config.pwa.addToHomeScreen) {\n      this.init();\n    }\n  }\n\n  init() {\n    if (this.winRef.nativeWindow) {\n      this.winRef.nativeWindow.addEventListener(\n        'beforeinstallprompt',\n        (event) => {\n          event.preventDefault();\n          this.deferredEvent = event;\n          this.enableAddToHomeScreen();\n        }\n      );\n\n      this.winRef.nativeWindow.addEventListener('appinstalled', () => {\n        this.globalMessageService.add(\n          { key: 'pwa.addedToHomeScreen' },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n\n        this.disableAddToHomeScreen();\n        this.deferredEvent = null;\n      });\n    }\n  }\n\n  enableAddToHomeScreen(): void {\n    this.canPrompt.next(true);\n  }\n\n  disableAddToHomeScreen(): void {\n    this.canPrompt.next(false);\n  }\n\n  firePrompt(): void {\n    if (this.deferredEvent) {\n      this.deferredEvent.prompt();\n    }\n  }\n}\n","import { OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AddToHomeScreenService } from '../services/add-to-home-screen.service';\n\nexport abstract class AddToHomeScreenComponent implements OnInit {\n  canPrompt$: Observable<boolean>;\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {}\n\n  ngOnInit(): void {\n    this.canPrompt$ = this.addToHomeScreenService.canPrompt$;\n  }\n\n  prompt(): void {\n    this.addToHomeScreenService.firePrompt();\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-banner',\n  templateUrl: './add-to-home-screen-banner.component.html',\n})\nexport class AddToHomeScreenBannerComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { Component } from '@angular/core';\nimport { AddToHomeScreenService } from '../../services/add-to-home-screen.service';\nimport { AddToHomeScreenComponent } from '../add-to-home-screen.component';\n\n@Component({\n  selector: 'cx-add-to-home-screen-btn',\n  templateUrl: './add-to-home-screen-btn.component.html',\n})\nexport class AddToHomeScreenBtnComponent extends AddToHomeScreenComponent {\n  constructor(protected addToHomeScreenService: AddToHomeScreenService) {\n    super(addToHomeScreenService);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, isDevMode, NgModule } from '@angular/core';\nimport {\n  ServiceWorkerModule,\n  SwRegistrationOptions,\n} from '@angular/service-worker';\nimport { Config, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { AddToHomeScreenBannerComponent } from './components/add-to-home-screen-banner/add-to-home-screen-banner.component';\nimport { AddToHomeScreenBtnComponent } from './components/add-to-home-screen-btn/add-to-home-screen-btn.component';\nimport { defaultPWAModuleConfig, PWAModuleConfig } from './pwa.module-config';\nimport { AddToHomeScreenService } from './services/add-to-home-screen.service';\n\nexport function pwaConfigurationFactory(\n  pwaConfig: PWAModuleConfig\n): SwRegistrationOptions {\n  return { enabled: (!isDevMode() && pwaConfig.pwa.enabled) || false };\n}\n\nexport function pwaFactory(addToHomeScreenService): any {\n  const result = () => addToHomeScreenService;\n  return result;\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ServiceWorkerModule.register('/ngsw-worker.js'),\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(defaultPWAModuleConfig),\n    {\n      provide: SwRegistrationOptions,\n      useFactory: pwaConfigurationFactory,\n      deps: [Config],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: pwaFactory,\n      deps: [AddToHomeScreenService],\n      multi: true,\n    },\n  ],\n  declarations: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n  exports: [AddToHomeScreenBtnComponent, AddToHomeScreenBannerComponent],\n})\nexport class PwaModule {}\n","import { APP_INITIALIZER, Provider } from '@angular/core';\nimport { LanguageService, WindowRef } from '@spartacus/core';\n\nexport const htmlLangProvider: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: setHtmlLangAttribute,\n  deps: [WindowRef, LanguageService],\n};\n\n/**\n * Sets active language in <html lang=\"\">\n */\nexport function setHtmlLangAttribute(\n  winRef: WindowRef,\n  languageService: LanguageService\n) {\n  const result = () => {\n    languageService.getActive().subscribe((lang) => {\n      winRef.document.documentElement.lang = lang.replace(/_/g, '-');\n    });\n  };\n  return result;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Meta, MetaDefinition, Title } from '@angular/platform-browser';\nimport { PageMeta, PageMetaService, PageRobotsMeta } from '@spartacus/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SeoMetaService implements OnDestroy {\n  constructor(\n    protected ngTitle: Title,\n    protected ngMeta: Meta,\n    protected pageMetaService: PageMetaService\n  ) {}\n\n  private subscription: Subscription;\n\n  init() {\n    this.subscription = this.pageMetaService\n      .getMeta()\n      .pipe(filter(Boolean))\n      .subscribe((meta: PageMeta) => (this.meta = meta));\n  }\n\n  protected set meta(meta: PageMeta) {\n    this.title = meta.title;\n    this.description = meta.description;\n    this.image = meta.image;\n    this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];\n  }\n\n  protected set title(title: string) {\n    this.ngTitle.setTitle(title || '');\n  }\n\n  protected set description(value: string) {\n    this.addTag({ name: 'description', content: value });\n  }\n\n  protected set image(imageUrl: string) {\n    if (imageUrl) {\n      this.addTag({ name: 'og:image', content: imageUrl });\n    }\n  }\n\n  protected set robots(value: PageRobotsMeta[]) {\n    if (value) {\n      this.addTag({ name: 'robots', content: value.join(', ') });\n    }\n  }\n\n  protected addTag(meta: MetaDefinition) {\n    if (meta.content) {\n      this.ngMeta.updateTag(meta);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  isDevMode,\n  PLATFORM_ID,\n  Renderer2,\n  RendererFactory2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { WindowRef } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdScriptFactory {\n  constructor(\n    @Inject(PLATFORM_ID) protected platformId: string,\n    protected winRef: WindowRef,\n    protected rendererFactory: RendererFactory2,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  build(schema: {}[]): void {\n    if (schema && this.isJsonLdRequired()) {\n      this.createJsonLdScriptElement().innerHTML = this.sanitize(schema);\n    }\n  }\n\n  /**\n   * Only return schema data in case of SSR or development mode,\n   * to not waste memory unnecessary.\n   */\n  isJsonLdRequired(): boolean {\n    return !isPlatformBrowser(this.platformId) || isDevMode();\n  }\n\n  private createJsonLdScriptElement(): HTMLScriptElement {\n    const id = 'json-ld';\n    let scriptElement: HTMLScriptElement = <HTMLScriptElement>(\n      this.winRef.document.getElementById(id)\n    );\n\n    if (!scriptElement) {\n      const renderer: Renderer2 = this.rendererFactory.createRenderer(\n        null,\n        null\n      );\n      const script: HTMLScriptElement = renderer.createElement('script');\n      script.id = id;\n      script.type = 'application/ld+json';\n      renderer.appendChild(this.winRef.document.body, script);\n      scriptElement = script;\n    }\n    return scriptElement;\n  }\n\n  /**\n   * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.\n   *\n   * The given schema is not trusted, as malicious code could be injected (XSS)\n   * into the json-ld script.\n   */\n  sanitize(schema: {}): string {\n    return JSON.stringify(schema, (_key, value) =>\n      typeof value === 'string'\n        ? this.sanitizer.sanitize(SecurityContext.HTML, value)\n        : value\n    );\n  }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n/**\n * Low level directive that adds a json-ld script tag to the component.\n * This code bypasses the strict XSS security, as otherwise we're not able\n * to append a script tag with JS inside.\n */\n@Directive({\n  selector: '[cxJsonLd]',\n})\nexport class JsonLdDirective {\n  @Input() set cxJsonLd(schema: string | number) {\n    this.writeJsonLd(schema);\n  }\n\n  @HostBinding('innerHTML') jsonLD: SafeHtml;\n\n  constructor(\n    protected jsonLdScriptFactory: JsonLdScriptFactory,\n    protected sanitizer: DomSanitizer\n  ) {}\n\n  private writeJsonLd(schema: {}) {\n    if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {\n      const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);\n      const html = `<script type=\"application/ld+json\">${sanitizedSchema}</script>`;\n      this.jsonLD = this.sanitizer.bypassSecurityTrustHtml(html);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * Injection token to extend schema builders for adding structural data (json-ld).\n *\n * Some builders (i.e. `JSONLD_PRODUCT_BUILDER`) might have additional\n * lowever level builder to further extend the schema.\n */\nexport const SCHEMA_BUILDER = new InjectionToken('SchemaBuilderToken');\n\n/**\n * Injection token to add specific json-ld builders for product related schema's.\n * See see https://schema.org/product for more information.\n */\nexport const JSONLD_PRODUCT_BUILDER = new InjectionToken(\n  'JsonLdProductBuilderToken'\n);\n","import { Inject, Injectable, OnDestroy, Optional } from '@angular/core';\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\nimport { SchemaBuilder } from './builders/schema.interface';\nimport { SCHEMA_BUILDER } from './builders/tokens';\nimport { JsonLdScriptFactory } from './json-ld-script.factory';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StructuredDataFactory implements OnDestroy {\n  constructor(\n    private scriptBuilder: JsonLdScriptFactory,\n    @Optional()\n    @Inject(SCHEMA_BUILDER)\n    private builders: SchemaBuilder[]\n  ) {}\n\n  private subscription: Subscription;\n\n  build() {\n    this.subscription = this.collectSchemas().subscribe((schema: {}[]) => {\n      this.scriptBuilder.build(schema);\n    });\n  }\n\n  private collectSchemas(): Observable<any[]> {\n    if (!this.scriptBuilder.isJsonLdRequired() || !this.builders) {\n      return of();\n    }\n    return combineLatest(\n      this.builders.map((builder) => builder.build())\n    ).pipe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { JsonLdDirective } from './json-ld.directive';\nimport { StructuredDataFactory } from './structured-data.factory';\n\n/**\n * Factory to build the structure data\n * without any interaction with the UI.\n */\nexport function getStructuredDataFactory(injector: Injector) {\n  const result = () => {\n    const factory = injector.get(StructuredDataFactory);\n    factory.build();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [JsonLdDirective],\n  exports: [JsonLdDirective],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: getStructuredDataFactory,\n      deps: [Injector],\n      multi: true,\n    },\n  ],\n})\nexport class StructuredDataModule {}\n","import { APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { htmlLangProvider } from './html-lang-provider';\nimport { SeoMetaService } from './seo-meta.service';\nimport { StructuredDataModule } from './structured-data/structured-data.module';\n\nexport function initSeoService(injector: Injector) {\n  const result = () => {\n    const service = injector.get(SeoMetaService);\n    service.init();\n  };\n  return result;\n}\n\n@NgModule({\n  imports: [StructuredDataModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initSeoService,\n      deps: [Injector],\n      multi: true,\n    },\n    htmlLangProvider,\n  ],\n})\nexport class SeoModule {}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  FocusConfig,\n  KeyboardFocusService,\n} from '../a11y/keyboard-focus/index';\nimport { SkipLinkComponent } from '../a11y/skip-link/index';\nimport { HamburgerMenuService } from '../header/hamburger-menu/hamburger-menu.service';\n\n@Component({\n  selector: 'cx-storefront',\n  templateUrl: './storefront.component.html',\n})\nexport class StorefrontComponent implements OnInit, OnDestroy {\n  navigateSubscription: Subscription;\n  isExpanded$: Observable<boolean> = this.hamburgerMenuService.isExpanded;\n\n  @HostBinding('class.start-navigating') startNavigating;\n  @HostBinding('class.stop-navigating') stopNavigating;\n\n  // required by esc focus\n  @HostBinding('tabindex') tabindex = '0';\n\n  @ViewChild(SkipLinkComponent) child: SkipLinkComponent;\n\n  private keyboardFocusConfig: FocusConfig = {\n    focusOnEscape: true,\n    focusOnDoubleEscape: true,\n  };\n\n  @HostListener('keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.keyboardFocusService.handleEscape(\n      this.elementRef.nativeElement,\n      this.keyboardFocusConfig,\n      event\n    );\n  }\n\n  constructor(\n    private hamburgerMenuService: HamburgerMenuService,\n    private routingService: RoutingService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected keyboardFocusService: KeyboardFocusService\n  ) {}\n\n  ngOnInit(): void {\n    this.navigateSubscription = this.routingService\n      .isNavigating()\n      .subscribe((val) => {\n        this.startNavigating = val === true;\n        this.stopNavigating = val === false;\n      });\n  }\n\n  collapseMenuIfClickOutside(event: MouseEvent) {\n    if ((<HTMLElement>event.target).className.includes('is-expanded')) {\n      this.collapseMenu();\n    }\n  }\n\n  collapseMenu(): void {\n    this.hamburgerMenuService.toggle(true);\n  }\n\n  ngOnDestroy(): void {\n    if (this.navigateSubscription) {\n      this.navigateSubscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { FeaturesConfigModule } from '@spartacus/core';\nimport { GlobalMessageComponentModule } from '../../cms-components/misc/global-message/global-message.module';\nimport { OutletRefModule } from '../../cms-structure/outlet/outlet-ref/outlet-ref.module';\nimport { OutletModule } from '../../cms-structure/outlet/outlet.module';\nimport { PageLayoutModule } from '../../cms-structure/page/page-layout/page-layout.module';\nimport { PageSlotModule } from '../../cms-structure/page/slot/page-slot.module';\nimport { PwaModule } from '../../cms-structure/pwa/pwa.module';\nimport { SeoModule } from '../../cms-structure/seo/seo.module';\nimport { AnonymousConsentsDialogModule } from '../../shared/components/anonymous-consents-dialog/anonymous-consents-dialog.module';\nimport { KeyboardFocusModule } from '../a11y/keyboard-focus/keyboard-focus.module';\nimport { SkipLinkModule } from '../a11y/skip-link/skip-link.module';\nimport { StorefrontComponent } from './storefront.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    GlobalMessageComponentModule,\n    OutletModule,\n    OutletRefModule,\n    PwaModule,\n    PageLayoutModule,\n    SeoModule,\n    PageSlotModule,\n    AnonymousConsentsDialogModule,\n    FeaturesConfigModule,\n\n    SkipLinkModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [StorefrontComponent],\n  exports: [StorefrontComponent],\n})\nexport class MainModule {}\n","import { Injectable, Injector } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { CmsActivatedRouteSnapshot } from '@spartacus/core';\nimport { concat, from, isObservable, Observable, of } from 'rxjs';\nimport { endWith, first, skipWhile } from 'rxjs/operators';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsGuardsService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected injector: Injector\n  ) {}\n\n  cmsPageCanActivate(\n    componentTypes: string[],\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const guards = this.cmsComponentsService.getGuards(componentTypes);\n\n    if (guards.length) {\n      const canActivateObservables = guards.map((guardClass) => {\n        const guard = this.injector.get<CanActivate>(guardClass, null);\n        if (isCanActivate(guard)) {\n          return wrapIntoObservable(guard.canActivate(route, state)).pipe(\n            first()\n          );\n        } else {\n          throw new Error('Invalid CanActivate guard in cmsMapping');\n        }\n      });\n\n      return concat(...canActivateObservables).pipe(\n        skipWhile((canActivate: boolean | UrlTree) => canActivate === true),\n        endWith(true),\n        first()\n      );\n    } else {\n      return of(true);\n    }\n  }\n}\n\nfunction wrapIntoObservable<T>(\n  value: T | Promise<T> | Observable<T>\n): Observable<T> {\n  if (isObservable(value)) {\n    return value;\n  }\n\n  if (isPromise(value)) {\n    return from(Promise.resolve(value));\n  }\n\n  return of(value);\n}\n\nfunction isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nfunction isCanActivate(guard: any): guard is CanActivate {\n  return guard && isFunction<CanActivate>(guard.canActivate);\n}\n\nfunction isFunction<T>(v: any): v is T {\n  return typeof v === 'function';\n}\n","import { Injectable } from '@angular/core';\nimport { TranslationChunkService, TranslationService } from '@spartacus/core';\nimport { CmsComponentsService } from './cms-components.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsI18nService {\n  constructor(\n    protected cmsComponentsService: CmsComponentsService,\n    protected translation: TranslationService,\n    protected translationChunk: TranslationChunkService\n  ) {}\n\n  loadForComponents(componentTypes: string[]) {\n    const i18nKeys = this.cmsComponentsService.getI18nKeys(componentTypes);\n    const i18nChunks = new Set<string>();\n    for (const key of i18nKeys) {\n      i18nChunks.add(this.translationChunk.getChunkNameForKey(key));\n    }\n    this.translation.loadChunks(Array.from(i18nChunks));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsRoute, PageContext, PageType } from '@spartacus/core';\nimport { PageLayoutComponent } from '../page/page-layout/page-layout.component';\nimport { CmsComponentsService } from './cms-components.service';\n\n// This service should be exposed in public API only after the refactor planned in https://github.com/SAP/spartacus/issues/7070\n@Injectable({ providedIn: 'root' })\nexport class CmsRoutesImplService {\n  constructor(\n    private router: Router,\n    private cmsComponentsService: CmsComponentsService\n  ) {}\n\n  private cmsRouteExists(url: string): boolean {\n    const isCmsDrivenRoute = url.startsWith('/');\n\n    if (!isCmsDrivenRoute) {\n      return false;\n    }\n\n    const routePath = url.substr(1);\n\n    return (\n      isCmsDrivenRoute &&\n      !!this.router.config.find(\n        (route: CmsRoute) =>\n          route.data && route.data.cxCmsRouteContext && route.path === routePath\n      )\n    );\n  }\n\n  /**\n   * Contains Cms driven routing logic intended for use use in guards, especially in canActivate method.\n   *\n   * Will return true, when logic wont have to modify routing (so canActivate could be easily resolved to true)\n   * or will return false, when routing configuration was updated and redirection to newly generated route was initiated.\n   *\n   * @param pageContext\n   * @param currentUrl\n   */\n  handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean {\n    if (this.cmsRouteExists(currentPageLabel)) {\n      return true;\n    }\n\n    const componentRoutes = this.cmsComponentsService.getChildRoutes(\n      componentTypes\n    );\n    if (componentRoutes.length) {\n      if (this.updateRouting(pageContext, currentPageLabel, componentRoutes)) {\n        this.router.navigateByUrl(currentUrl);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private updateRouting(\n    pageContext: PageContext,\n    pageLabel: string,\n    routes: Route[]\n  ): boolean {\n    if (\n      pageContext.type === PageType.CONTENT_PAGE &&\n      pageLabel.startsWith('/') &&\n      pageLabel.length > 1\n    ) {\n      const newRoute: CmsRoute = {\n        path: pageLabel.substr(1),\n        component: PageLayoutComponent,\n        children: routes,\n        data: {\n          cxCmsRouteContext: {\n            type: pageContext.type,\n            id: pageLabel,\n          },\n        },\n      };\n\n      this.router.resetConfig([newRoute, ...this.router.config]);\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PageContext } from '@spartacus/core';\nimport { CmsRoutesImplService } from './cms-routes-impl.service';\n\n// Public injection token for the private implementation of the service `CmsRoutesImplService`.\n// After #7070, this class should be replaced with a real implementation.\n@Injectable({\n  providedIn: 'root',\n  useExisting: CmsRoutesImplService,\n})\nexport abstract class CmsRoutesService {\n  abstract handleCmsRoutesInGuard(\n    pageContext: PageContext,\n    componentTypes: string[],\n    currentUrl: string,\n    currentPageLabel: string\n  ): boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  Page,\n  PageContext,\n  PageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CmsComponentsService } from '../services/cms-components.service';\nimport { CmsGuardsService } from '../services/cms-guards.service';\nimport { CmsI18nService } from '../services/cms-i18n.service';\nimport { CmsRoutesService } from '../services/cms-routes.service';\n\n/**\n * Helper service for `CmsPageGuard`\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuardService {\n  constructor(\n    protected semanticPathService: SemanticPathService,\n    protected cmsService: CmsService,\n    protected cmsRoutes: CmsRoutesService,\n    protected cmsI18n: CmsI18nService,\n    protected cmsGuards: CmsGuardsService,\n    protected cmsComponentsService: CmsComponentsService\n  ) {}\n\n  /**\n   * Takes CMS components types in the current CMS page, triggers (configurable) side effects and returns a boolean - whether the route can be activated.\n   *\n   * Based on `cmsComponents` config for the components in the page:\n   * - Evaluates components' guards; if one of them emits false or UrlTree - the route cannot be activated or redirects to the given UrlTree, respectively.\n   * - If all components' guards emitted true, then the route can be activated\n   * - Then we trigger loading of configured i18n chunks in parallel\n   * - And we register the configured children routes of cms components\n   *\n   * @param pageContext current cms page context\n   * @param pageData cms page data\n   * @param route activated route snapshot\n   * @param state router state snapshot\n   *\n   * @returns boolean observable - whether the route can be activated\n   */\n  canActivatePage(\n    pageContext: PageContext,\n    pageData: Page,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.cmsService.getPageComponentTypes(pageContext).pipe(\n      take(1),\n      switchMap((componentTypes) =>\n        this.cmsComponentsService.determineMappings(componentTypes)\n      ),\n      switchMap((componentTypes) =>\n        this.cmsGuards\n          .cmsPageCanActivate(componentTypes, route, state)\n          .pipe(withLatestFrom(of(componentTypes)))\n      ),\n      tap(([canActivate, componentTypes]) => {\n        if (canActivate === true) {\n          this.cmsI18n.loadForComponents(componentTypes);\n        }\n      }),\n      map(([canActivate, componentTypes]) => {\n        const pageLabel = pageData.label || pageContext.id; // for content pages the page label returned from backend can be different than ID initially assumed from route\n        if (canActivate === true && !route?.data?.cxCmsRouteContext) {\n          return this.cmsRoutes.handleCmsRoutesInGuard(\n            pageContext,\n            componentTypes,\n            state.url,\n            pageLabel\n          );\n        }\n        return canActivate;\n      })\n    );\n  }\n\n  /**\n   * Activates the \"NOT FOUND\" cms page.\n   *\n   * It loads cms page data for the \"NOT FOUND\" page and puts it in the state of the the requested page label.\n   * Then it processes its CMS components with the method `canActivatePage()` of this service. For more, see its docs.\n   */\n  canActivateNotFoundPage(\n    pageContext: PageContext,\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    const notFoundCmsPageContext: PageContext = {\n      type: PageType.CONTENT_PAGE,\n      id: this.semanticPathService.get('notFound'),\n    };\n\n    return this.cmsService.getPage(notFoundCmsPageContext).pipe(\n      switchMap((notFoundPage) => {\n        if (notFoundPage) {\n          return this.cmsService.getPageIndex(notFoundCmsPageContext).pipe(\n            tap((notFoundIndex) => {\n              this.cmsService.setPageFailIndex(pageContext, notFoundIndex);\n            }),\n            switchMap((notFoundIndex) =>\n              this.cmsService.getPageIndex(pageContext).pipe(\n                // we have to wait for page index update\n                filter((index) => index === notFoundIndex)\n              )\n            ),\n            switchMap(() =>\n              this.canActivatePage(pageContext, notFoundPage, route, state)\n            )\n          );\n        }\n        return of(false);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport {\n  CmsActivatedRouteSnapshot,\n  CmsService,\n  ProtectedRoutesGuard,\n  RouteLoadStrategy,\n  RoutingConfigService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { CmsPageGuardService } from './cms-page-guard.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CmsPageGuard implements CanActivate {\n  static guardName = 'CmsPageGuard';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected cmsService: CmsService,\n    protected protectedRoutesGuard: ProtectedRoutesGuard,\n    protected service: CmsPageGuardService,\n    protected routingConfig: RoutingConfigService\n  ) {}\n\n  /**\n   * Tries to load the CMS page data for the anticipated route and returns:\n   * - `true` - if it can be activated\n   * - `false` - if it cannot be activated\n   * - `UrlTree` - if user should be redirected to a given `UrlTree`\n   *\n   * If the route can be activated, it fires additional calculations on the CMS components present on this CMS page,\n   * based on their configuration (`cmsComponents` config).\n   *\n   * For more, see docs of the `CmsPageGuardService.canActivatePage`.\n   */\n  canActivate(\n    route: CmsActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    return this.protectedRoutesGuard.canActivate(route).pipe(\n      switchMap((canActivate) =>\n        canActivate\n          ? this.routingService.getNextPageContext().pipe(\n              switchMap((pageContext) =>\n                this.cmsService.getPage(pageContext, this.shouldReload()).pipe(\n                  first(),\n                  switchMap((pageData) =>\n                    pageData\n                      ? this.service.canActivatePage(\n                          pageContext,\n                          pageData,\n                          route,\n                          state\n                        )\n                      : this.service.canActivateNotFoundPage(\n                          pageContext,\n                          route,\n                          state\n                        )\n                  )\n                )\n              )\n            )\n          : of(false)\n      )\n    );\n  }\n\n  /**\n   * Returns whether we should reload the CMS page data, even when it was loaded before.\n   */\n  private shouldReload(): boolean {\n    return this.routingConfig.getLoadStrategy() !== RouteLoadStrategy.ONCE;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { Route, Router } from '@angular/router';\nimport { CmsPageGuard } from '../../guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../page/page-layout/page-layout.component';\n\nconst cmsRoute: Route = {\n  path: '**',\n  canActivate: [CmsPageGuard],\n  component: PageLayoutComponent,\n};\n\nexport function addCmsRoute(injector: Injector) {\n  const result = () => {\n    const router = injector.get(Router);\n    router.config.push(cmsRoute);\n  };\n  return result;\n}\n","import { NgModule, APP_INITIALIZER, Injector } from '@angular/core';\nimport { addCmsRoute } from './add-cms-route';\n\n@NgModule({\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      multi: true,\n      deps: [Injector],\n      useFactory: addCmsRoute,\n    },\n  ],\n})\nexport class CmsRouteModule {}\n","import { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const defaultStorefrontRoutesConfig: RoutesConfig = {\n  home: { paths: [''] },\n  notFound: { paths: ['not-found'] },\n  cart: { paths: ['cart'] },\n\n  // semantic links for login related pages\n  login: { paths: ['login'], protected: false },\n  register: { paths: ['login/register'], protected: false },\n  forgotPassword: { paths: ['login/forgot-password'], protected: false },\n  resetPassword: { paths: ['login/pw/change'], protected: false },\n  logout: { paths: ['logout'] },\n  checkoutLogin: { paths: ['checkout-login'] },\n\n  checkout: { paths: ['checkout'] },\n  checkoutShippingAddress: { paths: ['checkout/shipping-address'] },\n  checkoutDeliveryMode: { paths: ['checkout/delivery-mode'] },\n  checkoutPaymentDetails: { paths: ['checkout/payment-details'] },\n  checkoutReviewOrder: { paths: ['checkout/review-order'] },\n  orderConfirmation: { paths: ['order-confirmation'] },\n\n  // plp routes\n  search: { paths: ['search/:query'] },\n  category: {\n    paths: ['category/:categoryCode'],\n    paramsMapping: { categoryCode: 'code' },\n  },\n  brand: { paths: ['Brands/:brandName/c/:brandCode'] },\n\n  // pdp routes\n  product: {\n    paths: ['product/:productCode/:name'],\n    paramsMapping: { productCode: 'code' },\n  },\n\n  termsAndConditions: { paths: ['terms-and-conditions'] },\n  orders: {\n    paths: ['my-account/orders'],\n  },\n  orderDetails: {\n    paths: ['my-account/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderGuest: {\n    paths: ['guest/order/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturn: {\n    paths: ['my-account/order/return/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderReturnConfirmation: {\n    paths: ['my-account/order/return/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancel: {\n    paths: ['my-account/order/cancel/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  orderCancelConfirmation: {\n    paths: ['my-account/order/cancel/confirmation/:orderCode'],\n    paramsMapping: { orderCode: 'code' },\n  },\n  returnRequestDetails: {\n    paths: ['my-account/return-request/:returnCode'],\n    paramsMapping: { returnCode: 'rma' },\n  },\n  coupons: { paths: ['my-account/coupons'] },\n  couponClaim: {\n    paths: ['my-account/coupon/claim/:couponCode'],\n    paramsMapping: { couponCode: 'code' },\n  },\n};\n\nexport const defaultRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: defaultStorefrontRoutesConfig,\n  },\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideDefaultConfig,\n  RoutingModule as CoreRoutingModule,\n} from '@spartacus/core';\nimport { CmsRouteModule } from './cms-route/cms-route.module';\nimport { defaultRoutingConfig } from './default-routing-config';\n\n@NgModule({\n  imports: [CoreRoutingModule.forRoot(), CmsRouteModule],\n})\nexport class RoutingModule {\n  static forRoot(): ModuleWithProviders<RoutingModule> {\n    return {\n      ngModule: RoutingModule,\n      providers: [provideDefaultConfig(defaultRoutingConfig)],\n    };\n  }\n}\n","import { isDevMode } from '@angular/core';\nimport { UrlMatchResult, UrlSegment } from '@angular/router';\n\n/**\n * Matches the pattern '[ ** / ] marker / :paramName'\n *\n * @param marker phrase that indicates the start of the match\n * @param paramName name of the parameter present after the marker\n * @param precedingParamName name of the parameter for every preceding url segment\n *        i.e. `param` will result in `param0`, `param1`, ...\n */\nexport function getSuffixUrlMatcher({\n  marker,\n  paramName,\n  precedingParamName,\n}: {\n  marker: string;\n  paramName: string;\n  precedingParamName?: string;\n}) {\n  precedingParamName = precedingParamName || 'param';\n  const matcher = function suffixUrlMatcher(\n    segments: UrlSegment[]\n  ): UrlMatchResult | null {\n    const markerIndex = findLastIndex(segments, ({ path }) => path === marker);\n    const isMarkerLastSegment = markerIndex === segments.length - 1;\n\n    if (markerIndex === -1 || isMarkerLastSegment) {\n      return null;\n    }\n\n    const paramIndex = markerIndex + 1;\n    const posParams: { [name: string]: UrlSegment } = {\n      [paramName]: segments[paramIndex],\n    };\n\n    for (let i = 0; i < markerIndex; i++) {\n      posParams[`${precedingParamName}${i}`] = segments[i];\n    }\n\n    return { consumed: segments.slice(0, paramIndex + 1), posParams };\n  };\n\n  if (isDevMode()) {\n    matcher['_suffixRouteConfig'] = { marker, paramName, precedingParamName }; // property added for easier debugging of routes\n  }\n\n  return matcher;\n}\n\nfunction findLastIndex<T>(elements: T[], predicate: (el: T) => boolean) {\n  for (let index = elements.length - 1; index >= 0; index--) {\n    if (predicate(elements[index])) {\n      return index;\n    }\n  }\n  return -1;\n}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { PageMeta, PageMetaService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SchemaBuilder } from '../schema.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BreadcrumbSchemaBuilder implements SchemaBuilder {\n  constructor(protected pageMetaService: PageMetaService) {}\n\n  build(): Observable<any> {\n    return this.pageMetaService\n      .getMeta()\n      .pipe(map((pageMeta: PageMeta) => this.collect(pageMeta)));\n  }\n\n  protected collect(pageMeta: PageMeta): any {\n    if (!pageMeta?.breadcrumbs) {\n      return;\n    }\n    const crumbs = pageMeta.breadcrumbs.map((crumb, index) => {\n      return {\n        '@type': 'ListItem',\n        position: index + 1,\n        item: {\n          '@id': crumb.link,\n          name: crumb.label,\n        },\n      };\n    });\n\n    if (pageMeta.title) {\n      crumbs.push({\n        '@type': 'ListItem',\n        position: crumbs.length + 1,\n        item: {\n          '@id': pageMeta.title,\n          name: pageMeta.title,\n        },\n      });\n    }\n\n    return {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: crumbs,\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the basic structured data for the product, see https://schema.org/product.\n * This builder includes data for sku number, name, description, brand and main image.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdBaseProductBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    return of({\n      ...this.getProductBase(product),\n      ...this.getProductBrand(product),\n      ...this.getProductImage(product),\n    });\n  }\n\n  private getProductBase(product: Product) {\n    const result: any = { sku: product.code };\n    if (product.name) {\n      result.name = product.name;\n    }\n    if (product.summary) {\n      result.description = product.summary;\n    }\n    return result;\n  }\n\n  private getProductImage(product: Product) {\n    return product.images &&\n      product.images.PRIMARY &&\n      product.images.PRIMARY['zoom'] &&\n      product.images.PRIMARY['zoom'].url\n      ? {\n          image: product.images.PRIMARY['zoom'].url,\n        }\n      : {};\n  }\n\n  private getProductBrand(product: Product) {\n    return product['manufacturer']\n      ? {\n          brand: product['manufacturer'],\n        }\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product offer, see https://schema.org/offers.\n * The data includes the price, currency and availability level.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductOfferBuilder implements JsonLdBuilder<Product> {\n  build(product: Product): Observable<any> {\n    const schema: any = { '@type': 'Offer' };\n    if (product.price) {\n      if (product.price.value) {\n        schema.price = product.price.value;\n      }\n      if (product.price.currencyIso) {\n        schema.priceCurrency = product.price.currencyIso;\n      }\n    }\n\n    if (product.stock && product.stock.stockLevelStatus) {\n      schema.availability =\n        product.stock.stockLevelStatus === 'inStock' ? 'InStock' : 'OutOfStock';\n    }\n\n    return of({\n      offers: schema,\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { JsonLdBuilder } from '../schema.interface';\n\n/**\n * Builds the structured data for the product reviews, see https://schema.org/Review.\n * The data includes the aggregated product rating and the individual reviews.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class JsonLdProductReviewBuilder implements JsonLdBuilder<Product> {\n  constructor(private reviewService: ProductReviewService) {}\n\n  build(product: Product): Observable<any> {\n    return this.reviewService.getByProductCode(product.code).pipe(\n      filter(Boolean),\n      map((reviews: Review[]) => {\n        return {\n          aggregateRating: this.buildAggregatedReviews(product, reviews),\n          review: reviews.map((review) => this.buildReviews(review)),\n        };\n      })\n    );\n  }\n\n  private buildAggregatedReviews(product: Product, reviews: Review[]) {\n    const aggregated: any = {\n      '@type': 'AggregateRating',\n    };\n    if (product.averageRating) {\n      aggregated.ratingValue = product.averageRating;\n    }\n    if (reviews) {\n      aggregated.ratingCount = reviews.filter((rev) => !!rev.rating).length;\n      aggregated.reviewCount = reviews.filter((rev) => !!rev.comment).length;\n    }\n    return aggregated;\n  }\n\n  private buildReviews(review: Review) {\n    const reviewSchema: any = {\n      '@type': 'review',\n    };\n\n    if (review.principal && review.principal.name) {\n      reviewSchema.author = review.principal.name;\n    }\n    if (review.date) {\n      const date = new Date(review.date);\n      reviewSchema.datePublished = `${date.getFullYear()}-${\n        date.getMonth() + 1\n      }-${date.getDate()}`;\n    }\n    if (review.headline) {\n      reviewSchema.name = review.headline;\n    }\n    if (review.comment) {\n      reviewSchema.description = review.comment;\n    }\n    if (review.rating) {\n      reviewSchema.reviewRating = {\n        '@type': 'Rating',\n        ratingValue: review.rating.toString(),\n      };\n    }\n\n    return reviewSchema;\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { CurrentProductService } from '../../../../../cms-components/product/current-product.service';\nimport { JsonLdBuilder, SchemaBuilder } from '../schema.interface';\nimport { JSONLD_PRODUCT_BUILDER } from '../tokens';\n\n/**\n * Adds the minimal structured data for the product, see https://schema.org/product.\n * The actual data collection is delegated to `JsonLdBuilder`s, which can be injected\n * using the `JSONLD_PRODUCT_BUILDER` token.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductSchemaBuilder implements SchemaBuilder {\n  constructor(\n    private currentProduct: CurrentProductService,\n    @Optional()\n    @Inject(JSONLD_PRODUCT_BUILDER)\n    protected builders: JsonLdBuilder<Product>[]\n  ) {}\n\n  build(): Observable<any> {\n    return this.currentProduct.getProduct().pipe(\n      switchMap((product: Product) => {\n        if (product) {\n          return combineLatest(this.collect(product)).pipe(\n            map((res: {}[]) => Object.assign({}, ...res))\n          );\n        }\n        return of({});\n      })\n    );\n  }\n\n  protected collect(product: Product): Observable<any>[] {\n    if (!product || !product.code) {\n      return [];\n    }\n    const builders = this.builders\n      ? this.builders.map((builder) => builder.build(product))\n      : [];\n    return [\n      of({\n        '@context': 'http://schema.org',\n        '@type': 'Product',\n      }),\n      ...builders,\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BreadcrumbSchemaBuilder } from './breadcrumb/index';\nimport {\n  JsonLdBaseProductBuilder,\n  JsonLdProductOfferBuilder,\n  JsonLdProductReviewBuilder,\n  ProductSchemaBuilder,\n} from './product/index';\nimport { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';\n\n/**\n * Provides several standard json-ld builders that contribute\n * to colleting and building json-ld data.\n */\n@NgModule({\n  providers: [\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: ProductSchemaBuilder,\n      multi: true,\n    },\n    {\n      provide: SCHEMA_BUILDER,\n      useExisting: BreadcrumbSchemaBuilder,\n      multi: true,\n    },\n    // lower level json-ld builder classes offering fine-graiend control\n    // for product related schema's\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdBaseProductBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductOfferBuilder,\n      multi: true,\n    },\n    {\n      provide: JSONLD_PRODUCT_BUILDER,\n      useExisting: JsonLdProductReviewBuilder,\n      multi: true,\n    },\n  ],\n})\nexport class JsonLdBuilderModule {}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport {\n  CmsBannerCarouselComponent as model,\n  CmsService,\n  ContentSlotComponentData,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/index';\n\n/**\n * Generic carousel that renders CMS Components.\n */\n@Component({\n  selector: 'cx-banner-carousel',\n  templateUrl: 'banner-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerCarouselComponent {\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean),\n    tap((d: model) => (this.theme = `${d.effect}-theme`))\n  );\n\n  private items$: Observable<\n    Observable<ContentSlotComponentData>[]\n  > = this.componentData$.pipe(\n    map((data) => data.banners.trim().split(' ')),\n    map((codes) => codes.map((code) => this.cmsService.getComponentData(code)))\n  );\n\n  /**\n   * Adds a specific theme for the carousel. The effect can be\n   * used in CSS customisations.\n   */\n  @HostBinding('class') theme = '';\n\n  constructor(\n    private componentData: CmsComponentData<model>,\n    private cmsService: CmsService\n  ) {}\n\n  /**\n   * Returns an Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  getItems(): Observable<Observable<ContentSlotComponentData>[]> {\n    return this.items$;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { CarouselModule, MediaModule } from '../../../shared/components/index';\nimport { BannerCarouselComponent } from './banner-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, CarouselModule, MediaModule],\n  providers: [\n    provideDefaultConfig({\n      cmsComponents: {\n        RotatingImagesComponent: {\n          component: BannerCarouselComponent,\n        },\n      },\n    } as CmsConfig),\n  ],\n  declarations: [BannerCarouselComponent],\n  entryComponents: [BannerCarouselComponent],\n  exports: [BannerCarouselComponent],\n})\nexport class BannerCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsBannerComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-banner',\n  templateUrl: './banner.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {\n  constructor(public component: CmsComponentData<CmsBannerComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { BannerComponent } from './banner.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule, MediaModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SimpleResponsiveBannerComponent: {\n          component: BannerComponent,\n        },\n        BannerComponent: {\n          component: BannerComponent,\n        },\n        SimpleBannerComponent: {\n          component: BannerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BannerComponent],\n  entryComponents: [BannerComponent],\n  exports: [BannerComponent],\n})\nexport class BannerModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsLinkComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-link',\n  templateUrl: './link.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LinkComponent {\n  constructor(public component: CmsComponentData<CmsLinkComponent>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { LinkComponent } from './link.component';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, GenericLinkModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSLinkComponent: { component: LinkComponent },\n      },\n    }),\n  ],\n  declarations: [LinkComponent],\n  exports: [LinkComponent],\n  entryComponents: [LinkComponent],\n})\nexport class LinkModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsParagraphComponent } from '@spartacus/core';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-paragraph',\n  templateUrl: './paragraph.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ParagraphComponent {\n  constructor(public component: CmsComponentData<CmsParagraphComponent>) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ParagraphComponent } from './paragraph.component';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSParagraphComponent: {\n          component: ParagraphComponent,\n        },\n        CMSTabParagraphComponent: {\n          component: ParagraphComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ParagraphComponent],\n  exports: [ParagraphComponent],\n  entryComponents: [ParagraphComponent],\n})\nexport class CmsParagraphModule {}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport {\n  CmsService,\n  CMSTabParagraphContainer,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, take, switchMap } from 'rxjs/operators';\nimport { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';\nimport { CmsComponentData } from '../../../cms-structure/page/model/index';\nimport { BreakpointService } from '../../../layout/breakpoint/breakpoint.service';\nimport { BREAKPOINT } from '../../../layout/config/layout-config';\n\n@Component({\n  selector: 'cx-tab-paragraph-container',\n  templateUrl: './tab-paragraph-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabParagraphContainerComponent\n  implements AfterViewInit, OnInit, OnDestroy {\n  activeTabNum = 0;\n\n  @ViewChildren(ComponentWrapperDirective) children!: QueryList<\n    ComponentWrapperDirective\n  >;\n\n  tabTitleParams: Observable<any>[] = [];\n\n  subscription: Subscription;\n\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    winRef?: WindowRef,\n    // tslint:disable-next-line:unified-signatures\n    breakpointService?: BreakpointService\n  );\n  /**\n   * @deprecated since 2.1\n   */\n  constructor(\n    componentData: CmsComponentData<CMSTabParagraphContainer>,\n    cmsService: CmsService,\n    winRef?: WindowRef\n  );\n  constructor(\n    public componentData: CmsComponentData<CMSTabParagraphContainer>,\n    protected cmsService: CmsService,\n    protected winRef?: WindowRef,\n    protected breakpointService?: BreakpointService\n  ) {}\n\n  components$: Observable<any[]> = this.componentData.data$.pipe(\n    distinctUntilChanged((x, y) => x?.components === y?.components),\n    switchMap((data) =>\n      combineLatest(\n        (data?.components ?? '').split(' ').map((component) =>\n          this.cmsService.getComponentData<any>(component).pipe(\n            distinctUntilChanged(),\n            map((tab) => {\n              if (!tab) {\n                return undefined;\n              }\n\n              if (!tab.flexType) {\n                tab = {\n                  ...tab,\n                  flexType: tab.typeCode,\n                };\n              }\n\n              return {\n                ...tab,\n                title: `${data.uid}.tabs.${tab.uid}`,\n              };\n            })\n          )\n        )\n      )\n    )\n  );\n\n  select(tabNum: number, event?: MouseEvent): void {\n    this.breakpointService\n      ?.isDown(BREAKPOINT.sm)\n      .pipe(take(1))\n      .subscribe((res) => {\n        if (res) {\n          this.activeTabNum = this.activeTabNum === tabNum ? -1 : tabNum;\n          if (event && event?.target) {\n            const target = event.target as HTMLElement;\n            const parentNode = target.parentNode as HTMLElement;\n            this.winRef?.nativeWindow?.scrollTo(0, parentNode.offsetTop);\n          }\n        } else {\n          this.activeTabNum = tabNum;\n        }\n      });\n  }\n\n  ngOnInit(): void {\n    this.activeTabNum =\n      this.winRef?.nativeWindow?.history?.state?.activeTab ?? this.activeTabNum;\n  }\n\n  ngAfterViewInit(): void {\n    // If the sub cms components data exist, the components created before ngAfterViewInit are called.\n    // In this case, the title parameters are directly pulled from them.\n    // If the sub cms components data does not exist, it should should be loaded first.\n    // In this case, listen to the changes to wait for them to be created.\n    if (this.children.length > 0) {\n      this.getTitleParams(this.children);\n    } else {\n      this.subscription = this.children.changes.subscribe(\n        (tabComps: QueryList<ComponentWrapperDirective>) =>\n          this.getTitleParams(tabComps)\n      );\n    }\n  }\n\n  private getTitleParams(children: QueryList<ComponentWrapperDirective>) {\n    children.forEach((comp) => {\n      if (comp.cmpRef && comp.cmpRef.instance.tabTitleParam$) {\n        this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);\n      } else {\n        this.tabTitleParams.push(null);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { PageComponentModule } from '../../../cms-structure/page/component/page-component.module';\nimport { TabParagraphContainerComponent } from './tab-paragraph-container.component';\n\n@NgModule({\n  imports: [CommonModule, PageComponentModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSTabParagraphContainer: {\n          component: TabParagraphContainerComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [TabParagraphContainerComponent],\n  entryComponents: [TabParagraphContainerComponent],\n  exports: [TabParagraphContainerComponent],\n})\nexport class TabParagraphContainerModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Address,\n  CheckoutDeliveryService,\n  UserAddressService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AddressBookComponentService {\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  getAddresses(): Observable<Address[]> {\n    return this.userAddressService.getAddresses();\n  }\n\n  getAddressesStateLoading(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  loadAddresses() {\n    this.userAddressService.loadAddresses();\n  }\n\n  addUserAddress(address: Address) {\n    this.userAddressService.addUserAddress(address);\n  }\n\n  updateUserAddress(addressId: string, address: Address) {\n    this.userAddressService.updateUserAddress(addressId, address);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  TranslationService,\n  UserAddressService,\n  CheckoutDeliveryService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { AddressBookComponentService } from './address-book.component.service';\nimport { Card } from '../../../shared/components/card';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-address-book',\n  templateUrl: './address-book.component.html',\n})\nexport class AddressBookComponent implements OnInit {\n  addresses$: Observable<Address[]>;\n  cards$: Observable<Card[]>;\n  addressesStateLoading$: Observable<boolean>;\n  currentAddress: Address;\n\n  showAddAddressForm = false;\n  showEditAddressForm = false;\n  editCard: string;\n\n  constructor(\n    public service: AddressBookComponentService,\n    protected translation: TranslationService,\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryService\n  ) {}\n\n  ngOnInit(): void {\n    this.addresses$ = this.service.getAddresses();\n    this.addressesStateLoading$ = this.service.getAddressesStateLoading();\n    this.service.loadAddresses();\n  }\n\n  addAddressButtonHandle(): void {\n    this.showEditAddressForm = false;\n    this.showAddAddressForm = true;\n  }\n\n  editAddressButtonHandle(address: Address): void {\n    this.showAddAddressForm = false;\n    this.showEditAddressForm = true;\n    this.currentAddress = address;\n  }\n\n  addAddressSubmit(address: Address): void {\n    this.showAddAddressForm = false;\n    this.service.addUserAddress(address);\n  }\n\n  addAddressCancel(): void {\n    this.showAddAddressForm = false;\n  }\n\n  editAddressSubmit(address: Address): void {\n    this.showEditAddressForm = false;\n    this.service.updateUserAddress(this.currentAddress['id'], address);\n  }\n\n  editAddressCancel(): void {\n    this.showEditAddressForm = false;\n  }\n\n  getCardContent(address: Address) {\n    return combineLatest([\n      this.translation.translate('addressCard.default'),\n      this.translation.translate('addressCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('common.edit'),\n      this.translation.translate('addressBook.areYouSureToDeleteAddress'),\n    ]).pipe(\n      map(\n        ([\n          defaultText,\n          setAsDefaultText,\n          textDelete,\n          textEdit,\n          textVerifyDeleteMsg,\n        ]) => {\n          let region = '';\n\n          if (address.region && address.region.isocode) {\n            region = address.region.isocode + ', ';\n          }\n\n          const actions: { name: string; event: string }[] = [];\n          if (!address.defaultAddress) {\n            actions.push({ name: setAsDefaultText, event: 'default' });\n          }\n          actions.push({ name: textEdit, event: 'edit' });\n          actions.push({ name: textDelete, event: 'delete' });\n\n          return {\n            textBold: address.firstName + ' ' + address.lastName,\n            text: [\n              address.line1,\n              address.line2,\n              address.town + ', ' + region + address.country.isocode,\n              address.postalCode,\n              address.phone,\n            ],\n            actions: actions,\n            header: address.defaultAddress ? `✓ ${defaultText}` : '',\n            deleteMsg: textVerifyDeleteMsg,\n          };\n        }\n      )\n    );\n  }\n\n  setAddressAsDefault(addressId: string): void {\n    this.userAddressService.setAddressAsDefault(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  deleteAddress(addressId: string): void {\n    this.userAddressService.deleteUserAddress(addressId);\n    this.checkoutDeliveryService.clearCheckoutDeliveryDetails();\n  }\n\n  setEdit(addressId: string): void {\n    if (this.editCard !== addressId) {\n      this.editCard = addressId;\n    } else {\n      this.deleteAddress(addressId);\n    }\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UserAddressService,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { AddressFormModule } from '../../checkout/components/shipping-address/address-form/address-form.module';\nimport { AddressBookComponent } from './address-book.component';\nimport { AddressBookComponentService } from './address-book.component.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    AddressFormModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  declarations: [AddressBookComponent],\n  exports: [AddressBookComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountAddressBookComponent: {\n          component: AddressBookComponent,\n          providers: [\n            {\n              provide: AddressBookComponentService,\n              useClass: AddressBookComponentService,\n              deps: [UserAddressService],\n            },\n          ],\n          guards: [AuthGuard],\n        },\n      },\n    }),\n    UserAddressService,\n  ],\n  entryComponents: [AddressBookComponent],\n})\nexport class AddressBookModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n  UserService,\n  UserToken,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { ModalService } from '../../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n\n  private subscription = new Subscription();\n  userToken$: Observable<UserToken>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    protected modalService: ModalService,\n    private userService: UserService,\n    private authService: AuthService,\n    private globalMessageService: GlobalMessageService,\n    private routingService: RoutingService,\n    private translationService: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.userToken$ = this.authService.getUserToken();\n    this.userService.resetRemoveUserProcessState();\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n\n    this.subscription.add(\n      this.userService\n        .getRemoveUserResultError()\n        .subscribe((error) => this.onError(error))\n    );\n    this.isLoading$ = this.userService.getRemoveUserResultLoading();\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedSuccessfully')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(\n            text,\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n        });\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onError(error: boolean): void {\n    if (error) {\n      this.dismissModal();\n      this.translationService\n        .translate('closeAccount.accountClosedFailure')\n        .pipe(first())\n        .subscribe((text) => {\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.userService.remove();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\n\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\nimport { ModalService } from '../../../../../shared/components/modal/index';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(private modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { IconModule } from '../../../cms-components/misc/icon/index';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n  exports: [CloseAccountComponent, CloseAccountModalComponent],\n  entryComponents: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n})\nexport class ForgotPasswordComponent implements OnInit {\n  forgotPasswordForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private userService: UserService,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    this.forgotPasswordForm = this.fb.group({\n      userEmail: [\n        '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n    });\n  }\n\n  requestForgotPasswordEmail() {\n    if (this.forgotPasswordForm.valid) {\n      this.userService.requestForgotPasswordEmail(\n        this.forgotPasswordForm.value.userEmail\n      );\n      this.routingService.go({ cxRoute: 'login' });\n    } else {\n      this.forgotPasswordForm.markAllAsTouched();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ForgotPasswordComponent } from './forgot-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n  exports: [ForgotPasswordComponent],\n  entryComponents: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() amendOrderForm: FormGroup;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n\n  constructor(protected routingService: RoutingService) {}\n\n  continue(event: Event): void {\n    if (this.amendOrderForm.valid) {\n      this.routingService.go({\n        cxRoute: this.forwardRoute,\n        params: { code: this.orderCode },\n      });\n    } else {\n      this.amendOrderForm.markAllAsTouched();\n      event.stopPropagation();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantityToCancel(control: FormControl) {\n  if (!control.value) {\n    return null;\n  }\n  const quantity = Object.values(control.value).reduce(\n    (acc: number, val: number) => acc + val,\n    0\n  );\n  return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode').value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup(\n      {},\n      { validators: [ValidateQuantityToCancel] }\n    );\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry.entryNumber.toString();\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>form.get('entries').get(entry.entryNumber.toString());\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round(entry.basePrice.value * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso, 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) || entry.quantity\n    );\n  }\n\n  isCancellation() {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { ICON_TYPE } from '../../../misc/icon/icon.model';\n\nexport enum ViewModes {\n  Grid = 'grid',\n  List = 'list',\n}\n\n@Component({\n  selector: 'cx-product-view',\n  templateUrl: './product-view.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductViewComponent {\n  iconTypes = ICON_TYPE;\n  @Input()\n  mode: ViewModes;\n  @Output()\n  modeChange = new EventEmitter<string>();\n\n  get buttonClass() {\n    const viewName: string = this.viewMode.toLowerCase();\n    return `cx-product-${viewName}`;\n  }\n\n  /**\n   *   Display icons inversely to allow users\n   *   to see the view they will navigate to\n   */\n  get viewMode() {\n    if (this.mode === 'list') {\n      return this.iconTypes.GRID;\n    } else if (this.mode === 'grid') {\n      return this.iconTypes.LIST;\n    }\n  }\n\n  changeMode() {\n    const newMode =\n      this.mode === ViewModes.Grid ? ViewModes.List : ViewModes.Grid;\n    this.modeChange.emit(newMode);\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries').get(entry.entryNumber.toString())\n    );\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { I18nModule, FeaturesConfigModule } from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  ItemCounterModule,\n  MediaModule,\n} from '../../../../../shared/index';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n  entryComponents: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup) {\n    if (form.valid) {\n      this.orderAmendService.save();\n    } else {\n      form.markAllAsTouched();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: UserOrderService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order?.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.cancellableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderCancellationService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancelConfirmation',\n        },\n      },\n    ]),\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n  entryComponents: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  PageLayoutComponent,\n} from '../../../../../../cms-structure/index';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\nimport { FormErrorsModule } from '../../../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderCancel',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n  entryComponents: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  OrderReturnRequestService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map((order) =>\n        order.entries.filter(\n          (entry) => entry.entryNumber !== -1 && entry.returnableQuantity > 0\n        )\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree } from '@angular/router';\nimport { RoutingService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected routing: RoutingService,\n    protected orderAmendService: OrderReturnService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          this.routing.go({ cxRoute: 'orders' });\n          return false;\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<\n    OrderEntry[]\n  > = this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturnConfirmation',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n  entryComponents: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../../../cms-structure/page/page-layout/page-layout.component';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'orderReturn',\n        },\n      },\n    ]),\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n  entryComponents: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-headline',\n  templateUrl: './order-detail-headline.component.html',\n})\nexport class OrderDetailHeadlineComponent implements OnInit {\n  constructor(private orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  PromotionLocation,\n  PromotionResult,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PromotionService } from '../../../../../shared/services/promotion/promotion.service';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected promotionService: PromotionService\n  ) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  orderPromotions$: Observable<PromotionResult[]>;\n  others$: Observable<Consignment[]>;\n  completed$: Observable<Consignment[]>;\n  cancel$: Observable<Consignment[]>;\n\n  ngOnInit() {\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter((consignment) =>\n            consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[]> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments.filter(\n            (consignment) => !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, UserOrderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: UserOrderService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Consignment,\n  ConsignmentTracking,\n  UserOrderService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../../../shared/components/modal/index';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: UserOrderService,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    this.userOrderService.loadConsignmentTracking(\n      this.orderCode,\n      consignment.code\n    );\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries.forEach((element) => {\n      products.push(element.orderEntry);\n    });\n\n    return products;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  Address,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { Card } from '../../../../../shared/components/card/card.component';\nimport { OrderDetailsService } from '../order-details.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(\n    private orderDetailsService: OrderDetailsService,\n    private translation: TranslationService\n  ) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n\n  getAddressCardContent(address: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${address.firstName} ${address.lastName}`,\n          text: [\n            address.line1,\n            address.line2,\n            `${address.town}, ${address.country.isocode}, ${address.postalCode}`,\n            address.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.billTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n          text: [\n            billingAddress.line1,\n            billingAddress.line2,\n            `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n            billingAddress.phone,\n          ],\n        };\n      })\n    );\n  }\n\n  getPaymentCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: payment.expiryMonth,\n        year: payment.expiryYear,\n      }),\n    ]).pipe(\n      map(([textTitle, textExpires]) => {\n        return {\n          title: textTitle,\n          textBold: payment.accountHolderName,\n          text: [payment.cardType.name, payment.cardNumber, textExpires],\n        };\n      })\n    );\n  }\n\n  getShippingMethodCardContent(shipping: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: shipping.name,\n          text: [shipping.description],\n        };\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from '@spartacus/core';\n\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Order } from '@spartacus/core';\n\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ConsignmentTrackingComponent } from '../../../../cms-components/myaccount/order/order-details/order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { CardModule } from '../../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../../shared/components/spinner/spinner.module';\nimport { CartSharedModule } from '../../../cart/cart-shared/cart-shared.module';\nimport { PromotionsModule } from '../../../checkout/components/promotions/promotions.module';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { OrderDetailHeadlineComponent } from './order-detail-headline/order-detail-headline.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailHeadlineComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    UrlModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'order', cxRoute: 'orderGuest' },\n      },\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orderDetails' },\n      },\n    ]),\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsHeadlineComponent: {\n          component: OrderDetailHeadlineComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    OrderDetailsService,\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n  entryComponents: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n  UserOrderService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    private routing: RoutingService,\n    private userOrderService: UserOrderService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<\n    OrderHistoryList\n  > = this.userOrderService.getOrderHistoryList(this.PAGE_SIZE).pipe(\n    tap((orders: OrderHistoryList) => {\n      if (orders.pagination) {\n        this.sortType = orders.pagination.sort;\n      }\n    })\n  );\n\n  isLoaded$: Observable<\n    boolean\n  > = this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'orders' },\n      },\n    ]),\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  entryComponents: [OrderHistoryComponent],\n})\nexport class OrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderReturnRequestService,\n  RoutingService,\n  ReturnRequest,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, tap, distinctUntilChanged } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter(Boolean),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go({ cxRoute: 'orders' }, null, {\n      state: {\n        activeTab: 1,\n      },\n    });\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma)));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequest } from '@spartacus/core';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<\n    ReturnRequest\n  > = this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '../../../../shared/index';\nimport { CmsPageGuard } from '../../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../../cms-structure/page/page-layout/page-layout.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'returnRequestDetails' },\n      },\n    ]),\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n  entryComponents: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { Component, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  ReturnRequestList,\n  OrderReturnRequestService,\n  TranslationService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { tap, map, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestService,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<\n    ReturnRequestList\n  > = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n    tap((requestList: ReturnRequestList) => {\n      if (requestList.pagination) {\n        this.sortType = requestList.pagination.sort;\n      }\n    })\n  );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests.pagination.totalResults),\n    filter((totalResults) => totalResults !== undefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '../../../../shared/components/list-navigation/list-navigation.module';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n  entryComponents: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderModule {}\n","import { Component, OnInit } from '@angular/core';\nimport {\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon';\nimport { Card } from '../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-payment-methods',\n  templateUrl: './payment-methods.component.html',\n})\nexport class PaymentMethodsComponent implements OnInit {\n  paymentMethods$: Observable<PaymentDetails[]>;\n  editCard: string;\n  iconTypes = ICON_TYPE;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private userPaymentService: UserPaymentService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.paymentMethods$ = this.userPaymentService.getPaymentMethods().pipe(\n      tap((paymentDetails) => {\n        // Set first payment method to DEFAULT if none is set\n        if (\n          paymentDetails.length > 0 &&\n          !paymentDetails.find((paymentDetail) => paymentDetail.defaultPayment)\n        ) {\n          this.setDefaultPaymentMethod(paymentDetails[0]);\n        }\n      })\n    );\n\n    this.editCard = null;\n    this.loading$ = this.userPaymentService.getPaymentMethodsLoading();\n    this.userPaymentService.loadPaymentMethods();\n  }\n\n  getCardContent({\n    defaultPayment,\n    accountHolderName,\n    expiryMonth,\n    expiryYear,\n    cardNumber,\n    cardType,\n  }: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentCard.setAsDefault'),\n      this.translation.translate('common.delete'),\n      this.translation.translate('paymentCard.deleteConfirmation'),\n      this.translation.translate('paymentCard.expires', {\n        month: expiryMonth,\n        year: expiryYear,\n      }),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n    ]).pipe(\n      map(\n        ([\n          textSetAsDefault,\n          textDelete,\n          textDeleteConfirmation,\n          textExpires,\n          textDefaultPaymentMethod,\n        ]) => {\n          const actions: { name: string; event: string }[] = [];\n          if (!defaultPayment) {\n            actions.push({ name: textSetAsDefault, event: 'default' });\n          }\n          actions.push({ name: textDelete, event: 'edit' });\n          const card: Card = {\n            header: defaultPayment ? textDefaultPaymentMethod : null,\n            textBold: accountHolderName,\n            text: [cardNumber, textExpires],\n            actions,\n            deleteMsg: textDeleteConfirmation,\n            img: this.getCardIcon(cardType.code),\n          };\n\n          return card;\n        }\n      )\n    );\n  }\n\n  deletePaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.deletePaymentMethod(paymentMethod.id);\n    this.editCard = null;\n  }\n\n  setEdit(paymentMethod: PaymentDetails): void {\n    this.editCard = paymentMethod.id;\n  }\n\n  cancelCard(): void {\n    this.editCard = null;\n  }\n\n  setDefaultPaymentMethod(paymentMethod: PaymentDetails): void {\n    this.userPaymentService.setPaymentMethodAsDefault(paymentMethod.id);\n  }\n\n  getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { PaymentMethodsComponent } from './payment-methods.component';\n\n@NgModule({\n  imports: [CommonModule, CardModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountPaymentDetailsComponent: {\n          component: PaymentMethodsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodsComponent],\n  exports: [PaymentMethodsComponent],\n  entryComponents: [PaymentMethodsComponent],\n})\nexport class PaymentMethodsModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-reset-password-form',\n  templateUrl: './reset-password-form.component.html',\n})\nexport class ResetPasswordFormComponent implements OnInit, OnDestroy {\n  token: string;\n  subscription = new Subscription();\n\n  resetPasswordForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      repassword: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'repassword'\n      ),\n    }\n  );\n\n  constructor(\n    private fb: FormBuilder,\n    private routingService: RoutingService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit() {\n    this.subscription.add(\n      this.routingService\n        .getRouterState()\n        .subscribe((state) => (this.token = state.state.queryParams['token']))\n    );\n\n    this.subscription.add(\n      this.userService.isPasswordReset().subscribe((reset) => {\n        if (reset) {\n          this.routingService.go({ cxRoute: 'login' });\n        }\n      })\n    );\n  }\n\n  resetPassword() {\n    if (this.resetPasswordForm.valid) {\n      const password = this.resetPasswordForm.get('password').value;\n      this.userService.resetPassword(this.token, password);\n    } else {\n      this.resetPasswordForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { ResetPasswordFormComponent } from './reset-password-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordFormComponent],\n  exports: [ResetPasswordFormComponent],\n  entryComponents: [ResetPasswordFormComponent],\n})\nexport class ResetPasswordModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-update-email-form',\n  templateUrl: './update-email-form.component.html',\n})\nexport class UpdateEmailFormComponent {\n  @Output()\n  saveEmail = new EventEmitter<{\n    newUid: string;\n    password: string;\n  }>();\n\n  @Output()\n  cancelEmail = new EventEmitter<void>();\n\n  updateEmailForm: FormGroup = this.fb.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      confirmEmail: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  constructor(private fb: FormBuilder) {}\n\n  onSubmit(): void {\n    if (this.updateEmailForm.valid) {\n      const newUid = this.updateEmailForm.get('confirmEmail').value;\n      const password = this.updateEmailForm.get('password').value;\n\n      this.saveEmail.emit({ newUid, password });\n    } else {\n      this.updateEmailForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelEmail.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n})\nexport class UpdateEmailComponent implements OnInit, OnDestroy {\n  constructor(\n    private routingService: RoutingService,\n    private globalMessageService: GlobalMessageService,\n    private userService: UserService,\n    private authService: AuthService\n  ) {}\n\n  private subscription = new Subscription();\n  private newUid: string;\n  isLoading$: Observable<boolean>;\n\n  ngOnInit() {\n    this.userService.resetUpdateEmailResultState();\n    this.subscription.add(\n      this.userService\n        .getUpdateEmailResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n    this.isLoading$ = this.userService.getUpdateEmailResultLoading();\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ newUid, password }: { newUid: string; password: string }): void {\n    this.newUid = newUid;\n    this.userService.updateEmail(password, newUid);\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        {\n          key: 'updateEmailForm.emailUpdateSuccess',\n          params: { newUid: this.newUid },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.authService.logout();\n      this.routingService.go({ cxRoute: 'login' }, null, {\n        state: {\n          newUid: this.newUid,\n        },\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetUpdateEmailResultState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateEmailFormComponent } from './update-email-form/update-email-form.component';\nimport { UpdateEmailComponent } from './update-email.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailFormComponent, UpdateEmailComponent],\n  exports: [UpdateEmailComponent, UpdateEmailFormComponent],\n  entryComponents: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CustomFormValidators } from '../../../../../shared/utils/validators/custom-form-validators';\n@Component({\n  selector: 'cx-update-password-form',\n  templateUrl: './update-password-form.component.html',\n})\nexport class UpdatePasswordFormComponent implements OnInit {\n  updatePasswordForm: FormGroup;\n\n  @Output()\n  submitted = new EventEmitter<{ oldPassword: string; newPassword: string }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.updatePasswordForm = this.fb.group(\n      {\n        oldPassword: ['', [Validators.required]],\n        newPassword: [\n          '',\n          [Validators.required, CustomFormValidators.passwordValidator],\n        ],\n        newPasswordConfirm: ['', [Validators.required]],\n      },\n      {\n        validators: CustomFormValidators.passwordsMustMatch(\n          'newPassword',\n          'newPasswordConfirm'\n        ),\n      }\n    );\n  }\n\n  onSubmit(): void {\n    if (this.updatePasswordForm.valid) {\n      this.submitted.emit({\n        oldPassword: this.updatePasswordForm.value.oldPassword,\n        newPassword: this.updatePasswordForm.value.newPassword,\n      });\n    } else {\n      this.updatePasswordForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n})\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.resetUpdatePasswordProcessState();\n    this.loading$ = this.userService.getUpdatePasswordResultLoading();\n    this.subscription.add(\n      this.userService\n        .getUpdatePasswordResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updatePasswordForm.passwordUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({\n    oldPassword,\n    newPassword,\n  }: {\n    oldPassword: string;\n    newPassword: string;\n  }): void {\n    this.userService.updatePassword(oldPassword, newPassword);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    this.userService.resetUpdatePasswordProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdatePasswordFormComponent } from './components/update-password-form/update-password-form.component';\nimport { UpdatePasswordComponent } from './components/update-password/update-password.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  exports: [UpdatePasswordComponent, UpdatePasswordFormComponent],\n  entryComponents: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Title, User } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-update-profile-form',\n  templateUrl: './update-profile-form.component.html',\n})\nexport class UpdateProfileFormComponent implements OnInit {\n  @Input()\n  user: User;\n\n  @Input()\n  titles: Title[];\n\n  @Output()\n  submitted = new EventEmitter<{ userUpdates: User }>();\n\n  @Output()\n  cancelled = new EventEmitter<void>();\n\n  updateProfileForm: FormGroup = this.fb.group({\n    titleCode: [''],\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n  });\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    if (this.user) {\n      this.updateProfileForm.patchValue(this.user);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.updateProfileForm.valid) {\n      this.submitted.emit({\n        userUpdates: { ...this.updateProfileForm.value },\n      });\n    } else {\n      this.updateProfileForm.markAllAsTouched();\n    }\n  }\n\n  onCancel(): void {\n    this.cancelled.emit();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  User,\n  UserService,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n})\nexport class UpdateProfileComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  titles$: Observable<Title[]>;\n  user$: Observable<User>;\n  loading$: Observable<boolean>;\n\n  constructor(\n    private routingService: RoutingService,\n    private userService: UserService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    // reset the previous form processing state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n\n    this.user$ = this.userService.get();\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      })\n    );\n    this.loading$ = this.userService.getUpdatePersonalDetailsResultLoading();\n\n    this.subscription.add(\n      this.userService\n        .getUpdatePersonalDetailsResultSuccess()\n        .subscribe((success) => this.onSuccess(success))\n    );\n  }\n\n  onSuccess(success: boolean): void {\n    if (success) {\n      this.globalMessageService.add(\n        { key: 'updateProfileForm.profileUpdateSuccess' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n      this.routingService.go({ cxRoute: 'home' });\n    }\n  }\n\n  onCancel(): void {\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onSubmit({ userUpdates }: { userUpdates: User }): void {\n    this.userService.updatePersonalDetails(userUpdates);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n\n    // clean up the state\n    this.userService.resetUpdatePersonalDetailsProcessingState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { UpdateProfileFormComponent } from './components/update-profile-form.component';\nimport { UpdateProfileComponent } from './update-profile.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent, UpdateProfileFormComponent],\n  exports: [UpdateProfileComponent, UpdateProfileFormComponent],\n  entryComponents: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CustomerCoupon,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { map } from 'rxjs/operators';\nimport { combineLatest, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyCouponsComponentService {\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  protected readonly RELEVANCE = ':relevance';\n  protected readonly CUSTOMER_COUPON_CODE = ':customerCouponCode:';\n\n  constructor(\n    protected routingService: RoutingService,\n    protected translation: TranslationService\n  ) {}\n\n  launchSearchPage(coupon: CustomerCoupon): void {\n    this.routingService.go(\n      {\n        cxRoute: 'search',\n        params: { query: this.buildSearchParam(coupon) },\n      },\n      { couponcode: coupon.couponId }\n    );\n  }\n\n  private buildSearchParam(coupon: CustomerCoupon): string {\n    return coupon.allProductsApplicable\n      ? this.RELEVANCE\n      : this.RELEVANCE + this.CUSTOMER_COUPON_CODE + coupon.couponId;\n  }\n\n  getSortLabels(): Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('myCoupons.startDateAsc'),\n      this.translation.translate('myCoupons.startDateDesc'),\n      this.translation.translate('myCoupons.endDateAsc'),\n      this.translation.translate('myCoupons.endDateDesc'),\n    ]).pipe(\n      map(\n        ([\n          textByStartDateAsc,\n          textByStartDateDesc,\n          textByEndDateAsc,\n          textByEndDateDesc,\n        ]) => {\n          return {\n            byStartDateAsc: textByStartDateAsc,\n            byStartDateDesc: textByStartDateDesc,\n            byEndDateAsc: textByEndDateAsc,\n            byEndDateDesc: textByEndDateDesc,\n          };\n        }\n      )\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  CustomerCouponSearchResult,\n  CustomerCouponService,\n  PaginationModel,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/icon.model';\nimport { MyCouponsComponentService } from './my-coupons.component.service';\n\n@Component({\n  selector: 'cx-my-coupons',\n  templateUrl: './my-coupons.component.html',\n})\nexport class MyCouponsComponent implements OnInit, OnDestroy {\n  couponResult$: Observable<CustomerCouponSearchResult>;\n  couponsLoading$: Observable<boolean>;\n  couponSubscriptionLoading$: Observable<boolean>;\n\n  iconTypes = ICON_TYPE;\n\n  private subscriptions = new Subscription();\n\n  private PAGE_SIZE = 10;\n  private sortMapping = {\n    byStartDateAsc: 'startDate:asc',\n    byStartDateDesc: 'startDate:desc',\n    byEndDateAsc: 'endDate:asc',\n    byEndDateDesc: 'endDate:desc',\n  };\n  sort = 'byStartDateAsc';\n\n  sortOptions = [\n    {\n      code: 'byStartDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byStartDateDesc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateAsc',\n      selected: false,\n    },\n    {\n      code: 'byEndDateDesc',\n      selected: false,\n    },\n  ];\n\n  pagination: PaginationModel;\n  sortLabels: Observable<{\n    byStartDateAsc: string;\n    byStartDateDesc: string;\n    byEndDateAsc: string;\n    byEndDateDesc: string;\n  }>;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  ngOnInit(): void {\n    this.couponResult$ = this.couponService\n      .getCustomerCoupons(this.PAGE_SIZE)\n      .pipe(\n        tap(\n          (coupons) =>\n            (this.pagination = {\n              currentPage: coupons.pagination.page,\n              pageSize: coupons.pagination.count,\n              totalPages: coupons.pagination.totalPages,\n              totalResults: coupons.pagination.totalCount,\n              sort: this.sort,\n            })\n        )\n      );\n    this.couponsLoading$ = this.couponService.getCustomerCouponsLoading();\n    this.couponSubscriptionLoading$ = combineLatest([\n      this.couponService.getSubscribeCustomerCouponResultLoading(),\n      this.couponService.getUnsubscribeCustomerCouponResultLoading(),\n    ]).pipe(\n      map(([subscribing, unsubscribing]) => subscribing || unsubscribing)\n    );\n    this.sortLabels = this.myCouponsComponentService.getSortLabels();\n\n    this.subscriptions\n      .add(\n        this.couponService\n          .getSubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      )\n      .add(\n        this.couponService\n          .getUnsubscribeCustomerCouponResultError()\n          .subscribe((error) => {\n            this.subscriptionFail(error);\n          })\n      );\n  }\n\n  private subscriptionFail(error: boolean) {\n    if (error) {\n      this.couponService.loadCustomerCoupons(this.PAGE_SIZE);\n    }\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      this.pagination.currentPage,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.couponService.loadCustomerCoupons(\n      this.PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  notificationChange({\n    couponId,\n    notification,\n  }: {\n    couponId: string;\n    notification: boolean;\n  }): void {\n    if (notification) {\n      this.couponService.subscribeCustomerCoupon(couponId);\n    } else {\n      this.couponService.unsubscribeCustomerCoupon(couponId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","import { Component, ViewChild, ElementRef } from '@angular/core';\nimport { ModalService } from '../../../../../shared/components/modal/index';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/index';\nimport { CustomerCoupon } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-coupon-dialog',\n  templateUrl: './coupon-dialog.component.html',\n})\nexport class CouponDialogComponent {\n  iconTypes = ICON_TYPE;\n  coupon: CustomerCoupon;\n\n  @ViewChild('dialog', { read: ElementRef })\n  dialog: ElementRef;\n\n  constructor(protected modalService: ModalService) {}\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport {\n  ModalRef,\n  ModalService,\n} from '../../../../shared/components/modal/index';\nimport { CouponDialogComponent } from './coupon-dialog/coupon-dialog.component';\nimport { CustomerCoupon } from '@spartacus/core';\nimport { MyCouponsComponentService } from '../my-coupons.component.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-coupon-card',\n  templateUrl: './coupon-card.component.html',\n})\nexport class CouponCardComponent {\n  @Input() coupon: CustomerCoupon;\n  @Input() couponSubscriptionLoading$: Observable<boolean>;\n  modalRef: ModalRef;\n\n  @Output()\n  notificationChanged = new EventEmitter<{\n    couponId: string;\n    notification: boolean;\n  }>();\n\n  constructor(\n    protected modalService: ModalService,\n    protected myCouponsComponentService: MyCouponsComponentService\n  ) {}\n\n  onSubscriptionChange(): void {\n    this.notificationChanged.emit({\n      couponId: this.coupon.couponId,\n      notification: !this.coupon.notificationOn,\n    });\n  }\n\n  readMore() {\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(CouponDialogComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.coupon = this.coupon;\n  }\n\n  findProducts(): void {\n    this.myCouponsComponentService.launchSearchPage(this.coupon);\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  RoutingService,\n  CustomerCouponService,\n  GlobalMessageService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  templateUrl: './coupon-claim.component.html',\n  selector: 'cx-coupon-claim',\n})\nexport class CouponClaimComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n\n  constructor(\n    protected couponService: CustomerCouponService,\n    protected routingService: RoutingService,\n    protected messageService: GlobalMessageService\n  ) {}\n\n  ngOnInit(): void {\n    this.routingService\n      .getRouterState()\n      .subscribe((k) => {\n        const couponCode = k.state.params.couponCode;\n        if (couponCode) {\n          this.couponService.claimCustomerCoupon(couponCode);\n          this.subscription = this.couponService\n            .getClaimCustomerCouponResultSuccess()\n            .subscribe((success) => {\n              if (success) {\n                this.messageService.add(\n                  { key: 'myCoupons.claimCustomerCoupon' },\n                  GlobalMessageType.MSG_TYPE_CONFIRMATION\n                );\n              }\n              this.routingService.go({ cxRoute: 'coupons' });\n            });\n        } else {\n          this.routingService.go({ cxRoute: 'notFound' });\n        }\n      })\n      .unsubscribe();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CardModule } from '../../../shared/components/card/card.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { MyCouponsComponent } from './my-coupons.component';\nimport { CouponCardComponent } from './coupon-card/coupon-card.component';\n\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { CouponDialogComponent } from './coupon-card/coupon-dialog/coupon-dialog.component';\nimport { CouponClaimComponent } from './coupon-claim/coupon-claim.component';\nimport { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../../cms-structure/page/page-layout/page-layout.component';\nimport { IconModule } from '../../misc/icon/icon.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n    RouterModule,\n    UrlModule,\n    IconModule,\n    ListNavigationModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [AuthGuard, CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'couponClaim' },\n      },\n    ]),\n  ],\n  declarations: [\n    MyCouponsComponent,\n    CouponCardComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyCouponsComponent: {\n          component: MyCouponsComponent,\n          guards: [AuthGuard],\n        },\n        CouponClaimComponent: {\n          component: CouponClaimComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyCouponsComponent, CouponClaimComponent],\n  entryComponents: [\n    MyCouponsComponent,\n    CouponDialogComponent,\n    CouponClaimComponent,\n  ],\n})\nexport class MyCouponsModule {}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  NotificationPreference,\n  UserNotificationPreferenceService,\n} from '@spartacus/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-notification-preference',\n  templateUrl: './notification-preference.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationPreferenceComponent implements OnInit {\n  preferences$: Observable<NotificationPreference[]>;\n  isLoading$: Observable<boolean>;\n\n  protected preferences: NotificationPreference[] = [];\n\n  constructor(\n    private notificationPreferenceService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.notificationPreferenceService.resetNotificationPreferences();\n    this.preferences$ = this.notificationPreferenceService\n      .getPreferences()\n      .pipe(tap((preferences) => (this.preferences = preferences)));\n    this.notificationPreferenceService.loadPreferences();\n\n    this.isLoading$ = combineLatest([\n      this.notificationPreferenceService.getPreferencesLoading(),\n      this.notificationPreferenceService.getUpdatePreferencesResultLoading(),\n    ]).pipe(\n      map(([prefsLoading, updateLoading]) => prefsLoading || updateLoading)\n    );\n  }\n\n  updatePreference(preference: NotificationPreference) {\n    const updatedPreferences = [];\n    this.preferences.forEach((p) => {\n      if (p.channel === preference.channel) {\n        updatedPreferences.push({\n          ...p,\n          enabled: !p.enabled,\n        });\n      } else {\n        updatedPreferences.push(p);\n      }\n    });\n    this.notificationPreferenceService.updatePreferences(updatedPreferences);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { NotificationPreferenceComponent } from './notification-preference.component';\n\n@NgModule({\n  declarations: [NotificationPreferenceComponent],\n  imports: [CommonModule, SpinnerModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NotificationPreferenceComponent: {\n          component: NotificationPreferenceComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [NotificationPreferenceComponent],\n  entryComponents: [NotificationPreferenceComponent],\n})\nexport class NotificationPreferenceModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  PaginationModel,\n  Product,\n  ProductInterestEntryRelation,\n  ProductInterestSearchResult,\n  ProductScope,\n  ProductService,\n  TranslationService,\n  UserInterestsService,\n} from '@spartacus/core';\nimport { map, tap } from 'rxjs/operators';\n\ninterface ProductInterestSearchResultUI extends ProductInterestSearchResult {\n  results?: (ProductInterestEntryRelation & {\n    product$?: Observable<Product>;\n  })[];\n}\n\n@Component({\n  selector: 'cx-my-interests',\n  templateUrl: './my-interests.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MyInterestsComponent implements OnInit, OnDestroy {\n  private DEFAULT_PAGE_SIZE = 10;\n  private sortMapping = {\n    byNameAsc: 'name:asc',\n    byNameDesc: 'name:desc',\n  };\n\n  sort = 'byNameAsc';\n  sortOptions = [\n    {\n      code: 'byNameAsc',\n      selected: false,\n    },\n    {\n      code: 'byNameDesc',\n      selected: false,\n    },\n  ];\n  pagination: PaginationModel;\n\n  interests$: Observable<ProductInterestSearchResultUI>;\n  isRemoveDisabled$: Observable<boolean>;\n  getInterestsloading$: Observable<boolean>;\n  sortLabels: Observable<{ byNameAsc: string; byNameDesc: string }>;\n\n  constructor(\n    private productInterestService: UserInterestsService,\n    private translationService: TranslationService,\n    private productService: ProductService\n  ) {}\n\n  ngOnInit() {\n    this.interests$ = this.productInterestService\n      .getAndLoadProductInterests(this.DEFAULT_PAGE_SIZE)\n      .pipe(\n        tap(\n          (interests) =>\n            (this.pagination = {\n              currentPage: interests.pagination.page,\n              pageSize: interests.pagination.count,\n              totalPages: interests.pagination.totalPages,\n              totalResults: interests.pagination.totalCount,\n              sort: 'byNameAsc',\n            })\n        ),\n        map((interest) => ({\n          ...interest,\n          results: interest.results\n            ? interest.results.map((result) => ({\n                ...result,\n                product$: this.getProduct(result),\n              }))\n            : interest.results,\n        }))\n      );\n\n    this.getInterestsloading$ = this.productInterestService.getProdutInterestsLoading();\n    this.isRemoveDisabled$ = combineLatest([\n      this.getInterestsloading$,\n      this.productInterestService.getRemoveProdutInterestLoading(),\n    ]).pipe(map(([getLoading, removeLoading]) => getLoading || removeLoading));\n\n    this.sortLabels = this.getSortLabels();\n  }\n\n  private getSortLabels(): Observable<{\n    byNameAsc: string;\n    byNameDesc: string;\n  }> {\n    return combineLatest([\n      this.translationService.translate('myInterests.sorting.byNameAsc'),\n      this.translationService.translate('myInterests.sorting.byNameDesc'),\n    ]).pipe(\n      map(([asc, desc]) => {\n        return {\n          byNameAsc: asc,\n          byNameDesc: desc,\n        };\n      })\n    );\n  }\n\n  private getProduct(\n    interest: ProductInterestEntryRelation\n  ): Observable<Product> {\n    return this.productService.get(interest.product.code, ProductScope.DETAILS);\n  }\n\n  removeInterest(\n    relation: ProductInterestEntryRelation & {\n      product$?: Observable<Product>;\n    }\n  ): void {\n    this.productInterestService.removeProdutInterest({\n      product: relation.product,\n      productInterestEntry: relation.productInterestEntry,\n    });\n  }\n\n  sortChange(sort: string): void {\n    this.sort = sort;\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      0,\n      this.sortMapping[sort]\n    );\n  }\n\n  pageChange(page: number): void {\n    this.productInterestService.loadProductInterests(\n      this.DEFAULT_PAGE_SIZE,\n      page,\n      this.sortMapping[this.sort]\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.productInterestService.clearProductInterests();\n    this.productInterestService.resetRemoveInterestState();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ListNavigationModule } from '../../../shared/components/list-navigation/list-navigation.module';\nimport { MyInterestsComponent } from './my-interests.component';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\n\n@NgModule({\n  declarations: [MyInterestsComponent],\n  imports: [\n    CommonModule,\n    I18nModule,\n    RouterModule,\n    ListNavigationModule,\n    I18nModule,\n    UrlModule,\n    MediaModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        MyInterestsComponent: {\n          component: MyInterestsComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  exports: [MyInterestsComponent],\n  entryComponents: [MyInterestsComponent],\n})\nexport class MyInterestsModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  CmsBreadcrumbsComponent,\n  PageMeta,\n  PageMetaService,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BreadcrumbComponent implements OnInit {\n  title$: Observable<string>;\n  crumbs$: Observable<any[]>;\n\n  constructor(\n    public component: CmsComponentData<CmsBreadcrumbsComponent>,\n    protected pageMetaService: PageMetaService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit(): void {\n    this.setTitle();\n    this.setCrumbs();\n  }\n\n  private setTitle(): void {\n    this.title$ = this.pageMetaService.getMeta().pipe(\n      filter(Boolean),\n      map((meta: PageMeta) => meta.heading || meta.title)\n    );\n  }\n\n  private setCrumbs(): void {\n    this.crumbs$ = combineLatest([\n      this.pageMetaService.getMeta(),\n      this.translation.translate('common.home'),\n    ]).pipe(\n      map(([meta, textHome]) =>\n        meta?.breadcrumbs ? meta.breadcrumbs : [{ label: textHome, link: '/' }]\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  CmsPageTitleModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, CmsPageTitleModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        BreadcrumbComponent: {\n          component: BreadcrumbComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [BreadcrumbComponent],\n  exports: [BreadcrumbComponent],\n  entryComponents: [BreadcrumbComponent],\n})\nexport class BreadcrumbModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CmsNavigationComponent,\n  CmsService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { NavigationNode } from './navigation-node.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  constructor(\n    protected cmsService: CmsService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  public createNavigation(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    return combineLatest([data$, this.getNavigationNode(data$)]).pipe(\n      map(([data, nav]) => {\n        return data\n          ? {\n              title: data.name,\n              children: [nav],\n            }\n          : undefined;\n      })\n    );\n  }\n\n  /**\n   * returns an observable with the `NavigationNode` for the given `CmsNavigationComponent`.\n   * This function will load the navigation underlying entries and childs if they haven't been\n   * loaded so far.\n   */\n  public getNavigationNode(\n    data$: Observable<CmsNavigationComponent>\n  ): Observable<NavigationNode> {\n    if (!data$) {\n      return of();\n    }\n    return data$.pipe(\n      filter((data) => !!data),\n      switchMap((data) => {\n        const navigation = data.navigationNode ? data.navigationNode : data;\n        return this.cmsService.getNavigationEntryItems(navigation.uid).pipe(\n          tap((items) => {\n            if (items === undefined) {\n              this.loadNavigationEntryItems(navigation, true);\n            } else {\n              // we should check whether the existing node items are what expected\n              const expectedItems = [];\n              this.loadNavigationEntryItems(navigation, false, expectedItems);\n              const existingItems = Object.keys(items).map(\n                (key) => items[key].uid\n              );\n              const missingItems = expectedItems.filter(\n                (it) => !existingItems.includes(it.id)\n              );\n              if (missingItems.length > 0) {\n                this.cmsService.loadNavigationItems(\n                  navigation.uid,\n                  missingItems\n                );\n              }\n            }\n          }),\n          filter(Boolean),\n          map((items) => this.populateNavigationNode(navigation, items))\n        );\n      })\n    );\n  }\n\n  /**\n   * Loads all navigation entry items' type and id. Dispatch action to load all these items\n   * @param nodeData\n   * @param root\n   * @param itemsList\n   */\n  private loadNavigationEntryItems(\n    nodeData: any,\n    root: boolean,\n    itemsList = []\n  ): void {\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      nodeData.entries.forEach((entry) => {\n        itemsList.push({\n          superType: entry.itemSuperType,\n          id: entry.itemId,\n        });\n      });\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      nodeData.children.forEach((child) =>\n        this.loadNavigationEntryItems(child, false, itemsList)\n      );\n    }\n\n    if (root) {\n      this.cmsService.loadNavigationItems(nodeData.uid, itemsList);\n    }\n  }\n\n  /**\n   * Create a new node tree for the view\n   * @param nodeData\n   * @param items\n   */\n  private populateNavigationNode(nodeData: any, items: any): NavigationNode {\n    const node: NavigationNode = {};\n\n    if (nodeData.title) {\n      // the node title will be populated by the first entry (if any)\n      // if there's no nodeData.title available\n      node.title = nodeData.title;\n    }\n\n    if (nodeData.entries && nodeData.entries.length > 0) {\n      this.populateLink(node, nodeData.entries[0], items);\n    }\n\n    if (nodeData.children && nodeData.children.length > 0) {\n      const children = nodeData.children\n        .map((child) => this.populateNavigationNode(child, items))\n        .filter(Boolean);\n      if (children.length > 0) {\n        node.children = children;\n      }\n    }\n\n    // return null in case there are no children\n    return Object.keys(node).length === 0 ? null : node;\n  }\n\n  /**\n   * The node link is driven by the first entry.\n   */\n  private populateLink(node: NavigationNode, entry, items) {\n    const item = items[`${entry.itemId}_${entry.itemSuperType}`];\n\n    // now we only consider CMSLinkComponent\n    if (item && entry.itemType === 'CMSLinkComponent') {\n      if (!node.title) {\n        node.title = item.linkName;\n      }\n      const url = this.getLink(item);\n      // only populate the node link if we have a visible node\n      if (node.title && url) {\n        node.url = url;\n        // the backend provide boolean value for the target\n        // in case the link should be opened in a new window\n        node.target = !!item.target ? '_blank' : '';\n      }\n    }\n  }\n\n  /**\n   *\n   * Gets the URL or link to a related item (category),\n   * also taking into account content pages (contentPageLabelOrId)\n   * and product pages (productCode)\n   */\n  protected getLink(item): string | string[] {\n    if (item.url) {\n      return item.url;\n    } else if (item.contentPageLabelOrId) {\n      return item.contentPageLabelOrId;\n    } else if (item.categoryCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'category',\n        params: {\n          code: item.categoryCode,\n          name: item.name,\n        },\n      });\n    } else if (item.productCode) {\n      return this.semanticPathService.transform({\n        cxRoute: 'product',\n        params: {\n          code: item.productCode,\n          name: item.name,\n        },\n      });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-category-navigation',\n  templateUrl: './category-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  data$: Observable<CmsNavigationComponent> = this.componentData.data$;\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { debounceTime, filter } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../misc/icon/index';\nimport { NavigationNode } from './navigation-node.model';\n\n@Component({\n  selector: 'cx-navigation-ui',\n  templateUrl: './navigation-ui.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationUIComponent implements OnDestroy {\n  /**\n   * The navigation node to render.\n   */\n  @Input() node: NavigationNode;\n\n  /**\n   * The number of child nodes that must be wrapped.\n   */\n  @Input() wrapAfter: number;\n  /**\n   * the icon type that will be used for navigation nodes\n   * with children.\n   */\n  iconType = ICON_TYPE;\n\n  /**\n   * Indicates whether the navigation should support flyout.\n   * If flyout is set to true, the\n   * nested child navigation nodes will only appear on hover or focus.\n   */\n  @Input() @HostBinding('class.flyout') flyout = true;\n\n  @Input() @HostBinding('class.is-open') isOpen = false;\n\n  private openNodes: HTMLElement[] = [];\n  private subscriptions = new Subscription();\n  private resize = new EventEmitter();\n\n  @HostListener('window:resize')\n  onResize() {\n    this.resize.next();\n  }\n\n  constructor(\n    private router: Router,\n    private renderer: Renderer2,\n    private elemRef: ElementRef\n  ) {\n    this.subscriptions.add(\n      this.router.events\n        .pipe(filter((event) => event instanceof NavigationEnd))\n        .subscribe(() => this.clear())\n    );\n    this.subscriptions.add(\n      this.resize.pipe(debounceTime(50)).subscribe(() => {\n        this.alignWrappersToRightIfStickOut();\n      })\n    );\n  }\n\n  toggleOpen(event: UIEvent): void {\n    if (event.type === 'keydown') {\n      event.preventDefault();\n    }\n    const node = <HTMLElement>event.currentTarget;\n    if (this.openNodes.includes(node)) {\n      if (event.type === 'keydown') {\n        this.back();\n      } else {\n        this.openNodes = this.openNodes.filter((n) => n !== node);\n        this.renderer.removeClass(node, 'is-open');\n      }\n    } else {\n      this.openNodes.push(node);\n    }\n\n    this.updateClasses();\n\n    event.stopImmediatePropagation();\n    event.stopPropagation();\n  }\n\n  back(): void {\n    if (this.openNodes[this.openNodes.length - 1]) {\n      this.renderer.removeClass(\n        this.openNodes[this.openNodes.length - 1],\n        'is-open'\n      );\n      this.openNodes.pop();\n      this.updateClasses();\n    }\n  }\n\n  clear(): void {\n    this.openNodes = [];\n    this.updateClasses();\n  }\n\n  onMouseEnter(event: MouseEvent) {\n    this.alignWrapperToRightIfStickOut(<HTMLElement>event.currentTarget);\n    this.focusAfterPreviousClicked(event);\n  }\n\n  getTotalDepth(node: NavigationNode, depth = 0): number {\n    if (node.children && node.children.length > 0) {\n      return Math.max(\n        ...node.children.map((n) => this.getTotalDepth(n, depth + 1))\n      );\n    } else {\n      return depth;\n    }\n  }\n\n  getColumnCount(length: number): number {\n    return Math.round(length / (this.wrapAfter || length));\n  }\n\n  focusAfterPreviousClicked(event: MouseEvent) {\n    const target: HTMLElement = <HTMLElement>(\n      (event.target || event.relatedTarget)\n    );\n    if (\n      target.ownerDocument.activeElement.matches('nav[tabindex]') &&\n      target.parentElement.matches('.flyout')\n    ) {\n      target.focus();\n    }\n    return target.ownerDocument;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  private alignWrapperToRightIfStickOut(node: HTMLElement) {\n    const wrapper = <HTMLElement>node.querySelector('.wrapper');\n    const body = <HTMLElement>node.closest('body');\n    if (wrapper) {\n      this.renderer.removeStyle(wrapper, 'margin-left');\n      if (\n        wrapper.offsetLeft + wrapper.offsetWidth >\n        body.offsetLeft + body.offsetWidth\n      ) {\n        this.renderer.setStyle(\n          wrapper,\n          'margin-left',\n          `${node.offsetWidth - wrapper.offsetWidth}px`\n        );\n      }\n    }\n  }\n\n  private alignWrappersToRightIfStickOut() {\n    const navs = <HTMLCollection>this.elemRef.nativeElement.childNodes;\n    Array.from(navs)\n      .filter((node) => node.tagName === 'NAV')\n      .forEach((nav) => this.alignWrapperToRightIfStickOut(<HTMLElement>nav));\n  }\n\n  private updateClasses(): void {\n    this.openNodes.forEach((node, i) => {\n      if (i + 1 < this.openNodes.length) {\n        this.renderer.addClass(node, 'is-opened');\n        this.renderer.removeClass(node, 'is-open');\n      } else {\n        this.renderer.removeClass(node, 'is-opened');\n        this.renderer.addClass(node, 'is-open');\n      }\n    });\n\n    this.isOpen = this.openNodes.length > 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from './navigation-node.model';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n  selector: 'cx-navigation',\n  templateUrl: './navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NavigationComponent {\n  node$: Observable<NavigationNode> = this.service.createNavigation(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { NavigationUIComponent } from './navigation-ui.component';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    IconModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        NavigationComponent: {\n          component: NavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [NavigationComponent, NavigationUIComponent],\n  entryComponents: [NavigationComponent],\n  exports: [NavigationComponent, NavigationUIComponent],\n})\nexport class NavigationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { CategoryNavigationComponent } from './category-navigation.component';\n\n@NgModule({\n  imports: [CommonModule, NavigationModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CategoryNavigationComponent: {\n          component: CategoryNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CategoryNavigationComponent],\n  entryComponents: [CategoryNavigationComponent],\n  exports: [CategoryNavigationComponent],\n})\nexport class CategoryNavigationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CmsNavigationComponent } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { NavigationNode } from '../navigation/navigation-node.model';\nimport { NavigationService } from '../navigation/navigation.service';\n\n@Component({\n  selector: 'cx-footer-navigation',\n  templateUrl: './footer-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterNavigationComponent {\n  node$: Observable<NavigationNode> = this.service.getNavigationNode(\n    this.componentData.data$\n  );\n\n  styleClass$: Observable<string> = this.componentData.data$.pipe(\n    map((d) => d?.styleClass)\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<CmsNavigationComponent>,\n    protected service: NavigationService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { GenericLinkModule } from '../../../shared/components/generic-link/generic-link.module';\nimport { NavigationModule } from '../navigation/navigation.module';\nimport { FooterNavigationComponent } from './footer-navigation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    NavigationModule,\n    GenericLinkModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        FooterNavigationComponent: {\n          component: FooterNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [FooterNavigationComponent],\n  entryComponents: [FooterNavigationComponent],\n  exports: [FooterNavigationComponent],\n})\nexport class FooterNavigationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  ProductSearchPage,\n  RoutingService,\n  SearchboxService,\n  TranslationService,\n  WindowRef,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst HAS_SEARCH_RESULT_CLASS = 'has-searchbox-results';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchBoxComponentService {\n  constructor(\n    public searchService: SearchboxService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  /**\n   * Executes the search for products and suggestions,\n   * unless the configuration is setup to not search for\n   * products or suggestions.\n   */\n  search(query: string, config: SearchBoxConfig): void {\n    if (!query || query === '') {\n      this.clearResults();\n      return;\n    }\n\n    if (\n      config.minCharactersBeforeRequest &&\n      query.length < config.minCharactersBeforeRequest\n    ) {\n      return;\n    }\n\n    if (config.displayProducts) {\n      this.searchService.search(query, {\n        pageSize: config.maxProducts,\n      });\n    }\n\n    if (config.displaySuggestions) {\n      this.searchService.searchSuggestions(query, {\n        pageSize: config.maxSuggestions,\n      });\n    }\n  }\n\n  /**\n   * Returns an observable with the SearchResults. When there's any\n   * result, the body tag will get a classname, so that specific style\n   * rules can be applied.\n   */\n  getResults(config: SearchBoxConfig): Observable<SearchResults> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n      this.getSearchMessage(config),\n    ]).pipe(\n      map(([productResults, suggestions, message]) => {\n        return {\n          products: productResults ? productResults.products : null,\n          suggestions,\n          message,\n        };\n      }),\n      tap((results) =>\n        this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, this.hasResults(results))\n      )\n    );\n  }\n\n  /**\n   * Clears the searchbox results, so that old values are\n   * no longer emited upon next search.\n   */\n  clearResults() {\n    this.searchService.clearResults();\n    this.toggleBodyClass(HAS_SEARCH_RESULT_CLASS, false);\n  }\n\n  hasBodyClass(className: string): boolean {\n    return this.winRef.document.body.classList.contains(className);\n  }\n\n  toggleBodyClass(className: string, add?: boolean) {\n    if (add === undefined) {\n      this.winRef.document.body.classList.toggle(className);\n    } else {\n      add\n        ? this.winRef.document.body.classList.add(className)\n        : this.winRef.document.body.classList.remove(className);\n    }\n  }\n\n  private hasResults(results: SearchResults): boolean {\n    return (\n      (!!results.products && results.products.length > 0) ||\n      (!!results.suggestions && results.suggestions.length > 0) ||\n      !!results.message\n    );\n  }\n\n  private getProductResults(\n    config: SearchBoxConfig\n  ): Observable<ProductSearchPage> {\n    if (config.displayProducts) {\n      return this.searchService.getResults();\n    } else {\n      return of({});\n    }\n  }\n\n  /**\n   * Loads suggestions from the backend. In case there's no suggestion\n   * available, we try to get an exact match suggestion.\n   */\n  private getProductSuggestions(config: SearchBoxConfig): Observable<string[]> {\n    if (!config.displaySuggestions) {\n      return of([]);\n    } else {\n      return this.searchService.getSuggestionResults().pipe(\n        map((res) => res.map((suggestion) => suggestion.value)),\n        switchMap((suggestions) => {\n          if (suggestions.length === 0) {\n            return this.getExactSuggestion(config).pipe(\n              map((match) => (match ? [match] : []))\n            );\n          } else {\n            return of(suggestions);\n          }\n        })\n      );\n    }\n  }\n\n  /**\n   * whenever there is at least 1 product, we simulate\n   * a suggestion to provide easy access to the search result page\n   */\n  private getExactSuggestion(config: SearchBoxConfig): Observable<string> {\n    return this.getProductResults(config).pipe(\n      switchMap((productResult) => {\n        return productResult.products && productResult.products.length > 0\n          ? this.fetchTranslation('searchBox.help.exactMatch', {\n              term: productResult.freeTextSearch,\n            })\n          : of(null);\n      })\n    );\n  }\n\n  private getSearchMessage(config: SearchBoxConfig): Observable<string> {\n    return combineLatest([\n      this.getProductResults(config),\n      this.getProductSuggestions(config),\n    ]).pipe(\n      switchMap(([productResult, suggestions]) => {\n        if (\n          productResult &&\n          productResult.products &&\n          productResult.products.length === 0 &&\n          suggestions &&\n          suggestions.length === 0\n        ) {\n          return this.fetchTranslation('searchBox.help.noMatch');\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /**\n   * Navigates to the search result page with a given query\n   */\n  public launchSearchPage(query: string): void {\n    this.routingService.go({\n      cxRoute: 'search',\n      params: { query },\n    });\n  }\n\n  private fetchTranslation(\n    translationKey: string,\n    options?: any\n  ): Observable<string> {\n    return this.translationService.translate(translationKey, options);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  Optional,\n} from '@angular/core';\nimport { CmsSearchBoxComponent, WindowRef } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../cms-components/misc/icon/index';\nimport { CmsComponentData } from '../../../cms-structure/page/model/cms-component-data';\nimport { SearchBoxComponentService } from './search-box-component.service';\nimport { SearchBoxConfig, SearchResults } from './search-box.model';\n\nconst DEFAULT_SEARCHBOX_CONFIG: SearchBoxConfig = {\n  minCharactersBeforeRequest: 1,\n  displayProducts: true,\n  displaySuggestions: true,\n  maxProducts: 5,\n  maxSuggestions: 5,\n  displayProductImages: true,\n};\n\n@Component({\n  selector: 'cx-searchbox',\n  templateUrl: './search-box.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SearchBoxComponent {\n  config: SearchBoxConfig;\n  /**\n   * Sets the search box input field\n   */\n  @Input('queryText')\n  set queryText(value: string) {\n    if (value) {\n      this.search(value);\n    }\n  }\n\n  iconTypes = ICON_TYPE;\n\n  /**\n   * In some occasions we need to ignore the close event,\n   * for example when we click inside the search result section.\n   */\n  private ignoreCloseEvent = false;\n\n  /**\n   * The component data is optional, so that this component\n   * can be reused without CMS integration.\n   */\n\n  constructor(\n    protected searchBoxComponentService: SearchBoxComponentService,\n    @Optional()\n    protected componentData: CmsComponentData<CmsSearchBoxComponent>,\n    protected winRef: WindowRef\n  ) {}\n\n  results$: Observable<SearchResults> = this.config$.pipe(\n    tap((c) => (this.config = c)),\n    switchMap((config) => this.searchBoxComponentService.getResults(config))\n  );\n\n  /**\n   * Returns the backend configuration or default configuration for the searchbox.\n   */\n  private get config$(): Observable<SearchBoxConfig> {\n    if (this.componentData) {\n      return <Observable<SearchBoxConfig>>this.componentData.data$.pipe(\n        // Since the backend returns string values (i.e. displayProducts: \"true\") for\n        // boolean values, we replace them with boolean values.\n        map((c) => {\n          return {\n            ...c,\n            displayProducts:\n              <any>c?.displayProducts === 'true' || c?.displayProducts === true,\n            displayProductImages:\n              <any>c?.displayProductImages === 'true' ||\n              c?.displayProductImages === true,\n            displaySuggestions:\n              <any>c?.displaySuggestions === 'true' ||\n              c?.displaySuggestions === true,\n          };\n        })\n      );\n    } else {\n      return of(DEFAULT_SEARCHBOX_CONFIG);\n    }\n  }\n\n  /**\n   * Closes the searchbox and opens the search result page.\n   */\n  search(query: string): void {\n    this.searchBoxComponentService.search(query, this.config);\n    // force the searchbox to open\n    this.open();\n  }\n\n  /**\n   * Opens the typeahead searchbox\n   */\n  open(): void {\n    this.searchBoxComponentService.toggleBodyClass('searchbox-is-active', true);\n  }\n\n  /**\n   * Closes the typehead searchbox.\n   */\n  close(event: UIEvent, force?: boolean): void {\n    // Use timeout to detect changes\n    setTimeout(() => {\n      if ((!this.ignoreCloseEvent && !this.isSearchboxFocused()) || force) {\n        this.blurSearchBox(event);\n      }\n    });\n  }\n\n  protected blurSearchBox(event: UIEvent): void {\n    this.searchBoxComponentService.toggleBodyClass(\n      'searchbox-is-active',\n      false\n    );\n    if (event && event.target) {\n      (<HTMLElement>event.target).blur();\n    }\n  }\n\n  // Check if focus is on searchbox or result list elements\n  private isSearchboxFocused(): boolean {\n    return (\n      this.getResultElements().includes(this.getFocusedElement()) ||\n      this.winRef.document.querySelector('input[aria-label=\"search\"]') ===\n        this.getFocusedElement()\n    );\n  }\n\n  /**\n   * Especially in mobile we do not want the search icon\n   * to focus the input again when it's already open.\n   * */\n  avoidReopen(event: UIEvent): void {\n    if (this.searchBoxComponentService.hasBodyClass('searchbox-is-active')) {\n      this.close(event);\n      event.preventDefault();\n    }\n  }\n\n  // Return result list as HTMLElement array\n  private getResultElements(): HTMLElement[] {\n    return Array.from(\n      this.winRef.document.querySelectorAll('.products > a, .suggestions > a')\n    );\n  }\n\n  // Return focused element as HTMLElement\n  private getFocusedElement(): HTMLElement {\n    return <HTMLElement>this.winRef.document.activeElement;\n  }\n\n  private getFocusedIndex(): number {\n    return this.getResultElements().indexOf(this.getFocusedElement());\n  }\n\n  // Focus on previous item in results list\n  focusPreviousChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on last index moving to first\n    if (results.length) {\n      if (focusedIndex < 1) {\n        results[results.length - 1].focus();\n      } else {\n        results[focusedIndex - 1].focus();\n      }\n    }\n  }\n\n  // Focus on next item in results list\n  focusNextChild(event) {\n    event.preventDefault(); // Negate normal keyscroll\n    const [results, focusedIndex] = [\n      this.getResultElements(),\n      this.getFocusedIndex(),\n    ];\n    // Focus on first index moving to last\n    if (results.length) {\n      if (focusedIndex >= results.length - 1) {\n        results[0].focus();\n      } else {\n        results[focusedIndex + 1].focus();\n      }\n    }\n  }\n\n  /**\n   * Opens the PLP with the given query.\n   *\n   * TODO: if there's a single product match, we could open the PDP.\n   */\n  launchSearchResult(event: UIEvent, query: string): void {\n    if (!query || query.trim().length === 0) {\n      return;\n    }\n    this.close(event);\n    this.searchBoxComponentService.launchSearchPage(query);\n  }\n\n  /**\n   * Disables closing the search result list.\n   */\n  disableClose(): void {\n    this.ignoreCloseEvent = true;\n  }\n\n  /**\n   * Clears the search box input field\n   */\n  public clear(el: HTMLInputElement): void {\n    this.disableClose();\n    el.value = '';\n    this.searchBoxComponentService.clearResults();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'cxHighlight' })\nexport class HighlightPipe implements PipeTransform {\n  transform(text: string, match?: string): string {\n    if (!match) {\n      return text;\n    }\n    return text.replace(\n      match.trim(),\n      `<span class=\"highlight\">${match.trim()}</span>`\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule } from '../../misc/icon/icon.module';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { HighlightPipe } from './highlight.pipe';\nimport { SearchBoxComponent } from './search-box.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    IconModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        SearchBoxComponent: {\n          component: SearchBoxComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [SearchBoxComponent, HighlightPipe],\n  entryComponents: [SearchBoxComponent],\n  exports: [SearchBoxComponent],\n})\nexport class SearchBoxModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  CheckoutService,\n  Order,\n  PromotionResult,\n  PromotionLocation,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { PromotionService } from '../../../../shared/services/promotion/promotion.service';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n  orderPromotions$: Observable<PromotionResult[]>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    protected promotionService: PromotionService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n    this.orderPromotions$ = this.promotionService.getOrderPromotions(\n      this.promotionLocation\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport {\n  Address,\n  CheckoutService,\n  DeliveryMode,\n  Order,\n  PaymentDetails,\n  TranslationService,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { Card } from '../../../../shared/components/card/card.component';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(\n    protected checkoutService: CheckoutService,\n    private translation: TranslationService\n  ) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n\n  getAddressCardContent(deliveryAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.shipTo').pipe(\n      filter(() => Boolean(deliveryAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${deliveryAddress.firstName} ${deliveryAddress.lastName}`,\n        text: [\n          deliveryAddress.line1,\n          deliveryAddress.line2,\n          `${deliveryAddress.town}, ${deliveryAddress.country.isocode}, ${deliveryAddress.postalCode}`,\n          deliveryAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getDeliveryModeCardContent(deliveryMode: DeliveryMode): Observable<Card> {\n    return this.translation.translate('checkoutShipping.shippingMethod').pipe(\n      filter(() => Boolean(deliveryMode)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: deliveryMode.name,\n        text: [deliveryMode.description],\n      }))\n    );\n  }\n\n  getBillingAddressCardContent(billingAddress: Address): Observable<Card> {\n    return this.translation.translate('addressCard.billTo').pipe(\n      filter(() => Boolean(billingAddress)),\n      map((textTitle) => ({\n        title: textTitle,\n        textBold: `${billingAddress.firstName} ${billingAddress.lastName}`,\n        text: [\n          billingAddress.line1,\n          billingAddress.line2,\n          `${billingAddress.town}, ${billingAddress.country.isocode}, ${billingAddress.postalCode}`,\n          billingAddress.phone,\n        ],\n      }))\n    );\n  }\n\n  getPaymentInfoCardContent(payment: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: Boolean(payment) ? payment.expiryMonth : '',\n        year: Boolean(payment) ? payment.expiryYear : '',\n      }),\n    ]).pipe(\n      filter(() => Boolean(payment)),\n      map(([textTitle, textExpires]) => ({\n        title: textTitle,\n        textBold: payment.accountHolderName,\n        text: [payment.cardNumber, textExpires],\n      }))\n    );\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer = order.guestCustomer;\n        this.orderGuid = order.guid;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutService, Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutService) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService, UserService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userService.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .getUserToken()\n          .subscribe((token) => {\n            if (token.access_token) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, UrlTree, Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CheckoutService, SemanticPathService } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutService,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { CardModule } from '../../shared/components/card/card.module';\nimport { CartSharedModule } from '../cart/cart-shared/cart-shared.module';\nimport { PwaModule } from './../../cms-structure/pwa/pwa.module';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// tslint:disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\nimport { PromotionsModule } from '../checkout/components/promotions/promotions.module';\nimport { FormErrorsModule } from '../../shared/index';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n  entryComponents: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  Product,\n  ProductReference,\n  ProductReferenceService,\n  ProductService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { ProductCarouselItem } from './product-carousel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductCarouselService {\n  constructor(\n    protected productService: ProductService,\n    protected referenceService: ProductReferenceService,\n    protected semanticPathService: SemanticPathService\n  ) {}\n\n  /**\n   * Loads the product data and converts it `CarouselItem`.\n   */\n  loadProduct(code: string): Observable<ProductCarouselItem> {\n    return this.productService.get(code).pipe(\n      filter(Boolean),\n      map((product) => this.convertProduct(product))\n    );\n  }\n\n  getProductReferences(\n    code: string,\n    referenceType: string,\n    displayTitle: boolean,\n    displayProductPrices: boolean\n  ): Observable<ProductCarouselItem[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) =>\n        refs.map((ref) =>\n          this.convertProduct(ref.target, displayTitle, displayProductPrices)\n        )\n      )\n    );\n  }\n\n  /**\n   * Converts the product to a generic CarouselItem\n   */\n  private convertProduct(\n    source: Product,\n    displayTitle = true,\n    displayProductPrices = true\n  ): ProductCarouselItem {\n    const item: ProductCarouselItem = {};\n    if (displayTitle) {\n      item.title = source.name;\n    }\n    if (displayProductPrices && source.price && source.price.formattedValue) {\n      item.price = source.price.formattedValue;\n    }\n    if (source.images && source.images.PRIMARY) {\n      item.media = {\n        container: source.images.PRIMARY,\n        format: 'product',\n      };\n    }\n    item.route = this.semanticPathService.transform({\n      cxRoute: 'product',\n      params: source,\n    });\n    return item;\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductCarouselComponent as model,\n  Product,\n  ProductScope,\n  ProductService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\n\n@Component({\n  selector: 'cx-product-carousel',\n  templateUrl: './product-carousel.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductCarouselComponent {\n  protected readonly PRODUCT_SCOPE = ProductScope.LIST;\n\n  private componentData$: Observable<model> = this.componentData.data$.pipe(\n    filter(Boolean)\n  );\n\n  /**\n   * returns an Obervable string for the title.\n   */\n  title$: Observable<string> = this.componentData$.pipe(\n    map((data) => data.title)\n  );\n\n  /**\n   * Obervable that holds an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = this.componentData$.pipe(\n    map((data) => data.productCodes.trim().split(' ')),\n    map((codes) =>\n      codes.map((code) => this.productService.get(code, this.PRODUCT_SCOPE))\n    )\n  );\n\n  constructor(\n    protected componentData: CmsComponentData<model>,\n    protected productService: ProductService\n  ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport {\n  CarouselModule,\n  MediaModule,\n} from '../../../../shared/components/index';\nimport { ProductCarouselComponent } from './product-carousel.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductCarouselComponent: {\n          component: ProductCarouselComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductCarouselComponent],\n  entryComponents: [ProductCarouselComponent],\n  exports: [ProductCarouselComponent],\n})\nexport class ProductCarouselModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CmsProductReferencesComponent,\n  Product,\n  ProductReference,\n  ProductReferenceService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  filter,\n  map,\n  switchMap,\n  tap,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-references',\n  templateUrl: './product-references.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReferencesComponent {\n  /**\n   * returns an Obervable string for the title\n   */\n  title$ = this.component.data$.pipe(map((d) => d?.title));\n\n  private currentProductCode$: Observable<\n    string\n  > = this.current.getProduct().pipe(\n    filter(Boolean),\n    map((p: Product) => p.code),\n    distinctUntilChanged(),\n    tap(() => this.referenceService.cleanReferences())\n  );\n\n  /**\n   * Obervable with an Array of Observables. This is done, so that\n   * the component UI could consider to lazy load the UI components when they're\n   * in the viewpoint.\n   */\n  items$: Observable<Observable<Product>[]> = combineLatest([\n    this.currentProductCode$,\n    this.component.data$,\n  ]).pipe(\n    switchMap(([code, data]) =>\n      this.getProductReferences(code, data?.productReferenceTypes)\n    )\n  );\n\n  constructor(\n    protected component: CmsComponentData<CmsProductReferencesComponent>,\n    protected current: CurrentProductService,\n    protected referenceService: ProductReferenceService\n  ) {}\n\n  private getProductReferences(\n    code: string,\n    referenceType: string\n  ): Observable<Observable<Product>[]> {\n    return this.referenceService.get(code, referenceType).pipe(\n      filter(Boolean),\n      map((refs: ProductReference[]) => refs.map((ref) => of(ref.target)))\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig, UrlModule } from '@spartacus/core';\nimport { CarouselModule } from '../../../../shared/components/carousel/carousel.module';\nimport { MediaModule } from '../../../../shared/components/media/media.module';\nimport { ProductReferencesComponent } from './product-references.component';\n\n@NgModule({\n  imports: [CommonModule, CarouselModule, MediaModule, RouterModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReferencesComponent: {\n          component: ProductReferencesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReferencesComponent],\n  entryComponents: [ProductReferencesComponent],\n  exports: [ProductReferencesComponent],\n})\nexport class ProductReferencesModule {}\n","import { ViewConfig } from '../../../shared/config/view-config';\n\nexport const defaultScrollConfig: ViewConfig = {\n  view: {\n    infiniteScroll: {\n      active: false,\n      productLimit: 0,\n      showMoreButton: false,\n    },\n  },\n};\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-images',\n  templateUrl: './product-images.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductImagesComponent {\n  private mainMediaContainer = new BehaviorSubject(null);\n\n  private product$: Observable<\n    Product\n  > = this.currentProductService.getProduct().pipe(\n    filter(Boolean),\n    distinctUntilChanged(),\n    tap((p: Product) => {\n      this.mainMediaContainer.next(p.images?.PRIMARY ? p.images.PRIMARY : {});\n    })\n  );\n\n  thumbs$: Observable<any[]> = this.product$.pipe(\n    map((p: Product) => this.createThumbs(p))\n  );\n\n  mainImage$ = combineLatest([this.product$, this.mainMediaContainer]).pipe(\n    map(([, container]) => container)\n  );\n\n  constructor(private currentProductService: CurrentProductService) {}\n\n  openImage(item: any): void {\n    this.mainMediaContainer.next(item);\n  }\n\n  isActive(thumbnail): Observable<boolean> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        return (\n          container.zoom &&\n          container.zoom.url &&\n          thumbnail.zoom &&\n          thumbnail.zoom.url &&\n          container.zoom.url === thumbnail.zoom.url\n        );\n      })\n    );\n  }\n\n  /** find the index of the main media in the list of media */\n  getActive(thumbs: any[]): Observable<number> {\n    return this.mainMediaContainer.pipe(\n      filter(Boolean),\n      map((container: any) => {\n        const current = thumbs.find(\n          (t) =>\n            t.media &&\n            container.zoom &&\n            t.media.container &&\n            t.media.container.zoom &&\n            t.media.container.zoom.url === container.zoom.url\n        );\n        return thumbs.indexOf(current);\n      })\n    );\n  }\n\n  /**\n   * Return an array of CarouselItems for the product thumbnails.\n   * In case there are less then 2 thumbs, we return null.\n   */\n  private createThumbs(product: Product): Observable<any>[] {\n    if (\n      !product.images ||\n      !product.images.GALLERY ||\n      product.images.GALLERY.length < 2\n    ) {\n      return [];\n    }\n\n    return (<any[]>product.images.GALLERY).map((c) => of({ container: c }));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/index';\nimport { CarouselModule } from '../../../shared/components/carousel/index';\nimport { MediaModule } from '../../../shared/components/media/media.module';\nimport { ProductImagesComponent } from './product-images.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    OutletModule,\n    CarouselModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductImagesComponent: {\n          component: ProductImagesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductImagesComponent],\n  entryComponents: [ProductImagesComponent],\n  exports: [ProductImagesComponent],\n})\nexport class ProductImagesModule {}\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n} from '@angular/core';\nimport { Product, TranslationService, WindowRef } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\n\n@Component({\n  selector: 'cx-product-intro',\n  templateUrl: './product-intro.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductIntroComponent implements AfterContentChecked {\n  reviewsTabAvailable = new BehaviorSubject<boolean>(false);\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(\n    protected currentProductService: CurrentProductService,\n    private translationService: TranslationService,\n    protected winRef: WindowRef\n  ) {}\n\n  ngAfterContentChecked() {\n    this.reviewsTabAvailable.next(!!this.getReviewsComponent());\n  }\n\n  // Scroll to views component on page and click \"Reviews\" tab\n  showReviews() {\n    // Use translated label for Reviews tab reference\n    this.translationService\n      .translate('TabPanelContainer.tabs.ProductReviewsTabComponent')\n      .subscribe((reviewsTabLabel) => {\n        const tabsComponent = this.getTabsComponent();\n        const reviewsTab = this.getTabByLabel(reviewsTabLabel, tabsComponent);\n        const reviewsComponent = this.getReviewsComponent();\n        if (reviewsTab && reviewsComponent) {\n          this.clickTabIfInactive(reviewsTab);\n          setTimeout(\n            () => reviewsComponent.scrollIntoView({ behavior: 'smooth' }),\n            0\n          );\n        }\n      })\n      .unsubscribe();\n  }\n\n  // NOTE: Does not currently exists as its own component\n  // but part of tabs component. This is likely to change in refactor.\n  private getReviewsComponent(): Element {\n    return this.winRef.document.querySelector('cx-product-reviews');\n  }\n\n  // Get Tabs Component if exists on page\n  private getTabsComponent(): Element {\n    return this.winRef.document.querySelector('cx-tab-paragraph-container');\n  }\n\n  // Click to activate tab if not already active\n  private clickTabIfInactive(tab: HTMLElement): void {\n    if (\n      !tab.classList.contains('active') ||\n      tab.classList.contains('toggled')\n    ) {\n      tab.click();\n    }\n  }\n\n  // Get Tab by label if exists on page\n  private getTabByLabel(label: string, tabsComponent: Element): HTMLElement {\n    if (tabsComponent) {\n      // NOTE: Reads through button tags to click on correct tab\n      // There may be a better way of doing this now/after refactor\n      const tabElements: HTMLCollectionOf<HTMLElement> = tabsComponent.getElementsByTagName(\n        'button'\n      );\n\n      // Look through button tab elements until finding tab with label\n      for (const buttonElement of Array.from(tabElements)) {\n        if (buttonElement.innerHTML.includes(label)) {\n          return buttonElement;\n        }\n      }\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { StarRatingModule } from '../../../shared/components/star-rating/star-rating.module';\nimport { ProductIntroComponent } from './product-intro.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, StarRatingModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductIntroComponent: {\n          component: ProductIntroComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductIntroComponent],\n  exports: [ProductIntroComponent],\n  entryComponents: [ProductIntroComponent],\n})\nexport class ProductIntroModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  CurrencyService,\n  LanguageService,\n  ProductSearchPage,\n  ProductSearchService,\n  RouterState,\n  RoutingService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  pluck,\n  shareReplay,\n  tap,\n} from 'rxjs/operators';\nimport { ProductListRouteParams, SearchCriteria } from './product-list.model';\n\n/**\n * The `ProductListComponentService` is used to search products. The service is used\n * on the Product Listing Page, for listing products and the facet navigation.\n *\n * The service exposes the product search results based on the category and search\n * route parameters. The route parameters are used to query products by the help of\n * the `ProductSearchService`.\n */\n@Injectable({ providedIn: 'root' })\nexport class ProductListComponentService {\n  /**\n   * @deprecated will be removed in version 3.0 as this is the\n   *   subscription is longer used\n   */\n  protected sub: Subscription;\n\n  // TODO: make it configurable\n  protected defaultPageSize = 10;\n\n  protected readonly RELEVANCE_ALLCATEGORIES = ':relevance:allCategories:';\n\n  constructor(\n    protected productSearchService: ProductSearchService,\n    protected routing: RoutingService,\n    protected activatedRoute: ActivatedRoute,\n    protected currencyService: CurrencyService,\n    protected languageService: LanguageService,\n    protected router: Router\n  ) {}\n\n  /**\n   * Emits the search results for the current search query.\n   *\n   * The `searchResults$` is _not_ concerned with querying, it only observes the\n   * `productSearchService.getResults()`\n   */\n  protected searchResults$: Observable<\n    ProductSearchPage\n  > = this.productSearchService\n    .getResults()\n    .pipe(filter((searchResult) => Object.keys(searchResult).length > 0));\n\n  /**\n   * Observes the route and performs a search on each route change.\n   *\n   * Context changes, such as language and currencies are also taken\n   * into account, so that the search is performed again.\n   */\n  protected searchByRouting$: Observable<\n    ActivatedRouterStateSnapshot\n  > = combineLatest([\n    this.routing.getRouterState().pipe(\n      distinctUntilChanged((x, y) => {\n        // router emits new value also when the anticipated `nextState` changes\n        // but we want to perform search only when current url changes\n        return x.state.url === y.state.url;\n      })\n    ),\n    ...this.siteContext,\n  ]).pipe(\n    map(([routerState, ..._context]) => (routerState as RouterState).state),\n    tap((state: ActivatedRouterStateSnapshot) => {\n      const criteria = this.getCriteriaFromRoute(\n        state.params,\n        state.queryParams\n      );\n      this.search(criteria);\n    })\n  );\n\n  /**\n   * This stream is used for the Product Listing and Product Facets.\n   *\n   * It not only emits search results, but also performs a search on every change\n   * of the route (i.e. route params or query params).\n   *\n   * When a user leaves the PLP route, the PLP component unsubscribes from this stream\n   * so no longer the search is performed on route change.\n   */\n  readonly model$: Observable<ProductSearchPage> = combineLatest([\n    this.searchResults$,\n    this.searchByRouting$,\n  ]).pipe(pluck(0), shareReplay({ bufferSize: 1, refCount: true }));\n\n  /**\n   * Expose the `SearchCriteria`. The search criteria are driven by the route parameters.\n   *\n   * This search route configuration is not yet configurable\n   * (see https://github.com/SAP/spartacus/issues/7191).\n   */\n  protected getCriteriaFromRoute(\n    routeParams: ProductListRouteParams,\n    queryParams: SearchCriteria\n  ): SearchCriteria {\n    return {\n      query: queryParams.query || this.getQueryFromRouteParams(routeParams),\n      pageSize: queryParams.pageSize || this.defaultPageSize,\n      currentPage: queryParams.currentPage,\n      sortCode: queryParams.sortCode,\n    };\n  }\n\n  /**\n   * Resolves the search query from the given `ProductListRouteParams`.\n   */\n  protected getQueryFromRouteParams({\n    query,\n    categoryCode,\n    brandCode,\n  }: ProductListRouteParams) {\n    if (query) {\n      return query;\n    }\n    if (categoryCode) {\n      return this.RELEVANCE_ALLCATEGORIES + categoryCode;\n    }\n\n    // TODO: drop support for brands as they should be treated\n    // similarly as any category.\n    if (brandCode) {\n      return this.RELEVANCE_ALLCATEGORIES + brandCode;\n    }\n  }\n\n  /**\n   * Performs a search based on the given search criteria.\n   *\n   * The search is delegated to the `ProductSearchService`.\n   */\n  protected search(criteria: SearchCriteria): void {\n    const currentPage = criteria.currentPage;\n    const pageSize = criteria.pageSize;\n    const sortCode = criteria.sortCode;\n\n    this.productSearchService.search(\n      criteria.query,\n      // TODO: consider dropping this complex passing of cleaned object\n      Object.assign(\n        {},\n        currentPage && { currentPage },\n        pageSize && { pageSize },\n        sortCode && { sortCode }\n      )\n    );\n  }\n\n  /**\n   * Get items from a given page without using navigation\n   */\n  getPageItems(pageNumber: number): void {\n    this.routing\n      .getRouterState()\n      .subscribe((route) => {\n        const routeCriteria = this.getCriteriaFromRoute(\n          route.state.params,\n          route.state.queryParams\n        );\n        const criteria = {\n          ...routeCriteria,\n          currentPage: pageNumber,\n        };\n        this.search(criteria);\n      })\n      .unsubscribe();\n  }\n\n  /**\n   * Sort the search results by the given sort code.\n   */\n  sort(sortCode: string): void {\n    this.route({ sortCode });\n  }\n\n  /**\n   * Routes to the next product listing page, using the given `queryParams`. The\n   * `queryParams` support sorting, pagination and querying.\n   *\n   * The `queryParams` are delegated to the Angular router `NavigationExtras`.\n   */\n  protected route(queryParams: SearchCriteria): void {\n    this.router.navigate([], {\n      queryParams,\n      queryParamsHandling: 'merge',\n      relativeTo: this.activatedRoute,\n    });\n  }\n\n  /**\n   * The site context is used to update the search query in case of a\n   * changing context. The context will typically influence the search data.\n   *\n   * We keep this private for now, as we're likely refactoring this in the next\n   * major version.\n   */\n  private get siteContext(): Observable<string>[] {\n    // TODO: we should refactor this so that custom context will be taken\n    // into account automatically. Ideally, we drop the specific context\n    // from the constructor, and query a ContextService for all contexts.\n\n    return [this.languageService.getActive(), this.currencyService.getActive()];\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  setQuery(query: string): void {\n    this.route({ query, currentPage: undefined });\n  }\n\n  /**\n   * @deprecated will be dropped in version 3.0 as it's no longer in use\n   */\n  viewPage(pageNumber: number): void {\n    this.route({ currentPage: pageNumber });\n  }\n}\n","import { Breadcrumb, Facet } from '@spartacus/core';\n\n/**\n * UI model that holds the full list of facet and active facets for\n * the product list.\n */\nexport interface FacetList {\n  facets: Facet[];\n  activeFacets?: Breadcrumb[];\n}\n\nexport interface FacetCollapseState {\n  /**\n   * Indicates whether the facet is toggled to expand or collapse the facet values.\n   * Whether the toggle results in an expanded or collapsed state, depends on the\n   * experience, which is controlled in CSS.\n   */\n  toggled?: FacetGroupCollapsedState;\n\n  /**\n   * The top number of facet values that will be visible.\n   */\n  topVisible?: number;\n\n  /**\n   * The max number of facet values which will be visible. This includes\n   * the top visible number.\n   */\n  maxVisible?: number;\n}\n\nexport enum FacetGroupCollapsedState {\n  EXPANDED = 'EXPANDED',\n  COLLAPSED = 'COLLAPSED',\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { PageLayoutService } from '../../../../cms-structure/page/index';\nimport { ViewConfig } from '../../../../shared/config/view-config';\nimport { ViewModes } from '../product-view/product-view.component';\nimport { ProductListComponentService } from './product-list-component.service';\n\n@Component({\n  selector: 'cx-product-list',\n  templateUrl: './product-list.component.html',\n})\nexport class ProductListComponent implements OnInit, OnDestroy {\n  private subscription = new Subscription();\n\n  isInfiniteScroll: boolean;\n\n  model$: Observable<ProductSearchPage> = this.productListComponentService\n    .model$;\n\n  viewMode$ = new BehaviorSubject<ViewModes>(ViewModes.Grid);\n  ViewModes = ViewModes;\n\n  constructor(\n    private pageLayoutService: PageLayoutService,\n    private productListComponentService: ProductListComponentService,\n    public scrollConfig: ViewConfig\n  ) {}\n\n  ngOnInit(): void {\n    this.isInfiniteScroll = this.scrollConfig.view.infiniteScroll.active;\n\n    this.subscription.add(\n      this.pageLayoutService.templateName$\n        .pipe(take(1))\n        .subscribe((template) => {\n          this.viewMode$.next(\n            template === 'ProductGridPageTemplate'\n              ? ViewModes.Grid\n              : ViewModes.List\n          );\n        })\n    );\n  }\n\n  sortList(sortCode: string): void {\n    this.productListComponentService.sort(sortCode);\n  }\n\n  setViewMode(mode: ViewModes): void {\n    this.viewMode$.next(mode);\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { Component, Input, OnDestroy, ChangeDetectorRef } from '@angular/core';\nimport { ProductSearchPage } from '@spartacus/core';\nimport { ViewModes } from '../../product-view/product-view.component';\nimport { Subscription } from 'rxjs';\nimport { ProductListComponentService } from '../product-list-component.service';\nimport { ViewConfig } from '../../../../../shared/config/view-config';\n\n@Component({\n  selector: 'cx-product-scroll',\n  templateUrl: './product-scroll.component.html',\n})\nexport class ProductScrollComponent implements OnDestroy {\n  private subscription = new Subscription();\n\n  @Input('scrollConfig')\n  set setConfig(inputConfig: ViewConfig) {\n    this.setComponentConfigurations(inputConfig);\n  }\n\n  model: ProductSearchPage;\n  @Input('model')\n  set setModel(inputModel: ProductSearchPage) {\n    this.infiniteScrollOperations(inputModel);\n  }\n\n  inputViewMode: ViewModes;\n  @Input('inputViewMode')\n  set setViewMode(inputViewMode: ViewModes) {\n    this.inputViewMode = inputViewMode;\n    //If viewMode is already set (meaning it is not the first load)\n    //Reset the product list\n    if (this.viewMode) {\n      this.resetListOnViewModeChange();\n    } else {\n      //If viewMode is not set (meaning it is the first load)\n      //Set the viewMode\n      this.viewMode = inputViewMode;\n    }\n  }\n\n  viewMode: ViewModes;\n  productLimit: number;\n  maxProducts: number;\n\n  ViewModes = ViewModes;\n  appendProducts = false;\n  resetList = false;\n  isMaxProducts = false;\n  isLastPage = false;\n  isEmpty = false;\n\n  constructor(\n    private productListComponentService: ProductListComponentService,\n    private ref: ChangeDetectorRef\n  ) {}\n\n  scrollPage(pageNumber: number): void {\n    this.appendProducts = true;\n    this.ref.markForCheck();\n    this.productListComponentService.getPageItems(pageNumber);\n  }\n\n  loadNextPage(pageNumber: number): void {\n    this.isMaxProducts = false;\n    this.scrollPage(pageNumber);\n  }\n\n  scrollToTop(): void {\n    window.scroll(0, 0);\n  }\n\n  private setComponentConfigurations(scrollConfig: ViewConfig): void {\n    const isButton = scrollConfig.view.infiniteScroll.showMoreButton;\n    const configProductLimit = scrollConfig.view.infiniteScroll.productLimit;\n\n    //Display \"show more\" button every time when button configuration is true\n    //Otherwise, only display \"show more\" when the configuration product limit is reached\n    this.productLimit = isButton ? 1 : configProductLimit;\n  }\n\n  private infiniteScrollOperations(inputModel: ProductSearchPage): void {\n    if (this.appendProducts) {\n      this.model = {\n        ...inputModel,\n        products: this.model.products.concat(inputModel.products),\n      };\n    } else {\n      this.model = inputModel;\n      this.maxProducts = this.productLimit;\n    }\n    this.setConditions();\n    this.ref.markForCheck();\n  }\n\n  private resetListOnViewModeChange(): void {\n    this.scrollToTop();\n    this.resetList = true;\n    this.productListComponentService.getPageItems(0);\n  }\n\n  //Set booleans after model has been retrieved\n  private setConditions(): void {\n    this.isEmpty = !this.model.products || this.model.products.length === 0;\n\n    this.isLastPage =\n      this.model.pagination.currentPage ===\n      this.model.pagination.totalPages - 1;\n\n    this.isMaxProducts =\n      this.productLimit &&\n      this.productLimit !== 0 &&\n      this.model.products.length >= this.maxProducts;\n\n    //Add the productLimit to the current number of products to determine the next max number of products\n    if (this.isMaxProducts) {\n      this.maxProducts = this.model.products.length + this.productLimit;\n    }\n\n    //Only change viewMode once the new model is set\n    //This prevents flickering issues\n    if (this.viewMode !== this.inputViewMode) {\n      this.viewMode = this.inputViewMode;\n    }\n\n    this.resetList = false;\n    this.appendProducts = false;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","export enum ProductDetailOutlets {\n  INTRO = 'PDP.INTRO',\n  PRICE = 'PDP.PRICE',\n  SHARE = 'PDP.SHARE',\n  SUMMARY = 'PDP.SUMMARY',\n}\n","import { Injectable } from '@angular/core';\nimport { Params } from '@angular/router';\nimport {\n  ActivatedRouterStateSnapshot,\n  Breadcrumb,\n  PageType,\n  ProductSearchPage,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap } from 'rxjs/operators';\nimport { ProductListComponentService } from '../../container/product-list-component.service';\nimport { FacetList } from '../facet.model';\n\n/**\n * Provides access to all the facets and active facets for the Product Listing Page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacetService {\n  protected readonly routeState$ = this.routing\n    .getRouterState()\n    .pipe(pluck('state'));\n\n  protected readonly searchResult$: Observable<\n    ProductSearchPage\n  > = this.routeState$.pipe(\n    switchMap((state) =>\n      this.productListComponentService.model$.pipe(\n        filter((page) => this.filterForPage(state, page)),\n        map((page) => this.mapResults(state, page))\n      )\n    )\n  );\n\n  constructor(\n    protected routing: RoutingService,\n    protected productListComponentService: ProductListComponentService\n  ) {}\n\n  /**\n   * Observes the facets and active facets for the given page. The facet data\n   * is provided in a `FacetList`.\n   */\n  readonly facetList$: Observable<FacetList> = this.searchResult$.pipe(\n    map(\n      (result: ProductSearchPage) =>\n        ({\n          facets: result.facets,\n          activeFacets: result.breadcrumbs,\n        } as FacetList)\n    )\n  );\n\n  /**\n   * Filters the current result by verifying if the result is related to the page.\n   * This is done to avoid a combination of the next page and the current search results.\n   */\n  protected filterForPage(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): boolean {\n    if (state.context.type === PageType.CATEGORY_PAGE) {\n      return (\n        page.currentQuery?.query?.value?.indexOf(\n          `allCategories:${state.context.id}`\n        ) > -1\n      );\n    }\n\n    if (\n      state.context.type === PageType.CONTENT_PAGE &&\n      state.context.id === 'search'\n    ) {\n      return page.currentQuery.query.value.startsWith(`${state.params.query}:`);\n    }\n    return false;\n  }\n\n  private mapResults(\n    state: ActivatedRouterStateSnapshot,\n    page: ProductSearchPage\n  ): ProductSearchPage {\n    return {\n      ...page,\n      breadcrumbs: this.filterBreadcrumbs(page.breadcrumbs, state.params),\n    };\n  }\n\n  /**\n   * filter breadcrumbs which are not actively selected\n   * but coming from the route navigation\n   */\n  private filterBreadcrumbs(\n    breadcrumbs: Breadcrumb[],\n    params: Params\n  ): Breadcrumb[] {\n    return breadcrumbs\n      ? breadcrumbs.filter(\n          (breadcrumb) => !this.hasBreadcrumb(breadcrumb, params)\n        )\n      : [];\n  }\n\n  /**\n   * Indicates whether the breadcrumb is related to navigation parameters,\n   * since either the category or brand code should match those codes.\n   */\n  private hasBreadcrumb(breadcrumb: Breadcrumb, params: Params): boolean {\n    return (\n      breadcrumb.facetCode === 'allCategories' &&\n      (breadcrumb.facetValueCode === params.categoryCode ||\n        breadcrumb.facetValueCode === params.brandCode)\n    );\n  }\n}\n","import { HttpUrlEncodingCodec } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport {\n  FacetCollapseState,\n  FacetGroupCollapsedState,\n  FacetList,\n} from '../facet.model';\nimport { ProductFacetService } from './product-facet.service';\n\n/**\n * Provides access to the facets as well as their UI state. The UI state\n * represents user related changes on the facets, such as expanding or\n * collapsing a facet group or expanding the number of _visible_ facet values.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FacetService {\n  /**\n   * An internal map where we keep the UI state of the facets.\n   */\n  protected facetState = new Map<string, BehaviorSubject<FacetCollapseState>>();\n\n  constructor(protected productFacetService: ProductFacetService) {}\n\n  /**\n   * Observes the facets for the given page and configures the initial UI state.\n   *\n   * Facets are configured on each emission so that we keep the facet UI state.\n   * This is mainly done to keep the state during usage of the facet, but also\n   * benefitial when the facets are rebuild while using them.\n   */\n  facetList$: Observable<FacetList> = this.productFacetService.facetList$.pipe(\n    tap((facetList) => {\n      facetList.facets.forEach((facet) => this.initialize(facet));\n    })\n  );\n\n  /**\n   * Returns the observed UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  getState(facet: Facet): Observable<FacetCollapseState> {\n    this.initialize(facet);\n    return this.facetState.get(facet.name);\n  }\n\n  /**\n   * Returns the UI state for the facet.\n   *\n   * The state is initialized using the `initialize` method.\n   */\n  protected getStateSnapshot(facet: Facet): FacetCollapseState {\n    return (this.getState(facet) as BehaviorSubject<FacetCollapseState>).value;\n  }\n\n  /**\n   * Toggles the facet expanded state. If the expanded state becomes false,\n   * the visible values will decrease to the top values only.\n   *\n   * If the optional value argument is provided the expanded state will be set\n   * to this value, regardless of the current `expanded` state.\n   */\n  toggle(facet: Facet, isExpanded: boolean): void {\n    const state = this.getStateSnapshot(facet);\n\n    const toggledState = {\n      toggled: isExpanded\n        ? FacetGroupCollapsedState.COLLAPSED\n        : FacetGroupCollapsedState.EXPANDED,\n    } as FacetCollapseState;\n\n    if (toggledState.toggled === FacetGroupCollapsedState.COLLAPSED) {\n      toggledState.maxVisible = state.topVisible;\n    }\n\n    this.updateState(facet, toggledState);\n  }\n\n  /**\n   * Increases the visible values to the maximum values of the facet.\n   */\n  increaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.values.length });\n  }\n\n  /**\n   * Decreases the visible values to the topValueCount.\n   *\n   * The topValueCount defaults to 6, but can be controlled in\n   * the backend as well.\n   */\n  decreaseVisibleValues(facet: Facet): void {\n    this.updateState(facet, { maxVisible: facet.topValueCount });\n  }\n\n  /**\n   * Persists the facet state and initializes the default values for the top\n   * and max visible values.\n   */\n  protected initialize(facet: Facet): void {\n    if (!this.hasState(facet)) {\n      this.facetState.set(\n        facet.name,\n        new BehaviorSubject({\n          topVisible: facet.topValueCount || 0,\n          maxVisible: facet.topValueCount || 0,\n        } as FacetCollapseState)\n      );\n    }\n  }\n\n  /**\n   * Updates the state of the facet in the local facet map.\n   */\n  protected updateState(facet: Facet, property: FacetCollapseState): void {\n    const state = { ...this.getStateSnapshot(facet), ...property };\n    this.facetState.get(facet.name).next(state);\n  }\n\n  protected hasState(facet: Facet): boolean {\n    return this.facetState.has(facet.name);\n  }\n\n  getLinkParams(query: string): { [key: string]: string } {\n    return {\n      // to avoid encoding issues with facets that have space (' ') in their name,\n      // we replace the decoded '+' back to empty space ' '.\n      // For more, see https://github.com/SAP/spartacus/issues/7348\n      query: new HttpUrlEncodingCodec().decodeValue(query).replace(/\\+/g, ' '),\n    };\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { Breadcrumb } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FacetList } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n/**\n * Active facets render the applied facet values as a list of focusable buttons\n * which can be used to remove the applied facet value.\n */\n@Component({\n  selector: 'cx-active-facets',\n  templateUrl: './active-facets.component.html',\n  changeDetection: ChangeDetectionStrategy.Default,\n})\nexport class ActiveFacetsComponent {\n  /** Active facets which are applied to the product results. */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  /** Configurable icon which is used for the active facet close button */\n  @Input() closeIcon = ICON_TYPE.CLOSE;\n\n  constructor(protected facetService: FacetService) {}\n\n  getLinkParams(facet: Breadcrumb) {\n    return this.facetService.getLinkParams(facet.removeQuery?.query?.value);\n  }\n\n  /**\n   * The focus key is used to persist the focus on the facet when the DOM is being\n   * recreated. We only apply the focus key for the given _active_ facet when there\n   * the original facets is not available. This happens for non multi-valued facets.\n   *\n   * With this approach, the we keep the focus, either at the facet list or on the\n   * active facets.\n   */\n  getFocusKey(facetList: FacetList, facet: Breadcrumb) {\n    return facetList.facets?.find((f) =>\n      f.values?.find((val) => val.name === facet.facetValueName)\n    )\n      ? ''\n      : facet.facetValueName;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/icon.module';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { ActiveFacetsComponent } from './active-facets.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [ActiveFacetsComponent],\n  exports: [ActiveFacetsComponent],\n})\nexport class ActiveFacetsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { Facet } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FocusConfig } from '../../../../../layout/a11y/keyboard-focus/index';\nimport { ICON_TYPE } from '../../../../misc/icon/icon.model';\nimport { FacetGroupCollapsedState, FacetList } from '../facet.model';\nimport { FacetComponent } from '../facet/facet.component';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet-list',\n  templateUrl: './facet-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetListComponent {\n  private _isDialog: boolean;\n  /**\n   * Indicates that the facet navigation is rendered in dialog.\n   */\n  @Input()\n  set isDialog(value: boolean) {\n    this._isDialog = value;\n    if (value) {\n      this.renderer.addClass(document.body, 'modal-open');\n    }\n  }\n\n  get isDialog(): boolean {\n    return this._isDialog;\n  }\n\n  /** Emits when the list must close */\n  @Output() closeList = new EventEmitter();\n\n  /** The list of all facet and values related to the products in the list */\n  facetList$: Observable<FacetList> = this.facetService.facetList$;\n\n  iconTypes = ICON_TYPE;\n\n  dialogFocusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    focusOnEscape: true,\n    autofocus: 'cx-facet',\n  };\n\n  @HostListener('click') handleClick() {\n    this.close();\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef,\n    protected renderer: Renderer2\n  ) {}\n\n  /**\n   * Toggles the facet group in case it is not expanded.\n   */\n  expandFacetGroup(facet: Facet, ref: FacetComponent) {\n    if (!ref.isExpanded) {\n      this.facetService.toggle(facet, ref.isExpanded);\n    }\n  }\n\n  /**\n   * Indicates that the facet group has been expanded.\n   */\n  isExpanded(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.EXPANDED)\n      );\n  }\n\n  /**\n   * Indicates that the facet group has been collapsed.\n   */\n  isCollapsed(facet: Facet): Observable<boolean> {\n    return this.facetService\n      .getState(facet)\n      .pipe(\n        map((value) => value.toggled === FacetGroupCollapsedState.COLLAPSED)\n      );\n  }\n\n  close(event?: boolean): void {\n    this.renderer.removeClass(document.body, 'modal-open');\n    this.closeList.emit(event);\n  }\n\n  block(event?: MouseEvent) {\n    event.stopPropagation();\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n} from '@angular/core';\nimport { Facet, FacetValue } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';\nimport { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';\nimport { FacetCollapseState } from '../facet.model';\nimport { FacetService } from '../services/facet.service';\n\n@Component({\n  selector: 'cx-facet',\n  templateUrl: './facet.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FacetComponent {\n  protected _facet: Facet;\n\n  state$: Observable<FacetCollapseState>;\n\n  /** configurable icon that is used to collapse the facet group  */\n  @Input() expandIcon: ICON_TYPE = ICON_TYPE.EXPAND;\n  @Input() collapseIcon: ICON_TYPE = ICON_TYPE.COLLAPSE;\n\n  @HostBinding('class.multi-select') isMultiSelect: boolean;\n\n  @ViewChildren('facetValue') values: QueryList<ElementRef<HTMLElement>>;\n\n  @ViewChild(FocusDirective) keyboardFocus: FocusDirective;\n\n  @Input()\n  set facet(value: Facet) {\n    this._facet = value;\n    this.isMultiSelect = !!value.multiSelect;\n    this.state$ = this.facetService.getState(value);\n  }\n\n  get facet(): Facet {\n    return this._facet;\n  }\n\n  constructor(\n    protected facetService: FacetService,\n    protected elementRef: ElementRef<HTMLElement>,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Handles clicking the heading of the facet group, which means toggling\n   * the visibility of the group (collapse / expand) and optionally focusing\n   * the group.\n   */\n  toggleGroup(event: UIEvent) {\n    const host: HTMLElement = this.elementRef.nativeElement;\n    const isLocked = this.keyboardFocus?.isLocked;\n\n    this.facetService.toggle(this.facet, this.isExpanded);\n\n    if (!isLocked || this.isExpanded) {\n      host.focus();\n      // we stop propagating the event as otherwise the focus on the host will trigger\n      // an unlock event from the LockFocus directive.\n      event.stopPropagation();\n    }\n  }\n\n  get isExpanded(): boolean {\n    return this.values.first.nativeElement.offsetParent !== null;\n  }\n\n  openLink(event: KeyboardEvent) {\n    (event.target as HTMLElement).click();\n    event.preventDefault();\n  }\n\n  /**\n   * Increases the number of visible values for the facet. This is delegated\n   * to `facetService.increaseVisibleValues`.\n   */\n  increaseVisibleValues(): void {\n    this.facetService.increaseVisibleValues(this.facet);\n  }\n\n  /**\n   * Decreases the number of visible values for the facet. This is delegated\n   * to `facetService.decreaseVisibleValues`.\n   */\n  decreaseVisibleValues(): void {\n    this.facetService.decreaseVisibleValues(this.facet);\n  }\n\n  getLinkParams(value: FacetValue) {\n    return this.facetService.getLinkParams(value.query?.query.value);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { IconModule } from '../../../../../cms-components/misc/icon/index';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { FacetComponent } from './facet.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetComponent],\n  exports: [FacetComponent],\n})\nexport class FacetModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '../../../../../layout/a11y/keyboard-focus/keyboard-focus.module';\nimport { IconModule } from '../../../../misc/icon/icon.module';\nimport { FacetModule } from '../facet/facet.module';\nimport { FacetListComponent } from './facet-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    IconModule,\n    FacetModule,\n    KeyboardFocusModule,\n  ],\n  declarations: [FacetListComponent],\n  exports: [FacetListComponent],\n})\nexport class FacetListModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { asapScheduler, BehaviorSubject, interval, Observable, of } from 'rxjs';\nimport { delayWhen, observeOn, switchMap } from 'rxjs/operators';\nimport { ICON_TYPE } from '../../../../cms-components/misc/icon/icon.model';\nimport { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';\n\n@Component({\n  selector: 'cx-product-facet-navigation',\n  templateUrl: './product-facet-navigation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductFacetNavigationComponent {\n  iconTypes = ICON_TYPE;\n\n  /**\n   * We delay the removal of DOM so that animations can finish playing before the\n   * DOM is removed. Removing the DOM, as hidding is not enough to stop elements\n   * to be focused.\n   */\n  protected CLOSE_DELAY = 300;\n\n  /**\n   * Used to open the facet navigation in a dialog. The usage of the dialog depends\n   * on the availability of the trigger element, which is driven by CSS.\n   *\n   * The reference is also used to refocus the trigger after the dialog is closed.\n   */\n  @ViewChild('trigger') trigger: ElementRef<HTMLElement>;\n\n  protected open$ = new BehaviorSubject(false);\n\n  /**\n   * Emits the open state that indicates whether the facet list should be rendered.\n   * This is either done instantly, or after the user triggers this by using the trigger\n   * button. This driven by the visiibility of the trigger, so that the CSS drives\n   * the behaviour. This can differ per breakpoint.\n   *\n   * There's a configurable delay for the closed state, so that the DOM is not removed\n   * before some CSS animations are done.\n   */\n  isOpen$: Observable<boolean> = this.breakpointService.breakpoint$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure that the `hasTrigger`\n    // method represents the actual UI state.\n    observeOn(asapScheduler),\n    switchMap(() => (this.hasTrigger ? this.open$ : of(true))),\n    delayWhen((launched) => interval(launched ? 0 : this.CLOSE_DELAY))\n  );\n\n  /**\n   * Emits the active state that indicates whether the facet list is activated. Activation\n   * is related to the css, so that a animation or transition can visualize opening/closing\n   * the list (i.e. dialog).\n   */\n  isActive$ = this.open$.pipe(\n    // deffer emitting a new value to the next micro-task to ensure the active class is\n    //  applied after the DOM is created\n    observeOn(asapScheduler)\n  );\n\n  constructor(protected breakpointService: BreakpointService) {}\n\n  launch() {\n    this.open$.next(true);\n  }\n\n  close() {\n    this.open$.next(false);\n    this.trigger.nativeElement.focus();\n  }\n\n  /**\n   * Indicates that the facet navigation should be open explicitely by a trigger.\n   * This is fully controlled by CSS, where the trigger button can be hidden\n   * (display:none) for certain screen sizes.\n   */\n  get hasTrigger() {\n    return this.trigger.nativeElement.offsetParent !== null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { IconModule } from '../../../misc/icon/icon.module';\nimport { ActiveFacetsModule } from './active-facets/active-facets.module';\nimport { FacetListModule } from './facet-list/facet-list.module';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation.component';\n@NgModule({\n  imports: [\n    CommonModule,\n    FacetListModule,\n    ActiveFacetsModule,\n    IconModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductRefinementComponent: {\n          component: ProductFacetNavigationComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductFacetNavigationComponent],\n  exports: [ProductFacetNavigationComponent],\n})\nexport class ProductFacetNavigationModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-grid-item',\n  templateUrl: './product-grid-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductGridItemComponent {\n  @Input() product: any;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cx-product-list-item',\n  templateUrl: './product-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListItemComponent {\n  @Input() product: any;\n}\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Product, BaseOption, VariantType } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { tap, filter, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-product-variants',\n  templateUrl: './product-variants.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductVariantsComponent implements OnInit {\n  constructor(private currentProductService: CurrentProductService) {}\n\n  variants: BaseOption[] = [];\n  variantType = VariantType;\n  product$: Observable<Product>;\n\n  ngOnInit(): void {\n    this.product$ = this.currentProductService.getProduct().pipe(\n      filter((product) => !!(product && product.baseOptions)),\n      distinctUntilChanged(),\n      tap((product) => {\n        product.baseOptions.forEach((option) => {\n          if (option && option.variantType) {\n            this.variants[option.variantType] = option;\n          }\n        });\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  OccConfig,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  Product,\n  ProductService,\n  ProductScope,\n  RoutingService,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-style-selector',\n  templateUrl: './variant-style-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleSelectorComponent {\n  constructor(\n    private config: OccConfig,\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  variantQualifier = VariantQualifier;\n\n  @Input()\n  variants: BaseOption;\n\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.STYLE);\n    return obj ? obj.value : '';\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const qualifier = variantOptionQualifiers.find((item) => item.image);\n    return qualifier\n      ? `${this.config.backend.occ.baseUrl}${qualifier.image.url}`\n      : '';\n  }\n\n  changeStyle(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleSelectorComponent } from './variant-style-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleSelectorComponent],\n  entryComponents: [VariantStyleSelectorComponent],\n  exports: [VariantStyleSelectorComponent],\n})\nexport class VariantStyleSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  Product,\n  RoutingService,\n  BaseOption,\n  VariantQualifier,\n  VariantOptionQualifier,\n  ProductService,\n  ProductScope,\n} from '@spartacus/core';\nimport { filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-variant-size-selector',\n  templateUrl: './variant-size-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantSizeSelectorComponent {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeSize(code: string): void {\n    if (code) {\n      this.productService\n        .get(code, ProductScope.LIST)\n        .pipe(\n          // below call might looks redundant but in fact this data is going to be loaded anyways\n          // we're just calling it earlier and storing\n          filter(Boolean),\n          take(1)\n        )\n        .subscribe((product: Product) => {\n          this.routingService.go({\n            cxRoute: 'product',\n            params: product,\n          });\n        });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.SIZE);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantSizeSelectorComponent } from './variant-size-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantSizeSelectorComponent],\n  entryComponents: [VariantSizeSelectorComponent],\n  exports: [VariantSizeSelectorComponent],\n})\nexport class VariantSizeSelectorModule {}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BaseOption,\n  Product,\n  RoutingService,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-color-selector',\n  templateUrl: './variant-color-selector.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantColorSelectorComponent {\n  constructor(private routingService: RoutingService) {}\n\n  @Input()\n  product: Product;\n\n  @Input()\n  variants: BaseOption;\n\n  changeColor(code: string, name: string): void {\n    if (code) {\n      this.routingService.go({\n        cxRoute: 'product',\n        params: { code, name },\n      });\n    }\n    return null;\n  }\n  getVariantOptionValue(qualifiers: VariantOptionQualifier[]) {\n    const obj = qualifiers.find((q) => q.qualifier === VariantQualifier.COLOR);\n    return obj ? obj.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantColorSelectorComponent } from './variant-color-selector.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantColorSelectorComponent],\n  entryComponents: [VariantColorSelectorComponent],\n  exports: [VariantColorSelectorComponent],\n})\nexport class VariantColorSelectorModule {}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport {\n  OccConfig,\n  VariantOption,\n  VariantOptionQualifier,\n  VariantQualifier,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-variant-style-icons',\n  templateUrl: './variant-style-icons.component.html',\n  styleUrls: ['./variant-style-icons.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VariantStyleIconsComponent implements OnInit {\n  constructor(private config: OccConfig) {}\n\n  @Input()\n  variants: VariantOption[];\n\n  variantNames: { [key: string]: string } = {};\n\n  ngOnInit() {\n    this.variants.forEach((variant) => {\n      this.variantNames[variant.code] = this.getVariantName(\n        variant.variantOptionQualifiers\n      );\n    });\n  }\n\n  getVariantThumbnailUrl(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const thumbnail = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.THUMBNAIL\n    );\n    return thumbnail\n      ? `${this.config.backend.occ.baseUrl}${thumbnail.image.url}`\n      : '';\n  }\n\n  private getVariantName(\n    variantOptionQualifiers: VariantOptionQualifier[]\n  ): string {\n    const rollupProperty = variantOptionQualifiers.find(\n      (item) => item.qualifier === VariantQualifier.ROLLUP_PROPERTY\n    );\n    const property = rollupProperty\n      ? variantOptionQualifiers.find(\n          (item) => item.qualifier === rollupProperty.value\n        )\n      : null;\n    return property ? property.value : '';\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { UrlModule, I18nModule } from '@spartacus/core';\nimport { VariantStyleIconsComponent } from './variant-style-icons.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [VariantStyleIconsComponent],\n  entryComponents: [VariantStyleIconsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class VariantStyleIconsModule {}\n","import { CanActivate, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, filter, take } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport {\n  VariantOption,\n  ProductService,\n  Product,\n  RoutingService,\n  ProductScope,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductVariantGuard implements CanActivate {\n  constructor(\n    private productService: ProductService,\n    private routingService: RoutingService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.routingService.getRouterState().pipe(\n      map((state) => state.nextState.params.productCode),\n      switchMap((productCode: string) => {\n        // if open pdp from smartedit\n        if (!productCode) {\n          return of(true);\n        }\n\n        return this.productService.get(productCode, ProductScope.VARIANTS).pipe(\n          filter(Boolean),\n          map((product: Product) => {\n            if (!product.purchasable) {\n              const variant = this.findVariant(product.variantOptions);\n              // below call might looks redundant but in fact this data is going to be loaded anyways\n              // we're just calling it earlier and storing\n              this.productService\n                .get(variant.code, ProductScope.LIST)\n                .pipe(filter(Boolean), take(1))\n                .subscribe((_product: Product) => {\n                  this.routingService.go({\n                    cxRoute: 'product',\n                    params: _product,\n                  });\n                });\n              return false;\n            } else {\n              return true;\n            }\n          })\n        );\n      })\n    );\n  }\n\n  findVariant(variants: VariantOption[]): VariantOption {\n    const results: VariantOption[] = variants.filter((variant) => {\n      return variant.stock && variant.stock.stockLevel ? variant : false;\n    });\n    return !results.length && variants.length ? variants[0] : results[0];\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ProductVariantsComponent } from './product-variants.component';\nimport { RouterModule } from '@angular/router';\nimport { VariantStyleSelectorModule } from './variant-style-selector/variant-style-selector.module';\nimport { VariantSizeSelectorModule } from './variant-size-selector/variant-size-selector.module';\nimport { VariantColorSelectorModule } from './variant-color-selector/variant-color-selector.module';\nimport { VariantStyleIconsModule } from './variant-style-icons/variant-style-icons.module';\nimport { ProductVariantGuard } from './guards/product-variant.guard';\nimport { VariantStyleIconsComponent } from './variant-style-icons/variant-style-icons.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    VariantStyleSelectorModule,\n    VariantSizeSelectorModule,\n    VariantColorSelectorModule,\n    VariantStyleIconsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductVariantSelectorComponent: {\n          component: ProductVariantsComponent,\n          guards: [ProductVariantGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ProductVariantsComponent],\n  entryComponents: [ProductVariantsComponent],\n  exports: [VariantStyleIconsComponent],\n})\nexport class ProductVariantsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ViewConfig } from '../../../shared/config/view-config';\nimport { ViewConfigModule } from '../../../shared/config/view-config.module';\nimport {\n  ItemCounterModule,\n  ListNavigationModule,\n  MediaModule,\n  SpinnerModule,\n  StarRatingModule,\n} from '../../../shared/index';\nimport { AddToCartModule } from '../../cart/index';\nimport { IconModule } from '../../misc/icon/index';\nimport { defaultScrollConfig } from '../config/default-scroll-config';\nimport { ProductVariantsModule } from '../product-variants/product-variants.module';\nimport { ProductListComponent } from './container/product-list.component';\nimport { ProductScrollComponent } from './container/product-scroll/product-scroll.component';\nimport { ProductFacetNavigationComponent } from './product-facet-navigation/product-facet-navigation.component';\nimport { ProductGridItemComponent } from './product-grid-item/product-grid-item.component';\nimport { ProductListItemComponent } from './product-list-item/product-list-item.component';\nimport { ProductViewComponent } from './product-view/product-view.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    MediaModule,\n    AddToCartModule,\n    ItemCounterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n    StarRatingModule,\n    IconModule,\n    SpinnerModule,\n    InfiniteScrollModule,\n    ViewConfigModule,\n    ProductVariantsModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<ViewConfig>defaultScrollConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CMSProductListComponent: {\n          component: ProductListComponent,\n        },\n        ProductGridComponent: {\n          component: ProductListComponent,\n        },\n        SearchResultsListComponent: {\n          component: ProductListComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  exports: [\n    ProductListComponent,\n    ProductListItemComponent,\n    ProductGridItemComponent,\n    ProductViewComponent,\n    ProductScrollComponent,\n  ],\n  entryComponents: [ProductListComponent, ProductFacetNavigationComponent],\n})\nexport class ProductListModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../current-product.service';\nimport { ProductDetailOutlets } from '../product-outlets.model';\n\n@Component({\n  selector: 'cx-product-summary',\n  templateUrl: './product-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductSummaryComponent {\n  outlets = ProductDetailOutlets;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { OutletModule } from '../../../cms-structure/outlet/outlet.module';\nimport { ProductSummaryComponent } from './product-summary.component';\n\n@NgModule({\n  imports: [CommonModule, OutletModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSummaryComponent: {\n          component: ProductSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductSummaryComponent],\n  entryComponents: [ProductSummaryComponent],\n  exports: [ProductSummaryComponent],\n})\nexport class ProductSummaryModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Product, ProductScope } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-attributes',\n  templateUrl: './product-attributes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductAttributesComponent {\n  product$: Observable<Product> = this.currentProductService.getProduct(\n    ProductScope.ATTRIBUTES\n  );\n\n  constructor(protected currentProductService: CurrentProductService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductAttributesComponent } from './product-attributes.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductSpecsTabComponent: {\n          component: ProductAttributesComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductAttributesComponent],\n  entryComponents: [ProductAttributesComponent],\n  exports: [ProductAttributesComponent],\n})\nexport class ProductAttributesModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Product } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { CurrentProductService } from '../../current-product.service';\n\n@Component({\n  selector: 'cx-product-details-tab',\n  templateUrl: './product-details-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductDetailsTabComponent implements OnInit {\n  product$: Observable<Product>;\n\n  constructor(protected currentProductService: CurrentProductService) {}\n\n  ngOnInit() {\n    this.product$ = this.currentProductService.getProduct();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { ProductDetailsTabComponent } from './product-details-tab.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductDetailsTabComponent: {\n          component: ProductDetailsTabComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductDetailsTabComponent],\n  entryComponents: [ProductDetailsTabComponent],\n  exports: [ProductDetailsTabComponent],\n})\nexport class ProductDetailsTabModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ElementRef,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Product, ProductReviewService, Review } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CurrentProductService } from '../../current-product.service';\nimport { CustomFormValidators } from '../../../../shared/index';\n\n@Component({\n  selector: 'cx-product-reviews',\n  templateUrl: './product-reviews.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductReviewsComponent {\n  @ViewChild('titleInput', { static: false }) titleInput: ElementRef;\n  @ViewChild('writeReviewButton', { static: false })\n  writeReviewButton: ElementRef;\n\n  isWritingReview = false;\n\n  // TODO: configurable\n  initialMaxListItems = 5;\n  maxListItems: number;\n  reviewForm: FormGroup;\n\n  product$: Observable<Product> = this.currentProductService.getProduct();\n\n  reviews$: Observable<Review[]> = this.product$.pipe(\n    filter((p) => !!p),\n    map((p) => p.code),\n    distinctUntilChanged(),\n    switchMap((productCode) =>\n      this.reviewService.getByProductCode(productCode)\n    ),\n    tap(() => {\n      this.resetReviewForm();\n      this.maxListItems = this.initialMaxListItems;\n    })\n  );\n\n  constructor(\n    protected reviewService: ProductReviewService,\n    protected currentProductService: CurrentProductService,\n    private fb: FormBuilder,\n    protected cd: ChangeDetectorRef\n  ) {}\n\n  initiateWriteReview(): void {\n    this.isWritingReview = true;\n\n    this.cd.detectChanges();\n\n    if (this.titleInput && this.titleInput.nativeElement) {\n      this.titleInput.nativeElement.focus();\n    }\n  }\n\n  cancelWriteReview(): void {\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  setRating(rating: number): void {\n    this.reviewForm.controls.rating.setValue(rating);\n  }\n\n  submitReview(product: Product) {\n    if (this.reviewForm.valid) {\n      this.addReview(product);\n    } else {\n      this.reviewForm.markAllAsTouched();\n    }\n  }\n\n  addReview(product: Product): void {\n    const reviewFormControls = this.reviewForm.controls;\n    const review: Review = {\n      headline: reviewFormControls.title.value,\n      comment: reviewFormControls.comment.value,\n      rating: reviewFormControls.rating.value,\n      alias: reviewFormControls.reviewerName.value,\n    };\n\n    this.reviewService.add(product.code, review);\n\n    this.isWritingReview = false;\n    this.resetReviewForm();\n\n    this.cd.detectChanges();\n\n    if (this.writeReviewButton && this.writeReviewButton.nativeElement) {\n      this.writeReviewButton.nativeElement.focus();\n    }\n  }\n\n  private resetReviewForm(): void {\n    this.reviewForm = this.fb.group({\n      title: ['', Validators.required],\n      comment: ['', Validators.required],\n      rating: [null, CustomFormValidators.starRatingEmpty],\n      reviewerName: '',\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { ProductReviewsComponent } from './product-reviews.component';\nimport { StarRatingModule, FormErrorsModule } from '../../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    I18nModule,\n    StarRatingModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ProductReviewsTabComponent: {\n          component: ProductReviewsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [ProductReviewsComponent],\n  entryComponents: [ProductReviewsComponent],\n  exports: [ProductReviewsComponent],\n})\nexport class ProductReviewsModule {}\n","import { NgModule } from '@angular/core';\nimport { ProductAttributesModule } from './product-attributes/product-attributes.module';\nimport { ProductDetailsTabModule } from './product-details-tab/product-details-tab.module';\nimport { ProductReviewsModule } from './product-reviews/product-reviews.module';\n\n@NgModule({\n  imports: [\n    ProductAttributesModule,\n    ProductDetailsTabModule,\n    ProductReviewsModule,\n  ],\n})\nexport class ProductTabsModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { NotificationPreference, UserInterestsService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ModalService } from '../../../../shared/components/modal/modal.service';\n\n@Component({\n  selector: 'cx-stock-notification-dialog',\n  templateUrl: './stock-notification-dialog.component.html',\n})\nexport class StockNotificationDialogComponent implements OnDestroy {\n  subscribeSuccess$: Observable<boolean>;\n  enabledPrefs: NotificationPreference[] = [];\n\n  constructor(\n    private modalService: ModalService,\n    private interestsService: UserInterestsService\n  ) {}\n\n  close() {\n    this.modalService.dismissActiveModal();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscribeSuccess$) {\n      this.subscribeSuccess$\n        .subscribe((success) => {\n          if (success) {\n            this.interestsService.resetAddInterestState();\n          }\n        })\n        .unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  UserInterestsService,\n  UserNotificationPreferenceService,\n  AuthService,\n  OCC_USER_ID_ANONYMOUS,\n  NotificationPreference,\n  NotificationType,\n  Product,\n  GlobalMessageService,\n  TranslationService,\n  GlobalMessageType,\n} from '@spartacus/core';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { map, filter, tap, first } from 'rxjs/operators';\nimport { CurrentProductService } from '../current-product.service';\nimport { ModalService } from '../../../shared/components/modal/modal.service';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\n\n@Component({\n  selector: 'cx-stock-notification',\n  templateUrl: './stock-notification.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StockNotificationComponent implements OnInit, OnDestroy {\n  hasProductInterests$: Observable<boolean>;\n  prefsEnabled$: Observable<boolean>;\n  outOfStock$: Observable<boolean>;\n  isRemoveInterestLoading$: Observable<boolean>;\n  anonymous = true;\n\n  private enabledPrefs: NotificationPreference[] = [];\n  private productCode: string;\n  private subscribeSuccess$: Observable<boolean>;\n  private subscriptions = new Subscription();\n\n  constructor(\n    private authService: AuthService,\n    private currentProductService: CurrentProductService,\n    private globalMessageService: GlobalMessageService,\n    private translationService: TranslationService,\n    private interestsService: UserInterestsService,\n    private modalService: ModalService,\n    private notificationPrefService: UserNotificationPreferenceService\n  ) {}\n\n  ngOnInit() {\n    this.outOfStock$ = combineLatest([\n      this.currentProductService.getProduct().pipe(filter(Boolean)),\n      this.authService.getOccUserId(),\n    ]).pipe(\n      tap(([product, userId]: [Product, String]) => {\n        this.productCode = product.code;\n        if (userId !== OCC_USER_ID_ANONYMOUS) {\n          this.anonymous = false;\n          this.notificationPrefService.loadPreferences();\n          this.interestsService.loadProductInterests(\n            null,\n            null,\n            null,\n            product.code,\n            NotificationType.BACK_IN_STOCK\n          );\n        }\n      }),\n      map(\n        ([product]: [Product, String]) =>\n          !!product.stock && product.stock.stockLevelStatus === 'outOfStock'\n      )\n    );\n\n    this.hasProductInterests$ = this.interestsService\n      .getProductInterests()\n      .pipe(\n        map(\n          (interests) => !!interests.results && interests.results.length === 1\n        )\n      );\n    this.subscribeSuccess$ = this.interestsService.getAddProductInterestSuccess();\n    this.isRemoveInterestLoading$ = this.interestsService.getRemoveProdutInterestLoading();\n    this.prefsEnabled$ = this.notificationPrefService\n      .getEnabledPreferences()\n      .pipe(\n        tap((prefs) => (this.enabledPrefs = prefs)),\n        map((prefs) => prefs.length > 0)\n      );\n\n    this.subscriptions.add(\n      this.interestsService.getAddProductInterestError().subscribe((error) => {\n        if (error) {\n          this.onInterestAddingError();\n        }\n      })\n    );\n    this.subscriptions.add(\n      this.interestsService\n        .getRemoveProdutInterestSuccess()\n        .subscribe((success) => {\n          if (success) {\n            this.onInterestRemovingSuccess();\n          }\n        })\n    );\n  }\n\n  subscribe() {\n    this.openDialog();\n    this.interestsService.addProductInterest(\n      this.productCode,\n      NotificationType.BACK_IN_STOCK\n    );\n  }\n\n  unsubscribe() {\n    this.interestsService.removeProdutInterest(\n      {\n        product: {\n          code: this.productCode,\n        },\n        productInterestEntry: [\n          {\n            interestType: NotificationType.BACK_IN_STOCK,\n          },\n        ],\n      },\n      true\n    );\n  }\n\n  private onInterestRemovingSuccess() {\n    this.subscriptions.add(\n      this.translationService\n        .translate('stockNotification.unsubscribeSuccess')\n        .pipe(first())\n        .subscribe((text) =>\n          this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_INFO)\n        )\n    );\n    this.interestsService.resetRemoveInterestState();\n  }\n\n  private onInterestAddingError() {\n    this.modalService.dismissActiveModal();\n    this.interestsService.resetAddInterestState();\n  }\n\n  private openDialog() {\n    const modalInstance = this.modalService.open(\n      StockNotificationDialogComponent,\n      {\n        centered: true,\n        size: 'lg',\n      }\n    ).componentInstance;\n    modalInstance.subscribeSuccess$ = this.subscribeSuccess$;\n    modalInstance.enabledPrefs = this.enabledPrefs;\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    this.interestsService.clearProductInterests();\n    this.notificationPrefService.clearPreferences();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StockNotificationComponent } from './stock-notification.component';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { StockNotificationDialogComponent } from './stock-notification-dialog/stock-notification-dialog.component';\nimport { SpinnerModule } from '../../../shared/components/spinner/spinner.module';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  declarations: [StockNotificationComponent, StockNotificationDialogComponent],\n  imports: [CommonModule, RouterModule, I18nModule, SpinnerModule, UrlModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        StockNotificationComponent: {\n          component: StockNotificationComponent,\n        },\n      },\n    }),\n  ],\n  entryComponents: [\n    StockNotificationComponent,\n    StockNotificationDialogComponent,\n  ],\n  exports: [StockNotificationComponent, StockNotificationDialogComponent],\n})\nexport class StockNotificationModule {}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\nconst WEEK_DAYS_NUMBER = 7;\n\n@Component({\n  selector: 'cx-schedule',\n  templateUrl: './schedule.component.html',\n})\nexport class ScheduleComponent implements OnChanges {\n  @Input()\n  location: any;\n  displayDays: Date[] = null;\n\n  constructor(private storeDataService: StoreDataService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.location && this.location) {\n      const initialDate = this.getInitialDate();\n      this.displayDays = [];\n\n      for (let i = 0; i < WEEK_DAYS_NUMBER; i++) {\n        const date = new Date(initialDate.valueOf());\n        date.setDate(date.getDate() + i);\n        this.displayDays.push(date);\n      }\n    }\n  }\n\n  /**\n   * Returns the store's opening time for the given date\n   * @param date date\n   */\n  getStoreOpeningTime(date: Date): string {\n    return this.storeDataService.getStoreOpeningTime(this.location, date);\n  }\n\n  /**\n   * Returns the store's closing time for the given date\n   * @param date date\n   */\n  getStoreClosingTime(date: Date): string {\n    return this.storeDataService.getStoreClosingTime(this.location, date);\n  }\n\n  /**\n   * return initial (first) date to be displayed in the schedule\n   */\n  private getInitialDate(): Date {\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() - currentDate.getDay());\n\n    return currentDate;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { StoreFinderService, GeoPoint } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-grid',\n  templateUrl: './store-finder-grid.component.html',\n})\nexport class StoreFinderGridComponent implements OnInit, OnDestroy {\n  locations$: any;\n  isLoading$: Observable<boolean>;\n  defaultLocation: GeoPoint;\n  country: string;\n  region: string;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.defaultLocation = {};\n\n    if (this.route.snapshot.params.country) {\n      this.storeFinderService.findStoresAction(\n        '',\n        {\n          pageSize: -1,\n        },\n        undefined,\n        this.route.snapshot.params.country\n      );\n    }\n  }\n\n  ngOnDestroy() {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder-header',\n  templateUrl: './store-finder-header.component.html',\n})\nexport class StoreFinderHeaderComponent {}\n","import { Input, Directive } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\n\n// tslint:disable:directive-class-suffix\n@Directive()\nexport class AbstractStoreItemComponent {\n  @Input()\n  location;\n\n  constructor(protected storeDataService: StoreDataService) {}\n\n  getDirections(location: any): string {\n    const google_map_url = 'https://www.google.com/maps/dir/Current+Location/';\n    const latitude = this.storeDataService.getStoreLatitude(location);\n    const longitude = this.storeDataService.getStoreLongitude(location);\n    return google_map_url + latitude + ',' + longitude;\n  }\n\n  getFormattedStoreAddress(addressParts: string[]): string {\n    return addressParts.filter(Boolean).join(', ');\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { StoreDataService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-list-item',\n  templateUrl: './store-finder-list-item.component.html',\n})\nexport class StoreFinderListItemComponent extends AbstractStoreItemComponent {\n  @Input()\n  locationIndex: number = null;\n  @Input()\n  listOrderLabel: any;\n  @Input()\n  displayDistance: boolean;\n  @Input()\n  useClickEvent: boolean;\n  @Output()\n  storeItemClick: EventEmitter<number> = new EventEmitter();\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n\n  handleStoreItemClick() {\n    if (this.locationIndex !== null) {\n      this.storeItemClick.emit(this.locationIndex);\n    }\n  }\n\n  onKey(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      this.handleStoreItemClick();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { GoogleMapRendererService } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-map',\n  templateUrl: './store-finder-map.component.html',\n})\nexport class StoreFinderMapComponent implements OnChanges {\n  @ViewChild('mapElement', { static: true })\n  mapElement: ElementRef;\n  @Input()\n  locations: any[];\n  @Output()\n  selectedStoreItem: EventEmitter<number> = new EventEmitter();\n\n  constructor(private googleMapRendererService: GoogleMapRendererService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.locations && this.locations) {\n      this.renderMap();\n    }\n  }\n\n  /**\n   * Sets the center of the map to the given location\n   * @param latitude latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitude: number, longitude: number): void {\n    this.googleMapRendererService.centerMap(latitude, longitude);\n  }\n\n  renderMap(): void {\n    this.googleMapRendererService.renderMap(\n      this.mapElement.nativeElement,\n      this.locations,\n      (markerIndex) => {\n        this.selectStoreItemClickHandle(markerIndex);\n      }\n    );\n  }\n\n  private selectStoreItemClickHandle(markerIndex: number) {\n    this.selectedStoreItem.emit(markerIndex);\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { PaginationModel } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-store-finder-pagination-details',\n  templateUrl: './store-finder-pagination-details.component.html',\n})\nexport class StoreFinderPaginationDetailsComponent {\n  @Input()\n  pagination: PaginationModel;\n\n  constructor() {}\n\n  getResultsPerPage(): string {\n    if (this.pagination.totalResults > this.pagination.pageSize) {\n      const firstItem =\n        this.pagination.currentPage * this.pagination.pageSize + 1;\n\n      let resultsPerPage =\n        (this.pagination.currentPage + 1) * this.pagination.pageSize;\n\n      if (resultsPerPage > this.pagination.totalResults) {\n        resultsPerPage = this.pagination.totalResults;\n      }\n\n      return `${firstItem} - ${resultsPerPage}`;\n    } else {\n      return `1 - ${this.pagination.totalResults}`;\n    }\n  }\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Input, ViewChild } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { StoreFinderMapComponent } from '../../store-finder-map/store-finder-map.component';\nimport { ICON_TYPE } from './../../../../misc/icon/icon.model';\n\n@Component({\n  selector: 'cx-store-finder-list',\n  templateUrl: './store-finder-list.component.html',\n})\nexport class StoreFinderListComponent {\n  @Input()\n  locations: any;\n  @Input()\n  useMylocation: boolean;\n  @ViewChild('storeMap')\n  storeMap: StoreFinderMapComponent;\n\n  selectedStore: PointOfService;\n  selectedStoreIndex: number;\n  isDetailsModeVisible: boolean;\n  storeDetails: PointOfService;\n  iconTypes = ICON_TYPE;\n\n  constructor(\n    private storeDataService: StoreDataService,\n    @Inject(DOCUMENT) private document: any\n  ) {\n    this.isDetailsModeVisible = false;\n  }\n\n  centerStoreOnMapByIndex(index: number, location: PointOfService): void {\n    this.showStoreDetails(location);\n    this.selectedStoreIndex = index;\n    this.selectedStore = location;\n    this.storeMap.centerMap(\n      this.storeDataService.getStoreLatitude(this.locations.stores[index]),\n      this.storeDataService.getStoreLongitude(this.locations.stores[index])\n    );\n  }\n\n  selectStoreItemList(index: number): void {\n    this.selectedStoreIndex = index;\n    const storeListItem = this.document.getElementById('item-' + index);\n    storeListItem.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n    });\n  }\n\n  showStoreDetails(location: PointOfService) {\n    this.isDetailsModeVisible = true;\n    this.storeDetails = location;\n  }\n\n  hideStoreDetails() {\n    this.isDetailsModeVisible = false;\n    this.selectedStoreIndex = undefined;\n    this.selectedStore = undefined;\n    this.storeMap.renderMap();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport {\n  GeoPoint,\n  SearchConfig,\n  StoreFinderSearchQuery,\n  StoreFinderService,\n  StoreFinderConfig,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-search-result',\n  templateUrl: './store-finder-search-result.component.html',\n})\nexport class StoreFinderSearchResultComponent implements OnInit, OnDestroy {\n  locations: any;\n  subscription: Subscription;\n  useMyLocation: boolean;\n  countryCode: string = null;\n  searchConfig: SearchConfig = {\n    currentPage: 0,\n  };\n  radius: number;\n  searchQuery: StoreFinderSearchQuery;\n  geolocation: GeoPoint;\n  locations$: Observable<any>;\n  isLoading$: Observable<any>;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    protected config: StoreFinderConfig\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.route.queryParams.subscribe((params) =>\n      this.initialize(params)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  viewPage(pageNumber: number) {\n    this.searchConfig = { ...this.searchConfig, currentPage: pageNumber };\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n  }\n\n  private initialize(params: Params) {\n    this.searchQuery = this.parseParameters(params);\n    this.useMyLocation = params && params.useMyLocation ? true : false;\n    this.searchConfig = { ...this.searchConfig, currentPage: 0 };\n    this.radius = this.config.googleMaps.radius;\n    this.storeFinderService.findStoresAction(\n      this.searchQuery.queryText,\n      this.searchConfig,\n      this.geolocation,\n      this.countryCode,\n      this.useMyLocation,\n      this.radius\n    );\n\n    this.isLoading$ = this.storeFinderService.getStoresLoading();\n    this.locations$ = this.storeFinderService.getFindStoresEntities();\n  }\n\n  private parseParameters(queryParams: {\n    [key: string]: any;\n  }): StoreFinderSearchQuery {\n    let searchQuery: StoreFinderSearchQuery;\n\n    if (queryParams.query) {\n      searchQuery = { queryText: queryParams.query };\n    } else {\n      searchQuery = { queryText: '' };\n    }\n\n    searchQuery.useMyLocation =\n      queryParams.useMyLocation != null &&\n      queryParams.useMyLocation.toUpperCase() === 'TRUE';\n\n    return searchQuery;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { RoutingService } from '@spartacus/core';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-search',\n  templateUrl: './store-finder-search.component.html',\n})\nexport class StoreFinderSearchComponent {\n  searchBox: FormControl = new FormControl();\n  iconTypes = ICON_TYPE;\n\n  constructor(private routingService: RoutingService) {}\n\n  findStores(address: string) {\n    this.routingService.go(['store-finder/find'], { query: address });\n  }\n\n  viewStoresWithMyLoc() {\n    this.routingService.go(['store-finder/find'], { useMyLocation: true });\n  }\n\n  onKey(event: any) {\n    if (\n      this.searchBox.value &&\n      this.searchBox.value.length &&\n      event.key === 'Enter'\n    ) {\n      this.findStores(this.searchBox.value);\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { StoreDataService, PointOfService } from '@spartacus/core';\nimport { AbstractStoreItemComponent } from '../abstract-store-item/abstract-store-item.component';\n\n@Component({\n  selector: 'cx-store-finder-store-description',\n  templateUrl: './store-finder-store-description.component.html',\n})\nexport class StoreFinderStoreDescriptionComponent extends AbstractStoreItemComponent {\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(protected storeDataService: StoreDataService) {\n    super(storeDataService);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { StoreFinderService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-store-finder-stores-count',\n  templateUrl: './store-finder-stores-count.component.html',\n})\nexport class StoreFinderStoresCountComponent implements OnInit {\n  locations$: Observable<any>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private storeFinderService: StoreFinderService) {}\n\n  ngOnInit() {\n    this.storeFinderService.viewAllStores();\n    this.locations$ = this.storeFinderService.getViewAllStoresEntities();\n    this.isLoading$ = this.storeFinderService.getViewAllStoresLoading();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'cx-store-finder',\n  templateUrl: './store-finder.component.html',\n})\nexport class StoreFinderComponent {}\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n  StoreFinderService,\n  PointOfService,\n  RoutingService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { ICON_TYPE } from '../../../misc/icon';\n\n@Component({\n  selector: 'cx-store-finder-store',\n  templateUrl: './store-finder-store.component.html',\n})\nexport class StoreFinderStoreComponent implements OnInit {\n  location$: Observable<any>;\n  isLoading$: Observable<any>;\n  iconTypes = ICON_TYPE;\n\n  @Input() location: PointOfService;\n  @Input() disableMap: boolean;\n\n  constructor(\n    private storeFinderService: StoreFinderService,\n    private route: ActivatedRoute,\n    private routingService: RoutingService\n  ) {}\n\n  ngOnInit() {\n    if (!this.location) {\n      this.requestStoresData();\n      this.location$ = this.storeFinderService.getFindStoresEntities();\n      this.isLoading$ = this.storeFinderService.getStoresLoading();\n    }\n  }\n\n  requestStoresData() {\n    this.storeFinderService.viewStoreById(this.route.snapshot.params.store);\n  }\n\n  goBack(): void {\n    this.routingService.go([\n      `store-finder/country/${this.route.snapshot.params.country}`,\n    ]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgbTabsetModule } from '@ng-bootstrap/ng-bootstrap';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  StoreFinderCoreModule,\n  UrlModule,\n} from '@spartacus/core';\nimport { LayoutConfig } from '../../layout/config/layout-config';\nimport { ListNavigationModule } from '../../shared/components/list-navigation/list-navigation.module';\nimport { SpinnerModule } from '../../shared/components/spinner/spinner.module';\nimport { IconModule } from './../misc/icon/icon.module';\nimport { ScheduleComponent } from './components/schedule-component/schedule.component';\nimport { StoreFinderGridComponent } from './components/store-finder-grid/store-finder-grid.component';\nimport { StoreFinderHeaderComponent } from './components/store-finder-header/store-finder-header.component';\nimport { StoreFinderListItemComponent } from './components/store-finder-list-item/store-finder-list-item.component';\nimport { StoreFinderMapComponent } from './components/store-finder-map/store-finder-map.component';\nimport { StoreFinderPaginationDetailsComponent } from './components/store-finder-pagination-details/store-finder-pagination-details.component';\nimport { StoreFinderListComponent } from './components/store-finder-search-result/store-finder-list/store-finder-list.component';\nimport { StoreFinderSearchResultComponent } from './components/store-finder-search-result/store-finder-search-result.component';\nimport { StoreFinderSearchComponent } from './components/store-finder-search/store-finder-search.component';\nimport { StoreFinderStoreDescriptionComponent } from './components/store-finder-store-description/store-finder-store-description.component';\nimport { StoreFinderStoresCountComponent } from './components/store-finder-stores-count/store-finder-stores-count.component';\nimport { StoreFinderComponent } from './components/store-finder/store-finder.component';\nimport { StoreFinderStoreComponent } from './components/store-finder-store/store-finder-store.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    ListNavigationModule,\n    NgbTabsetModule,\n    SpinnerModule,\n    UrlModule,\n    StoreFinderCoreModule,\n    I18nModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | LayoutConfig>{\n      cmsComponents: {\n        StoreFinderComponent: {\n          component: StoreFinderComponent,\n          childRoutes: [\n            {\n              path: 'find',\n              component: StoreFinderSearchResultComponent,\n            },\n            {\n              path: 'view-all',\n              component: StoreFinderStoresCountComponent,\n            },\n            {\n              path: 'country/:country',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region',\n              component: StoreFinderGridComponent,\n            },\n            {\n              path: 'country/:country/region/:region/:store',\n              component: StoreFinderStoreComponent,\n            },\n            {\n              path: 'country/:country/:store',\n              component: StoreFinderStoreComponent,\n            },\n          ],\n        },\n      },\n      layoutSlots: {\n        StoreFinderPageTemplate: {\n          slots: ['MiddleContent', 'SideContent'],\n        },\n      },\n    }),\n  ],\n  declarations: [\n    StoreFinderSearchComponent,\n    StoreFinderListComponent,\n    StoreFinderMapComponent,\n    StoreFinderListItemComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreDescriptionComponent,\n    ScheduleComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderStoreComponent,\n  ],\n  exports: [\n    ScheduleComponent,\n    StoreFinderComponent,\n    StoreFinderGridComponent,\n    StoreFinderHeaderComponent,\n    StoreFinderListItemComponent,\n    StoreFinderMapComponent,\n    StoreFinderPaginationDetailsComponent,\n    StoreFinderSearchComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderListComponent,\n    StoreFinderStoreDescriptionComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderStoreComponent,\n  ],\n  entryComponents: [\n    StoreFinderComponent,\n    StoreFinderSearchResultComponent,\n    StoreFinderStoresCountComponent,\n    StoreFinderGridComponent,\n    StoreFinderStoreComponent,\n  ],\n})\nexport class StoreFinderModule {}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CustomFormValidators } from '../../../shared/utils/validators/custom-form-validators';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email').value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CheckoutLoginComponent } from './checkout-login.component';\nimport { NotCheckoutAuthGuard } from '../../checkout/guards/not-checkout-auth.guard';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n  entryComponents: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\nimport { CheckoutConfigService } from '../../checkout/services/checkout-config.service';\nimport { CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n  sub: Subscription;\n  loginForm: FormGroup;\n  loginAsGuest = false;\n\n  constructor(\n    protected auth: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected winRef: WindowRef,\n    protected activatedRoute: ActivatedRoute,\n    protected checkoutConfigService: CheckoutConfigService\n  ) {}\n\n  ngOnInit(): void {\n    const routeState = this.winRef.nativeWindow?.history?.state;\n    const prefilledEmail = routeState?.['newUid'];\n\n    this.loginForm = this.fb.group({\n      userId: [\n        prefilledEmail?.length ? prefilledEmail : '',\n        [Validators.required, CustomFormValidators.emailValidator],\n      ],\n      password: ['', Validators.required],\n    });\n\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      this.loginAsGuest = this.activatedRoute?.snapshot?.queryParams?.[\n        'forced'\n      ];\n    }\n  }\n\n  submitForm(): void {\n    if (this.loginForm.valid) {\n      this.loginUser();\n    } else {\n      this.loginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  protected loginUser(): void {\n    const { userId, password } = this.loginForm.controls;\n    this.auth.authorize(\n      userId.value.toLowerCase(), // backend accepts lowercase emails only\n      password.value\n    );\n\n    if (!this.sub) {\n      this.sub = this.auth.getUserToken().subscribe((data) => {\n        if (data && data.access_token) {\n          this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n          this.authRedirectService.redirect();\n        }\n      });\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { LoginFormComponent } from './login-form.component';\nimport { FormErrorsModule } from '../../../shared/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  entryComponents: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService, User, UserService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User>;\n\n  constructor(private auth: AuthService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userService.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '../../../cms-structure/page/slot/page-slot.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n  entryComponents: [LoginComponent],\n  exports: [LoginComponent],\n})\nexport class LoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  PageType,\n  ProtectedRoutesService,\n  RoutingService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Guards the _logout_ route.\n *\n * Takes care of routing the user to a logout page (if available) or redirects to\n * the homepage. If the homepage is protected, the user is redirected\n * to the login route instead.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogoutGuard implements CanActivate {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected routing: RoutingService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService\n  ) {}\n\n  canActivate(): Observable<any> {\n    this.logout();\n\n    return this.cms\n      .hasPage({\n        id: this.semanticPathService.get('logout'),\n        type: PageType.CONTENT_PAGE,\n      })\n      .pipe(\n        tap((hasPage) => {\n          if (!hasPage) {\n            this.redirect();\n          }\n        })\n      );\n  }\n\n  /**\n   * Whenever there is no specific \"logout\" page configured in the CMS,\n   * we redirect after the user is logged out.\n   *\n   * The user gets redirected to the homepage, unless the homepage is protected\n   * (in case of a closed shop). We'll redirect to the login page instead.\n   */\n  protected redirect(): void {\n    const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';\n    this.routing.go({ cxRoute });\n  }\n\n  /**\n   * Log user out.\n   *\n   * This is delegated to the `AuthService`.\n   */\n  protected logout(): void {\n    this.auth.logout();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  PageLayoutComponent,\n  PageLayoutModule,\n} from '../../../cms-structure/page/index';\nimport { LogoutGuard } from './logout-guard';\n\n@NgModule({\n  imports: [\n    PageLayoutModule,\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [LogoutGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'logout' },\n      },\n    ]),\n  ],\n})\nexport class LogoutModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  Title,\n  UserService,\n  UserSignUp,\n} from '@spartacus/core';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, tap } from 'rxjs/operators';\nimport { sortTitles, CustomFormValidators } from '../../../shared/index';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n  loading$: Observable<boolean>;\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userService: UserService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userService.getTitles().pipe(\n      tap((titles) => {\n        if (Object.keys(titles).length === 0) {\n          this.userService.loadTitles();\n        }\n      }),\n      map((titles) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    this.loading$ = this.userService.getRegisterUserResultLoading();\n    this.registerUserProcessInit();\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const { registerConsent } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.userService.register(\n      this.collectDataFromRegisterForm(this.registerForm.value)\n    );\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const {\n      requiredConsents,\n      registerConsent,\n    } = this.anonymousConsentsConfig?.anonymousConsents;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(success: boolean): void {\n    if (success) {\n      this.router.go('login');\n      this.globalMessageService.add(\n        { key: 'register.postRegisterMessage' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n  }\n\n  toggleAnonymousConsent(): void {\n    const { registerConsent } = this.anonymousConsentsConfig.anonymousConsents;\n\n    if (Boolean(this.registerForm.get('newsletter').value)) {\n      this.anonymousConsentsService.giveConsent(registerConsent);\n    } else {\n      this.anonymousConsentsService.withdrawConsent(registerConsent);\n    }\n  }\n\n  private registerUserProcessInit(): void {\n    this.userService.resetRegisterUserProcessState();\n    this.subscription.add(\n      this.userService.getRegisterUserResultSuccess().subscribe((success) => {\n        this.onRegisterUserSuccess(success);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n    this.userService.resetRegisterUserProcessState();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { SpinnerModule, FormErrorsModule } from '../../../shared/index';\nimport { LoginModule } from '../login/login.module';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n  exports: [RegisterComponent],\n  entryComponents: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { UrlModule } from '@spartacus/core';\nimport { CheckoutLoginModule } from './checkout-login/checkout-login.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginModule } from './login/login.module';\nimport { LogoutModule } from './logout/logout.module';\nimport { RegisterComponentModule } from './register/register.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LoginModule,\n    LoginFormModule,\n    LogoutModule,\n    CheckoutLoginModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    RegisterComponentModule,\n  ],\n})\nexport class UserComponentModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { OrderEntry } from '@spartacus/core';\n\n@Component({\n  selector: 'cx-wish-list-item',\n  templateUrl: './wish-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WishListItemComponent {\n  @Input()\n  isLoading = false;\n  @Input() cartEntry: OrderEntry;\n\n  @Output()\n  remove = new EventEmitter<OrderEntry>();\n\n  removeEntry(item: OrderEntry) {\n    this.remove.emit(item);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Cart, OrderEntry, WishListService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-wish-list',\n  templateUrl: './wish-list.component.html',\n})\nexport class WishListComponent {\n  wishList$: Observable<Cart> = this.wishListService.getWishList();\n  loading$: Observable<boolean> = this.wishListService.getWishListLoading();\n\n  constructor(protected wishListService: WishListService) {}\n\n  removeEntry(item: OrderEntry) {\n    this.wishListService.removeEntry(item);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  ItemCounterModule,\n  MediaModule,\n  StarRatingModule,\n} from '../../shared/index';\nimport { AddToCartModule } from '../cart/index';\nimport { WishListItemComponent } from './components/wish-list-item/wish-list-item.component';\nimport { WishListComponent } from './components/wish-list/wish-list.component';\n\n@NgModule({\n  imports: [\n    AddToCartModule,\n    CommonModule,\n    I18nModule,\n    MediaModule,\n    RouterModule,\n    StarRatingModule,\n    UrlModule,\n    ItemCounterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        WishListComponent: {\n          component: WishListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [WishListComponent, WishListItemComponent],\n  entryComponents: [WishListComponent],\n  exports: [WishListComponent, WishListItemComponent],\n})\nexport class WishListModule {}\n","import { NgModule } from '@angular/core';\nimport { HamburgerMenuModule } from '../layout/index';\nimport { AnonymousConsentManagementBannerModule } from './anonymous-consent-management/anonymous-consent-management.module';\nimport { AsmModule } from './asm/asm.module';\nimport { CartComponentModule } from './cart/cart.module';\nimport { CheckoutComponentModule } from './checkout/checkout.module';\nimport { BannerCarouselModule } from './content/banner-carousel/banner-carousel.module';\nimport {\n  BannerModule,\n  CmsParagraphModule,\n  LinkModule,\n  TabParagraphContainerModule,\n} from './content/index';\nimport { QualtricsModule, SiteContextSelectorModule } from './misc/index';\nimport {\n  AddressBookModule,\n  CloseAccountModule,\n  ConsentManagementModule,\n  ForgotPasswordModule,\n  MyCouponsModule,\n  MyInterestsModule,\n  NotificationPreferenceModule,\n  OrderCancellationModule,\n  OrderDetailsModule,\n  OrderHistoryModule,\n  OrderReturnModule,\n  PaymentMethodsModule,\n  ResetPasswordModule,\n  ReturnRequestDetailModule,\n  ReturnRequestListModule,\n  UpdateEmailModule,\n  UpdatePasswordModule,\n  UpdateProfileModule,\n} from './myaccount/index';\nimport {\n  BreadcrumbModule,\n  CategoryNavigationModule,\n  FooterNavigationModule,\n  NavigationModule,\n  SearchBoxModule,\n} from './navigation/index';\nimport { OrderConfirmationModule } from './order-confirmation/index';\nimport {\n  ProductCarouselModule,\n  ProductFacetNavigationModule,\n  ProductIntroModule,\n  ProductListModule,\n  ProductReferencesModule,\n  ProductTabsModule,\n  StockNotificationModule,\n} from './product/index';\nimport { ProductImagesModule } from './product/product-images/product-images.module';\nimport { ProductSummaryModule } from './product/product-summary/product-summary.module';\nimport { ProductVariantsModule } from './product/product-variants/product-variants.module';\nimport { StoreFinderModule } from './storefinder/store-finder.module';\nimport { UserComponentModule } from './user/user.module';\nimport { WishListModule } from './wish-list/wish-list.module';\n\n@NgModule({\n  imports: [\n    AnonymousConsentManagementBannerModule,\n    AsmModule,\n    HamburgerMenuModule,\n    CmsParagraphModule,\n    LinkModule,\n    BannerModule,\n    CategoryNavigationModule,\n    NavigationModule,\n    FooterNavigationModule,\n    BreadcrumbModule,\n    SearchBoxModule,\n    SiteContextSelectorModule,\n    QualtricsModule,\n    AddressBookModule,\n    OrderHistoryModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n    ProductListModule,\n    ProductFacetNavigationModule,\n    ProductTabsModule,\n    ProductCarouselModule,\n    ProductReferencesModule,\n    OrderDetailsModule,\n    PaymentMethodsModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    UpdateProfileModule,\n    ConsentManagementModule,\n    CloseAccountModule,\n    CartComponentModule,\n    TabParagraphContainerModule,\n    OrderConfirmationModule,\n    StoreFinderModule,\n    ProductImagesModule,\n    ProductSummaryModule,\n    ProductVariantsModule,\n    ProductIntroModule,\n    CheckoutComponentModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    BannerCarouselModule,\n    UserComponentModule,\n    MyCouponsModule,\n    WishListModule,\n    NotificationPreferenceModule,\n    MyInterestsModule,\n    StockNotificationModule,\n  ],\n})\nexport class CmsLibModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductDetailsUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPDPMatcher = getSuffixUrlMatcher({\n      marker: 'p',\n      paramName: 'productCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPDPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PDP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / p / :productCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_DETAILS_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductDetailsUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard } from '../../cms-structure/guards/cms-page.guard';\nimport { PageLayoutComponent } from '../../cms-structure/page/page-layout/page-layout.component';\nimport { PRODUCT_DETAILS_URL_MATCHER } from './product-details-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'product' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          product: {\n            matchers: [PRODUCT_DETAILS_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductDetailsPageModule {}\n","import { inject, InjectionToken } from '@angular/core';\nimport { Route } from '@angular/router';\nimport {\n  DEFAULT_URL_MATCHER,\n  UrlMatcherFactory,\n  UrlMatcherService,\n} from '@spartacus/core';\nimport { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';\n\nexport function getProductListingUrlMatcherFactory(\n  service: UrlMatcherService,\n  defaultMatcherFactory: UrlMatcherFactory\n): UrlMatcherFactory {\n  const factory = (route: Route) => {\n    const defaultMatcher = defaultMatcherFactory(route);\n    const suffixPLPMatcher = getSuffixUrlMatcher({\n      marker: 'c',\n      paramName: 'categoryCode',\n    });\n    return service.getCombined([defaultMatcher, suffixPLPMatcher]);\n  };\n  return factory;\n}\n\n/**\n * Injection token with url matcher factory for PLP.\n * The provided url matcher matches both:\n * - the configured `paths` from routing config and\n * - custom pattern  `** / c / :categoryCode`\n *\n * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER\n * or additional matchers can be added for a specific route.\n *\n * Note: Matchers will \"match\" a route, but do not contribute to the creation of the route, nor do they guard routes.\n */\nexport const PRODUCT_LISTING_URL_MATCHER = new InjectionToken<\n  UrlMatcherFactory\n>('PRODUCT_LISTING_URL_MATCHER', {\n  providedIn: 'root',\n  factory: () =>\n    getProductListingUrlMatcherFactory(\n      inject(UrlMatcherService),\n      inject(DEFAULT_URL_MATCHER)\n    ),\n});\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { provideDefaultConfig, RoutingConfig } from '@spartacus/core';\nimport { CmsPageGuard, PageLayoutComponent } from '../../cms-structure/index';\nimport { PRODUCT_LISTING_URL_MATCHER } from './product-listing-url-matcher';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { pageLabel: 'search', cxRoute: 'search' },\n      },\n      {\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'brand' },\n      },\n      {\n        // The 'category' route  may include a greedy suffix url matcher '**/c/:categoryCode'\n        // So not to shadow the specific 'brand' route, the 'category' is the last route in the sequence.\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: { cxRoute: 'category' },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfig(<RoutingConfig>{\n      routing: {\n        routes: {\n          category: {\n            matchers: [PRODUCT_LISTING_URL_MATCHER],\n          },\n        },\n      },\n    }),\n  ],\n})\nexport class ProductListingPageModule {}\n","import { Params } from '@angular/router';\nimport { PageContext } from '@spartacus/core';\n\n/**\n * Indicates that a user visited an arbitrary page.\n */\nexport class PageEvent {\n  context: PageContext;\n  semanticRoute?: string;\n  url: string;\n  params: Params;\n}\n\n/**\n * Indicates that a user visited the home page.\n */\nexport class HomePageEvent extends PageEvent {}\n","import { PageEvent } from '../page/page.events';\n\n/**\n * Indicates that a user visited a cart page.\n */\nexport class CartPageEvent extends PageEvent {}\n","import { Injectable } from '@angular/core';\nimport { ActionsSubject } from '@ngrx/store';\nimport { createFrom, EventService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { PageEvent } from '../page/page.events';\nimport { CartPageEvent } from './cart-page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartPageEventBuilder {\n  constructor(\n    protected actions: ActionsSubject,\n    protected eventService: EventService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(CartPageEvent, this.buildCartPageEvent());\n  }\n\n  protected buildCartPageEvent(): Observable<CartPageEvent> {\n    return this.eventService.get(PageEvent).pipe(\n      filter((pageEvent) => pageEvent.semanticRoute === 'cart'),\n      map((pageEvent) => createFrom(CartPageEvent, pageEvent))\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CartPageEventBuilder } from './cart-page-event.builder';\n\n@NgModule({})\nexport class CartPageEventModule {\n  constructor(_cartPageEventBuilder: CartPageEventBuilder) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { RouterNavigatedAction, ROUTER_NAVIGATED } from '@ngrx/router-store';\nimport { ActionsSubject } from '@ngrx/store';\nimport {\n  ActivatedRouterStateSnapshot,\n  createFrom,\n  EventService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { HomePageEvent, PageEvent } from './page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageEventBuilder {\n  constructor(\n    protected actions: ActionsSubject,\n    protected eventService: EventService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(PageEvent, this.buildPageEvent());\n    this.eventService.register(HomePageEvent, this.buildHomePageEvent());\n  }\n\n  protected buildPageEvent(): Observable<PageEvent> {\n    return this.getNavigatedEvent().pipe(\n      map((state) =>\n        createFrom(PageEvent, {\n          context: state.context,\n          semanticRoute: state.semanticRoute,\n          url: state.url,\n          params: state.params,\n        })\n      )\n    );\n  }\n\n  protected buildHomePageEvent(): Observable<HomePageEvent> {\n    return this.buildPageEvent().pipe(\n      filter((pageEvent) => pageEvent.semanticRoute === 'home'),\n      map((pageEvent) => createFrom(HomePageEvent, pageEvent))\n    );\n  }\n\n  private getNavigatedEvent(): Observable<ActivatedRouterStateSnapshot> {\n    return this.actions.pipe(\n      ofType<RouterNavigatedAction<ActivatedRouterStateSnapshot>>(\n        ROUTER_NAVIGATED\n      ),\n      map((event) => event.payload.routerState)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { PageEventBuilder } from './page-event.builder';\n\n@NgModule({})\nexport class PageEventModule {\n  constructor(_pageEventBuilder: PageEventBuilder) {}\n}\n","import { Category, Price } from '@spartacus/core';\nimport { PageEvent } from '../page/page.events';\n\n/**\n * Indicates that a user visited a product details page.\n */\nexport class ProductDetailsPageEvent extends PageEvent {\n  categories?: Category[];\n  code?: string;\n  name?: string;\n  price?: Price;\n}\n\n/**\n * Indicates that a user visited a category page.\n */\nexport class CategoryPageResultsEvent extends PageEvent {\n  categoryCode: string;\n  categoryName?: string;\n  numberOfResults: Number;\n}\n\n/**\n * Indicates that the a user visited the search results page,\n * and that the search results have been retrieved.\n */\nexport class SearchPageResultsEvent extends PageEvent {\n  searchTerm: string;\n  numberOfResults: Number;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  createFrom,\n  EventService,\n  ProductSearchService,\n  ProductService,\n} from '@spartacus/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { filter, map, skip, switchMap, take } from 'rxjs/operators';\nimport { PageEvent } from '../page/page.events';\nimport {\n  CategoryPageResultsEvent,\n  ProductDetailsPageEvent,\n  SearchPageResultsEvent,\n} from './product-page.events';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductPageEventBuilder {\n  constructor(\n    protected eventService: EventService,\n    protected productService: ProductService,\n    protected productSearchService: ProductSearchService\n  ) {\n    this.register();\n  }\n\n  protected register(): void {\n    this.eventService.register(\n      SearchPageResultsEvent,\n      this.buildSearchPageResultsEvent()\n    );\n    this.eventService.register(\n      ProductDetailsPageEvent,\n      this.buildProductDetailsPageEvent()\n    );\n    this.eventService.register(\n      CategoryPageResultsEvent,\n      this.buildCategoryResultsPageEvent()\n    );\n  }\n\n  protected buildProductDetailsPageEvent(): Observable<\n    ProductDetailsPageEvent\n  > {\n    return this.eventService.get(PageEvent).pipe(\n      filter((pageEvent) => pageEvent.semanticRoute === 'product'),\n      switchMap((pageEvent) =>\n        this.productService.get(pageEvent.context.id).pipe(\n          filter((product) => Boolean(product)),\n          take(1),\n          map((product) =>\n            createFrom(ProductDetailsPageEvent, {\n              ...pageEvent,\n              categories: product.categories,\n              code: product.code,\n              name: product.name,\n              price: product.price,\n            })\n          )\n        )\n      )\n    );\n  }\n\n  protected buildCategoryResultsPageEvent(): Observable<\n    CategoryPageResultsEvent\n  > {\n    const searchResults$ = this.productSearchService.getResults().pipe(\n      // skipping the initial value, and preventing emission of the previous search state\n      skip(1)\n    );\n\n    return this.eventService.get(PageEvent).pipe(\n      switchMap((pageEvent) => {\n        if (pageEvent?.semanticRoute !== 'category') {\n          return EMPTY;\n        }\n\n        return searchResults$.pipe(\n          map((searchResults) => ({\n            ...pageEvent,\n            ...{\n              categoryCode: pageEvent?.context?.id,\n              numberOfResults: searchResults?.pagination?.totalResults,\n              categoryName: searchResults.breadcrumbs?.[0].facetValueName,\n            },\n          })),\n          map((categoryPage) =>\n            createFrom(CategoryPageResultsEvent, categoryPage)\n          )\n        );\n      })\n    );\n  }\n\n  protected buildSearchPageResultsEvent(): Observable<SearchPageResultsEvent> {\n    const searchResults$ = this.productSearchService.getResults().pipe(\n      // skipping the initial value, and preventing emission of the previous search state\n      skip(1)\n    );\n\n    return this.eventService.get(PageEvent).pipe(\n      switchMap((pageEvent) => {\n        if (pageEvent?.semanticRoute !== 'search') {\n          return EMPTY;\n        }\n\n        return searchResults$.pipe(\n          map((searchResults) => ({\n            ...pageEvent,\n            ...{\n              searchTerm: searchResults?.freeTextSearch,\n              numberOfResults: searchResults?.pagination?.totalResults,\n            },\n          })),\n          map((searchPage) => createFrom(SearchPageResultsEvent, searchPage))\n        );\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ProductPageEventBuilder } from './product-page-event.builder';\n\n@NgModule({})\nexport class ProductPageEventModule {\n  constructor(_productPageEventBuilder: ProductPageEventBuilder) {}\n}\n","import { LayoutConfig } from '../../layout/config/layout-config';\n\nexport const b2cLayoutConfig: LayoutConfig = {\n  // deferredLoading: {\n  //   strategy: DeferLoadingStrategy.DEFER,\n  //   intersectionMargin: '50px',\n  // },\n  layoutSlots: {\n    header: {\n      lg: {\n        slots: [\n          'SiteContext',\n          'SiteLinks',\n          'SiteLogo',\n          'SearchBox',\n          'SiteLogin',\n          'MiniCart',\n          'NavigationBar',\n        ],\n      },\n      slots: ['PreHeader', 'SiteLogo', 'SearchBox', 'MiniCart'],\n    },\n    navigation: {\n      lg: { slots: [] },\n      slots: ['SiteLogin', 'NavigationBar', 'SiteContext', 'SiteLinks'],\n    },\n    footer: {\n      slots: ['Footer'],\n    },\n    LandingPage2Template: {\n      pageFold: 'Section2B',\n      slots: [\n        'Section1',\n        'Section2A',\n        'Section2B',\n        'Section2C',\n        'Section3',\n        'Section4',\n        'Section5',\n      ],\n    },\n\n    ContentPage1Template: {\n      slots: ['Section2A', 'Section2B'],\n    },\n    CategoryPageTemplate: {\n      pageFold: 'Section2',\n      slots: ['Section1', 'Section2', 'Section3'],\n    },\n    ProductListPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductListSlot'],\n    },\n    ProductGridPageTemplate: {\n      slots: ['ProductLeftRefinements', 'ProductGridSlot'],\n    },\n    SearchResultsListPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsListSlot',\n        'Section4',\n      ],\n    },\n    SearchResultsGridPageTemplate: {\n      slots: [\n        'Section2',\n        'ProductLeftRefinements',\n        'SearchResultsGridSlot',\n        'Section4',\n      ],\n    },\n    ProductDetailsPageTemplate: {\n      lg: {\n        pageFold: 'UpSelling',\n      },\n\n      pageFold: 'Summary',\n\n      slots: [\n        'Summary',\n        'UpSelling',\n        'CrossSelling',\n        'Tabs',\n        'PlaceholderContentSlot',\n      ],\n    },\n    CartPageTemplate: {\n      slots: ['TopContent', 'CenterRightContentSlot', 'EmptyCartMiddleContent'],\n    },\n    AccountPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    LoginPageTemplate: {\n      slots: ['LeftContentSlot', 'RightContentSlot'],\n    },\n    ErrorPageTemplate: {\n      slots: ['TopContent', 'MiddleContent', 'BottomContent'],\n    },\n    OrderConfirmationPageTemplate: {\n      slots: ['BodyContent', 'SideContent'],\n    },\n    MultiStepCheckoutSummaryPageTemplate: {\n      slots: ['TopContent', 'BodyContent', 'SideContent', 'BottomContent'],\n    },\n    CheckoutLoginPageTemplate: {\n      slots: ['RightContentSlot'],\n    },\n  },\n};\n","import { MediaConfig } from '../../shared/components/media/media.config';\n\nexport const mediaConfig: MediaConfig = {\n  mediaFormats: {\n    mobile: {\n      width: 400,\n    },\n    tablet: {\n      width: 770,\n    },\n    desktop: {\n      width: 1140,\n    },\n    widescreen: {\n      width: 1400,\n    },\n    // product media\n    cartIcon: {\n      width: 65,\n    },\n    thumbnail: {\n      width: 96,\n    },\n    product: {\n      width: 284,\n    },\n    zoom: {\n      width: 515,\n    },\n  },\n};\n","import { CmsPageSlotsConfig, ContentSlotComponentData } from '@spartacus/core';\n\nexport const headerComponents: {\n  [key: string]: ContentSlotComponentData | any;\n} = {\n  HamburgerMenuComponent: {\n    typeCode: 'HamburgerMenuComponent',\n    flexType: 'HamburgerMenuComponent',\n  },\n  LoginComponent: {\n    typeCode: 'LoginComponent',\n    flexType: 'LoginComponent',\n    uid: 'LoginComponent',\n  },\n};\n\nexport const defaultPageHeaderConfig: CmsPageSlotsConfig = {\n  PreHeader: {\n    componentIds: ['HamburgerMenuComponent'],\n  },\n  SiteLogin: {\n    componentIds: ['LoginComponent'],\n  },\n};\n","import { CmsStructureConfig } from '@spartacus/core';\nimport {\n  defaultPageHeaderConfig,\n  headerComponents,\n} from './default-header.config';\n\nexport function defaultCmsContentConfig(): CmsStructureConfig {\n  return {\n    cmsStructure: {\n      components: {\n        ...headerComponents,\n      },\n      slots: {\n        ...defaultPageHeaderConfig,\n      },\n      pages: [],\n    },\n  };\n}\n","import { NgModule } from '@angular/core';\nimport { CartPageEventModule } from './cart/cart-page-event.module';\nimport { PageEventModule } from './page/page-event.module';\nimport { ProductPageEventModule } from './product/product-page-event.module';\n\n@NgModule({\n  imports: [CartPageEventModule, PageEventModule, ProductPageEventModule],\n})\nexport class EventsModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  AnonymousConsentsModule,\n  AuthModule,\n  CartModule,\n  CheckoutModule,\n  CmsModule,\n  ConfigInitializerModule,\n  ConfigModule,\n  ConfigValidatorModule,\n  FeaturesConfigModule,\n  GlobalMessageModule,\n  I18nModule,\n  ProcessModule,\n  ProductModule,\n  provideConfigFromMetaTags,\n  StateModule,\n  UserModule,\n} from '@spartacus/core';\nimport { RoutingModule } from '../cms-structure/routing/routing.module';\nimport { EventsModule } from '../events/events.module';\nimport { LayoutModule } from '../layout/layout.module';\nimport { MediaModule } from '../shared/components/media/media.module';\nimport { ViewConfigModule } from '../shared/config/view-config.module';\n\n@NgModule({\n  imports: [\n    StateModule.forRoot(),\n    AuthModule.forRoot(),\n    AnonymousConsentsModule.forRoot(),\n    ConfigModule.forRoot(),\n    ConfigInitializerModule.forRoot(),\n    ConfigValidatorModule.forRoot(),\n    RoutingModule.forRoot(),\n    I18nModule.forRoot(),\n    CmsModule.forRoot(),\n    GlobalMessageModule.forRoot(),\n    ProcessModule.forRoot(),\n    CartModule.forRoot(),\n    CheckoutModule.forRoot(),\n    UserModule.forRoot(),\n    ProductModule.forRoot(),\n    ViewConfigModule.forRoot(),\n    FeaturesConfigModule.forRoot('2.0'),\n    LayoutModule,\n    MediaModule.forRoot(),\n    EventsModule,\n  ],\n  exports: [LayoutModule],\n  providers: [...provideConfigFromMetaTags()],\n})\nexport class StorefrontFoundationModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  ExternalRoutesModule,\n  OccModule,\n  PersonalizationModule,\n  provideConfig,\n  SiteContextModule,\n  SmartEditModule,\n} from '@spartacus/core';\nimport { AsmModule } from '../cms-components/asm/asm.module';\nimport { ProductDetailsPageModule } from '../cms-pages/product-details-page/product-details-page.module';\nimport { ProductListingPageModule } from '../cms-pages/product-listing-page/product-listing-page.module';\nimport { MainModule } from '../layout/main/main.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { StorefrontFoundationModule } from './storefront-foundation.module';\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot([], {\n      scrollPositionRestoration: 'enabled',\n      anchorScrolling: 'enabled',\n    }),\n\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n\n    // ASM module must be imported before the `AuthModule (which is imported in `StorefrontFoundationModule`)\n    // since we might have conflicting interceptor logic. See #5461.\n    AsmModule,\n\n    StorefrontFoundationModule,\n    MainModule,\n    SiteContextModule.forRoot(), // should be imported after RouterModule.forRoot, because it overwrites UrlSerializer\n\n    SmartEditModule.forRoot(), // should be custom\n    PersonalizationModule.forRoot(), // should be custom\n\n    // opt-in explicitly\n    OccModule.forRoot(),\n    ProductDetailsPageModule,\n    ProductListingPageModule,\n    ExternalRoutesModule.forRoot(),\n  ],\n  exports: [MainModule, StorefrontFoundationModule],\n})\nexport class StorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<StorefrontModule> {\n    return {\n      ngModule: StorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport {\n  provideConfig,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { CmsLibModule } from '../cms-components/cms-lib.module';\nimport { StorefrontConfig } from '../storefront-config';\nimport { b2cLayoutConfig, mediaConfig } from './config/index';\nimport { defaultCmsContentConfig } from './config/static-cms-structure/default-cms-content.config';\nimport { StorefrontModule } from './storefront.module';\n\n@NgModule({\n  imports: [\n    StorefrontModule,\n\n    // the cms lib module contains all components that added in the bundle\n    CmsLibModule,\n  ],\n  providers: [\n    provideDefaultConfig({\n      pwa: {\n        enabled: true,\n        addToHomeScreen: true,\n      },\n    }),\n    provideDefaultConfig(b2cLayoutConfig),\n    provideDefaultConfig(mediaConfig),\n    provideDefaultConfigFactory(defaultCmsContentConfig),\n  ],\n  exports: [StorefrontModule],\n})\nexport class B2cStorefrontModule {\n  static withConfig(\n    config?: StorefrontConfig\n  ): ModuleWithProviders<B2cStorefrontModule> {\n    return {\n      ngModule: B2cStorefrontModule,\n      providers: [provideConfig(config)],\n    };\n  }\n}\n"]}